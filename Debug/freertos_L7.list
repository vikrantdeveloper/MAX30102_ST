
freertos_L7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb64  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800bd48  0800bd48  0000cd48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1c8  0800c1c8  0000e1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1c8  0800c1c8  0000d1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1d0  0800c1d0  0000e1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1d0  0800c1d0  0000d1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1d4  0800c1d4  0000d1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800c1d8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045bc  200001e4  0800c3bc  0000e1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200047a0  0800c3bc  0000e7a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f24a  00000000  00000000  0000e214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000462d  00000000  00000000  0002d45e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  00031a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000138d  00000000  00000000  000333d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002777a  00000000  00000000  0003475d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f788  00000000  00000000  0005bed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb610  00000000  00000000  0007b65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166c6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c30  00000000  00000000  00166cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  0016e8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bd2c 	.word	0x0800bd2c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800bd2c 	.word	0x0800bd2c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	4a06      	ldr	r2, [pc, #24]	@ (8000fb8 <vApplicationGetIdleTaskMemory+0x30>)
 8000f9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2280      	movs	r2, #128	@ 0x80
 8000fa4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000200 	.word	0x20000200
 8000fb8:	200002a0 	.word	0x200002a0

08000fbc <HAL_GPIO_EXTI_Callback>:
float beatAvg = 0;
bool readtemperature = false;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d102      	bne.n	8000fd2 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	readtemperature = true;
 8000fcc:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <HAL_GPIO_EXTI_Callback+0x24>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]

    }
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	2000082c 	.word	0x2000082c

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b090      	sub	sp, #64	@ 0x40
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fea:	f000 fd68 	bl	8001abe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fee:	f000 f8c3 	bl	8001178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8000ff2:	f000 f92f 	bl	8001254 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
   erlog_init(&log_console, &huart3);
 8000ff6:	4953      	ldr	r1, [pc, #332]	@ (8001144 <main+0x160>)
 8000ff8:	4853      	ldr	r0, [pc, #332]	@ (8001148 <main+0x164>)
 8000ffa:	f004 ff8f 	bl	8005f1c <erlog_init>
   max30102_init(&max30102 , &hi2c2);
 8000ffe:	4953      	ldr	r1, [pc, #332]	@ (800114c <main+0x168>)
 8001000:	4853      	ldr	r0, [pc, #332]	@ (8001150 <main+0x16c>)
 8001002:	f005 fa97 	bl	8006534 <max30102_init>

   read_register(&max30102, MAX30102_REVISIONID , &max30102.revision_id);
 8001006:	4a53      	ldr	r2, [pc, #332]	@ (8001154 <main+0x170>)
 8001008:	21fe      	movs	r1, #254	@ 0xfe
 800100a:	4851      	ldr	r0, [pc, #324]	@ (8001150 <main+0x16c>)
 800100c:	f005 fab5 	bl	800657a <read_register>
   read_register(&max30102, MAX30102_PARTID , &max30102.part_id);
 8001010:	4a51      	ldr	r2, [pc, #324]	@ (8001158 <main+0x174>)
 8001012:	21ff      	movs	r1, #255	@ 0xff
 8001014:	484e      	ldr	r0, [pc, #312]	@ (8001150 <main+0x16c>)
 8001016:	f005 fab0 	bl	800657a <read_register>
   log_console.msg_len = sprintf((char *)log_console.msg,"MAX30102 Revision_id: %x, Part_id: %x\r\n", max30102.revision_id, max30102.part_id);
 800101a:	4b4d      	ldr	r3, [pc, #308]	@ (8001150 <main+0x16c>)
 800101c:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8001020:	461a      	mov	r2, r3
 8001022:	4b4b      	ldr	r3, [pc, #300]	@ (8001150 <main+0x16c>)
 8001024:	f893 3187 	ldrb.w	r3, [r3, #391]	@ 0x187
 8001028:	494c      	ldr	r1, [pc, #304]	@ (800115c <main+0x178>)
 800102a:	484d      	ldr	r0, [pc, #308]	@ (8001160 <main+0x17c>)
 800102c:	f008 fab0 	bl	8009590 <siprintf>
 8001030:	4603      	mov	r3, r0
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b44      	ldr	r3, [pc, #272]	@ (8001148 <main+0x164>)
 8001036:	809a      	strh	r2, [r3, #4]
   erlog_write(&log_console);
 8001038:	4843      	ldr	r0, [pc, #268]	@ (8001148 <main+0x164>)
 800103a:	f004 ff8a 	bl	8005f52 <erlog_write>
   erlog_clear(&log_console);
 800103e:	4842      	ldr	r0, [pc, #264]	@ (8001148 <main+0x164>)
 8001040:	f004 ff99 	bl	8005f76 <erlog_clear>


   max30102_clear_fifo(&max30102);
 8001044:	4842      	ldr	r0, [pc, #264]	@ (8001150 <main+0x16c>)
 8001046:	f005 fb19 	bl	800667c <max30102_clear_fifo>
   max30102_softReset(&max30102);
 800104a:	4841      	ldr	r0, [pc, #260]	@ (8001150 <main+0x16c>)
 800104c:	f005 fc56 	bl	80068fc <max30102_softReset>
   max30102_set_fifoaverage(&max30102 , max30102_smp_ave_4);
 8001050:	2140      	movs	r1, #64	@ 0x40
 8001052:	483f      	ldr	r0, [pc, #252]	@ (8001150 <main+0x16c>)
 8001054:	f005 fb29 	bl	80066aa <max30102_set_fifoaverage>
   max30102_enableFIFORollover(&max30102);
 8001058:	483d      	ldr	r0, [pc, #244]	@ (8001150 <main+0x16c>)
 800105a:	f005 fbd3 	bl	8006804 <max30102_enableFIFORollover>

   max30102_setpulsewidth(&max30102 , max30102_pw_18_bit);
 800105e:	2103      	movs	r1, #3
 8001060:	483b      	ldr	r0, [pc, #236]	@ (8001150 <main+0x16c>)
 8001062:	f005 fbbf 	bl	80067e4 <max30102_setpulsewidth>
   max30102_setadcrange(&max30102, max30102_adc_4096);
 8001066:	2120      	movs	r1, #32
 8001068:	4839      	ldr	r0, [pc, #228]	@ (8001150 <main+0x16c>)
 800106a:	f005 fb9b 	bl	80067a4 <max30102_setadcrange>
   max30102_setsamplerate(&max30102, max30102_sr_400);
 800106e:	210c      	movs	r1, #12
 8001070:	4837      	ldr	r0, [pc, #220]	@ (8001150 <main+0x16c>)
 8001072:	f005 fba7 	bl	80067c4 <max30102_setsamplerate>
   max30102_setledmode(&max30102 , max30102_led_irg);
 8001076:	2103      	movs	r1, #3
 8001078:	4835      	ldr	r0, [pc, #212]	@ (8001150 <main+0x16c>)
 800107a:	f005 fb83 	bl	8006784 <max30102_setledmode>
   max30102_set_pulseamplitude(&max30102, 0x1F, RED_COLOUR);   // configure heartbeat sensor colours
 800107e:	2201      	movs	r2, #1
 8001080:	211f      	movs	r1, #31
 8001082:	4833      	ldr	r0, [pc, #204]	@ (8001150 <main+0x16c>)
 8001084:	f005 fc0a 	bl	800689c <max30102_set_pulseamplitude>
   max30102_set_pulseamplitude(&max30102, 0x1F, GREEN_COLOUR);
 8001088:	2202      	movs	r2, #2
 800108a:	211f      	movs	r1, #31
 800108c:	4830      	ldr	r0, [pc, #192]	@ (8001150 <main+0x16c>)
 800108e:	f005 fc05 	bl	800689c <max30102_set_pulseamplitude>
   max30102_set_pulseamplitude(&max30102, 0x1F, IR);
 8001092:	2203      	movs	r2, #3
 8001094:	211f      	movs	r1, #31
 8001096:	482e      	ldr	r0, [pc, #184]	@ (8001150 <main+0x16c>)
 8001098:	f005 fc00 	bl	800689c <max30102_set_pulseamplitude>
   max30102_set_pulseamplitude(&max30102, 0x1F, PROXIMITY);
 800109c:	2204      	movs	r2, #4
 800109e:	211f      	movs	r1, #31
 80010a0:	482b      	ldr	r0, [pc, #172]	@ (8001150 <main+0x16c>)
 80010a2:	f005 fbfb 	bl	800689c <max30102_set_pulseamplitude>

   max30102_enableSlot(&max30102 , 3, SLOT_GREEN_LED);
 80010a6:	2303      	movs	r3, #3
 80010a8:	461a      	mov	r2, r3
 80010aa:	2103      	movs	r1, #3
 80010ac:	4828      	ldr	r0, [pc, #160]	@ (8001150 <main+0x16c>)
 80010ae:	f005 fbb7 	bl	8006820 <max30102_enableSlot>
   max30102_set_pulseamplitude(&max30102, 0x0A, RED_COLOUR);   // configure heartbeat sensor colours
 80010b2:	2201      	movs	r2, #1
 80010b4:	210a      	movs	r1, #10
 80010b6:	4826      	ldr	r0, [pc, #152]	@ (8001150 <main+0x16c>)
 80010b8:	f005 fbf0 	bl	800689c <max30102_set_pulseamplitude>
   max30102_set_pulseamplitude(&max30102, 0x00, GREEN_COLOUR);
 80010bc:	2202      	movs	r2, #2
 80010be:	2100      	movs	r1, #0
 80010c0:	4823      	ldr	r0, [pc, #140]	@ (8001150 <main+0x16c>)
 80010c2:	f005 fbeb 	bl	800689c <max30102_set_pulseamplitude>
   EXTI_Init(&max30102);
 80010c6:	4822      	ldr	r0, [pc, #136]	@ (8001150 <main+0x16c>)
 80010c8:	f005 fd4b 	bl	8006b62 <EXTI_Init>
   max30102_enableDIETEMPRDY(&max30102);
 80010cc:	4820      	ldr	r0, [pc, #128]	@ (8001150 <main+0x16c>)
 80010ce:	f005 fac7 	bl	8006660 <max30102_enableDIETEMPRDY>
   HAL_Delay(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f000 fd20 	bl	8001b18 <HAL_Delay>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of logger */
  osSemaphoreDef(logger);
 80010d8:	2300      	movs	r3, #0
 80010da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80010dc:	2300      	movs	r3, #0
 80010de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  loggerHandle = osSemaphoreCreate(osSemaphore(logger), 1);
 80010e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010e4:	2101      	movs	r1, #1
 80010e6:	4618      	mov	r0, r3
 80010e8:	f005 ff35 	bl	8006f56 <osSemaphoreCreate>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001164 <main+0x180>)
 80010f0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of logdata */
  osThreadDef(logdata, log_data, osPriorityNormal, 0, 512);
 80010f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001168 <main+0x184>)
 80010f4:	f107 041c 	add.w	r4, r7, #28
 80010f8:	461d      	mov	r5, r3
 80010fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001102:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  logdataHandle = osThreadCreate(osThread(logdata), NULL);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f005 fec2 	bl	8006e96 <osThreadCreate>
 8001112:	4603      	mov	r3, r0
 8001114:	4a15      	ldr	r2, [pc, #84]	@ (800116c <main+0x188>)
 8001116:	6013      	str	r3, [r2, #0]

  /* definition and creation of max30102_acq */
  osThreadDef(max30102_acq, max30102_acqure, osPriorityIdle, 0, 512);
 8001118:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <main+0x18c>)
 800111a:	463c      	mov	r4, r7
 800111c:	461d      	mov	r5, r3
 800111e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001122:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001126:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  max30102_acqHandle = osThreadCreate(osThread(max30102_acq), NULL);
 800112a:	463b      	mov	r3, r7
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f005 feb1 	bl	8006e96 <osThreadCreate>
 8001134:	4603      	mov	r3, r0
 8001136:	4a0f      	ldr	r2, [pc, #60]	@ (8001174 <main+0x190>)
 8001138:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800113a:	f005 fea5 	bl	8006e88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800113e:	bf00      	nop
 8001140:	e7fd      	b.n	800113e <main+0x15a>
 8001142:	bf00      	nop
 8001144:	200004f4 	.word	0x200004f4
 8001148:	20000588 	.word	0x20000588
 800114c:	200004a0 	.word	0x200004a0
 8001150:	20000690 	.word	0x20000690
 8001154:	20000818 	.word	0x20000818
 8001158:	20000817 	.word	0x20000817
 800115c:	0800bd48 	.word	0x0800bd48
 8001160:	2000058e 	.word	0x2000058e
 8001164:	20000584 	.word	0x20000584
 8001168:	0800bd78 	.word	0x0800bd78
 800116c:	2000057c 	.word	0x2000057c
 8001170:	0800bda4 	.word	0x0800bda4
 8001174:	20000580 	.word	0x20000580

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b094      	sub	sp, #80	@ 0x50
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0320 	add.w	r3, r7, #32
 8001182:	2230      	movs	r2, #48	@ 0x30
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f008 fae4 	bl	8009754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800119c:	f002 fe56 	bl	8003e4c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a0:	4b2a      	ldr	r3, [pc, #168]	@ (800124c <SystemClock_Config+0xd4>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a4:	4a29      	ldr	r2, [pc, #164]	@ (800124c <SystemClock_Config+0xd4>)
 80011a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ac:	4b27      	ldr	r3, [pc, #156]	@ (800124c <SystemClock_Config+0xd4>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011b8:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <SystemClock_Config+0xd8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011c0:	4a23      	ldr	r2, [pc, #140]	@ (8001250 <SystemClock_Config+0xd8>)
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <SystemClock_Config+0xd8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80011d4:	2303      	movs	r3, #3
 80011d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011de:	2301      	movs	r3, #1
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e2:	2310      	movs	r3, #16
 80011e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e6:	2302      	movs	r3, #2
 80011e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011f0:	2304      	movs	r3, #4
 80011f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80011f4:	23d8      	movs	r3, #216	@ 0xd8
 80011f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011fc:	2309      	movs	r3, #9
 80011fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	4618      	mov	r0, r3
 8001206:	f002 fe31 	bl	8003e6c <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001210:	f000 f99c 	bl	800154c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001214:	230f      	movs	r3, #15
 8001216:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001220:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001224:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f003 f8be 	bl	80043b4 <HAL_RCC_ClockConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800123e:	f000 f985 	bl	800154c <Error_Handler>
  }
}
 8001242:	bf00      	nop
 8001244:	3750      	adds	r7, #80	@ 0x50
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40007000 	.word	0x40007000

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	@ 0x30
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	4b53      	ldr	r3, [pc, #332]	@ (80013b8 <MX_GPIO_Init+0x164>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a52      	ldr	r2, [pc, #328]	@ (80013b8 <MX_GPIO_Init+0x164>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b50      	ldr	r3, [pc, #320]	@ (80013b8 <MX_GPIO_Init+0x164>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001282:	4b4d      	ldr	r3, [pc, #308]	@ (80013b8 <MX_GPIO_Init+0x164>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a4c      	ldr	r2, [pc, #304]	@ (80013b8 <MX_GPIO_Init+0x164>)
 8001288:	f043 0320 	orr.w	r3, r3, #32
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b4a      	ldr	r3, [pc, #296]	@ (80013b8 <MX_GPIO_Init+0x164>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0320 	and.w	r3, r3, #32
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129a:	4b47      	ldr	r3, [pc, #284]	@ (80013b8 <MX_GPIO_Init+0x164>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a46      	ldr	r2, [pc, #280]	@ (80013b8 <MX_GPIO_Init+0x164>)
 80012a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b44      	ldr	r3, [pc, #272]	@ (80013b8 <MX_GPIO_Init+0x164>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	4b41      	ldr	r3, [pc, #260]	@ (80013b8 <MX_GPIO_Init+0x164>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a40      	ldr	r2, [pc, #256]	@ (80013b8 <MX_GPIO_Init+0x164>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b3e      	ldr	r3, [pc, #248]	@ (80013b8 <MX_GPIO_Init+0x164>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ca:	4b3b      	ldr	r3, [pc, #236]	@ (80013b8 <MX_GPIO_Init+0x164>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a3a      	ldr	r2, [pc, #232]	@ (80013b8 <MX_GPIO_Init+0x164>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b38      	ldr	r3, [pc, #224]	@ (80013b8 <MX_GPIO_Init+0x164>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e2:	4b35      	ldr	r3, [pc, #212]	@ (80013b8 <MX_GPIO_Init+0x164>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a34      	ldr	r2, [pc, #208]	@ (80013b8 <MX_GPIO_Init+0x164>)
 80012e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b32      	ldr	r3, [pc, #200]	@ (80013b8 <MX_GPIO_Init+0x164>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b2f      	ldr	r3, [pc, #188]	@ (80013b8 <MX_GPIO_Init+0x164>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a2e      	ldr	r2, [pc, #184]	@ (80013b8 <MX_GPIO_Init+0x164>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b2c      	ldr	r3, [pc, #176]	@ (80013b8 <MX_GPIO_Init+0x164>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001318:	4828      	ldr	r0, [pc, #160]	@ (80013bc <MX_GPIO_Init+0x168>)
 800131a:	f000 fecf 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2140      	movs	r1, #64	@ 0x40
 8001322:	4827      	ldr	r0, [pc, #156]	@ (80013c0 <MX_GPIO_Init+0x16c>)
 8001324:	f000 feca 	bl	80020bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001328:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800132e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4821      	ldr	r0, [pc, #132]	@ (80013c4 <MX_GPIO_Init+0x170>)
 8001340:	f000 fd20 	bl	8001d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001344:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4817      	ldr	r0, [pc, #92]	@ (80013bc <MX_GPIO_Init+0x168>)
 800135e:	f000 fd11 	bl	8001d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001362:	2340      	movs	r3, #64	@ 0x40
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	4811      	ldr	r0, [pc, #68]	@ (80013c0 <MX_GPIO_Init+0x16c>)
 800137a:	f000 fd03 	bl	8001d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800137e:	2380      	movs	r3, #128	@ 0x80
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4619      	mov	r1, r3
 8001390:	480b      	ldr	r0, [pc, #44]	@ (80013c0 <MX_GPIO_Init+0x16c>)
 8001392:	f000 fcf7 	bl	8001d84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001396:	2301      	movs	r3, #1
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 800139a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800139e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4807      	ldr	r0, [pc, #28]	@ (80013c8 <MX_GPIO_Init+0x174>)
 80013ac:	f000 fcea 	bl	8001d84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013b0:	bf00      	nop
 80013b2:	3730      	adds	r7, #48	@ 0x30
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40021800 	.word	0x40021800
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020c00 	.word	0x40020c00

080013cc <log_data>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_log_data */
void log_data(void const * argument)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

	  if(log_console.msg_len != 0)
 80013d4:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <log_data+0x28>)
 80013d6:	889b      	ldrh	r3, [r3, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <log_data+0x1c>
	  {
		  erlog_write(&log_console);
 80013dc:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <log_data+0x28>)
 80013de:	f004 fdb8 	bl	8005f52 <erlog_write>
	  	  erlog_clear(&log_console);
 80013e2:	4804      	ldr	r0, [pc, #16]	@ (80013f4 <log_data+0x28>)
 80013e4:	f004 fdc7 	bl	8005f76 <erlog_clear>
	  }
	  osDelay(500);
 80013e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013ec:	f005 fd9f 	bl	8006f2e <osDelay>
	  if(log_console.msg_len != 0)
 80013f0:	e7f0      	b.n	80013d4 <log_data+0x8>
 80013f2:	bf00      	nop
 80013f4:	20000588 	.word	0x20000588

080013f8 <max30102_acqure>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_max30102_acqure */
void max30102_acqure(void const * argument)
{
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af02      	add	r7, sp, #8
 80013fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN max30102_acqure */
  /* Infinite loop */
  int ir_values = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  if(readtemperature == true)
 8001404:	4b3b      	ldr	r3, [pc, #236]	@ (80014f4 <max30102_acqure+0xfc>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d01f      	beq.n	800144c <max30102_acqure+0x54>
	  {
	  		temp = max30102_readtemp(&max30102);
 800140c:	483a      	ldr	r0, [pc, #232]	@ (80014f8 <max30102_acqure+0x100>)
 800140e:	f005 f95d 	bl	80066cc <max30102_readtemp>
 8001412:	eef0 7a40 	vmov.f32	s15, s0
 8001416:	4b39      	ldr	r3, [pc, #228]	@ (80014fc <max30102_acqure+0x104>)
 8001418:	edc3 7a00 	vstr	s15, [r3]
	  	  	log_console.msg_len= sprintf((char *)log_console.msg,"Temp :- %0.2f C \r\n", temp);
 800141c:	4b37      	ldr	r3, [pc, #220]	@ (80014fc <max30102_acqure+0x104>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f8b9 	bl	8000598 <__aeabi_f2d>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4935      	ldr	r1, [pc, #212]	@ (8001500 <max30102_acqure+0x108>)
 800142c:	4835      	ldr	r0, [pc, #212]	@ (8001504 <max30102_acqure+0x10c>)
 800142e:	f008 f8af 	bl	8009590 <siprintf>
 8001432:	4603      	mov	r3, r0
 8001434:	b29a      	uxth	r2, r3
 8001436:	4b34      	ldr	r3, [pc, #208]	@ (8001508 <max30102_acqure+0x110>)
 8001438:	809a      	strh	r2, [r3, #4]
	  	  	erlog_write(&log_console);
 800143a:	4833      	ldr	r0, [pc, #204]	@ (8001508 <max30102_acqure+0x110>)
 800143c:	f004 fd89 	bl	8005f52 <erlog_write>
	  	  	erlog_clear(&log_console);
 8001440:	4831      	ldr	r0, [pc, #196]	@ (8001508 <max30102_acqure+0x110>)
 8001442:	f004 fd98 	bl	8005f76 <erlog_clear>
	  	  	readtemperature = false;
 8001446:	4b2b      	ldr	r3, [pc, #172]	@ (80014f4 <max30102_acqure+0xfc>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
	  }
	 ir_values = max30102_safeCheck(&max30102);
 800144c:	482a      	ldr	r0, [pc, #168]	@ (80014f8 <max30102_acqure+0x100>)
 800144e:	f005 fb5f 	bl	8006b10 <max30102_safeCheck>
 8001452:	4603      	mov	r3, r0
 8001454:	60fb      	str	r3, [r7, #12]
	 if(ir_values > 50000)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800145c:	4293      	cmp	r3, r2
 800145e:	dd20      	ble.n	80014a2 <max30102_acqure+0xaa>
	 {
	  	checkbeat(ir_values);
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f004 ffc9 	bl	80063f8 <checkbeat>
	  	Spo2AvgInit(&max30102);
 8001466:	4824      	ldr	r0, [pc, #144]	@ (80014f8 <max30102_acqure+0x100>)
 8001468:	f005 fc2a 	bl	8006cc0 <Spo2AvgInit>
	  	log_console.msg_len= sprintf((char *)log_console.msg,"Finger Detected , Heartbeat:- %f , spo2 - %f\r\n", beatsPerMinute, spo2);
 800146c:	4b27      	ldr	r3, [pc, #156]	@ (800150c <max30102_acqure+0x114>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f891 	bl	8000598 <__aeabi_f2d>
 8001476:	4604      	mov	r4, r0
 8001478:	460d      	mov	r5, r1
 800147a:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <max30102_acqure+0x118>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f88a 	bl	8000598 <__aeabi_f2d>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	e9cd 2300 	strd	r2, r3, [sp]
 800148c:	4622      	mov	r2, r4
 800148e:	462b      	mov	r3, r5
 8001490:	4920      	ldr	r1, [pc, #128]	@ (8001514 <max30102_acqure+0x11c>)
 8001492:	481c      	ldr	r0, [pc, #112]	@ (8001504 <max30102_acqure+0x10c>)
 8001494:	f008 f87c 	bl	8009590 <siprintf>
 8001498:	4603      	mov	r3, r0
 800149a:	b29a      	uxth	r2, r3
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <max30102_acqure+0x110>)
 800149e:	809a      	strh	r2, [r3, #4]
 80014a0:	e022      	b.n	80014e8 <max30102_acqure+0xf0>

	  }
	  else
	  {

	  		 HighPassFilter_reset(&high_pass_filter);
 80014a2:	481d      	ldr	r0, [pc, #116]	@ (8001518 <max30102_acqure+0x120>)
 80014a4:	f004 fe1e 	bl	80060e4 <HighPassFilter_reset>
	  		 LowPassFilter_reset(&low_pass_filter);
 80014a8:	481c      	ldr	r0, [pc, #112]	@ (800151c <max30102_acqure+0x124>)
 80014aa:	f004 febe 	bl	800622a <LowPassFilter_reset>
	  		 beatsPerMinute = 0;
 80014ae:	4b17      	ldr	r3, [pc, #92]	@ (800150c <max30102_acqure+0x114>)
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
	  		 beatAvg = 0;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <max30102_acqure+0x128>)
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
	  		 strcpy(log_console.msg , "..No finger detected..\r\n");
 80014be:	4a11      	ldr	r2, [pc, #68]	@ (8001504 <max30102_acqure+0x10c>)
 80014c0:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <max30102_acqure+0x12c>)
 80014c2:	4615      	mov	r5, r2
 80014c4:	461c      	mov	r4, r3
 80014c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c8:	6028      	str	r0, [r5, #0]
 80014ca:	6069      	str	r1, [r5, #4]
 80014cc:	60aa      	str	r2, [r5, #8]
 80014ce:	60eb      	str	r3, [r5, #12]
 80014d0:	cc03      	ldmia	r4!, {r0, r1}
 80014d2:	6128      	str	r0, [r5, #16]
 80014d4:	6169      	str	r1, [r5, #20]
 80014d6:	7823      	ldrb	r3, [r4, #0]
 80014d8:	762b      	strb	r3, [r5, #24]
	  		 log_console.msg_len = strlen(log_console.msg);
 80014da:	480a      	ldr	r0, [pc, #40]	@ (8001504 <max30102_acqure+0x10c>)
 80014dc:	f7fe fef0 	bl	80002c0 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <max30102_acqure+0x110>)
 80014e6:	809a      	strh	r2, [r3, #4]
	  }
	 osDelay(1000);
 80014e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ec:	f005 fd1f 	bl	8006f2e <osDelay>
	  if(readtemperature == true)
 80014f0:	e788      	b.n	8001404 <max30102_acqure+0xc>
 80014f2:	bf00      	nop
 80014f4:	2000082c 	.word	0x2000082c
 80014f8:	20000690 	.word	0x20000690
 80014fc:	2000081c 	.word	0x2000081c
 8001500:	0800bdc0 	.word	0x0800bdc0
 8001504:	2000058e 	.word	0x2000058e
 8001508:	20000588 	.word	0x20000588
 800150c:	20000824 	.word	0x20000824
 8001510:	20000820 	.word	0x20000820
 8001514:	0800bdd4 	.word	0x0800bdd4
 8001518:	20000894 	.word	0x20000894
 800151c:	20000884 	.word	0x20000884
 8001520:	20000828 	.word	0x20000828
 8001524:	0800be04 	.word	0x0800be04

08001528 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a04      	ldr	r2, [pc, #16]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d101      	bne.n	800153e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800153a:	f000 facd 	bl	8001ad8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40001000 	.word	0x40001000

0800154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <Error_Handler+0x8>

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <HAL_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4a10      	ldr	r2, [pc, #64]	@ (80015a4 <HAL_MspInit+0x4c>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	@ 0x40
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <HAL_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <HAL_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157a:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <HAL_MspInit+0x4c>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001580:	6453      	str	r3, [r2, #68]	@ 0x44
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <HAL_MspInit+0x4c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	210f      	movs	r1, #15
 8001592:	f06f 0001 	mvn.w	r0, #1
 8001596:	f000 fb9b 	bl	8001cd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800

080015a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b0aa      	sub	sp, #168	@ 0xa8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2280      	movs	r2, #128	@ 0x80
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f008 f8c3 	bl	8009754 <memset>
  if(hi2c->Instance==I2C2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a29      	ldr	r2, [pc, #164]	@ (8001678 <HAL_I2C_MspInit+0xd0>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d14b      	bne.n	8001670 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80015d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80015de:	2300      	movs	r3, #0
 80015e0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 f93c 	bl	8004864 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015f2:	f7ff ffab 	bl	800154c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015f6:	4b21      	ldr	r3, [pc, #132]	@ (800167c <HAL_I2C_MspInit+0xd4>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a20      	ldr	r2, [pc, #128]	@ (800167c <HAL_I2C_MspInit+0xd4>)
 80015fc:	f043 0320 	orr.w	r3, r3, #32
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <HAL_I2C_MspInit+0xd4>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800160e:	2303      	movs	r3, #3
 8001610:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001614:	2312      	movs	r3, #18
 8001616:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001626:	2304      	movs	r3, #4
 8001628:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800162c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001630:	4619      	mov	r1, r3
 8001632:	4813      	ldr	r0, [pc, #76]	@ (8001680 <HAL_I2C_MspInit+0xd8>)
 8001634:	f000 fba6 	bl	8001d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001638:	4b10      	ldr	r3, [pc, #64]	@ (800167c <HAL_I2C_MspInit+0xd4>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	4a0f      	ldr	r2, [pc, #60]	@ (800167c <HAL_I2C_MspInit+0xd4>)
 800163e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001642:	6413      	str	r3, [r2, #64]	@ 0x40
 8001644:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <HAL_I2C_MspInit+0xd4>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2105      	movs	r1, #5
 8001654:	2021      	movs	r0, #33	@ 0x21
 8001656:	f000 fb3b 	bl	8001cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800165a:	2021      	movs	r0, #33	@ 0x21
 800165c:	f000 fb54 	bl	8001d08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2105      	movs	r1, #5
 8001664:	2022      	movs	r0, #34	@ 0x22
 8001666:	f000 fb33 	bl	8001cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800166a:	2022      	movs	r0, #34	@ 0x22
 800166c:	f000 fb4c 	bl	8001d08 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001670:	bf00      	nop
 8001672:	37a8      	adds	r7, #168	@ 0xa8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40005800 	.word	0x40005800
 800167c:	40023800 	.word	0x40023800
 8001680:	40021400 	.word	0x40021400

08001684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b0aa      	sub	sp, #168	@ 0xa8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2280      	movs	r2, #128	@ 0x80
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f008 f855 	bl	8009754 <memset>
  if(huart->Instance==USART3)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a22      	ldr	r2, [pc, #136]	@ (8001738 <HAL_UART_MspInit+0xb4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d13c      	bne.n	800172e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016b8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4618      	mov	r0, r3
 80016c4:	f003 f8ce 	bl	8004864 <HAL_RCCEx_PeriphCLKConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016ce:	f7ff ff3d 	bl	800154c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016d2:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <HAL_UART_MspInit+0xb8>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	4a19      	ldr	r2, [pc, #100]	@ (800173c <HAL_UART_MspInit+0xb8>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016de:	4b17      	ldr	r3, [pc, #92]	@ (800173c <HAL_UART_MspInit+0xb8>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ea:	4b14      	ldr	r3, [pc, #80]	@ (800173c <HAL_UART_MspInit+0xb8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a13      	ldr	r2, [pc, #76]	@ (800173c <HAL_UART_MspInit+0xb8>)
 80016f0:	f043 0308 	orr.w	r3, r3, #8
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b11      	ldr	r3, [pc, #68]	@ (800173c <HAL_UART_MspInit+0xb8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001702:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001706:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800171c:	2307      	movs	r3, #7
 800171e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001722:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	@ (8001740 <HAL_UART_MspInit+0xbc>)
 800172a:	f000 fb2b 	bl	8001d84 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800172e:	bf00      	nop
 8001730:	37a8      	adds	r7, #168	@ 0xa8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40004800 	.word	0x40004800
 800173c:	40023800 	.word	0x40023800
 8001740:	40020c00 	.word	0x40020c00

08001744 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08e      	sub	sp, #56	@ 0x38
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001754:	4b33      	ldr	r3, [pc, #204]	@ (8001824 <HAL_InitTick+0xe0>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	4a32      	ldr	r2, [pc, #200]	@ (8001824 <HAL_InitTick+0xe0>)
 800175a:	f043 0310 	orr.w	r3, r3, #16
 800175e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001760:	4b30      	ldr	r3, [pc, #192]	@ (8001824 <HAL_InitTick+0xe0>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800176c:	f107 0210 	add.w	r2, r7, #16
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f003 f842 	bl	8004800 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001782:	2b00      	cmp	r3, #0
 8001784:	d103      	bne.n	800178e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001786:	f003 f813 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 800178a:	6378      	str	r0, [r7, #52]	@ 0x34
 800178c:	e004      	b.n	8001798 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800178e:	f003 f80f 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 8001792:	4603      	mov	r3, r0
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800179a:	4a23      	ldr	r2, [pc, #140]	@ (8001828 <HAL_InitTick+0xe4>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	0c9b      	lsrs	r3, r3, #18
 80017a2:	3b01      	subs	r3, #1
 80017a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017a6:	4b21      	ldr	r3, [pc, #132]	@ (800182c <HAL_InitTick+0xe8>)
 80017a8:	4a21      	ldr	r2, [pc, #132]	@ (8001830 <HAL_InitTick+0xec>)
 80017aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017ac:	4b1f      	ldr	r3, [pc, #124]	@ (800182c <HAL_InitTick+0xe8>)
 80017ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017b4:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <HAL_InitTick+0xe8>)
 80017b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	@ (800182c <HAL_InitTick+0xe8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <HAL_InitTick+0xe8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b19      	ldr	r3, [pc, #100]	@ (800182c <HAL_InitTick+0xe8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80017cc:	4817      	ldr	r0, [pc, #92]	@ (800182c <HAL_InitTick+0xe8>)
 80017ce:	f003 fb93 	bl	8004ef8 <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80017d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d11b      	bne.n	8001818 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017e0:	4812      	ldr	r0, [pc, #72]	@ (800182c <HAL_InitTick+0xe8>)
 80017e2:	f003 fbeb 	bl	8004fbc <HAL_TIM_Base_Start_IT>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d111      	bne.n	8001818 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017f4:	2036      	movs	r0, #54	@ 0x36
 80017f6:	f000 fa87 	bl	8001d08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b0f      	cmp	r3, #15
 80017fe:	d808      	bhi.n	8001812 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001800:	2200      	movs	r2, #0
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	2036      	movs	r0, #54	@ 0x36
 8001806:	f000 fa63 	bl	8001cd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800180a:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <HAL_InitTick+0xf0>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e002      	b.n	8001818 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001818:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800181c:	4618      	mov	r0, r3
 800181e:	3738      	adds	r7, #56	@ 0x38
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	431bde83 	.word	0x431bde83
 800182c:	20000830 	.word	0x20000830
 8001830:	40001000 	.word	0x40001000
 8001834:	20000004 	.word	0x20000004

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <NMI_Handler+0x4>

08001840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <MemManage_Handler+0x4>

08001850 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <UsageFault_Handler+0x4>

08001860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001874:	4802      	ldr	r0, [pc, #8]	@ (8001880 <I2C2_EV_IRQHandler+0x10>)
 8001876:	f001 f92b 	bl	8002ad0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200004a0 	.word	0x200004a0

08001884 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001888:	4802      	ldr	r0, [pc, #8]	@ (8001894 <I2C2_ER_IRQHandler+0x10>)
 800188a:	f001 f93b 	bl	8002b04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200004a0 	.word	0x200004a0

08001898 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <TIM6_DAC_IRQHandler+0x10>)
 800189e:	f003 fc05 	bl	80050ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000830 	.word	0x20000830

080018ac <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);  // Call the HAL handler to manage the interrupt
 80018b0:	2001      	movs	r0, #1
 80018b2:	f000 fc1d 	bl	80020f0 <HAL_GPIO_EXTI_IRQHandler>
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  return 1;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_kill>:

int _kill(int pid, int sig)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018d4:	f007 ffa0 	bl	8009818 <__errno>
 80018d8:	4603      	mov	r3, r0
 80018da:	2216      	movs	r2, #22
 80018dc:	601a      	str	r2, [r3, #0]
  return -1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_exit>:

void _exit (int status)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018f2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffe7 	bl	80018ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <_exit+0x12>

08001900 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	e00a      	b.n	8001928 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001912:	f3af 8000 	nop.w
 8001916:	4601      	mov	r1, r0
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	60ba      	str	r2, [r7, #8]
 800191e:	b2ca      	uxtb	r2, r1
 8001920:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbf0      	blt.n	8001912 <_read+0x12>
  }

  return len;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e009      	b.n	8001960 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf1      	blt.n	800194c <_write+0x12>
  }
  return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_close>:

int _close(int file)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800199a:	605a      	str	r2, [r3, #4]
  return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <_isatty>:

int _isatty(int file)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <_sbrk+0x5c>)
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <_sbrk+0x60>)
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <_sbrk+0x64>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <_sbrk+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a0c:	f007 ff04 	bl	8009818 <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a1a:	e009      	b.n	8001a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a22:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <_sbrk+0x64>)
 8001a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20040000 	.word	0x20040000
 8001a3c:	00000400 	.word	0x00000400
 8001a40:	2000087c 	.word	0x2000087c
 8001a44:	200047a0 	.word	0x200047a0

08001a48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <SystemInit+0x20>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a52:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <SystemInit+0x20>)
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aa4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001a70:	f7ff ffea 	bl	8001a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a74:	480c      	ldr	r0, [pc, #48]	@ (8001aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a76:	490d      	ldr	r1, [pc, #52]	@ (8001aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a78:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f007 fec3 	bl	8009824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9e:	f7ff faa1 	bl	8000fe4 <main>
  bx  lr    
 8001aa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001aa4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ab0:	0800c1d8 	.word	0x0800c1d8
  ldr r2, =_sbss
 8001ab4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001ab8:	200047a0 	.word	0x200047a0

08001abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC_IRQHandler>

08001abe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac2:	2003      	movs	r0, #3
 8001ac4:	f000 f8f9 	bl	8001cba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac8:	200f      	movs	r0, #15
 8001aca:	f7ff fe3b 	bl	8001744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ace:	f7ff fd43 	bl	8001558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_IncTick+0x20>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_IncTick+0x24>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a04      	ldr	r2, [pc, #16]	@ (8001afc <HAL_IncTick+0x24>)
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000008 	.word	0x20000008
 8001afc:	20000880 	.word	0x20000880

08001b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <HAL_GetTick+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000880 	.word	0x20000880

08001b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff ffee 	bl	8001b00 <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b30:	d005      	beq.n	8001b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b32:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <HAL_Delay+0x44>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b3e:	bf00      	nop
 8001b40:	f7ff ffde 	bl	8001b00 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8f7      	bhi.n	8001b40 <HAL_Delay+0x28>
  {
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000008 	.word	0x20000008

08001b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00
 8001ba4:	05fa0000 	.word	0x05fa0000

08001ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bac:	4b04      	ldr	r3, [pc, #16]	@ (8001bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	f003 0307 	and.w	r3, r3, #7
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	db0b      	blt.n	8001bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	f003 021f 	and.w	r2, r3, #31
 8001bdc:	4907      	ldr	r1, [pc, #28]	@ (8001bfc <__NVIC_EnableIRQ+0x38>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	095b      	lsrs	r3, r3, #5
 8001be4:	2001      	movs	r0, #1
 8001be6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000e100 	.word	0xe000e100

08001c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db0a      	blt.n	8001c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	490c      	ldr	r1, [pc, #48]	@ (8001c4c <__NVIC_SetPriority+0x4c>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	440b      	add	r3, r1
 8001c24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c28:	e00a      	b.n	8001c40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4908      	ldr	r1, [pc, #32]	@ (8001c50 <__NVIC_SetPriority+0x50>)
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	3b04      	subs	r3, #4
 8001c38:	0112      	lsls	r2, r2, #4
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	761a      	strb	r2, [r3, #24]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000e100 	.word	0xe000e100
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	@ 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f1c3 0307 	rsb	r3, r3, #7
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	bf28      	it	cs
 8001c72:	2304      	movcs	r3, #4
 8001c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d902      	bls.n	8001c84 <NVIC_EncodePriority+0x30>
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3b03      	subs	r3, #3
 8001c82:	e000      	b.n	8001c86 <NVIC_EncodePriority+0x32>
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	401a      	ands	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	43d9      	mvns	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	4313      	orrs	r3, r2
         );
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3724      	adds	r7, #36	@ 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ff4c 	bl	8001b60 <__NVIC_SetPriorityGrouping>
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce2:	f7ff ff61 	bl	8001ba8 <__NVIC_GetPriorityGrouping>
 8001ce6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	6978      	ldr	r0, [r7, #20]
 8001cee:	f7ff ffb1 	bl	8001c54 <NVIC_EncodePriority>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff80 	bl	8001c00 <__NVIC_SetPriority>
}
 8001d00:	bf00      	nop
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff54 	bl	8001bc4 <__NVIC_EnableIRQ>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d004      	beq.n	8001d42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2280      	movs	r2, #128	@ 0x80
 8001d3c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00c      	b.n	8001d5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2205      	movs	r2, #5
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d76:	b2db      	uxtb	r3, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	@ 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
 8001da2:	e169      	b.n	8002078 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	f040 8158 	bne.w	8002072 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d005      	beq.n	8001dda <HAL_GPIO_Init+0x56>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d130      	bne.n	8001e3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	2203      	movs	r2, #3
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e10:	2201      	movs	r2, #1
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 0201 	and.w	r2, r3, #1
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d017      	beq.n	8001e78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d123      	bne.n	8001ecc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	08da      	lsrs	r2, r3, #3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3208      	adds	r2, #8
 8001e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	220f      	movs	r2, #15
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	08da      	lsrs	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3208      	adds	r2, #8
 8001ec6:	69b9      	ldr	r1, [r7, #24]
 8001ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0203 	and.w	r2, r3, #3
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80b2 	beq.w	8002072 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0e:	4b60      	ldr	r3, [pc, #384]	@ (8002090 <HAL_GPIO_Init+0x30c>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	4a5f      	ldr	r2, [pc, #380]	@ (8002090 <HAL_GPIO_Init+0x30c>)
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8002090 <HAL_GPIO_Init+0x30c>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f26:	4a5b      	ldr	r2, [pc, #364]	@ (8002094 <HAL_GPIO_Init+0x310>)
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	220f      	movs	r2, #15
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a52      	ldr	r2, [pc, #328]	@ (8002098 <HAL_GPIO_Init+0x314>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d02b      	beq.n	8001faa <HAL_GPIO_Init+0x226>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a51      	ldr	r2, [pc, #324]	@ (800209c <HAL_GPIO_Init+0x318>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d025      	beq.n	8001fa6 <HAL_GPIO_Init+0x222>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a50      	ldr	r2, [pc, #320]	@ (80020a0 <HAL_GPIO_Init+0x31c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d01f      	beq.n	8001fa2 <HAL_GPIO_Init+0x21e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4f      	ldr	r2, [pc, #316]	@ (80020a4 <HAL_GPIO_Init+0x320>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d019      	beq.n	8001f9e <HAL_GPIO_Init+0x21a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4e      	ldr	r2, [pc, #312]	@ (80020a8 <HAL_GPIO_Init+0x324>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_GPIO_Init+0x216>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4d      	ldr	r2, [pc, #308]	@ (80020ac <HAL_GPIO_Init+0x328>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00d      	beq.n	8001f96 <HAL_GPIO_Init+0x212>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4c      	ldr	r2, [pc, #304]	@ (80020b0 <HAL_GPIO_Init+0x32c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d007      	beq.n	8001f92 <HAL_GPIO_Init+0x20e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4b      	ldr	r2, [pc, #300]	@ (80020b4 <HAL_GPIO_Init+0x330>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <HAL_GPIO_Init+0x20a>
 8001f8a:	2307      	movs	r3, #7
 8001f8c:	e00e      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001f8e:	2308      	movs	r3, #8
 8001f90:	e00c      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001f92:	2306      	movs	r3, #6
 8001f94:	e00a      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001f96:	2305      	movs	r3, #5
 8001f98:	e008      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	e006      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e004      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e002      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x228>
 8001faa:	2300      	movs	r3, #0
 8001fac:	69fa      	ldr	r2, [r7, #28]
 8001fae:	f002 0203 	and.w	r2, r2, #3
 8001fb2:	0092      	lsls	r2, r2, #2
 8001fb4:	4093      	lsls	r3, r2
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001fbc:	4935      	ldr	r1, [pc, #212]	@ (8002094 <HAL_GPIO_Init+0x310>)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fca:	4b3b      	ldr	r3, [pc, #236]	@ (80020b8 <HAL_GPIO_Init+0x334>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fee:	4a32      	ldr	r2, [pc, #200]	@ (80020b8 <HAL_GPIO_Init+0x334>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff4:	4b30      	ldr	r3, [pc, #192]	@ (80020b8 <HAL_GPIO_Init+0x334>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002018:	4a27      	ldr	r2, [pc, #156]	@ (80020b8 <HAL_GPIO_Init+0x334>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800201e:	4b26      	ldr	r3, [pc, #152]	@ (80020b8 <HAL_GPIO_Init+0x334>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002042:	4a1d      	ldr	r2, [pc, #116]	@ (80020b8 <HAL_GPIO_Init+0x334>)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002048:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <HAL_GPIO_Init+0x334>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800206c:	4a12      	ldr	r2, [pc, #72]	@ (80020b8 <HAL_GPIO_Init+0x334>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3301      	adds	r3, #1
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	2b0f      	cmp	r3, #15
 800207c:	f67f ae92 	bls.w	8001da4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3724      	adds	r7, #36	@ 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	40013800 	.word	0x40013800
 8002098:	40020000 	.word	0x40020000
 800209c:	40020400 	.word	0x40020400
 80020a0:	40020800 	.word	0x40020800
 80020a4:	40020c00 	.word	0x40020c00
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40021400 	.word	0x40021400
 80020b0:	40021800 	.word	0x40021800
 80020b4:	40021c00 	.word	0x40021c00
 80020b8:	40013c00 	.word	0x40013c00

080020bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020cc:	787b      	ldrb	r3, [r7, #1]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020d8:	e003      	b.n	80020e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	041a      	lsls	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	619a      	str	r2, [r3, #24]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020fa:	4b08      	ldr	r3, [pc, #32]	@ (800211c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020fc:	695a      	ldr	r2, [r3, #20]
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	4013      	ands	r3, r2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002106:	4a05      	ldr	r2, [pc, #20]	@ (800211c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800210c:	88fb      	ldrh	r3, [r7, #6]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe ff54 	bl	8000fbc <HAL_GPIO_EXTI_Callback>
  }
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40013c00 	.word	0x40013c00

08002120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e08b      	b.n	800224a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d106      	bne.n	800214c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fa2e 	bl	80015a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2224      	movs	r2, #36	@ 0x24
 8002150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002170:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002180:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d107      	bne.n	800219a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	e006      	b.n	80021a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80021a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d108      	bne.n	80021c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	e007      	b.n	80021d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002254 <HAL_I2C_Init+0x134>)
 80021de:	430b      	orrs	r3, r1
 80021e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69d9      	ldr	r1, [r3, #28]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1a      	ldr	r2, [r3, #32]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	02008000 	.word	0x02008000

08002258 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af02      	add	r7, sp, #8
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	461a      	mov	r2, r3
 8002264:	460b      	mov	r3, r1
 8002266:	817b      	strh	r3, [r7, #10]
 8002268:	4613      	mov	r3, r2
 800226a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b20      	cmp	r3, #32
 8002276:	f040 80fd 	bne.w	8002474 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_I2C_Master_Transmit+0x30>
 8002284:	2302      	movs	r3, #2
 8002286:	e0f6      	b.n	8002476 <HAL_I2C_Master_Transmit+0x21e>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002290:	f7ff fc36 	bl	8001b00 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2319      	movs	r3, #25
 800229c:	2201      	movs	r2, #1
 800229e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f001 fa5b 	bl	800375e <I2C_WaitOnFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0e1      	b.n	8002476 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2221      	movs	r2, #33	@ 0x21
 80022b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2210      	movs	r2, #16
 80022be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	893a      	ldrh	r2, [r7, #8]
 80022d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	2bff      	cmp	r3, #255	@ 0xff
 80022e2:	d906      	bls.n	80022f2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	22ff      	movs	r2, #255	@ 0xff
 80022e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80022ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	e007      	b.n	8002302 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80022fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002300:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002306:	2b00      	cmp	r3, #0
 8002308:	d024      	beq.n	8002354 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	781a      	ldrb	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002324:	b29b      	uxth	r3, r3
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3301      	adds	r3, #1
 8002342:	b2da      	uxtb	r2, r3
 8002344:	8979      	ldrh	r1, [r7, #10]
 8002346:	4b4e      	ldr	r3, [pc, #312]	@ (8002480 <HAL_I2C_Master_Transmit+0x228>)
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f001 fc55 	bl	8003bfc <I2C_TransferConfig>
 8002352:	e066      	b.n	8002422 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002358:	b2da      	uxtb	r2, r3
 800235a:	8979      	ldrh	r1, [r7, #10]
 800235c:	4b48      	ldr	r3, [pc, #288]	@ (8002480 <HAL_I2C_Master_Transmit+0x228>)
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f001 fc4a 	bl	8003bfc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002368:	e05b      	b.n	8002422 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	6a39      	ldr	r1, [r7, #32]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f001 fa4e 	bl	8003810 <I2C_WaitOnTXISFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e07b      	b.n	8002476 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d034      	beq.n	8002422 <HAL_I2C_Master_Transmit+0x1ca>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d130      	bne.n	8002422 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2200      	movs	r2, #0
 80023c8:	2180      	movs	r1, #128	@ 0x80
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f001 f9c7 	bl	800375e <I2C_WaitOnFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e04d      	b.n	8002476 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2bff      	cmp	r3, #255	@ 0xff
 80023e2:	d90e      	bls.n	8002402 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	22ff      	movs	r2, #255	@ 0xff
 80023e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	8979      	ldrh	r1, [r7, #10]
 80023f2:	2300      	movs	r3, #0
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f001 fbfe 	bl	8003bfc <I2C_TransferConfig>
 8002400:	e00f      	b.n	8002422 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002410:	b2da      	uxtb	r2, r3
 8002412:	8979      	ldrh	r1, [r7, #10]
 8002414:	2300      	movs	r3, #0
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f001 fbed 	bl	8003bfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d19e      	bne.n	800236a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	6a39      	ldr	r1, [r7, #32]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f001 fa34 	bl	800389e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e01a      	b.n	8002476 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2220      	movs	r2, #32
 8002446:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <HAL_I2C_Master_Transmit+0x22c>)
 8002454:	400b      	ands	r3, r1
 8002456:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	e000      	b.n	8002476 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002474:	2302      	movs	r3, #2
  }
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	80002000 	.word	0x80002000
 8002484:	fe00e800 	.word	0xfe00e800

08002488 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	461a      	mov	r2, r3
 8002494:	460b      	mov	r3, r1
 8002496:	817b      	strh	r3, [r7, #10]
 8002498:	4613      	mov	r3, r2
 800249a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	f040 80db 	bne.w	8002660 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_I2C_Master_Receive+0x30>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e0d4      	b.n	8002662 <HAL_I2C_Master_Receive+0x1da>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024c0:	f7ff fb1e 	bl	8001b00 <HAL_GetTick>
 80024c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	2319      	movs	r3, #25
 80024cc:	2201      	movs	r2, #1
 80024ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f001 f943 	bl	800375e <I2C_WaitOnFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0bf      	b.n	8002662 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2222      	movs	r2, #34	@ 0x22
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2210      	movs	r2, #16
 80024ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	893a      	ldrh	r2, [r7, #8]
 8002502:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	2bff      	cmp	r3, #255	@ 0xff
 8002512:	d90e      	bls.n	8002532 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251e:	b2da      	uxtb	r2, r3
 8002520:	8979      	ldrh	r1, [r7, #10]
 8002522:	4b52      	ldr	r3, [pc, #328]	@ (800266c <HAL_I2C_Master_Receive+0x1e4>)
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f001 fb66 	bl	8003bfc <I2C_TransferConfig>
 8002530:	e06d      	b.n	800260e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002540:	b2da      	uxtb	r2, r3
 8002542:	8979      	ldrh	r1, [r7, #10]
 8002544:	4b49      	ldr	r3, [pc, #292]	@ (800266c <HAL_I2C_Master_Receive+0x1e4>)
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f001 fb55 	bl	8003bfc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002552:	e05c      	b.n	800260e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	6a39      	ldr	r1, [r7, #32]
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f001 f9e3 	bl	8003924 <I2C_WaitOnRXNEFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e07c      	b.n	8002662 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d034      	beq.n	800260e <HAL_I2C_Master_Receive+0x186>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d130      	bne.n	800260e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	2200      	movs	r2, #0
 80025b4:	2180      	movs	r1, #128	@ 0x80
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f001 f8d1 	bl	800375e <I2C_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e04d      	b.n	8002662 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2bff      	cmp	r3, #255	@ 0xff
 80025ce:	d90e      	bls.n	80025ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	22ff      	movs	r2, #255	@ 0xff
 80025d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	8979      	ldrh	r1, [r7, #10]
 80025de:	2300      	movs	r3, #0
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f001 fb08 	bl	8003bfc <I2C_TransferConfig>
 80025ec:	e00f      	b.n	800260e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	8979      	ldrh	r1, [r7, #10]
 8002600:	2300      	movs	r3, #0
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f001 faf7 	bl	8003bfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d19d      	bne.n	8002554 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	6a39      	ldr	r1, [r7, #32]
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f001 f93e 	bl	800389e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e01a      	b.n	8002662 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2220      	movs	r2, #32
 8002632:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6859      	ldr	r1, [r3, #4]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <HAL_I2C_Master_Receive+0x1e8>)
 8002640:	400b      	ands	r3, r1
 8002642:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002660:	2302      	movs	r3, #2
  }
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	80002400 	.word	0x80002400
 8002670:	fe00e800 	.word	0xfe00e800

08002674 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	4608      	mov	r0, r1
 800267e:	4611      	mov	r1, r2
 8002680:	461a      	mov	r2, r3
 8002682:	4603      	mov	r3, r0
 8002684:	817b      	strh	r3, [r7, #10]
 8002686:	460b      	mov	r3, r1
 8002688:	813b      	strh	r3, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b20      	cmp	r3, #32
 8002698:	f040 80f9 	bne.w	800288e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_I2C_Mem_Write+0x34>
 80026a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0ed      	b.n	8002890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_I2C_Mem_Write+0x4e>
 80026be:	2302      	movs	r3, #2
 80026c0:	e0e6      	b.n	8002890 <HAL_I2C_Mem_Write+0x21c>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026ca:	f7ff fa19 	bl	8001b00 <HAL_GetTick>
 80026ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2319      	movs	r3, #25
 80026d6:	2201      	movs	r2, #1
 80026d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f001 f83e 	bl	800375e <I2C_WaitOnFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0d1      	b.n	8002890 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2221      	movs	r2, #33	@ 0x21
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2240      	movs	r2, #64	@ 0x40
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a3a      	ldr	r2, [r7, #32]
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800270c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002714:	88f8      	ldrh	r0, [r7, #6]
 8002716:	893a      	ldrh	r2, [r7, #8]
 8002718:	8979      	ldrh	r1, [r7, #10]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	4603      	mov	r3, r0
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fb81 	bl	8002e2c <I2C_RequestMemoryWrite>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0a9      	b.n	8002890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	2bff      	cmp	r3, #255	@ 0xff
 8002744:	d90e      	bls.n	8002764 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	22ff      	movs	r2, #255	@ 0xff
 800274a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002750:	b2da      	uxtb	r2, r3
 8002752:	8979      	ldrh	r1, [r7, #10]
 8002754:	2300      	movs	r3, #0
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f001 fa4d 	bl	8003bfc <I2C_TransferConfig>
 8002762:	e00f      	b.n	8002784 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002772:	b2da      	uxtb	r2, r3
 8002774:	8979      	ldrh	r1, [r7, #10]
 8002776:	2300      	movs	r3, #0
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f001 fa3c 	bl	8003bfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f001 f841 	bl	8003810 <I2C_WaitOnTXISFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e07b      	b.n	8002890 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	781a      	ldrb	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d034      	beq.n	800283c <HAL_I2C_Mem_Write+0x1c8>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d130      	bne.n	800283c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e0:	2200      	movs	r2, #0
 80027e2:	2180      	movs	r1, #128	@ 0x80
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 ffba 	bl	800375e <I2C_WaitOnFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e04d      	b.n	8002890 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2bff      	cmp	r3, #255	@ 0xff
 80027fc:	d90e      	bls.n	800281c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	22ff      	movs	r2, #255	@ 0xff
 8002802:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002808:	b2da      	uxtb	r2, r3
 800280a:	8979      	ldrh	r1, [r7, #10]
 800280c:	2300      	movs	r3, #0
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f001 f9f1 	bl	8003bfc <I2C_TransferConfig>
 800281a:	e00f      	b.n	800283c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282a:	b2da      	uxtb	r2, r3
 800282c:	8979      	ldrh	r1, [r7, #10]
 800282e:	2300      	movs	r3, #0
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f001 f9e0 	bl	8003bfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d19e      	bne.n	8002784 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f001 f827 	bl	800389e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e01a      	b.n	8002890 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2220      	movs	r2, #32
 8002860:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <HAL_I2C_Mem_Write+0x224>)
 800286e:	400b      	ands	r3, r1
 8002870:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e000      	b.n	8002890 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800288e:	2302      	movs	r3, #2
  }
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	fe00e800 	.word	0xfe00e800

0800289c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	4608      	mov	r0, r1
 80028a6:	4611      	mov	r1, r2
 80028a8:	461a      	mov	r2, r3
 80028aa:	4603      	mov	r3, r0
 80028ac:	817b      	strh	r3, [r7, #10]
 80028ae:	460b      	mov	r3, r1
 80028b0:	813b      	strh	r3, [r7, #8]
 80028b2:	4613      	mov	r3, r2
 80028b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b20      	cmp	r3, #32
 80028c0:	f040 80fd 	bne.w	8002abe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <HAL_I2C_Mem_Read+0x34>
 80028ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0f1      	b.n	8002ac0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_I2C_Mem_Read+0x4e>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e0ea      	b.n	8002ac0 <HAL_I2C_Mem_Read+0x224>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028f2:	f7ff f905 	bl	8001b00 <HAL_GetTick>
 80028f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2319      	movs	r3, #25
 80028fe:	2201      	movs	r2, #1
 8002900:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 ff2a 	bl	800375e <I2C_WaitOnFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0d5      	b.n	8002ac0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2222      	movs	r2, #34	@ 0x22
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2240      	movs	r2, #64	@ 0x40
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a3a      	ldr	r2, [r7, #32]
 800292e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002934:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800293c:	88f8      	ldrh	r0, [r7, #6]
 800293e:	893a      	ldrh	r2, [r7, #8]
 8002940:	8979      	ldrh	r1, [r7, #10]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	9301      	str	r3, [sp, #4]
 8002946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	4603      	mov	r3, r0
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fac1 	bl	8002ed4 <I2C_RequestMemoryRead>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0ad      	b.n	8002ac0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	2bff      	cmp	r3, #255	@ 0xff
 800296c:	d90e      	bls.n	800298c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002978:	b2da      	uxtb	r2, r3
 800297a:	8979      	ldrh	r1, [r7, #10]
 800297c:	4b52      	ldr	r3, [pc, #328]	@ (8002ac8 <HAL_I2C_Mem_Read+0x22c>)
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f001 f939 	bl	8003bfc <I2C_TransferConfig>
 800298a:	e00f      	b.n	80029ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299a:	b2da      	uxtb	r2, r3
 800299c:	8979      	ldrh	r1, [r7, #10]
 800299e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac8 <HAL_I2C_Mem_Read+0x22c>)
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f001 f928 	bl	8003bfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b2:	2200      	movs	r2, #0
 80029b4:	2104      	movs	r1, #4
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 fed1 	bl	800375e <I2C_WaitOnFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e07c      	b.n	8002ac0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d034      	beq.n	8002a6c <HAL_I2C_Mem_Read+0x1d0>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d130      	bne.n	8002a6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a10:	2200      	movs	r2, #0
 8002a12:	2180      	movs	r1, #128	@ 0x80
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fea2 	bl	800375e <I2C_WaitOnFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e04d      	b.n	8002ac0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2bff      	cmp	r3, #255	@ 0xff
 8002a2c:	d90e      	bls.n	8002a4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	8979      	ldrh	r1, [r7, #10]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f001 f8d9 	bl	8003bfc <I2C_TransferConfig>
 8002a4a:	e00f      	b.n	8002a6c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	8979      	ldrh	r1, [r7, #10]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f001 f8c8 	bl	8003bfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d19a      	bne.n	80029ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 ff0f 	bl	800389e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e01a      	b.n	8002ac0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002acc <HAL_I2C_Mem_Read+0x230>)
 8002a9e:	400b      	ands	r3, r1
 8002aa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	e000      	b.n	8002ac0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
  }
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	80002400 	.word	0x80002400
 8002acc:	fe00e800 	.word	0xfe00e800

08002ad0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	68f9      	ldr	r1, [r7, #12]
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	4798      	blx	r3
  }
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00f      	beq.n	8002b46 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b34:	f043 0201 	orr.w	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b44:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00f      	beq.n	8002b70 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	f043 0208 	orr.w	r2, r3, #8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b6e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00f      	beq.n	8002b9a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b88:	f043 0202 	orr.w	r2, r3, #2
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b98:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 030b 	and.w	r3, r3, #11
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002baa:	68f9      	ldr	r1, [r7, #12]
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fc7d 	bl	80034ac <I2C_ITError>
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	70fb      	strb	r3, [r7, #3]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <I2C_Slave_ISR_IT+0x24>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e0e2      	b.n	8002e24 <I2C_Slave_ISR_IT+0x1ea>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d009      	beq.n	8002c84 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002c7a:	6939      	ldr	r1, [r7, #16]
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 fa5d 	bl	800313c <I2C_ITSlaveCplt>
 8002c82:	e0ca      	b.n	8002e1a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d04b      	beq.n	8002d26 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d046      	beq.n	8002d26 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d128      	bne.n	8002cf4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b28      	cmp	r3, #40	@ 0x28
 8002cac:	d108      	bne.n	8002cc0 <I2C_Slave_ISR_IT+0x86>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cb4:	d104      	bne.n	8002cc0 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002cb6:	6939      	ldr	r1, [r7, #16]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fba3 	bl	8003404 <I2C_ITListenCplt>
 8002cbe:	e031      	b.n	8002d24 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b29      	cmp	r3, #41	@ 0x29
 8002cca:	d10e      	bne.n	8002cea <I2C_Slave_ISR_IT+0xb0>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cd2:	d00a      	beq.n	8002cea <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2210      	movs	r2, #16
 8002cda:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fcfc 	bl	80036da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f9ce 	bl	8003084 <I2C_ITSlaveSeqCplt>
 8002ce8:	e01c      	b.n	8002d24 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2210      	movs	r2, #16
 8002cf0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002cf2:	e08f      	b.n	8002e14 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2210      	movs	r2, #16
 8002cfa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d00:	f043 0204 	orr.w	r2, r3, #4
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <I2C_Slave_ISR_IT+0xdc>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d14:	d17e      	bne.n	8002e14 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fbc5 	bl	80034ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002d22:	e077      	b.n	8002e14 <I2C_Slave_ISR_IT+0x1da>
 8002d24:	e076      	b.n	8002e14 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d02f      	beq.n	8002d90 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d02a      	beq.n	8002d90 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d018      	beq.n	8002d76 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d14b      	bne.n	8002e18 <I2C_Slave_ISR_IT+0x1de>
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d86:	d047      	beq.n	8002e18 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f97b 	bl	8003084 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002d8e:	e043      	b.n	8002e18 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d004      	beq.n	8002dae <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002da4:	6939      	ldr	r1, [r7, #16]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f8e8 	bl	8002f7c <I2C_ITAddrCplt>
 8002dac:	e035      	b.n	8002e1a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d030      	beq.n	8002e1a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d02b      	beq.n	8002e1a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d018      	beq.n	8002dfe <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002dfc:	e00d      	b.n	8002e1a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e04:	d002      	beq.n	8002e0c <I2C_Slave_ISR_IT+0x1d2>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d106      	bne.n	8002e1a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f939 	bl	8003084 <I2C_ITSlaveSeqCplt>
 8002e12:	e002      	b.n	8002e1a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002e14:	bf00      	nop
 8002e16:	e000      	b.n	8002e1a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002e18:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	817b      	strh	r3, [r7, #10]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	813b      	strh	r3, [r7, #8]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	8979      	ldrh	r1, [r7, #10]
 8002e4c:	4b20      	ldr	r3, [pc, #128]	@ (8002ed0 <I2C_RequestMemoryWrite+0xa4>)
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fed1 	bl	8003bfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	69b9      	ldr	r1, [r7, #24]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fcd6 	bl	8003810 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e02c      	b.n	8002ec8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e74:	893b      	ldrh	r3, [r7, #8]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e7e:	e015      	b.n	8002eac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e80:	893b      	ldrh	r3, [r7, #8]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	69b9      	ldr	r1, [r7, #24]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fcbc 	bl	8003810 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e012      	b.n	8002ec8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ea2:	893b      	ldrh	r3, [r7, #8]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2180      	movs	r1, #128	@ 0x80
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fc51 	bl	800375e <I2C_WaitOnFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	80002000 	.word	0x80002000

08002ed4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	4608      	mov	r0, r1
 8002ede:	4611      	mov	r1, r2
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	817b      	strh	r3, [r7, #10]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	813b      	strh	r3, [r7, #8]
 8002eea:	4613      	mov	r3, r2
 8002eec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	8979      	ldrh	r1, [r7, #10]
 8002ef4:	4b20      	ldr	r3, [pc, #128]	@ (8002f78 <I2C_RequestMemoryRead+0xa4>)
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fe7e 	bl	8003bfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	69b9      	ldr	r1, [r7, #24]
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fc83 	bl	8003810 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e02c      	b.n	8002f6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d105      	bne.n	8002f26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f1a:	893b      	ldrh	r3, [r7, #8]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f24:	e015      	b.n	8002f52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f26:	893b      	ldrh	r3, [r7, #8]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	69b9      	ldr	r1, [r7, #24]
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fc69 	bl	8003810 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e012      	b.n	8002f6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f48:	893b      	ldrh	r3, [r7, #8]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2140      	movs	r1, #64	@ 0x40
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 fbfe 	bl	800375e <I2C_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	80002000 	.word	0x80002000

08002f7c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f92:	2b28      	cmp	r3, #40	@ 0x28
 8002f94:	d16a      	bne.n	800306c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	0c1b      	lsrs	r3, r3, #16
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002fb4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fc2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002fd0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d138      	bne.n	800304c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002fda:	897b      	ldrh	r3, [r7, #10]
 8002fdc:	09db      	lsrs	r3, r3, #7
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	89bb      	ldrh	r3, [r7, #12]
 8002fe2:	4053      	eors	r3, r2
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f003 0306 	and.w	r3, r3, #6
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11c      	bne.n	8003028 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002fee:	897b      	ldrh	r3, [r7, #10]
 8002ff0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003000:	2b02      	cmp	r3, #2
 8003002:	d13b      	bne.n	800307c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2208      	movs	r2, #8
 8003010:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800301a:	89ba      	ldrh	r2, [r7, #12]
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	4619      	mov	r1, r3
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff fdde 	bl	8002be2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003026:	e029      	b.n	800307c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003028:	893b      	ldrh	r3, [r7, #8]
 800302a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800302c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fe15 	bl	8003c60 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800303e:	89ba      	ldrh	r2, [r7, #12]
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	4619      	mov	r1, r3
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fdcc 	bl	8002be2 <HAL_I2C_AddrCallback>
}
 800304a:	e017      	b.n	800307c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800304c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fe05 	bl	8003c60 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800305e:	89ba      	ldrh	r2, [r7, #12]
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	4619      	mov	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff fdbc 	bl	8002be2 <HAL_I2C_AddrCallback>
}
 800306a:	e007      	b.n	800307c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2208      	movs	r2, #8
 8003072:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e00c      	b.n	80030d2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030d0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b29      	cmp	r3, #41	@ 0x29
 80030dc:	d112      	bne.n	8003104 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2228      	movs	r2, #40	@ 0x28
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2221      	movs	r2, #33	@ 0x21
 80030ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030ec:	2101      	movs	r1, #1
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fdb6 	bl	8003c60 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff fd5c 	bl	8002bba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003102:	e017      	b.n	8003134 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b2a      	cmp	r3, #42	@ 0x2a
 800310e:	d111      	bne.n	8003134 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2228      	movs	r2, #40	@ 0x28
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2222      	movs	r2, #34	@ 0x22
 800311c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800311e:	2102      	movs	r1, #2
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fd9d 	bl	8003c60 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fd4d 	bl	8002bce <HAL_I2C_SlaveRxCpltCallback>
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003156:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800315e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2220      	movs	r2, #32
 8003166:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003168:	7afb      	ldrb	r3, [r7, #11]
 800316a:	2b21      	cmp	r3, #33	@ 0x21
 800316c:	d002      	beq.n	8003174 <I2C_ITSlaveCplt+0x38>
 800316e:	7afb      	ldrb	r3, [r7, #11]
 8003170:	2b29      	cmp	r3, #41	@ 0x29
 8003172:	d108      	bne.n	8003186 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003174:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fd71 	bl	8003c60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2221      	movs	r2, #33	@ 0x21
 8003182:	631a      	str	r2, [r3, #48]	@ 0x30
 8003184:	e019      	b.n	80031ba <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003186:	7afb      	ldrb	r3, [r7, #11]
 8003188:	2b22      	cmp	r3, #34	@ 0x22
 800318a:	d002      	beq.n	8003192 <I2C_ITSlaveCplt+0x56>
 800318c:	7afb      	ldrb	r3, [r7, #11]
 800318e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003190:	d108      	bne.n	80031a4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003192:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fd62 	bl	8003c60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2222      	movs	r2, #34	@ 0x22
 80031a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80031a2:	e00a      	b.n	80031ba <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80031a4:	7afb      	ldrb	r3, [r7, #11]
 80031a6:	2b28      	cmp	r3, #40	@ 0x28
 80031a8:	d107      	bne.n	80031ba <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80031aa:	f248 0103 	movw	r1, #32771	@ 0x8003
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fd56 	bl	8003c60 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031c8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b89      	ldr	r3, [pc, #548]	@ (80033fc <I2C_ITSlaveCplt+0x2c0>)
 80031d6:	400b      	ands	r3, r1
 80031d8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fa7d 	bl	80036da <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d013      	beq.n	8003212 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031f8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d01f      	beq.n	8003242 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	b29a      	uxth	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003210:	e017      	b.n	8003242 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d012      	beq.n	8003242 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800322a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003230:	2b00      	cmp	r3, #0
 8003232:	d006      	beq.n	8003242 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	b29a      	uxth	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d020      	beq.n	800328e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f023 0304 	bic.w	r3, r3, #4
 8003252:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00c      	beq.n	800328e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329c:	f043 0204 	orr.w	r2, r3, #4
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d049      	beq.n	8003342 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d044      	beq.n	8003342 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d128      	bne.n	8003314 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b28      	cmp	r3, #40	@ 0x28
 80032cc:	d108      	bne.n	80032e0 <I2C_ITSlaveCplt+0x1a4>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032d4:	d104      	bne.n	80032e0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80032d6:	6979      	ldr	r1, [r7, #20]
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f893 	bl	8003404 <I2C_ITListenCplt>
 80032de:	e030      	b.n	8003342 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b29      	cmp	r3, #41	@ 0x29
 80032ea:	d10e      	bne.n	800330a <I2C_ITSlaveCplt+0x1ce>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032f2:	d00a      	beq.n	800330a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2210      	movs	r2, #16
 80032fa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f9ec 	bl	80036da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff febe 	bl	8003084 <I2C_ITSlaveSeqCplt>
 8003308:	e01b      	b.n	8003342 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2210      	movs	r2, #16
 8003310:	61da      	str	r2, [r3, #28]
 8003312:	e016      	b.n	8003342 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2210      	movs	r2, #16
 800331a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003320:	f043 0204 	orr.w	r2, r3, #4
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <I2C_ITSlaveCplt+0x1fa>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003334:	d105      	bne.n	8003342 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	4619      	mov	r1, r3
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f8b5 	bl	80034ac <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003354:	2b00      	cmp	r3, #0
 8003356:	d010      	beq.n	800337a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335c:	4619      	mov	r1, r3
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f8a4 	bl	80034ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b28      	cmp	r3, #40	@ 0x28
 800336e:	d141      	bne.n	80033f4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003370:	6979      	ldr	r1, [r7, #20]
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f846 	bl	8003404 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003378:	e03c      	b.n	80033f4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003382:	d014      	beq.n	80033ae <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff fe7d 	bl	8003084 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a1c      	ldr	r2, [pc, #112]	@ (8003400 <I2C_ITSlaveCplt+0x2c4>)
 800338e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff fc29 	bl	8002bfe <HAL_I2C_ListenCpltCallback>
}
 80033ac:	e022      	b.n	80033f4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b22      	cmp	r3, #34	@ 0x22
 80033b8:	d10e      	bne.n	80033d8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff fbfc 	bl	8002bce <HAL_I2C_SlaveRxCpltCallback>
}
 80033d6:	e00d      	b.n	80033f4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff fbe3 	bl	8002bba <HAL_I2C_SlaveTxCpltCallback>
}
 80033f4:	bf00      	nop
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	fe00e800 	.word	0xfe00e800
 8003400:	ffff0000 	.word	0xffff0000

08003404 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a25      	ldr	r2, [pc, #148]	@ (80034a8 <I2C_ITListenCplt+0xa4>)
 8003412:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d022      	beq.n	8003480 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003456:	2b00      	cmp	r3, #0
 8003458:	d012      	beq.n	8003480 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003478:	f043 0204 	orr.w	r2, r3, #4
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003480:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fbeb 	bl	8003c60 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2210      	movs	r2, #16
 8003490:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff fbaf 	bl	8002bfe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	ffff0000 	.word	0xffff0000

080034ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034bc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a6d      	ldr	r2, [pc, #436]	@ (8003680 <I2C_ITError+0x1d4>)
 80034ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	2b28      	cmp	r3, #40	@ 0x28
 80034e2:	d005      	beq.n	80034f0 <I2C_ITError+0x44>
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b29      	cmp	r3, #41	@ 0x29
 80034e8:	d002      	beq.n	80034f0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80034ee:	d10b      	bne.n	8003508 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80034f0:	2103      	movs	r1, #3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fbb4 	bl	8003c60 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2228      	movs	r2, #40	@ 0x28
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a60      	ldr	r2, [pc, #384]	@ (8003684 <I2C_ITError+0x1d8>)
 8003504:	635a      	str	r2, [r3, #52]	@ 0x34
 8003506:	e030      	b.n	800356a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003508:	f248 0103 	movw	r1, #32771	@ 0x8003
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fba7 	bl	8003c60 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f8e1 	bl	80036da <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b60      	cmp	r3, #96	@ 0x60
 8003522:	d01f      	beq.n	8003564 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b20      	cmp	r3, #32
 8003538:	d114      	bne.n	8003564 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b10      	cmp	r3, #16
 8003546:	d109      	bne.n	800355c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2210      	movs	r2, #16
 800354e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003554:	f043 0204 	orr.w	r2, r3, #4
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2220      	movs	r2, #32
 8003562:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003574:	2b00      	cmp	r3, #0
 8003576:	d039      	beq.n	80035ec <I2C_ITError+0x140>
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b11      	cmp	r3, #17
 800357c:	d002      	beq.n	8003584 <I2C_ITError+0xd8>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b21      	cmp	r3, #33	@ 0x21
 8003582:	d133      	bne.n	80035ec <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800358e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003592:	d107      	bne.n	80035a4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe fbdd 	bl	8001d68 <HAL_DMA_GetState>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d017      	beq.n	80035e4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b8:	4a33      	ldr	r2, [pc, #204]	@ (8003688 <I2C_ITError+0x1dc>)
 80035ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fe fbab 	bl	8001d24 <HAL_DMA_Abort_IT>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d04d      	beq.n	8003670 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035de:	4610      	mov	r0, r2
 80035e0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035e2:	e045      	b.n	8003670 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f851 	bl	800368c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035ea:	e041      	b.n	8003670 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d039      	beq.n	8003668 <I2C_ITError+0x1bc>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b12      	cmp	r3, #18
 80035f8:	d002      	beq.n	8003600 <I2C_ITError+0x154>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b22      	cmp	r3, #34	@ 0x22
 80035fe:	d133      	bne.n	8003668 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800360a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800360e:	d107      	bne.n	8003620 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800361e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe fb9f 	bl	8001d68 <HAL_DMA_GetState>
 800362a:	4603      	mov	r3, r0
 800362c:	2b01      	cmp	r3, #1
 800362e:	d017      	beq.n	8003660 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003634:	4a14      	ldr	r2, [pc, #80]	@ (8003688 <I2C_ITError+0x1dc>)
 8003636:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe fb6d 	bl	8001d24 <HAL_DMA_Abort_IT>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d011      	beq.n	8003674 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800365a:	4610      	mov	r0, r2
 800365c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800365e:	e009      	b.n	8003674 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f813 	bl	800368c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003666:	e005      	b.n	8003674 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f80f 	bl	800368c <I2C_TreatErrorCallback>
  }
}
 800366e:	e002      	b.n	8003676 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003670:	bf00      	nop
 8003672:	e000      	b.n	8003676 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003674:	bf00      	nop
}
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	ffff0000 	.word	0xffff0000
 8003684:	08002c3b 	.word	0x08002c3b
 8003688:	08003723 	.word	0x08003723

0800368c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b60      	cmp	r3, #96	@ 0x60
 800369e:	d10e      	bne.n	80036be <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff fab5 	bl	8002c26 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036bc:	e009      	b.n	80036d2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff faa0 	bl	8002c12 <HAL_I2C_ErrorCallback>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d103      	bne.n	80036f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2200      	movs	r2, #0
 80036f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b01      	cmp	r3, #1
 8003704:	d007      	beq.n	8003716 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699a      	ldr	r2, [r3, #24]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0201 	orr.w	r2, r2, #1
 8003714:	619a      	str	r2, [r3, #24]
  }
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373c:	2200      	movs	r2, #0
 800373e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374c:	2200      	movs	r2, #0
 800374e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7ff ff9b 	bl	800368c <I2C_TreatErrorCallback>
}
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	4613      	mov	r3, r2
 800376c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800376e:	e03b      	b.n	80037e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	6839      	ldr	r1, [r7, #0]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f961 	bl	8003a3c <I2C_IsErrorOccurred>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e041      	b.n	8003808 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800378a:	d02d      	beq.n	80037e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378c:	f7fe f9b8 	bl	8001b00 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d302      	bcc.n	80037a2 <I2C_WaitOnFlagUntilTimeout+0x44>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d122      	bne.n	80037e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699a      	ldr	r2, [r3, #24]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4013      	ands	r3, r2
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	bf0c      	ite	eq
 80037b2:	2301      	moveq	r3, #1
 80037b4:	2300      	movne	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d113      	bne.n	80037e8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c4:	f043 0220 	orr.w	r2, r3, #32
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e00f      	b.n	8003808 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4013      	ands	r3, r2
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	429a      	cmp	r2, r3
 8003804:	d0b4      	beq.n	8003770 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800381c:	e033      	b.n	8003886 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f90a 	bl	8003a3c <I2C_IsErrorOccurred>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e031      	b.n	8003896 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003838:	d025      	beq.n	8003886 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383a:	f7fe f961 	bl	8001b00 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11a      	bne.n	8003886 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b02      	cmp	r3, #2
 800385c:	d013      	beq.n	8003886 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	f043 0220 	orr.w	r2, r3, #32
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e007      	b.n	8003896 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b02      	cmp	r3, #2
 8003892:	d1c4      	bne.n	800381e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038aa:	e02f      	b.n	800390c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f8c3 	bl	8003a3c <I2C_IsErrorOccurred>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e02d      	b.n	800391c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c0:	f7fe f91e 	bl	8001b00 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d302      	bcc.n	80038d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d11a      	bne.n	800390c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d013      	beq.n	800390c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e007      	b.n	800391c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b20      	cmp	r3, #32
 8003918:	d1c8      	bne.n	80038ac <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003934:	e071      	b.n	8003a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f87e 	bl	8003a3c <I2C_IsErrorOccurred>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b20      	cmp	r3, #32
 8003956:	d13b      	bne.n	80039d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d138      	bne.n	80039d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b04      	cmp	r3, #4
 800396a:	d105      	bne.n	8003978 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b10      	cmp	r3, #16
 8003984:	d121      	bne.n	80039ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2210      	movs	r2, #16
 800398c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2204      	movs	r2, #4
 8003992:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2220      	movs	r2, #32
 800399a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4b24      	ldr	r3, [pc, #144]	@ (8003a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80039a8:	400b      	ands	r3, r1
 80039aa:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	75fb      	strb	r3, [r7, #23]
 80039c8:	e002      	b.n	80039d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80039d0:	f7fe f896 	bl	8001b00 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d302      	bcc.n	80039e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d119      	bne.n	8003a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d116      	bne.n	8003a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d00f      	beq.n	8003a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fe:	f043 0220 	orr.w	r2, r3, #32
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d002      	beq.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d083      	beq.n	8003936 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	fe00e800 	.word	0xfe00e800

08003a3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	@ 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d068      	beq.n	8003b3a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2210      	movs	r2, #16
 8003a6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a70:	e049      	b.n	8003b06 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a78:	d045      	beq.n	8003b06 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a7a:	f7fe f841 	bl	8001b00 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d302      	bcc.n	8003a90 <I2C_IsErrorOccurred+0x54>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d13a      	bne.n	8003b06 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003aa2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab2:	d121      	bne.n	8003af8 <I2C_IsErrorOccurred+0xbc>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003aba:	d01d      	beq.n	8003af8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003abc:	7cfb      	ldrb	r3, [r7, #19]
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d01a      	beq.n	8003af8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ad0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ad2:	f7fe f815 	bl	8001b00 <HAL_GetTick>
 8003ad6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad8:	e00e      	b.n	8003af8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ada:	f7fe f811 	bl	8001b00 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b19      	cmp	r3, #25
 8003ae6:	d907      	bls.n	8003af8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	f043 0320 	orr.w	r3, r3, #32
 8003aee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003af6:	e006      	b.n	8003b06 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	d1e9      	bne.n	8003ada <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d003      	beq.n	8003b1c <I2C_IsErrorOccurred+0xe0>
 8003b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0aa      	beq.n	8003a72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d103      	bne.n	8003b2c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f043 0304 	orr.w	r3, r3, #4
 8003b32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f043 0308 	orr.w	r3, r3, #8
 8003b74:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00b      	beq.n	8003ba8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	f043 0302 	orr.w	r3, r3, #2
 8003b96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ba0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01c      	beq.n	8003bea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f7ff fd92 	bl	80036da <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6859      	ldr	r1, [r3, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf8 <I2C_IsErrorOccurred+0x1bc>)
 8003bc2:	400b      	ands	r3, r1
 8003bc4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003bea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3728      	adds	r7, #40	@ 0x28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	fe00e800 	.word	0xfe00e800

08003bfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	460b      	mov	r3, r1
 8003c08:	817b      	strh	r3, [r7, #10]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c0e:	897b      	ldrh	r3, [r7, #10]
 8003c10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c14:	7a7b      	ldrb	r3, [r7, #9]
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c2a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	0d5b      	lsrs	r3, r3, #21
 8003c36:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003c3a:	4b08      	ldr	r3, [pc, #32]	@ (8003c5c <I2C_TransferConfig+0x60>)
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	ea02 0103 	and.w	r1, r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	03ff63ff 	.word	0x03ff63ff

08003c60 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c70:	887b      	ldrh	r3, [r7, #2]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00f      	beq.n	8003c9a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003c80:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c8e:	2b28      	cmp	r3, #40	@ 0x28
 8003c90:	d003      	beq.n	8003c9a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003c98:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c9a:	887b      	ldrh	r3, [r7, #2]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00f      	beq.n	8003cc4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003caa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003cb8:	2b28      	cmp	r3, #40	@ 0x28
 8003cba:	d003      	beq.n	8003cc4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003cc2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003cc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	da03      	bge.n	8003cd4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003cd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003cd4:	887b      	ldrh	r3, [r7, #2]
 8003cd6:	2b10      	cmp	r3, #16
 8003cd8:	d103      	bne.n	8003ce2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003ce0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ce2:	887b      	ldrh	r3, [r7, #2]
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d103      	bne.n	8003cf0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f043 0320 	orr.w	r3, r3, #32
 8003cee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003cf0:	887b      	ldrh	r3, [r7, #2]
 8003cf2:	2b40      	cmp	r3, #64	@ 0x40
 8003cf4:	d103      	bne.n	8003cfe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cfc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	43da      	mvns	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]
}
 8003d10:	bf00      	nop
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d138      	bne.n	8003da4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e032      	b.n	8003da6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2224      	movs	r2, #36	@ 0x24
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6819      	ldr	r1, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e000      	b.n	8003da6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003da4:	2302      	movs	r3, #2
  }
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d139      	bne.n	8003e3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e033      	b.n	8003e3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2224      	movs	r2, #36	@ 0x24
 8003de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e000      	b.n	8003e3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
  }
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e50:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a04      	ldr	r2, [pc, #16]	@ (8003e68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e5a:	6013      	str	r3, [r2, #0]
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40007000 	.word	0x40007000

08003e6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e74:	2300      	movs	r3, #0
 8003e76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e291      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8087 	beq.w	8003f9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e90:	4b96      	ldr	r3, [pc, #600]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d00c      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e9c:	4b93      	ldr	r3, [pc, #588]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d112      	bne.n	8003ece <HAL_RCC_OscConfig+0x62>
 8003ea8:	4b90      	ldr	r3, [pc, #576]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eb4:	d10b      	bne.n	8003ece <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb6:	4b8d      	ldr	r3, [pc, #564]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d06c      	beq.n	8003f9c <HAL_RCC_OscConfig+0x130>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d168      	bne.n	8003f9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e26b      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed6:	d106      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x7a>
 8003ed8:	4b84      	ldr	r3, [pc, #528]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a83      	ldr	r2, [pc, #524]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	e02e      	b.n	8003f44 <HAL_RCC_OscConfig+0xd8>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x9c>
 8003eee:	4b7f      	ldr	r3, [pc, #508]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a7e      	ldr	r2, [pc, #504]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	4b7c      	ldr	r3, [pc, #496]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a7b      	ldr	r2, [pc, #492]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003f00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	e01d      	b.n	8003f44 <HAL_RCC_OscConfig+0xd8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f10:	d10c      	bne.n	8003f2c <HAL_RCC_OscConfig+0xc0>
 8003f12:	4b76      	ldr	r3, [pc, #472]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a75      	ldr	r2, [pc, #468]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	4b73      	ldr	r3, [pc, #460]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a72      	ldr	r2, [pc, #456]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	e00b      	b.n	8003f44 <HAL_RCC_OscConfig+0xd8>
 8003f2c:	4b6f      	ldr	r3, [pc, #444]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a6e      	ldr	r2, [pc, #440]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	4b6c      	ldr	r3, [pc, #432]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a6b      	ldr	r2, [pc, #428]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d013      	beq.n	8003f74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fd fdd8 	bl	8001b00 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f54:	f7fd fdd4 	bl	8001b00 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	@ 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e21f      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f66:	4b61      	ldr	r3, [pc, #388]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0xe8>
 8003f72:	e014      	b.n	8003f9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fd fdc4 	bl	8001b00 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f7c:	f7fd fdc0 	bl	8001b00 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b64      	cmp	r3, #100	@ 0x64
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e20b      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8e:	4b57      	ldr	r3, [pc, #348]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x110>
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d069      	beq.n	800407e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003faa:	4b50      	ldr	r3, [pc, #320]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00b      	beq.n	8003fce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb6:	4b4d      	ldr	r3, [pc, #308]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d11c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x190>
 8003fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d116      	bne.n	8003ffc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fce:	4b47      	ldr	r3, [pc, #284]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d005      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x17a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d001      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e1df      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe6:	4b41      	ldr	r3, [pc, #260]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	493d      	ldr	r1, [pc, #244]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffa:	e040      	b.n	800407e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d023      	beq.n	800404c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004004:	4b39      	ldr	r3, [pc, #228]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a38      	ldr	r2, [pc, #224]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fd fd76 	bl	8001b00 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004018:	f7fd fd72 	bl	8001b00 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e1bd      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402a:	4b30      	ldr	r3, [pc, #192]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004036:	4b2d      	ldr	r3, [pc, #180]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	4929      	ldr	r1, [pc, #164]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8004046:	4313      	orrs	r3, r2
 8004048:	600b      	str	r3, [r1, #0]
 800404a:	e018      	b.n	800407e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800404c:	4b27      	ldr	r3, [pc, #156]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a26      	ldr	r2, [pc, #152]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7fd fd52 	bl	8001b00 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004060:	f7fd fd4e 	bl	8001b00 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e199      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004072:	4b1e      	ldr	r3, [pc, #120]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d038      	beq.n	80040fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d019      	beq.n	80040c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004092:	4b16      	ldr	r3, [pc, #88]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8004094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004096:	4a15      	ldr	r2, [pc, #84]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409e:	f7fd fd2f 	bl	8001b00 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a6:	f7fd fd2b 	bl	8001b00 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e176      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b8:	4b0c      	ldr	r3, [pc, #48]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 80040ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x23a>
 80040c4:	e01a      	b.n	80040fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c6:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 80040c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ca:	4a08      	ldr	r2, [pc, #32]	@ (80040ec <HAL_RCC_OscConfig+0x280>)
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d2:	f7fd fd15 	bl	8001b00 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	e00a      	b.n	80040f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040da:	f7fd fd11 	bl	8001b00 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d903      	bls.n	80040f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e15c      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>
 80040ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f0:	4b91      	ldr	r3, [pc, #580]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80040f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1ee      	bne.n	80040da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80a4 	beq.w	8004252 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800410a:	4b8b      	ldr	r3, [pc, #556]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10d      	bne.n	8004132 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004116:	4b88      	ldr	r3, [pc, #544]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	4a87      	ldr	r2, [pc, #540]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 800411c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004120:	6413      	str	r3, [r2, #64]	@ 0x40
 8004122:	4b85      	ldr	r3, [pc, #532]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412e:	2301      	movs	r3, #1
 8004130:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004132:	4b82      	ldr	r3, [pc, #520]	@ (800433c <HAL_RCC_OscConfig+0x4d0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d118      	bne.n	8004170 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800413e:	4b7f      	ldr	r3, [pc, #508]	@ (800433c <HAL_RCC_OscConfig+0x4d0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a7e      	ldr	r2, [pc, #504]	@ (800433c <HAL_RCC_OscConfig+0x4d0>)
 8004144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414a:	f7fd fcd9 	bl	8001b00 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004152:	f7fd fcd5 	bl	8001b00 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b64      	cmp	r3, #100	@ 0x64
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e120      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004164:	4b75      	ldr	r3, [pc, #468]	@ (800433c <HAL_RCC_OscConfig+0x4d0>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d106      	bne.n	8004186 <HAL_RCC_OscConfig+0x31a>
 8004178:	4b6f      	ldr	r3, [pc, #444]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417c:	4a6e      	ldr	r2, [pc, #440]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	6713      	str	r3, [r2, #112]	@ 0x70
 8004184:	e02d      	b.n	80041e2 <HAL_RCC_OscConfig+0x376>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10c      	bne.n	80041a8 <HAL_RCC_OscConfig+0x33c>
 800418e:	4b6a      	ldr	r3, [pc, #424]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004192:	4a69      	ldr	r2, [pc, #420]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	6713      	str	r3, [r2, #112]	@ 0x70
 800419a:	4b67      	ldr	r3, [pc, #412]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419e:	4a66      	ldr	r2, [pc, #408]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80041a0:	f023 0304 	bic.w	r3, r3, #4
 80041a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a6:	e01c      	b.n	80041e2 <HAL_RCC_OscConfig+0x376>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b05      	cmp	r3, #5
 80041ae:	d10c      	bne.n	80041ca <HAL_RCC_OscConfig+0x35e>
 80041b0:	4b61      	ldr	r3, [pc, #388]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b4:	4a60      	ldr	r2, [pc, #384]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80041b6:	f043 0304 	orr.w	r3, r3, #4
 80041ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80041bc:	4b5e      	ldr	r3, [pc, #376]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c0:	4a5d      	ldr	r2, [pc, #372]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c8:	e00b      	b.n	80041e2 <HAL_RCC_OscConfig+0x376>
 80041ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ce:	4a5a      	ldr	r2, [pc, #360]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041d6:	4b58      	ldr	r3, [pc, #352]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041da:	4a57      	ldr	r2, [pc, #348]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80041dc:	f023 0304 	bic.w	r3, r3, #4
 80041e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d015      	beq.n	8004216 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ea:	f7fd fc89 	bl	8001b00 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f0:	e00a      	b.n	8004208 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f2:	f7fd fc85 	bl	8001b00 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004200:	4293      	cmp	r3, r2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e0ce      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004208:	4b4b      	ldr	r3, [pc, #300]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0ee      	beq.n	80041f2 <HAL_RCC_OscConfig+0x386>
 8004214:	e014      	b.n	8004240 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004216:	f7fd fc73 	bl	8001b00 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800421c:	e00a      	b.n	8004234 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421e:	f7fd fc6f 	bl	8001b00 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e0b8      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004234:	4b40      	ldr	r3, [pc, #256]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1ee      	bne.n	800421e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004240:	7dfb      	ldrb	r3, [r7, #23]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d105      	bne.n	8004252 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004246:	4b3c      	ldr	r3, [pc, #240]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	4a3b      	ldr	r2, [pc, #236]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 800424c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004250:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 80a4 	beq.w	80043a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800425c:	4b36      	ldr	r3, [pc, #216]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b08      	cmp	r3, #8
 8004266:	d06b      	beq.n	8004340 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d149      	bne.n	8004304 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004270:	4b31      	ldr	r3, [pc, #196]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a30      	ldr	r2, [pc, #192]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 8004276:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800427a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7fd fc40 	bl	8001b00 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004284:	f7fd fc3c 	bl	8001b00 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e087      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004296:	4b28      	ldr	r3, [pc, #160]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69da      	ldr	r2, [r3, #28]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	019b      	lsls	r3, r3, #6
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b8:	085b      	lsrs	r3, r3, #1
 80042ba:	3b01      	subs	r3, #1
 80042bc:	041b      	lsls	r3, r3, #16
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c4:	061b      	lsls	r3, r3, #24
 80042c6:	4313      	orrs	r3, r2
 80042c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80042ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d0:	4b19      	ldr	r3, [pc, #100]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a18      	ldr	r2, [pc, #96]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80042d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fd fc10 	bl	8001b00 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fd fc0c 	bl	8001b00 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e057      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f6:	4b10      	ldr	r3, [pc, #64]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x478>
 8004302:	e04f      	b.n	80043a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004304:	4b0c      	ldr	r3, [pc, #48]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a0b      	ldr	r2, [pc, #44]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 800430a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800430e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fd fbf6 	bl	8001b00 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004318:	f7fd fbf2 	bl	8001b00 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e03d      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432a:	4b03      	ldr	r3, [pc, #12]	@ (8004338 <HAL_RCC_OscConfig+0x4cc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x4ac>
 8004336:	e035      	b.n	80043a4 <HAL_RCC_OscConfig+0x538>
 8004338:	40023800 	.word	0x40023800
 800433c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004340:	4b1b      	ldr	r3, [pc, #108]	@ (80043b0 <HAL_RCC_OscConfig+0x544>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d028      	beq.n	80043a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004358:	429a      	cmp	r2, r3
 800435a:	d121      	bne.n	80043a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004366:	429a      	cmp	r2, r3
 8004368:	d11a      	bne.n	80043a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004370:	4013      	ands	r3, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004376:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004378:	4293      	cmp	r3, r2
 800437a:	d111      	bne.n	80043a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004386:	085b      	lsrs	r3, r3, #1
 8004388:	3b01      	subs	r3, #1
 800438a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800438c:	429a      	cmp	r2, r3
 800438e:	d107      	bne.n	80043a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800

080043b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0d0      	b.n	800456e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043cc:	4b6a      	ldr	r3, [pc, #424]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d910      	bls.n	80043fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043da:	4b67      	ldr	r3, [pc, #412]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 020f 	bic.w	r2, r3, #15
 80043e2:	4965      	ldr	r1, [pc, #404]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ea:	4b63      	ldr	r3, [pc, #396]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d001      	beq.n	80043fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0b8      	b.n	800456e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d020      	beq.n	800444a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004414:	4b59      	ldr	r3, [pc, #356]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4a58      	ldr	r2, [pc, #352]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 800441a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800441e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800442c:	4b53      	ldr	r3, [pc, #332]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	4a52      	ldr	r2, [pc, #328]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004432:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004436:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004438:	4b50      	ldr	r3, [pc, #320]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	494d      	ldr	r1, [pc, #308]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d040      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d107      	bne.n	800446e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445e:	4b47      	ldr	r3, [pc, #284]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d115      	bne.n	8004496 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e07f      	b.n	800456e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d107      	bne.n	8004486 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004476:	4b41      	ldr	r3, [pc, #260]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e073      	b.n	800456e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004486:	4b3d      	ldr	r3, [pc, #244]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e06b      	b.n	800456e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004496:	4b39      	ldr	r3, [pc, #228]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f023 0203 	bic.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4936      	ldr	r1, [pc, #216]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a8:	f7fd fb2a 	bl	8001b00 <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ae:	e00a      	b.n	80044c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b0:	f7fd fb26 	bl	8001b00 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e053      	b.n	800456e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	4b2d      	ldr	r3, [pc, #180]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 020c 	and.w	r2, r3, #12
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d1eb      	bne.n	80044b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044d8:	4b27      	ldr	r3, [pc, #156]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d210      	bcs.n	8004508 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b24      	ldr	r3, [pc, #144]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 020f 	bic.w	r2, r3, #15
 80044ee:	4922      	ldr	r1, [pc, #136]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f6:	4b20      	ldr	r3, [pc, #128]	@ (8004578 <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e032      	b.n	800456e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004514:	4b19      	ldr	r3, [pc, #100]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4916      	ldr	r1, [pc, #88]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004532:	4b12      	ldr	r3, [pc, #72]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	490e      	ldr	r1, [pc, #56]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004546:	f000 f821 	bl	800458c <HAL_RCC_GetSysClockFreq>
 800454a:	4602      	mov	r2, r0
 800454c:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <HAL_RCC_ClockConfig+0x1c8>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	490a      	ldr	r1, [pc, #40]	@ (8004580 <HAL_RCC_ClockConfig+0x1cc>)
 8004558:	5ccb      	ldrb	r3, [r1, r3]
 800455a:	fa22 f303 	lsr.w	r3, r2, r3
 800455e:	4a09      	ldr	r2, [pc, #36]	@ (8004584 <HAL_RCC_ClockConfig+0x1d0>)
 8004560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004562:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <HAL_RCC_ClockConfig+0x1d4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7fd f8ec 	bl	8001744 <HAL_InitTick>

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40023c00 	.word	0x40023c00
 800457c:	40023800 	.word	0x40023800
 8004580:	0800be28 	.word	0x0800be28
 8004584:	20000000 	.word	0x20000000
 8004588:	20000004 	.word	0x20000004

0800458c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800458c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004590:	b094      	sub	sp, #80	@ 0x50
 8004592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	647b      	str	r3, [r7, #68]	@ 0x44
 8004598:	2300      	movs	r3, #0
 800459a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800459c:	2300      	movs	r3, #0
 800459e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045a4:	4b79      	ldr	r3, [pc, #484]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 030c 	and.w	r3, r3, #12
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d00d      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x40>
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	f200 80e1 	bhi.w	8004778 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x34>
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d003      	beq.n	80045c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045be:	e0db      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045c0:	4b73      	ldr	r3, [pc, #460]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x204>)
 80045c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045c4:	e0db      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045c6:	4b73      	ldr	r3, [pc, #460]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x208>)
 80045c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045ca:	e0d8      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045cc:	4b6f      	ldr	r3, [pc, #444]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045d6:	4b6d      	ldr	r3, [pc, #436]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d063      	beq.n	80046aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e2:	4b6a      	ldr	r3, [pc, #424]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	099b      	lsrs	r3, r3, #6
 80045e8:	2200      	movs	r2, #0
 80045ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80045ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80045f6:	2300      	movs	r3, #0
 80045f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80045fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80045fe:	4622      	mov	r2, r4
 8004600:	462b      	mov	r3, r5
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	0159      	lsls	r1, r3, #5
 800460c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004610:	0150      	lsls	r0, r2, #5
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4621      	mov	r1, r4
 8004618:	1a51      	subs	r1, r2, r1
 800461a:	6139      	str	r1, [r7, #16]
 800461c:	4629      	mov	r1, r5
 800461e:	eb63 0301 	sbc.w	r3, r3, r1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004630:	4659      	mov	r1, fp
 8004632:	018b      	lsls	r3, r1, #6
 8004634:	4651      	mov	r1, sl
 8004636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800463a:	4651      	mov	r1, sl
 800463c:	018a      	lsls	r2, r1, #6
 800463e:	4651      	mov	r1, sl
 8004640:	ebb2 0801 	subs.w	r8, r2, r1
 8004644:	4659      	mov	r1, fp
 8004646:	eb63 0901 	sbc.w	r9, r3, r1
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800465a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800465e:	4690      	mov	r8, r2
 8004660:	4699      	mov	r9, r3
 8004662:	4623      	mov	r3, r4
 8004664:	eb18 0303 	adds.w	r3, r8, r3
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	462b      	mov	r3, r5
 800466c:	eb49 0303 	adc.w	r3, r9, r3
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800467e:	4629      	mov	r1, r5
 8004680:	024b      	lsls	r3, r1, #9
 8004682:	4621      	mov	r1, r4
 8004684:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004688:	4621      	mov	r1, r4
 800468a:	024a      	lsls	r2, r1, #9
 800468c:	4610      	mov	r0, r2
 800468e:	4619      	mov	r1, r3
 8004690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004692:	2200      	movs	r2, #0
 8004694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004696:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004698:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800469c:	f7fc fafc 	bl	8000c98 <__aeabi_uldivmod>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4613      	mov	r3, r2
 80046a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a8:	e058      	b.n	800475c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046aa:	4b38      	ldr	r3, [pc, #224]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	099b      	lsrs	r3, r3, #6
 80046b0:	2200      	movs	r2, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	4611      	mov	r1, r2
 80046b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046ba:	623b      	str	r3, [r7, #32]
 80046bc:	2300      	movs	r3, #0
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046c4:	4642      	mov	r2, r8
 80046c6:	464b      	mov	r3, r9
 80046c8:	f04f 0000 	mov.w	r0, #0
 80046cc:	f04f 0100 	mov.w	r1, #0
 80046d0:	0159      	lsls	r1, r3, #5
 80046d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046d6:	0150      	lsls	r0, r2, #5
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4641      	mov	r1, r8
 80046de:	ebb2 0a01 	subs.w	sl, r2, r1
 80046e2:	4649      	mov	r1, r9
 80046e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004700:	eb63 050b 	sbc.w	r5, r3, fp
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	00eb      	lsls	r3, r5, #3
 800470e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004712:	00e2      	lsls	r2, r4, #3
 8004714:	4614      	mov	r4, r2
 8004716:	461d      	mov	r5, r3
 8004718:	4643      	mov	r3, r8
 800471a:	18e3      	adds	r3, r4, r3
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	464b      	mov	r3, r9
 8004720:	eb45 0303 	adc.w	r3, r5, r3
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004732:	4629      	mov	r1, r5
 8004734:	028b      	lsls	r3, r1, #10
 8004736:	4621      	mov	r1, r4
 8004738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800473c:	4621      	mov	r1, r4
 800473e:	028a      	lsls	r2, r1, #10
 8004740:	4610      	mov	r0, r2
 8004742:	4619      	mov	r1, r3
 8004744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004746:	2200      	movs	r2, #0
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	61fa      	str	r2, [r7, #28]
 800474c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004750:	f7fc faa2 	bl	8000c98 <__aeabi_uldivmod>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4613      	mov	r3, r2
 800475a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800475c:	4b0b      	ldr	r3, [pc, #44]	@ (800478c <HAL_RCC_GetSysClockFreq+0x200>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	3301      	adds	r3, #1
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800476c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800476e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004776:	e002      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004778:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x204>)
 800477a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800477c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800477e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004780:	4618      	mov	r0, r3
 8004782:	3750      	adds	r7, #80	@ 0x50
 8004784:	46bd      	mov	sp, r7
 8004786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
 8004790:	00f42400 	.word	0x00f42400
 8004794:	007a1200 	.word	0x007a1200

08004798 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800479c:	4b03      	ldr	r3, [pc, #12]	@ (80047ac <HAL_RCC_GetHCLKFreq+0x14>)
 800479e:	681b      	ldr	r3, [r3, #0]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20000000 	.word	0x20000000

080047b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047b4:	f7ff fff0 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b05      	ldr	r3, [pc, #20]	@ (80047d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	0a9b      	lsrs	r3, r3, #10
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	4903      	ldr	r1, [pc, #12]	@ (80047d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047c6:	5ccb      	ldrb	r3, [r1, r3]
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40023800 	.word	0x40023800
 80047d4:	0800be38 	.word	0x0800be38

080047d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047dc:	f7ff ffdc 	bl	8004798 <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	0b5b      	lsrs	r3, r3, #13
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4903      	ldr	r1, [pc, #12]	@ (80047fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40023800 	.word	0x40023800
 80047fc:	0800be38 	.word	0x0800be38

08004800 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	220f      	movs	r2, #15
 800480e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004810:	4b12      	ldr	r3, [pc, #72]	@ (800485c <HAL_RCC_GetClockConfig+0x5c>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0203 	and.w	r2, r3, #3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800481c:	4b0f      	ldr	r3, [pc, #60]	@ (800485c <HAL_RCC_GetClockConfig+0x5c>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004828:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <HAL_RCC_GetClockConfig+0x5c>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004834:	4b09      	ldr	r3, [pc, #36]	@ (800485c <HAL_RCC_GetClockConfig+0x5c>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	08db      	lsrs	r3, r3, #3
 800483a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004842:	4b07      	ldr	r3, [pc, #28]	@ (8004860 <HAL_RCC_GetClockConfig+0x60>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 020f 	and.w	r2, r3, #15
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	601a      	str	r2, [r3, #0]
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40023800 	.word	0x40023800
 8004860:	40023c00 	.word	0x40023c00

08004864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d012      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004888:	4b65      	ldr	r3, [pc, #404]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4a64      	ldr	r2, [pc, #400]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800488e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004892:	6093      	str	r3, [r2, #8]
 8004894:	4b62      	ldr	r3, [pc, #392]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489c:	4960      	ldr	r1, [pc, #384]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80048aa:	2301      	movs	r3, #1
 80048ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d017      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048ba:	4b59      	ldr	r3, [pc, #356]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c8:	4955      	ldr	r1, [pc, #340]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048d8:	d101      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80048da:	2301      	movs	r3, #1
 80048dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80048e6:	2301      	movs	r3, #1
 80048e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d017      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	4946      	ldr	r1, [pc, #280]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004910:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004914:	d101      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8004916:	2301      	movs	r3, #1
 8004918:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8004922:	2301      	movs	r3, #1
 8004924:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 808b 	beq.w	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004934:	4b3a      	ldr	r3, [pc, #232]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004938:	4a39      	ldr	r2, [pc, #228]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800493a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800493e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004940:	4b37      	ldr	r3, [pc, #220]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800494c:	4b35      	ldr	r3, [pc, #212]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a34      	ldr	r2, [pc, #208]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004958:	f7fd f8d2 	bl	8001b00 <HAL_GetTick>
 800495c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004960:	f7fd f8ce 	bl	8001b00 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	@ 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e2bc      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004972:	4b2c      	ldr	r3, [pc, #176]	@ (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800497e:	4b28      	ldr	r3, [pc, #160]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004986:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d035      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	429a      	cmp	r2, r3
 800499a:	d02e      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800499c:	4b20      	ldr	r3, [pc, #128]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049b0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80049be:	4a18      	ldr	r2, [pc, #96]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049c4:	4b16      	ldr	r3, [pc, #88]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d114      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d0:	f7fd f896 	bl	8001b00 <HAL_GetTick>
 80049d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d6:	e00a      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d8:	f7fd f892 	bl	8001b00 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e27e      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0ee      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a06:	d111      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004a08:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004a14:	4b04      	ldr	r3, [pc, #16]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004a16:	400b      	ands	r3, r1
 8004a18:	4901      	ldr	r1, [pc, #4]	@ (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
 8004a1e:	e00b      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40007000 	.word	0x40007000
 8004a28:	0ffffcff 	.word	0x0ffffcff
 8004a2c:	4ba4      	ldr	r3, [pc, #656]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	4aa3      	ldr	r2, [pc, #652]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a32:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004a36:	6093      	str	r3, [r2, #8]
 8004a38:	4ba1      	ldr	r3, [pc, #644]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a44:	499e      	ldr	r1, [pc, #632]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d010      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a56:	4b9a      	ldr	r3, [pc, #616]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a5c:	4a98      	ldr	r2, [pc, #608]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004a66:	4b96      	ldr	r3, [pc, #600]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a68:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a70:	4993      	ldr	r1, [pc, #588]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a84:	4b8e      	ldr	r3, [pc, #568]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a92:	498b      	ldr	r1, [pc, #556]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004aa6:	4b86      	ldr	r3, [pc, #536]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab4:	4982      	ldr	r1, [pc, #520]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ac8:	4b7d      	ldr	r3, [pc, #500]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ace:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ad6:	497a      	ldr	r1, [pc, #488]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004aea:	4b75      	ldr	r3, [pc, #468]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af0:	f023 0203 	bic.w	r2, r3, #3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af8:	4971      	ldr	r1, [pc, #452]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b0c:	4b6c      	ldr	r3, [pc, #432]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b12:	f023 020c 	bic.w	r2, r3, #12
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	4969      	ldr	r1, [pc, #420]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b2e:	4b64      	ldr	r3, [pc, #400]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3c:	4960      	ldr	r1, [pc, #384]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b50:	4b5b      	ldr	r3, [pc, #364]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b5e:	4958      	ldr	r1, [pc, #352]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b72:	4b53      	ldr	r3, [pc, #332]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b80:	494f      	ldr	r1, [pc, #316]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b94:	4b4a      	ldr	r3, [pc, #296]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba2:	4947      	ldr	r1, [pc, #284]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004bb6:	4b42      	ldr	r3, [pc, #264]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bbc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc4:	493e      	ldr	r1, [pc, #248]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004bd8:	4b39      	ldr	r3, [pc, #228]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bde:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be6:	4936      	ldr	r1, [pc, #216]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d011      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004bfa:	4b31      	ldr	r3, [pc, #196]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c00:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c08:	492d      	ldr	r1, [pc, #180]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c18:	d101      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c2a:	4b25      	ldr	r3, [pc, #148]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c30:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c38:	4921      	ldr	r1, [pc, #132]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c52:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c5a:	4919      	ldr	r1, [pc, #100]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004c6e:	4b14      	ldr	r3, [pc, #80]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c74:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c7c:	4910      	ldr	r1, [pc, #64]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d006      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 809d 	beq.w	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c98:	4b09      	ldr	r3, [pc, #36]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a08      	ldr	r2, [pc, #32]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca4:	f7fc ff2c 	bl	8001b00 <HAL_GetTick>
 8004ca8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004caa:	e00b      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cac:	f7fc ff28 	bl	8001b00 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	@ 0x64
 8004cb8:	d904      	bls.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e116      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004cbe:	bf00      	nop
 8004cc0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cc4:	4b8b      	ldr	r3, [pc, #556]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1ed      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d017      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d113      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ce4:	4b83      	ldr	r3, [pc, #524]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cea:	0e1b      	lsrs	r3, r3, #24
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	019a      	lsls	r2, r3, #6
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	061b      	lsls	r3, r3, #24
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	071b      	lsls	r3, r3, #28
 8004d04:	497b      	ldr	r1, [pc, #492]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d004      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d20:	d00a      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d024      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d36:	d11f      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d38:	4b6e      	ldr	r3, [pc, #440]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d3e:	0f1b      	lsrs	r3, r3, #28
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	019a      	lsls	r2, r3, #6
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	061b      	lsls	r3, r3, #24
 8004d52:	431a      	orrs	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	071b      	lsls	r3, r3, #28
 8004d58:	4966      	ldr	r1, [pc, #408]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d60:	4b64      	ldr	r3, [pc, #400]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d66:	f023 021f 	bic.w	r2, r3, #31
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	4960      	ldr	r1, [pc, #384]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00d      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	019a      	lsls	r2, r3, #6
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	061b      	lsls	r3, r3, #24
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	071b      	lsls	r3, r3, #28
 8004d98:	4956      	ldr	r1, [pc, #344]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004da0:	4b54      	ldr	r3, [pc, #336]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a53      	ldr	r2, [pc, #332]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004da6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dac:	f7fc fea8 	bl	8001b00 <HAL_GetTick>
 8004db0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004db4:	f7fc fea4 	bl	8001b00 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b64      	cmp	r3, #100	@ 0x64
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e092      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dc6:	4b4b      	ldr	r3, [pc, #300]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0f0      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	f040 8088 	bne.w	8004eea <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004dda:	4b46      	ldr	r3, [pc, #280]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a45      	ldr	r2, [pc, #276]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de6:	f7fc fe8b 	bl	8001b00 <HAL_GetTick>
 8004dea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004dec:	e008      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004dee:	f7fc fe87 	bl	8001b00 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b64      	cmp	r3, #100	@ 0x64
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e075      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e00:	4b3c      	ldr	r3, [pc, #240]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e0c:	d0ef      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d009      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d024      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d120      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e36:	4b2f      	ldr	r3, [pc, #188]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3c:	0c1b      	lsrs	r3, r3, #16
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	019a      	lsls	r2, r3, #6
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	041b      	lsls	r3, r3, #16
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	061b      	lsls	r3, r3, #24
 8004e56:	4927      	ldr	r1, [pc, #156]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e5e:	4b25      	ldr	r3, [pc, #148]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e64:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	4920      	ldr	r1, [pc, #128]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d018      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e8c:	d113      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e8e:	4b19      	ldr	r3, [pc, #100]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e94:	0e1b      	lsrs	r3, r3, #24
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	019a      	lsls	r2, r3, #6
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	041b      	lsls	r3, r3, #16
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	061b      	lsls	r3, r3, #24
 8004eae:	4911      	ldr	r1, [pc, #68]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a0e      	ldr	r2, [pc, #56]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec2:	f7fc fe1d 	bl	8001b00 <HAL_GetTick>
 8004ec6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004eca:	f7fc fe19 	bl	8001b00 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b64      	cmp	r3, #100	@ 0x64
 8004ed6:	d901      	bls.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e007      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004edc:	4b05      	ldr	r3, [pc, #20]	@ (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ee8:	d1ef      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40023800 	.word	0x40023800

08004ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e049      	b.n	8004f9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f841 	bl	8004fa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3304      	adds	r3, #4
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f000 f9e8 	bl	800530c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d001      	beq.n	8004fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e054      	b.n	800507e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a26      	ldr	r2, [pc, #152]	@ (800508c <HAL_TIM_Base_Start_IT+0xd0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d022      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x80>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ffe:	d01d      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x80>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a22      	ldr	r2, [pc, #136]	@ (8005090 <HAL_TIM_Base_Start_IT+0xd4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d018      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x80>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a21      	ldr	r2, [pc, #132]	@ (8005094 <HAL_TIM_Base_Start_IT+0xd8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d013      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x80>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1f      	ldr	r2, [pc, #124]	@ (8005098 <HAL_TIM_Base_Start_IT+0xdc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00e      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x80>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1e      	ldr	r2, [pc, #120]	@ (800509c <HAL_TIM_Base_Start_IT+0xe0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d009      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x80>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1c      	ldr	r2, [pc, #112]	@ (80050a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d004      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x80>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1b      	ldr	r2, [pc, #108]	@ (80050a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d115      	bne.n	8005068 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	4b19      	ldr	r3, [pc, #100]	@ (80050a8 <HAL_TIM_Base_Start_IT+0xec>)
 8005044:	4013      	ands	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b06      	cmp	r3, #6
 800504c:	d015      	beq.n	800507a <HAL_TIM_Base_Start_IT+0xbe>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005054:	d011      	beq.n	800507a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0201 	orr.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005066:	e008      	b.n	800507a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	e000      	b.n	800507c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40010000 	.word	0x40010000
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800
 8005098:	40000c00 	.word	0x40000c00
 800509c:	40010400 	.word	0x40010400
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40001800 	.word	0x40001800
 80050a8:	00010007 	.word	0x00010007

080050ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d020      	beq.n	8005110 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01b      	beq.n	8005110 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f06f 0202 	mvn.w	r2, #2
 80050e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f8e9 	bl	80052ce <HAL_TIM_IC_CaptureCallback>
 80050fc:	e005      	b.n	800510a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f8db 	bl	80052ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f8ec 	bl	80052e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d020      	beq.n	800515c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01b      	beq.n	800515c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0204 	mvn.w	r2, #4
 800512c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f8c3 	bl	80052ce <HAL_TIM_IC_CaptureCallback>
 8005148:	e005      	b.n	8005156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f8b5 	bl	80052ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f8c6 	bl	80052e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d020      	beq.n	80051a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01b      	beq.n	80051a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0208 	mvn.w	r2, #8
 8005178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2204      	movs	r2, #4
 800517e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f89d 	bl	80052ce <HAL_TIM_IC_CaptureCallback>
 8005194:	e005      	b.n	80051a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f88f 	bl	80052ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f8a0 	bl	80052e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0310 	and.w	r3, r3, #16
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d020      	beq.n	80051f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01b      	beq.n	80051f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0210 	mvn.w	r2, #16
 80051c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2208      	movs	r2, #8
 80051ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f877 	bl	80052ce <HAL_TIM_IC_CaptureCallback>
 80051e0:	e005      	b.n	80051ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f869 	bl	80052ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f87a 	bl	80052e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00c      	beq.n	8005218 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d007      	beq.n	8005218 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0201 	mvn.w	r2, #1
 8005210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fc f988 	bl	8001528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800521e:	2b00      	cmp	r3, #0
 8005220:	d104      	bne.n	800522c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00c      	beq.n	8005246 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005232:	2b00      	cmp	r3, #0
 8005234:	d007      	beq.n	8005246 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800523e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f919 	bl	8005478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00c      	beq.n	800526a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f911 	bl	800548c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00c      	beq.n	800528e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f834 	bl	80052f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00c      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f06f 0220 	mvn.w	r2, #32
 80052aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f8d9 	bl	8005464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052b2:	bf00      	nop
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
	...

0800530c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a46      	ldr	r2, [pc, #280]	@ (8005438 <TIM_Base_SetConfig+0x12c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d013      	beq.n	800534c <TIM_Base_SetConfig+0x40>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800532a:	d00f      	beq.n	800534c <TIM_Base_SetConfig+0x40>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a43      	ldr	r2, [pc, #268]	@ (800543c <TIM_Base_SetConfig+0x130>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00b      	beq.n	800534c <TIM_Base_SetConfig+0x40>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a42      	ldr	r2, [pc, #264]	@ (8005440 <TIM_Base_SetConfig+0x134>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d007      	beq.n	800534c <TIM_Base_SetConfig+0x40>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a41      	ldr	r2, [pc, #260]	@ (8005444 <TIM_Base_SetConfig+0x138>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d003      	beq.n	800534c <TIM_Base_SetConfig+0x40>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a40      	ldr	r2, [pc, #256]	@ (8005448 <TIM_Base_SetConfig+0x13c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d108      	bne.n	800535e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a35      	ldr	r2, [pc, #212]	@ (8005438 <TIM_Base_SetConfig+0x12c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d02b      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800536c:	d027      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a32      	ldr	r2, [pc, #200]	@ (800543c <TIM_Base_SetConfig+0x130>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d023      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a31      	ldr	r2, [pc, #196]	@ (8005440 <TIM_Base_SetConfig+0x134>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d01f      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a30      	ldr	r2, [pc, #192]	@ (8005444 <TIM_Base_SetConfig+0x138>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d01b      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a2f      	ldr	r2, [pc, #188]	@ (8005448 <TIM_Base_SetConfig+0x13c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d017      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a2e      	ldr	r2, [pc, #184]	@ (800544c <TIM_Base_SetConfig+0x140>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2d      	ldr	r2, [pc, #180]	@ (8005450 <TIM_Base_SetConfig+0x144>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00f      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005454 <TIM_Base_SetConfig+0x148>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00b      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005458 <TIM_Base_SetConfig+0x14c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d007      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2a      	ldr	r2, [pc, #168]	@ (800545c <TIM_Base_SetConfig+0x150>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d003      	beq.n	80053be <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a29      	ldr	r2, [pc, #164]	@ (8005460 <TIM_Base_SetConfig+0x154>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d108      	bne.n	80053d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a10      	ldr	r2, [pc, #64]	@ (8005438 <TIM_Base_SetConfig+0x12c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_Base_SetConfig+0xf8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a12      	ldr	r2, [pc, #72]	@ (8005448 <TIM_Base_SetConfig+0x13c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d103      	bne.n	800540c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b01      	cmp	r3, #1
 800541c:	d105      	bne.n	800542a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f023 0201 	bic.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	611a      	str	r2, [r3, #16]
  }
}
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40010000 	.word	0x40010000
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40010400 	.word	0x40010400
 800544c:	40014000 	.word	0x40014000
 8005450:	40014400 	.word	0x40014400
 8005454:	40014800 	.word	0x40014800
 8005458:	40001800 	.word	0x40001800
 800545c:	40001c00 	.word	0x40001c00
 8005460:	40002000 	.word	0x40002000

08005464 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e040      	b.n	8005534 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fc f8de 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2224      	movs	r2, #36	@ 0x24
 80054cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0201 	bic.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fb16 	bl	8005b18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f8af 	bl	8005650 <UART_SetConfig>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e01b      	b.n	8005534 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800550a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800551a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f042 0201 	orr.w	r2, r2, #1
 800552a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fb95 	bl	8005c5c <UART_CheckIdleState>
 8005532:	4603      	mov	r3, r0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	@ 0x28
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	4613      	mov	r3, r2
 800554a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005550:	2b20      	cmp	r3, #32
 8005552:	d177      	bne.n	8005644 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_UART_Transmit+0x24>
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e070      	b.n	8005646 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2221      	movs	r2, #33	@ 0x21
 8005570:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005572:	f7fc fac5 	bl	8001b00 <HAL_GetTick>
 8005576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	88fa      	ldrh	r2, [r7, #6]
 800557c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	88fa      	ldrh	r2, [r7, #6]
 8005584:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005590:	d108      	bne.n	80055a4 <HAL_UART_Transmit+0x68>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d104      	bne.n	80055a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	61bb      	str	r3, [r7, #24]
 80055a2:	e003      	b.n	80055ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055a8:	2300      	movs	r3, #0
 80055aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055ac:	e02f      	b.n	800560e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2200      	movs	r2, #0
 80055b6:	2180      	movs	r1, #128	@ 0x80
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 fba6 	bl	8005d0a <UART_WaitOnFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e03b      	b.n	8005646 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10b      	bne.n	80055ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	3302      	adds	r3, #2
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	e007      	b.n	80055fc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	781a      	ldrb	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	3301      	adds	r3, #1
 80055fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b01      	subs	r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1c9      	bne.n	80055ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2200      	movs	r2, #0
 8005622:	2140      	movs	r1, #64	@ 0x40
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 fb70 	bl	8005d0a <UART_WaitOnFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d004      	beq.n	800563a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e005      	b.n	8005646 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2220      	movs	r2, #32
 800563e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	e000      	b.n	8005646 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005644:	2302      	movs	r3, #2
  }
}
 8005646:	4618      	mov	r0, r3
 8005648:	3720      	adds	r7, #32
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005658:	2300      	movs	r3, #0
 800565a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	4ba6      	ldr	r3, [pc, #664]	@ (8005914 <UART_SetConfig+0x2c4>)
 800567c:	4013      	ands	r3, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	6979      	ldr	r1, [r7, #20]
 8005684:	430b      	orrs	r3, r1
 8005686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	430a      	orrs	r2, r1
 80056c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a94      	ldr	r2, [pc, #592]	@ (8005918 <UART_SetConfig+0x2c8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d120      	bne.n	800570e <UART_SetConfig+0xbe>
 80056cc:	4b93      	ldr	r3, [pc, #588]	@ (800591c <UART_SetConfig+0x2cc>)
 80056ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d816      	bhi.n	8005708 <UART_SetConfig+0xb8>
 80056da:	a201      	add	r2, pc, #4	@ (adr r2, 80056e0 <UART_SetConfig+0x90>)
 80056dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e0:	080056f1 	.word	0x080056f1
 80056e4:	080056fd 	.word	0x080056fd
 80056e8:	080056f7 	.word	0x080056f7
 80056ec:	08005703 	.word	0x08005703
 80056f0:	2301      	movs	r3, #1
 80056f2:	77fb      	strb	r3, [r7, #31]
 80056f4:	e150      	b.n	8005998 <UART_SetConfig+0x348>
 80056f6:	2302      	movs	r3, #2
 80056f8:	77fb      	strb	r3, [r7, #31]
 80056fa:	e14d      	b.n	8005998 <UART_SetConfig+0x348>
 80056fc:	2304      	movs	r3, #4
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e14a      	b.n	8005998 <UART_SetConfig+0x348>
 8005702:	2308      	movs	r3, #8
 8005704:	77fb      	strb	r3, [r7, #31]
 8005706:	e147      	b.n	8005998 <UART_SetConfig+0x348>
 8005708:	2310      	movs	r3, #16
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e144      	b.n	8005998 <UART_SetConfig+0x348>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a83      	ldr	r2, [pc, #524]	@ (8005920 <UART_SetConfig+0x2d0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d132      	bne.n	800577e <UART_SetConfig+0x12e>
 8005718:	4b80      	ldr	r3, [pc, #512]	@ (800591c <UART_SetConfig+0x2cc>)
 800571a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571e:	f003 030c 	and.w	r3, r3, #12
 8005722:	2b0c      	cmp	r3, #12
 8005724:	d828      	bhi.n	8005778 <UART_SetConfig+0x128>
 8005726:	a201      	add	r2, pc, #4	@ (adr r2, 800572c <UART_SetConfig+0xdc>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	08005761 	.word	0x08005761
 8005730:	08005779 	.word	0x08005779
 8005734:	08005779 	.word	0x08005779
 8005738:	08005779 	.word	0x08005779
 800573c:	0800576d 	.word	0x0800576d
 8005740:	08005779 	.word	0x08005779
 8005744:	08005779 	.word	0x08005779
 8005748:	08005779 	.word	0x08005779
 800574c:	08005767 	.word	0x08005767
 8005750:	08005779 	.word	0x08005779
 8005754:	08005779 	.word	0x08005779
 8005758:	08005779 	.word	0x08005779
 800575c:	08005773 	.word	0x08005773
 8005760:	2300      	movs	r3, #0
 8005762:	77fb      	strb	r3, [r7, #31]
 8005764:	e118      	b.n	8005998 <UART_SetConfig+0x348>
 8005766:	2302      	movs	r3, #2
 8005768:	77fb      	strb	r3, [r7, #31]
 800576a:	e115      	b.n	8005998 <UART_SetConfig+0x348>
 800576c:	2304      	movs	r3, #4
 800576e:	77fb      	strb	r3, [r7, #31]
 8005770:	e112      	b.n	8005998 <UART_SetConfig+0x348>
 8005772:	2308      	movs	r3, #8
 8005774:	77fb      	strb	r3, [r7, #31]
 8005776:	e10f      	b.n	8005998 <UART_SetConfig+0x348>
 8005778:	2310      	movs	r3, #16
 800577a:	77fb      	strb	r3, [r7, #31]
 800577c:	e10c      	b.n	8005998 <UART_SetConfig+0x348>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a68      	ldr	r2, [pc, #416]	@ (8005924 <UART_SetConfig+0x2d4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d120      	bne.n	80057ca <UART_SetConfig+0x17a>
 8005788:	4b64      	ldr	r3, [pc, #400]	@ (800591c <UART_SetConfig+0x2cc>)
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800578e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005792:	2b30      	cmp	r3, #48	@ 0x30
 8005794:	d013      	beq.n	80057be <UART_SetConfig+0x16e>
 8005796:	2b30      	cmp	r3, #48	@ 0x30
 8005798:	d814      	bhi.n	80057c4 <UART_SetConfig+0x174>
 800579a:	2b20      	cmp	r3, #32
 800579c:	d009      	beq.n	80057b2 <UART_SetConfig+0x162>
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d810      	bhi.n	80057c4 <UART_SetConfig+0x174>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <UART_SetConfig+0x15c>
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d006      	beq.n	80057b8 <UART_SetConfig+0x168>
 80057aa:	e00b      	b.n	80057c4 <UART_SetConfig+0x174>
 80057ac:	2300      	movs	r3, #0
 80057ae:	77fb      	strb	r3, [r7, #31]
 80057b0:	e0f2      	b.n	8005998 <UART_SetConfig+0x348>
 80057b2:	2302      	movs	r3, #2
 80057b4:	77fb      	strb	r3, [r7, #31]
 80057b6:	e0ef      	b.n	8005998 <UART_SetConfig+0x348>
 80057b8:	2304      	movs	r3, #4
 80057ba:	77fb      	strb	r3, [r7, #31]
 80057bc:	e0ec      	b.n	8005998 <UART_SetConfig+0x348>
 80057be:	2308      	movs	r3, #8
 80057c0:	77fb      	strb	r3, [r7, #31]
 80057c2:	e0e9      	b.n	8005998 <UART_SetConfig+0x348>
 80057c4:	2310      	movs	r3, #16
 80057c6:	77fb      	strb	r3, [r7, #31]
 80057c8:	e0e6      	b.n	8005998 <UART_SetConfig+0x348>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a56      	ldr	r2, [pc, #344]	@ (8005928 <UART_SetConfig+0x2d8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d120      	bne.n	8005816 <UART_SetConfig+0x1c6>
 80057d4:	4b51      	ldr	r3, [pc, #324]	@ (800591c <UART_SetConfig+0x2cc>)
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057de:	2bc0      	cmp	r3, #192	@ 0xc0
 80057e0:	d013      	beq.n	800580a <UART_SetConfig+0x1ba>
 80057e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80057e4:	d814      	bhi.n	8005810 <UART_SetConfig+0x1c0>
 80057e6:	2b80      	cmp	r3, #128	@ 0x80
 80057e8:	d009      	beq.n	80057fe <UART_SetConfig+0x1ae>
 80057ea:	2b80      	cmp	r3, #128	@ 0x80
 80057ec:	d810      	bhi.n	8005810 <UART_SetConfig+0x1c0>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <UART_SetConfig+0x1a8>
 80057f2:	2b40      	cmp	r3, #64	@ 0x40
 80057f4:	d006      	beq.n	8005804 <UART_SetConfig+0x1b4>
 80057f6:	e00b      	b.n	8005810 <UART_SetConfig+0x1c0>
 80057f8:	2300      	movs	r3, #0
 80057fa:	77fb      	strb	r3, [r7, #31]
 80057fc:	e0cc      	b.n	8005998 <UART_SetConfig+0x348>
 80057fe:	2302      	movs	r3, #2
 8005800:	77fb      	strb	r3, [r7, #31]
 8005802:	e0c9      	b.n	8005998 <UART_SetConfig+0x348>
 8005804:	2304      	movs	r3, #4
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e0c6      	b.n	8005998 <UART_SetConfig+0x348>
 800580a:	2308      	movs	r3, #8
 800580c:	77fb      	strb	r3, [r7, #31]
 800580e:	e0c3      	b.n	8005998 <UART_SetConfig+0x348>
 8005810:	2310      	movs	r3, #16
 8005812:	77fb      	strb	r3, [r7, #31]
 8005814:	e0c0      	b.n	8005998 <UART_SetConfig+0x348>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a44      	ldr	r2, [pc, #272]	@ (800592c <UART_SetConfig+0x2dc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d125      	bne.n	800586c <UART_SetConfig+0x21c>
 8005820:	4b3e      	ldr	r3, [pc, #248]	@ (800591c <UART_SetConfig+0x2cc>)
 8005822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800582a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800582e:	d017      	beq.n	8005860 <UART_SetConfig+0x210>
 8005830:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005834:	d817      	bhi.n	8005866 <UART_SetConfig+0x216>
 8005836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800583a:	d00b      	beq.n	8005854 <UART_SetConfig+0x204>
 800583c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005840:	d811      	bhi.n	8005866 <UART_SetConfig+0x216>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <UART_SetConfig+0x1fe>
 8005846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800584a:	d006      	beq.n	800585a <UART_SetConfig+0x20a>
 800584c:	e00b      	b.n	8005866 <UART_SetConfig+0x216>
 800584e:	2300      	movs	r3, #0
 8005850:	77fb      	strb	r3, [r7, #31]
 8005852:	e0a1      	b.n	8005998 <UART_SetConfig+0x348>
 8005854:	2302      	movs	r3, #2
 8005856:	77fb      	strb	r3, [r7, #31]
 8005858:	e09e      	b.n	8005998 <UART_SetConfig+0x348>
 800585a:	2304      	movs	r3, #4
 800585c:	77fb      	strb	r3, [r7, #31]
 800585e:	e09b      	b.n	8005998 <UART_SetConfig+0x348>
 8005860:	2308      	movs	r3, #8
 8005862:	77fb      	strb	r3, [r7, #31]
 8005864:	e098      	b.n	8005998 <UART_SetConfig+0x348>
 8005866:	2310      	movs	r3, #16
 8005868:	77fb      	strb	r3, [r7, #31]
 800586a:	e095      	b.n	8005998 <UART_SetConfig+0x348>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a2f      	ldr	r2, [pc, #188]	@ (8005930 <UART_SetConfig+0x2e0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d125      	bne.n	80058c2 <UART_SetConfig+0x272>
 8005876:	4b29      	ldr	r3, [pc, #164]	@ (800591c <UART_SetConfig+0x2cc>)
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005880:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005884:	d017      	beq.n	80058b6 <UART_SetConfig+0x266>
 8005886:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800588a:	d817      	bhi.n	80058bc <UART_SetConfig+0x26c>
 800588c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005890:	d00b      	beq.n	80058aa <UART_SetConfig+0x25a>
 8005892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005896:	d811      	bhi.n	80058bc <UART_SetConfig+0x26c>
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <UART_SetConfig+0x254>
 800589c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058a0:	d006      	beq.n	80058b0 <UART_SetConfig+0x260>
 80058a2:	e00b      	b.n	80058bc <UART_SetConfig+0x26c>
 80058a4:	2301      	movs	r3, #1
 80058a6:	77fb      	strb	r3, [r7, #31]
 80058a8:	e076      	b.n	8005998 <UART_SetConfig+0x348>
 80058aa:	2302      	movs	r3, #2
 80058ac:	77fb      	strb	r3, [r7, #31]
 80058ae:	e073      	b.n	8005998 <UART_SetConfig+0x348>
 80058b0:	2304      	movs	r3, #4
 80058b2:	77fb      	strb	r3, [r7, #31]
 80058b4:	e070      	b.n	8005998 <UART_SetConfig+0x348>
 80058b6:	2308      	movs	r3, #8
 80058b8:	77fb      	strb	r3, [r7, #31]
 80058ba:	e06d      	b.n	8005998 <UART_SetConfig+0x348>
 80058bc:	2310      	movs	r3, #16
 80058be:	77fb      	strb	r3, [r7, #31]
 80058c0:	e06a      	b.n	8005998 <UART_SetConfig+0x348>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005934 <UART_SetConfig+0x2e4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d138      	bne.n	800593e <UART_SetConfig+0x2ee>
 80058cc:	4b13      	ldr	r3, [pc, #76]	@ (800591c <UART_SetConfig+0x2cc>)
 80058ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80058d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058da:	d017      	beq.n	800590c <UART_SetConfig+0x2bc>
 80058dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058e0:	d82a      	bhi.n	8005938 <UART_SetConfig+0x2e8>
 80058e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058e6:	d00b      	beq.n	8005900 <UART_SetConfig+0x2b0>
 80058e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ec:	d824      	bhi.n	8005938 <UART_SetConfig+0x2e8>
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <UART_SetConfig+0x2aa>
 80058f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058f6:	d006      	beq.n	8005906 <UART_SetConfig+0x2b6>
 80058f8:	e01e      	b.n	8005938 <UART_SetConfig+0x2e8>
 80058fa:	2300      	movs	r3, #0
 80058fc:	77fb      	strb	r3, [r7, #31]
 80058fe:	e04b      	b.n	8005998 <UART_SetConfig+0x348>
 8005900:	2302      	movs	r3, #2
 8005902:	77fb      	strb	r3, [r7, #31]
 8005904:	e048      	b.n	8005998 <UART_SetConfig+0x348>
 8005906:	2304      	movs	r3, #4
 8005908:	77fb      	strb	r3, [r7, #31]
 800590a:	e045      	b.n	8005998 <UART_SetConfig+0x348>
 800590c:	2308      	movs	r3, #8
 800590e:	77fb      	strb	r3, [r7, #31]
 8005910:	e042      	b.n	8005998 <UART_SetConfig+0x348>
 8005912:	bf00      	nop
 8005914:	efff69f3 	.word	0xefff69f3
 8005918:	40011000 	.word	0x40011000
 800591c:	40023800 	.word	0x40023800
 8005920:	40004400 	.word	0x40004400
 8005924:	40004800 	.word	0x40004800
 8005928:	40004c00 	.word	0x40004c00
 800592c:	40005000 	.word	0x40005000
 8005930:	40011400 	.word	0x40011400
 8005934:	40007800 	.word	0x40007800
 8005938:	2310      	movs	r3, #16
 800593a:	77fb      	strb	r3, [r7, #31]
 800593c:	e02c      	b.n	8005998 <UART_SetConfig+0x348>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a72      	ldr	r2, [pc, #456]	@ (8005b0c <UART_SetConfig+0x4bc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d125      	bne.n	8005994 <UART_SetConfig+0x344>
 8005948:	4b71      	ldr	r3, [pc, #452]	@ (8005b10 <UART_SetConfig+0x4c0>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800594e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005952:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005956:	d017      	beq.n	8005988 <UART_SetConfig+0x338>
 8005958:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800595c:	d817      	bhi.n	800598e <UART_SetConfig+0x33e>
 800595e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005962:	d00b      	beq.n	800597c <UART_SetConfig+0x32c>
 8005964:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005968:	d811      	bhi.n	800598e <UART_SetConfig+0x33e>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <UART_SetConfig+0x326>
 800596e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005972:	d006      	beq.n	8005982 <UART_SetConfig+0x332>
 8005974:	e00b      	b.n	800598e <UART_SetConfig+0x33e>
 8005976:	2300      	movs	r3, #0
 8005978:	77fb      	strb	r3, [r7, #31]
 800597a:	e00d      	b.n	8005998 <UART_SetConfig+0x348>
 800597c:	2302      	movs	r3, #2
 800597e:	77fb      	strb	r3, [r7, #31]
 8005980:	e00a      	b.n	8005998 <UART_SetConfig+0x348>
 8005982:	2304      	movs	r3, #4
 8005984:	77fb      	strb	r3, [r7, #31]
 8005986:	e007      	b.n	8005998 <UART_SetConfig+0x348>
 8005988:	2308      	movs	r3, #8
 800598a:	77fb      	strb	r3, [r7, #31]
 800598c:	e004      	b.n	8005998 <UART_SetConfig+0x348>
 800598e:	2310      	movs	r3, #16
 8005990:	77fb      	strb	r3, [r7, #31]
 8005992:	e001      	b.n	8005998 <UART_SetConfig+0x348>
 8005994:	2310      	movs	r3, #16
 8005996:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059a0:	d15b      	bne.n	8005a5a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80059a2:	7ffb      	ldrb	r3, [r7, #31]
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d828      	bhi.n	80059fa <UART_SetConfig+0x3aa>
 80059a8:	a201      	add	r2, pc, #4	@ (adr r2, 80059b0 <UART_SetConfig+0x360>)
 80059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ae:	bf00      	nop
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	080059dd 	.word	0x080059dd
 80059b8:	080059e5 	.word	0x080059e5
 80059bc:	080059fb 	.word	0x080059fb
 80059c0:	080059eb 	.word	0x080059eb
 80059c4:	080059fb 	.word	0x080059fb
 80059c8:	080059fb 	.word	0x080059fb
 80059cc:	080059fb 	.word	0x080059fb
 80059d0:	080059f3 	.word	0x080059f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d4:	f7fe feec 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 80059d8:	61b8      	str	r0, [r7, #24]
        break;
 80059da:	e013      	b.n	8005a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059dc:	f7fe fefc 	bl	80047d8 <HAL_RCC_GetPCLK2Freq>
 80059e0:	61b8      	str	r0, [r7, #24]
        break;
 80059e2:	e00f      	b.n	8005a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e4:	4b4b      	ldr	r3, [pc, #300]	@ (8005b14 <UART_SetConfig+0x4c4>)
 80059e6:	61bb      	str	r3, [r7, #24]
        break;
 80059e8:	e00c      	b.n	8005a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ea:	f7fe fdcf 	bl	800458c <HAL_RCC_GetSysClockFreq>
 80059ee:	61b8      	str	r0, [r7, #24]
        break;
 80059f0:	e008      	b.n	8005a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059f6:	61bb      	str	r3, [r7, #24]
        break;
 80059f8:	e004      	b.n	8005a04 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	77bb      	strb	r3, [r7, #30]
        break;
 8005a02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d074      	beq.n	8005af4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	005a      	lsls	r2, r3, #1
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	085b      	lsrs	r3, r3, #1
 8005a14:	441a      	add	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	2b0f      	cmp	r3, #15
 8005a24:	d916      	bls.n	8005a54 <UART_SetConfig+0x404>
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a2c:	d212      	bcs.n	8005a54 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f023 030f 	bic.w	r3, r3, #15
 8005a36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	085b      	lsrs	r3, r3, #1
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	89fb      	ldrh	r3, [r7, #14]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	89fa      	ldrh	r2, [r7, #14]
 8005a50:	60da      	str	r2, [r3, #12]
 8005a52:	e04f      	b.n	8005af4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	77bb      	strb	r3, [r7, #30]
 8005a58:	e04c      	b.n	8005af4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a5a:	7ffb      	ldrb	r3, [r7, #31]
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d828      	bhi.n	8005ab2 <UART_SetConfig+0x462>
 8005a60:	a201      	add	r2, pc, #4	@ (adr r2, 8005a68 <UART_SetConfig+0x418>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a8d 	.word	0x08005a8d
 8005a6c:	08005a95 	.word	0x08005a95
 8005a70:	08005a9d 	.word	0x08005a9d
 8005a74:	08005ab3 	.word	0x08005ab3
 8005a78:	08005aa3 	.word	0x08005aa3
 8005a7c:	08005ab3 	.word	0x08005ab3
 8005a80:	08005ab3 	.word	0x08005ab3
 8005a84:	08005ab3 	.word	0x08005ab3
 8005a88:	08005aab 	.word	0x08005aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a8c:	f7fe fe90 	bl	80047b0 <HAL_RCC_GetPCLK1Freq>
 8005a90:	61b8      	str	r0, [r7, #24]
        break;
 8005a92:	e013      	b.n	8005abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a94:	f7fe fea0 	bl	80047d8 <HAL_RCC_GetPCLK2Freq>
 8005a98:	61b8      	str	r0, [r7, #24]
        break;
 8005a9a:	e00f      	b.n	8005abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005b14 <UART_SetConfig+0x4c4>)
 8005a9e:	61bb      	str	r3, [r7, #24]
        break;
 8005aa0:	e00c      	b.n	8005abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aa2:	f7fe fd73 	bl	800458c <HAL_RCC_GetSysClockFreq>
 8005aa6:	61b8      	str	r0, [r7, #24]
        break;
 8005aa8:	e008      	b.n	8005abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aae:	61bb      	str	r3, [r7, #24]
        break;
 8005ab0:	e004      	b.n	8005abc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	77bb      	strb	r3, [r7, #30]
        break;
 8005aba:	bf00      	nop
    }

    if (pclk != 0U)
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d018      	beq.n	8005af4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	085a      	lsrs	r2, r3, #1
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	441a      	add	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b0f      	cmp	r3, #15
 8005ada:	d909      	bls.n	8005af0 <UART_SetConfig+0x4a0>
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ae2:	d205      	bcs.n	8005af0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60da      	str	r2, [r3, #12]
 8005aee:	e001      	b.n	8005af4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005b00:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3720      	adds	r7, #32
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40007c00 	.word	0x40007c00
 8005b10:	40023800 	.word	0x40023800
 8005b14:	00f42400 	.word	0x00f42400

08005b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00a      	beq.n	8005bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bce:	f003 0320 	and.w	r3, r3, #32
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01a      	beq.n	8005c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c16:	d10a      	bne.n	8005c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	605a      	str	r2, [r3, #4]
  }
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08c      	sub	sp, #48	@ 0x30
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c6c:	f7fb ff48 	bl	8001b00 <HAL_GetTick>
 8005c70:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d12e      	bne.n	8005cde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f83b 	bl	8005d0a <UART_WaitOnFlagUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d021      	beq.n	8005cde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	e853 3f00 	ldrex	r3, [r3]
 8005ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cae:	623b      	str	r3, [r7, #32]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	69b9      	ldr	r1, [r7, #24]
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	e841 2300 	strex	r3, r2, [r1]
 8005cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1e6      	bne.n	8005c9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e011      	b.n	8005d02 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3728      	adds	r7, #40	@ 0x28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	603b      	str	r3, [r7, #0]
 8005d16:	4613      	mov	r3, r2
 8005d18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1a:	e04f      	b.n	8005dbc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d22:	d04b      	beq.n	8005dbc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d24:	f7fb feec 	bl	8001b00 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d302      	bcc.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x30>
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e04e      	b.n	8005ddc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d037      	beq.n	8005dbc <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b80      	cmp	r3, #128	@ 0x80
 8005d50:	d034      	beq.n	8005dbc <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b40      	cmp	r3, #64	@ 0x40
 8005d56:	d031      	beq.n	8005dbc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d110      	bne.n	8005d88 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2208      	movs	r2, #8
 8005d6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f838 	bl	8005de4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2208      	movs	r2, #8
 8005d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e029      	b.n	8005ddc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d96:	d111      	bne.n	8005dbc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005da0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 f81e 	bl	8005de4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e00f      	b.n	8005ddc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69da      	ldr	r2, [r3, #28]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	bf0c      	ite	eq
 8005dcc:	2301      	moveq	r3, #1
 8005dce:	2300      	movne	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d0a0      	beq.n	8005d1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b095      	sub	sp, #84	@ 0x54
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e6      	bne.n	8005dec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3308      	adds	r3, #8
 8005e24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	f023 0301 	bic.w	r3, r3, #1
 8005e34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e5      	bne.n	8005e1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d118      	bne.n	8005e8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f023 0310 	bic.w	r3, r3, #16
 8005e6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7c:	6979      	ldr	r1, [r7, #20]
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	e841 2300 	strex	r3, r2, [r1]
 8005e84:	613b      	str	r3, [r7, #16]
   return(result);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1e6      	bne.n	8005e5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ea0:	bf00      	nop
 8005ea2:	3754      	adds	r7, #84	@ 0x54
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <uart_error_handler>:


#include "erlog.h"

static void uart_error_handler()
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005eb0:	b672      	cpsid	i
}
 8005eb2:	bf00      	nop
	 __disable_irq();
	  while (1)
 8005eb4:	bf00      	nop
 8005eb6:	e7fd      	b.n	8005eb4 <uart_error_handler+0x8>

08005eb8 <uart_init>:
	  {
	  }
}
static void uart_init(UART_HandleTypeDef *huart3)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3->Instance = USART3;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a15      	ldr	r2, [pc, #84]	@ (8005f18 <uart_init+0x60>)
 8005ec4:	601a      	str	r2, [r3, #0]
  huart3->Init.BaudRate = 115200;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005ecc:	605a      	str	r2, [r3, #4]
  huart3->Init.WordLength = UART_WORDLENGTH_8B;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	609a      	str	r2, [r3, #8]
  huart3->Init.StopBits = UART_STOPBITS_1;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	60da      	str	r2, [r3, #12]
  huart3->Init.Parity = UART_PARITY_NONE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	611a      	str	r2, [r3, #16]
  huart3->Init.Mode = UART_MODE_TX_RX;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	220c      	movs	r2, #12
 8005ee4:	615a      	str	r2, [r3, #20]
  huart3->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	619a      	str	r2, [r3, #24]
  huart3->Init.OverSampling = UART_OVERSAMPLING_16;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	61da      	str	r2, [r3, #28]
  huart3->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	621a      	str	r2, [r3, #32]
  huart3->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart3) != HAL_OK)
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff face 	bl	80054a0 <HAL_UART_Init>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <uart_init+0x56>
  {
	  uart_error_handler();
 8005f0a:	f7ff ffcf 	bl	8005eac <uart_error_handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005f0e:	bf00      	nop
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40004800 	.word	0x40004800

08005f1c <erlog_init>:

void erlog_init(log_t *log_console, UART_HandleTypeDef *huart3)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
	log_console->uhart = huart3;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	601a      	str	r2, [r3, #0]
	log_console->msg_len = 0;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	809a      	strh	r2, [r3, #4]
	memset(log_console->msg, 0 , sizeof(log_console->msg_len));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3306      	adds	r3, #6
 8005f36:	2202      	movs	r2, #2
 8005f38:	2100      	movs	r1, #0
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f003 fc0a 	bl	8009754 <memset>
	uart_init(log_console->uhart);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff ffb7 	bl	8005eb8 <uart_init>
}
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <erlog_write>:

void erlog_write(log_t *log_console)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b082      	sub	sp, #8
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(log_console->uhart, (uint8_t *)log_console->msg, log_console->msg_len, HAL_MAX_DELAY);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	1d99      	adds	r1, r3, #6
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	889a      	ldrh	r2, [r3, #4]
 8005f66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f6a:	f7ff fae7 	bl	800553c <HAL_UART_Transmit>
}
 8005f6e:	bf00      	nop
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <erlog_clear>:
void erlog_clear(log_t *log_console)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
	memset(log_console->msg , 0, sizeof(log_console->msg_len));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	3306      	adds	r3, #6
 8005f82:	2202      	movs	r2, #2
 8005f84:	2100      	movs	r1, #0
 8005f86:	4618      	mov	r0, r3
 8005f88:	f003 fbe4 	bl	8009754 <memset>
}
 8005f8c:	bf00      	nop
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HighPassFilter_init>:
LowPassFilter low_pass_filter;
HighPassFilter high_pass_filter;
Differentiator differentiator;

/* High Pass Filter Functions */
void HighPassFilter_init(HighPassFilter* filter, float samples) {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	ed87 0a00 	vstr	s0, [r7]
    filter->kX = expf(-1.0f / samples);
 8005fa0:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8005fa4:	edd7 7a00 	vldr	s15, [r7]
 8005fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fac:	eeb0 0a47 	vmov.f32	s0, s14
 8005fb0:	f005 fd32 	bl	800ba18 <expf>
 8005fb4:	eef0 7a40 	vmov.f32	s15, s0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	edc3 7a00 	vstr	s15, [r3]
    filter->kA0 = (1.0f + filter->kX) / 2.0f;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	edd3 7a00 	vldr	s15, [r3]
 8005fc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fcc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005fd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->kA1 = -filter->kA0;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005fe0:	eef1 7a67 	vneg.f32	s15, s15
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->kB1 = filter->kX;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60da      	str	r2, [r3, #12]
    filter->last_filter_value = 0.0;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	611a      	str	r2, [r3, #16]
    filter->last_raw_value = 0.0;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	615a      	str	r2, [r3, #20]
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	0000      	movs	r0, r0
 800600c:	0000      	movs	r0, r0
	...

08006010 <HighPassFilter_init_with_cutoff>:

void HighPassFilter_init_with_cutoff(HighPassFilter* filter, float cutoff, float sampling_frequency) {
 8006010:	b5b0      	push	{r4, r5, r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	ed87 0a02 	vstr	s0, [r7, #8]
 800601c:	edc7 0a01 	vstr	s1, [r7, #4]
    HighPassFilter_init(filter, sampling_frequency / (cutoff * 2.0 * M_PI));
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7fa fab9 	bl	8000598 <__aeabi_f2d>
 8006026:	4604      	mov	r4, r0
 8006028:	460d      	mov	r5, r1
 800602a:	68b8      	ldr	r0, [r7, #8]
 800602c:	f7fa fab4 	bl	8000598 <__aeabi_f2d>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	f7fa f952 	bl	80002dc <__adddf3>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4610      	mov	r0, r2
 800603e:	4619      	mov	r1, r3
 8006040:	a30d      	add	r3, pc, #52	@ (adr r3, 8006078 <HighPassFilter_init_with_cutoff+0x68>)
 8006042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006046:	f7fa faff 	bl	8000648 <__aeabi_dmul>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4620      	mov	r0, r4
 8006050:	4629      	mov	r1, r5
 8006052:	f7fa fc23 	bl	800089c <__aeabi_ddiv>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4610      	mov	r0, r2
 800605c:	4619      	mov	r1, r3
 800605e:	f7fa fdcb 	bl	8000bf8 <__aeabi_d2f>
 8006062:	4603      	mov	r3, r0
 8006064:	ee00 3a10 	vmov	s0, r3
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7ff ff93 	bl	8005f94 <HighPassFilter_init>
}
 800606e:	bf00      	nop
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bdb0      	pop	{r4, r5, r7, pc}
 8006076:	bf00      	nop
 8006078:	54442d18 	.word	0x54442d18
 800607c:	400921fb 	.word	0x400921fb

08006080 <HighPassFilter_process>:

float HighPassFilter_process(HighPassFilter* filter, float value)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	ed87 0a00 	vstr	s0, [r7]
//    if (isnanf(filter->last_filter_value) || isnanf(filter->last_raw_value)) {
//        filter->last_filter_value = 0.0f;
//    } else {
        filter->last_filter_value = filter->kA0 * value + filter->kA1 * filter->last_raw_value + filter->kB1 * filter->last_filter_value;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	ed93 7a01 	vldr	s14, [r3, #4]
 8006092:	edd7 7a00 	vldr	s15, [r7]
 8006096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	edd3 6a02 	vldr	s13, [r3, #8]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80060a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	edd3 6a03 	vldr	s13, [r3, #12]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80060ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	edc3 7a04 	vstr	s15, [r3, #16]
    //}
    filter->last_raw_value = value;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	615a      	str	r2, [r3, #20]
    return filter->last_filter_value;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	ee07 3a90 	vmov	s15, r3
}
 80060d6:	eeb0 0a67 	vmov.f32	s0, s15
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HighPassFilter_reset>:

void HighPassFilter_reset(HighPassFilter* filter) {
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
    filter->last_raw_value = 0.0;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	615a      	str	r2, [r3, #20]
    filter->last_filter_value = 0.0;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	611a      	str	r2, [r3, #16]
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <LowPassFilter_init>:

/* Low Pass Filter Functions */
void LowPassFilter_init(LowPassFilter* filter, float samples) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	ed87 0a00 	vstr	s0, [r7]
    filter->kX = expf(-1.0f / samples);
 8006114:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8006118:	edd7 7a00 	vldr	s15, [r7]
 800611c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006120:	eeb0 0a47 	vmov.f32	s0, s14
 8006124:	f005 fc78 	bl	800ba18 <expf>
 8006128:	eef0 7a40 	vmov.f32	s15, s0
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	edc3 7a00 	vstr	s15, [r3]
    filter->kA0 = 1.0f - filter->kX;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	edd3 7a00 	vldr	s15, [r3]
 8006138:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800613c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->kB1 = filter->kX;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	609a      	str	r2, [r3, #8]
    filter->last_value = 0.0;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	60da      	str	r2, [r3, #12]
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <LowPassFilter_init_with_cutoff>:

void LowPassFilter_init_with_cutoff(LowPassFilter* filter, float cutoff, float sampling_frequency) {
 8006160:	b5b0      	push	{r4, r5, r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	ed87 0a02 	vstr	s0, [r7, #8]
 800616c:	edc7 0a01 	vstr	s1, [r7, #4]
    LowPassFilter_init(filter, sampling_frequency / (cutoff * 2.0f * M_PI));
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7fa fa11 	bl	8000598 <__aeabi_f2d>
 8006176:	4604      	mov	r4, r0
 8006178:	460d      	mov	r5, r1
 800617a:	edd7 7a02 	vldr	s15, [r7, #8]
 800617e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006182:	ee17 0a90 	vmov	r0, s15
 8006186:	f7fa fa07 	bl	8000598 <__aeabi_f2d>
 800618a:	a30d      	add	r3, pc, #52	@ (adr r3, 80061c0 <LowPassFilter_init_with_cutoff+0x60>)
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	f7fa fa5a 	bl	8000648 <__aeabi_dmul>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	4620      	mov	r0, r4
 800619a:	4629      	mov	r1, r5
 800619c:	f7fa fb7e 	bl	800089c <__aeabi_ddiv>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4610      	mov	r0, r2
 80061a6:	4619      	mov	r1, r3
 80061a8:	f7fa fd26 	bl	8000bf8 <__aeabi_d2f>
 80061ac:	4603      	mov	r3, r0
 80061ae:	ee00 3a10 	vmov	s0, r3
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f7ff ffa8 	bl	8006108 <LowPassFilter_init>
}
 80061b8:	bf00      	nop
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bdb0      	pop	{r4, r5, r7, pc}
 80061c0:	54442d18 	.word	0x54442d18
 80061c4:	400921fb 	.word	0x400921fb

080061c8 <LowPassFilter_process>:

float LowPassFilter_process(LowPassFilter* filter, float value) {
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	ed87 0a00 	vstr	s0, [r7]
    if (isnanf(filter->last_value)) {
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80061da:	eef4 7a67 	vcmp.f32	s15, s15
 80061de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e2:	d703      	bvc.n	80061ec <LowPassFilter_process+0x24>
        filter->last_value = value;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	60da      	str	r2, [r3, #12]
 80061ea:	e013      	b.n	8006214 <LowPassFilter_process+0x4c>
    } else {
        filter->last_value = filter->kA0 * value + filter->kB1 * filter->last_value;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80061f2:	edd7 7a00 	vldr	s15, [r7]
 80061f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	edd3 6a02 	vldr	s13, [r3, #8]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	edd3 7a03 	vldr	s15, [r3, #12]
 8006206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800620a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    return filter->last_value;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	ee07 3a90 	vmov	s15, r3
}
 800621c:	eeb0 0a67 	vmov.f32	s0, s15
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <LowPassFilter_reset>:

void LowPassFilter_reset(LowPassFilter* filter) {
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
    filter->last_value = 0.0;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	60da      	str	r2, [r3, #12]
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <Differentiator_init>:

/* Differentiator Functions */
void Differentiator_init(Differentiator* differentiator, float sampling_frequency) {
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	ed87 0a00 	vstr	s0, [r7]
    differentiator->kSamplingFrequency = sampling_frequency;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	601a      	str	r2, [r3, #0]
    differentiator->last_value = 0.0;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f04f 0200 	mov.w	r2, #0
 800625e:	605a      	str	r2, [r3, #4]
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <Differentiator_process>:

float Differentiator_process(Differentiator* differentiator, float value) {
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	ed87 0a00 	vstr	s0, [r7]
    float diff = (value - differentiator->last_value) * differentiator->kSamplingFrequency;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	edd3 7a01 	vldr	s15, [r3, #4]
 800627e:	ed97 7a00 	vldr	s14, [r7]
 8006282:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	edd3 7a00 	vldr	s15, [r3]
 800628c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006290:	edc7 7a03 	vstr	s15, [r7, #12]
    differentiator->last_value = value;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	605a      	str	r2, [r3, #4]
    return diff;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	ee07 3a90 	vmov	s15, r3
}
 80062a0:	eeb0 0a67 	vmov.f32	s0, s15
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
	...

080062b0 <processHeartBeat>:
uint8_t rateSpot = 0;   // Index for storing BPM readings
uint8_t rates[RATE_SIZE];  // Array to store BPM values


void processHeartBeat(float current_diff)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	ed87 0a01 	vstr	s0, [r7, #4]
	const float kEdgeThreshold = -1000.0;
 80062ba:	4b45      	ldr	r3, [pc, #276]	@ (80063d0 <processHeartBeat+0x120>)
 80062bc:	613b      	str	r3, [r7, #16]
    uint32_t currentMillis = HAL_GetTick();  // Get current time in milliseconds
 80062be:	f7fb fc1f 	bl	8001b00 <HAL_GetTick>
 80062c2:	60f8      	str	r0, [r7, #12]
    delta = currentMillis - lastBeat;  // Calculate the time difference between current and last beat
 80062c4:	4b43      	ldr	r3, [pc, #268]	@ (80063d4 <processHeartBeat+0x124>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	4a42      	ldr	r2, [pc, #264]	@ (80063d8 <processHeartBeat+0x128>)
 80062ce:	6013      	str	r3, [r2, #0]
    lastBeat = currentMillis;          // Update the time of the last beat
 80062d0:	4a40      	ldr	r2, [pc, #256]	@ (80063d4 <processHeartBeat+0x124>)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6013      	str	r3, [r2, #0]

    beatsPerMinute = (60.0 / (delta / 1000.0));  // Calculate beats per minute
 80062d6:	4b40      	ldr	r3, [pc, #256]	@ (80063d8 <processHeartBeat+0x128>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fa f93a 	bl	8000554 <__aeabi_ui2d>
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	4b3d      	ldr	r3, [pc, #244]	@ (80063dc <processHeartBeat+0x12c>)
 80062e6:	f7fa fad9 	bl	800089c <__aeabi_ddiv>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	f04f 0000 	mov.w	r0, #0
 80062f2:	493b      	ldr	r1, [pc, #236]	@ (80063e0 <processHeartBeat+0x130>)
 80062f4:	f7fa fad2 	bl	800089c <__aeabi_ddiv>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4610      	mov	r0, r2
 80062fe:	4619      	mov	r1, r3
 8006300:	f7fa fc7a 	bl	8000bf8 <__aeabi_d2f>
 8006304:	4603      	mov	r3, r0
 8006306:	4a37      	ldr	r2, [pc, #220]	@ (80063e4 <processHeartBeat+0x134>)
 8006308:	6013      	str	r3, [r2, #0]

    // Filter valid BPM values
    if (beatsPerMinute < 255 && beatsPerMinute > 20 && current_diff < kEdgeThreshold)
 800630a:	4b36      	ldr	r3, [pc, #216]	@ (80063e4 <processHeartBeat+0x134>)
 800630c:	edd3 7a00 	vldr	s15, [r3]
 8006310:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80063e8 <processHeartBeat+0x138>
 8006314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800631c:	d400      	bmi.n	8006320 <processHeartBeat+0x70>
        {
            beatAvg += rates[x];
        }
        beatAvg /= RATE_SIZE;  // Compute the average BPM
    }
}
 800631e:	e053      	b.n	80063c8 <processHeartBeat+0x118>
    if (beatsPerMinute < 255 && beatsPerMinute > 20 && current_diff < kEdgeThreshold)
 8006320:	4b30      	ldr	r3, [pc, #192]	@ (80063e4 <processHeartBeat+0x134>)
 8006322:	edd3 7a00 	vldr	s15, [r3]
 8006326:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800632a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800632e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006332:	dc00      	bgt.n	8006336 <processHeartBeat+0x86>
}
 8006334:	e048      	b.n	80063c8 <processHeartBeat+0x118>
    if (beatsPerMinute < 255 && beatsPerMinute > 20 && current_diff < kEdgeThreshold)
 8006336:	ed97 7a01 	vldr	s14, [r7, #4]
 800633a:	edd7 7a04 	vldr	s15, [r7, #16]
 800633e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006346:	d400      	bmi.n	800634a <processHeartBeat+0x9a>
}
 8006348:	e03e      	b.n	80063c8 <processHeartBeat+0x118>
        rates[rateSpot++] = (uint8_t)beatsPerMinute;  // Store BPM in the array
 800634a:	4b26      	ldr	r3, [pc, #152]	@ (80063e4 <processHeartBeat+0x134>)
 800634c:	edd3 7a00 	vldr	s15, [r3]
 8006350:	4b26      	ldr	r3, [pc, #152]	@ (80063ec <processHeartBeat+0x13c>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	b2d1      	uxtb	r1, r2
 8006358:	4a24      	ldr	r2, [pc, #144]	@ (80063ec <processHeartBeat+0x13c>)
 800635a:	7011      	strb	r1, [r2, #0]
 800635c:	461a      	mov	r2, r3
 800635e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006362:	edc7 7a00 	vstr	s15, [r7]
 8006366:	783b      	ldrb	r3, [r7, #0]
 8006368:	b2d9      	uxtb	r1, r3
 800636a:	4b21      	ldr	r3, [pc, #132]	@ (80063f0 <processHeartBeat+0x140>)
 800636c:	5499      	strb	r1, [r3, r2]
        rateSpot %= RATE_SIZE;  // Wrap the array index if it exceeds RATE_SIZE
 800636e:	4b1f      	ldr	r3, [pc, #124]	@ (80063ec <processHeartBeat+0x13c>)
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	b2da      	uxtb	r2, r3
 8006378:	4b1c      	ldr	r3, [pc, #112]	@ (80063ec <processHeartBeat+0x13c>)
 800637a:	701a      	strb	r2, [r3, #0]
        beatAvg = 0;
 800637c:	4b1d      	ldr	r3, [pc, #116]	@ (80063f4 <processHeartBeat+0x144>)
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	601a      	str	r2, [r3, #0]
        for (uint8_t x = 0; x < RATE_SIZE; x++)
 8006384:	2300      	movs	r3, #0
 8006386:	75fb      	strb	r3, [r7, #23]
 8006388:	e011      	b.n	80063ae <processHeartBeat+0xfe>
            beatAvg += rates[x];
 800638a:	7dfb      	ldrb	r3, [r7, #23]
 800638c:	4a18      	ldr	r2, [pc, #96]	@ (80063f0 <processHeartBeat+0x140>)
 800638e:	5cd3      	ldrb	r3, [r2, r3]
 8006390:	ee07 3a90 	vmov	s15, r3
 8006394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006398:	4b16      	ldr	r3, [pc, #88]	@ (80063f4 <processHeartBeat+0x144>)
 800639a:	edd3 7a00 	vldr	s15, [r3]
 800639e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063a2:	4b14      	ldr	r3, [pc, #80]	@ (80063f4 <processHeartBeat+0x144>)
 80063a4:	edc3 7a00 	vstr	s15, [r3]
        for (uint8_t x = 0; x < RATE_SIZE; x++)
 80063a8:	7dfb      	ldrb	r3, [r7, #23]
 80063aa:	3301      	adds	r3, #1
 80063ac:	75fb      	strb	r3, [r7, #23]
 80063ae:	7dfb      	ldrb	r3, [r7, #23]
 80063b0:	2b03      	cmp	r3, #3
 80063b2:	d9ea      	bls.n	800638a <processHeartBeat+0xda>
        beatAvg /= RATE_SIZE;  // Compute the average BPM
 80063b4:	4b0f      	ldr	r3, [pc, #60]	@ (80063f4 <processHeartBeat+0x144>)
 80063b6:	ed93 7a00 	vldr	s14, [r3]
 80063ba:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80063be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063c2:	4b0c      	ldr	r3, [pc, #48]	@ (80063f4 <processHeartBeat+0x144>)
 80063c4:	edc3 7a00 	vstr	s15, [r3]
}
 80063c8:	bf00      	nop
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	c47a0000 	.word	0xc47a0000
 80063d4:	200008b4 	.word	0x200008b4
 80063d8:	200008b8 	.word	0x200008b8
 80063dc:	408f4000 	.word	0x408f4000
 80063e0:	404e0000 	.word	0x404e0000
 80063e4:	20000824 	.word	0x20000824
 80063e8:	437f0000 	.word	0x437f0000
 80063ec:	200008bc 	.word	0x200008bc
 80063f0:	200008c0 	.word	0x200008c0
 80063f4:	20000828 	.word	0x20000828

080063f8 <checkbeat>:

bool checkbeat(int32_t sample)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
	// Averaging
	const float kSamplingFrequency = 400.0;
 8006400:	4b23      	ldr	r3, [pc, #140]	@ (8006490 <checkbeat+0x98>)
 8006402:	61fb      	str	r3, [r7, #28]

	// Filters
	float current_value = sample;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800640e:	edc7 7a06 	vstr	s15, [r7, #24]
	const float kLowPassCutoff = 5.0;
 8006412:	4b20      	ldr	r3, [pc, #128]	@ (8006494 <checkbeat+0x9c>)
 8006414:	617b      	str	r3, [r7, #20]
	const float kHighPassCutoff = 0.5;
 8006416:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800641a:	613b      	str	r3, [r7, #16]

	LowPassFilter_init_with_cutoff(&low_pass_filter, kLowPassCutoff, kSamplingFrequency);
 800641c:	edd7 0a07 	vldr	s1, [r7, #28]
 8006420:	ed97 0a05 	vldr	s0, [r7, #20]
 8006424:	481c      	ldr	r0, [pc, #112]	@ (8006498 <checkbeat+0xa0>)
 8006426:	f7ff fe9b 	bl	8006160 <LowPassFilter_init_with_cutoff>
	HighPassFilter_init_with_cutoff(&high_pass_filter, kHighPassCutoff, kSamplingFrequency);
 800642a:	edd7 0a07 	vldr	s1, [r7, #28]
 800642e:	ed97 0a04 	vldr	s0, [r7, #16]
 8006432:	481a      	ldr	r0, [pc, #104]	@ (800649c <checkbeat+0xa4>)
 8006434:	f7ff fdec 	bl	8006010 <HighPassFilter_init_with_cutoff>
	Differentiator_init(&differentiator, kSamplingFrequency);  // Pass sampling frequency
 8006438:	ed97 0a07 	vldr	s0, [r7, #28]
 800643c:	4818      	ldr	r0, [pc, #96]	@ (80064a0 <checkbeat+0xa8>)
 800643e:	f7ff ff02 	bl	8006246 <Differentiator_init>
	current_value = LowPassFilter_process(&low_pass_filter, current_value);
 8006442:	ed97 0a06 	vldr	s0, [r7, #24]
 8006446:	4814      	ldr	r0, [pc, #80]	@ (8006498 <checkbeat+0xa0>)
 8006448:	f7ff febe 	bl	80061c8 <LowPassFilter_process>
 800644c:	ed87 0a06 	vstr	s0, [r7, #24]
	current_value = HighPassFilter_process(&high_pass_filter, current_value);
 8006450:	ed97 0a06 	vldr	s0, [r7, #24]
 8006454:	4811      	ldr	r0, [pc, #68]	@ (800649c <checkbeat+0xa4>)
 8006456:	f7ff fe13 	bl	8006080 <HighPassFilter_process>
 800645a:	ed87 0a06 	vstr	s0, [r7, #24]
	float current_diff = Differentiator_process(&differentiator, current_value);
 800645e:	ed97 0a06 	vldr	s0, [r7, #24]
 8006462:	480f      	ldr	r0, [pc, #60]	@ (80064a0 <checkbeat+0xa8>)
 8006464:	f7ff ff02 	bl	800626c <Differentiator_process>
 8006468:	ed87 0a03 	vstr	s0, [r7, #12]

	if (current_diff > 0.0)
 800646c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006470:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006478:	dd05      	ble.n	8006486 <checkbeat+0x8e>
	{
	    	processHeartBeat(current_diff);
 800647a:	ed97 0a03 	vldr	s0, [r7, #12]
 800647e:	f7ff ff17 	bl	80062b0 <processHeartBeat>
	    	return true;
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <checkbeat+0x90>
	 }
   else
   {
	    	return false;
 8006486:	2300      	movs	r3, #0
	}


}
 8006488:	4618      	mov	r0, r3
 800648a:	3720      	adds	r7, #32
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	43c80000 	.word	0x43c80000
 8006494:	40a00000 	.word	0x40a00000
 8006498:	20000884 	.word	0x20000884
 800649c:	20000894 	.word	0x20000894
 80064a0:	200008ac 	.word	0x200008ac

080064a4 <i2c_error_Handler>:
uint8_t writePointer = 0;

extern float temp;

static void i2c_error_Handler(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80064a8:	b672      	cpsid	i
}
 80064aa:	bf00      	nop
  __disable_irq();
  while (1)
 80064ac:	bf00      	nop
 80064ae:	e7fd      	b.n	80064ac <i2c_error_Handler+0x8>

080064b0 <i2c_init>:
  {
  }
}
static void i2c_init(I2C_HandleTypeDef *hi2c1)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]

  /*PF0 & PF1 pins configured*/

  /* USER CODE BEGIN I2C1_Init 1 */
  hi2c1->Instance = I2C2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a1c      	ldr	r2, [pc, #112]	@ (800652c <i2c_init+0x7c>)
 80064bc:	601a      	str	r2, [r3, #0]
  hi2c1->Init.Timing = 400000;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006530 <i2c_init+0x80>)
 80064c2:	605a      	str	r2, [r3, #4]
  hi2c1->Init.OwnAddress1 = 0;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	609a      	str	r2, [r3, #8]
  hi2c1->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	60da      	str	r2, [r3, #12]
  hi2c1->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	611a      	str	r2, [r3, #16]
  hi2c1->Init.OwnAddress2 = 0;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	615a      	str	r2, [r3, #20]
  hi2c1->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	619a      	str	r2, [r3, #24]
  hi2c1->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	61da      	str	r2, [r3, #28]
  hi2c1->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c1) != HAL_OK)
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fb fe16 	bl	8002120 <HAL_I2C_Init>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <i2c_init+0x4e>
  {
	  i2c_error_Handler();
 80064fa:	f7ff ffd3 	bl	80064a4 <i2c_error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80064fe:	2100      	movs	r1, #0
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7fd fc0b 	bl	8003d1c <HAL_I2CEx_ConfigAnalogFilter>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <i2c_init+0x60>
  {
	  i2c_error_Handler();
 800650c:	f7ff ffca 	bl	80064a4 <i2c_error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c1, 0) != HAL_OK)
 8006510:	2100      	movs	r1, #0
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fd fc4d 	bl	8003db2 <HAL_I2CEx_ConfigDigitalFilter>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <i2c_init+0x72>
  {
	  i2c_error_Handler();
 800651e:	f7ff ffc1 	bl	80064a4 <i2c_error_Handler>
  }
  /* USER CODE END I2C1_Init 1 */

}
 8006522:	bf00      	nop
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	40005800 	.word	0x40005800
 8006530:	00061a80 	.word	0x00061a80

08006534 <max30102_init>:
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *i2chandler)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
	 obj->ui2c = i2chandler;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	601a      	str	r2, [r3, #0]
	 obj->intr_flag = 0;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
	 memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3304      	adds	r3, #4
 8006550:	2280      	movs	r2, #128	@ 0x80
 8006552:	2100      	movs	r1, #0
 8006554:	4618      	mov	r0, r3
 8006556:	f003 f8fd 	bl	8009754 <memset>
	 memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3384      	adds	r3, #132	@ 0x84
 800655e:	2280      	movs	r2, #128	@ 0x80
 8006560:	2100      	movs	r1, #0
 8006562:	4618      	mov	r0, r3
 8006564:	f003 f8f6 	bl	8009754 <memset>
	 i2c_init(obj->ui2c);  /*initialise the i2c peripheral for MAX3212*/
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff ff9f 	bl	80064b0 <i2c_init>

}
 8006572:	bf00      	nop
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <read_register>:
bool read_register(max30102_t *obj, uint8_t addr, uint8_t *value)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b08a      	sub	sp, #40	@ 0x28
 800657e:	af04      	add	r7, sp, #16
 8006580:	60f8      	str	r0, [r7, #12]
 8006582:	460b      	mov	r3, r1
 8006584:	607a      	str	r2, [r7, #4]
 8006586:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_buff;
	uint8_t rx_address;
	rx_address = (MAX30102_I2C_ADDR << 1);
 8006588:	23ae      	movs	r3, #174	@ 0xae
 800658a:	75fb      	strb	r3, [r7, #23]
	if (HAL_I2C_Mem_Read(obj->ui2c, rx_address , addr, 1, &rx_buff, 1, 5000) == HAL_OK)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	7dfb      	ldrb	r3, [r7, #23]
 8006592:	b299      	uxth	r1, r3
 8006594:	7afb      	ldrb	r3, [r7, #11]
 8006596:	b29a      	uxth	r2, r3
 8006598:	f241 3388 	movw	r3, #5000	@ 0x1388
 800659c:	9302      	str	r3, [sp, #8]
 800659e:	2301      	movs	r3, #1
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	f107 0316 	add.w	r3, r7, #22
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	2301      	movs	r3, #1
 80065aa:	f7fc f977 	bl	800289c <HAL_I2C_Mem_Read>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <read_register+0x44>
	{
		*value = rx_buff;
 80065b4:	7dba      	ldrb	r2, [r7, #22]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	701a      	strb	r2, [r3, #0]
		return true;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <read_register+0x46>
	}
	else
		return false;
 80065be:	2300      	movs	r3, #0

}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <write_register>:
bool write_register(max30102_t *obj, uint8_t addr, uint8_t value)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af04      	add	r7, sp, #16
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
 80065d4:	4613      	mov	r3, r2
 80065d6:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_address;
	tx_address = (MAX30102_I2C_ADDR << 1);
 80065d8:	23ae      	movs	r3, #174	@ 0xae
 80065da:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(obj->ui2c, tx_address, addr, 1, &value, 1, 10000) == HAL_OK)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6818      	ldr	r0, [r3, #0]
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	b299      	uxth	r1, r3
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80065ec:	9302      	str	r3, [sp, #8]
 80065ee:	2301      	movs	r3, #1
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	1cbb      	adds	r3, r7, #2
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	2301      	movs	r3, #1
 80065f8:	f7fc f83c 	bl	8002674 <HAL_I2C_Mem_Write>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <write_register+0x3e>
		return false;
 8006602:	2300      	movs	r3, #0
 8006604:	e000      	b.n	8006608 <write_register+0x40>
	else
		return true;
 8006606:	2301      	movs	r3, #1
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <bitMask>:
static void bitMask(max30102_t *obj, uint8_t reg, uint8_t mask, uint8_t thing)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	4608      	mov	r0, r1
 800661a:	4611      	mov	r1, r2
 800661c:	461a      	mov	r2, r3
 800661e:	4603      	mov	r3, r0
 8006620:	70fb      	strb	r3, [r7, #3]
 8006622:	460b      	mov	r3, r1
 8006624:	70bb      	strb	r3, [r7, #2]
 8006626:	4613      	mov	r3, r2
 8006628:	707b      	strb	r3, [r7, #1]
  // Grab current register context
  uint8_t originalContents = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]

  read_register(obj, reg, &originalContents);
 800662e:	f107 020f 	add.w	r2, r7, #15
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7ff ff9f 	bl	800657a <read_register>

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;
 800663c:	7bfa      	ldrb	r2, [r7, #15]
 800663e:	78bb      	ldrb	r3, [r7, #2]
 8006640:	4013      	ands	r3, r2
 8006642:	b2db      	uxtb	r3, r3
 8006644:	73fb      	strb	r3, [r7, #15]

  // Change contents
  write_register(obj, reg, originalContents | thing);
 8006646:	7bfa      	ldrb	r2, [r7, #15]
 8006648:	787b      	ldrb	r3, [r7, #1]
 800664a:	4313      	orrs	r3, r2
 800664c:	b2da      	uxtb	r2, r3
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff ffb8 	bl	80065c8 <write_register>
}
 8006658:	bf00      	nop
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <max30102_enableDIETEMPRDY>:

void max30102_enableDIETEMPRDY(max30102_t *obj)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  bitMask(obj, MAX30102_INTENABLE2, MAX30102_INT_DIE_TEMP_RDY_MASK, MAX30102_INT_DIE_TEMP_RDY_ENABLE);
 8006668:	22fd      	movs	r2, #253	@ 0xfd
 800666a:	2302      	movs	r3, #2
 800666c:	2103      	movs	r1, #3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff ffce 	bl	8006610 <bitMask>
}
 8006674:	bf00      	nop
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <max30102_clear_fifo>:
void max30102_disablePROXINT(max30102_t *obj) {
  bitMask(obj, MAX30102_INTENABLE1, MAX30102_INT_PROX_INT_MASK, MAX30102_INT_PROX_INT_DISABLE);
}

void max30102_clear_fifo(max30102_t *obj)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
    write_register(obj, MAX30102_FIFOWRITEPTR, 0);
 8006684:	2200      	movs	r2, #0
 8006686:	2104      	movs	r1, #4
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff ff9d 	bl	80065c8 <write_register>
    write_register(obj, MAX30102_FIFOREADPTR, 0);
 800668e:	2200      	movs	r2, #0
 8006690:	2106      	movs	r1, #6
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff ff98 	bl	80065c8 <write_register>
    write_register(obj, MAX30102_FIFOOVERFLOW, 0);
 8006698:	2200      	movs	r2, #0
 800669a:	2105      	movs	r1, #5
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff ff93 	bl	80065c8 <write_register>
}
 80066a2:	bf00      	nop
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <max30102_set_fifoaverage>:

void max30102_set_fifoaverage(max30102_t *obj, uint8_t numberOfSamples)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b082      	sub	sp, #8
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	460b      	mov	r3, r1
 80066b4:	70fb      	strb	r3, [r7, #3]
	bitMask(obj, MAX30102_FIFOCONFIG, MAX30102_SAMPLEAVG_MASK, numberOfSamples);
 80066b6:	221f      	movs	r2, #31
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	2108      	movs	r1, #8
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff ffa7 	bl	8006610 <bitMask>
}
 80066c2:	bf00      	nop
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <max30102_readtemp>:

float max30102_readtemp(max30102_t *obj)
{
 80066cc:	b5b0      	push	{r4, r5, r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]

  uint8_t response = 0;
 80066d4:	2300      	movs	r3, #0
 80066d6:	73fb      	strb	r3, [r7, #15]
  uint8_t tempInt = 0;
 80066d8:	2300      	movs	r3, #0
 80066da:	73bb      	strb	r3, [r7, #14]
  uint8_t tempFrac = 0;
 80066dc:	2300      	movs	r3, #0
 80066de:	737b      	strb	r3, [r7, #13]

  write_register(obj, MAX30102_DIETEMPCONFIG, 0x01);
 80066e0:	2201      	movs	r2, #1
 80066e2:	2121      	movs	r1, #33	@ 0x21
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7ff ff6f 	bl	80065c8 <write_register>

  do
  {
	  read_register(obj, MAX30102_INTSTAT2, &response);
 80066ea:	f107 030f 	add.w	r3, r7, #15
 80066ee:	461a      	mov	r2, r3
 80066f0:	2101      	movs	r1, #1
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff ff41 	bl	800657a <read_register>
	  HAL_Delay(1);
 80066f8:	2001      	movs	r0, #1
 80066fa:	f7fb fa0d 	bl	8001b18 <HAL_Delay>
  }while((response & MAX30102_INTENABLE1) == 0);
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0f0      	beq.n	80066ea <max30102_readtemp+0x1e>

  read_register(obj, MAX30102_DIETEMPINT, &tempInt);
 8006708:	f107 030e 	add.w	r3, r7, #14
 800670c:	461a      	mov	r2, r3
 800670e:	211f      	movs	r1, #31
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff ff32 	bl	800657a <read_register>
  read_register(obj, MAX30102_DIETEMPFRAC, &tempFrac);
 8006716:	f107 030d 	add.w	r3, r7, #13
 800671a:	461a      	mov	r2, r3
 800671c:	2120      	movs	r1, #32
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7ff ff2b 	bl	800657a <read_register>

  return (float)tempInt + ((float)tempFrac * 0.0625); // Step 3: Calculate temperature (datasheet pg. 23)
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672e:	ee17 0a90 	vmov	r0, s15
 8006732:	f7f9 ff31 	bl	8000598 <__aeabi_f2d>
 8006736:	4604      	mov	r4, r0
 8006738:	460d      	mov	r5, r1
 800673a:	7b7b      	ldrb	r3, [r7, #13]
 800673c:	ee07 3a90 	vmov	s15, r3
 8006740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006744:	ee17 0a90 	vmov	r0, s15
 8006748:	f7f9 ff26 	bl	8000598 <__aeabi_f2d>
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	4b0b      	ldr	r3, [pc, #44]	@ (8006780 <max30102_readtemp+0xb4>)
 8006752:	f7f9 ff79 	bl	8000648 <__aeabi_dmul>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4620      	mov	r0, r4
 800675c:	4629      	mov	r1, r5
 800675e:	f7f9 fdbd 	bl	80002dc <__adddf3>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4610      	mov	r0, r2
 8006768:	4619      	mov	r1, r3
 800676a:	f7fa fa45 	bl	8000bf8 <__aeabi_d2f>
 800676e:	4603      	mov	r3, r0
 8006770:	ee07 3a90 	vmov	s15, r3
}
 8006774:	eeb0 0a67 	vmov.f32	s0, s15
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bdb0      	pop	{r4, r5, r7, pc}
 800677e:	bf00      	nop
 8006780:	3fb00000 	.word	0x3fb00000

08006784 <max30102_setledmode>:

void max30102_setledmode(max30102_t *obj, uint8_t mode)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	70fb      	strb	r3, [r7, #3]
  bitMask(obj, MAX30102_MODECONFIG, MAX30102_MODE_MASK, mode); // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	22f8      	movs	r2, #248	@ 0xf8
 8006794:	2109      	movs	r1, #9
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff ff3a 	bl	8006610 <bitMask>
  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  // See datasheet, page 19
}
 800679c:	bf00      	nop
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <max30102_setadcrange>:

void max30102_setadcrange(max30102_t *obj, uint8_t adcRange)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	70fb      	strb	r3, [r7, #3]
  bitMask(obj ,MAX30102_PARTICLECONFIG, MAX30102_ADCRANGE_MASK, adcRange); // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	229f      	movs	r2, #159	@ 0x9f
 80067b4:	210a      	movs	r1, #10
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff ff2a 	bl	8006610 <bitMask>
}
 80067bc:	bf00      	nop
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <max30102_setsamplerate>:

void max30102_setsamplerate(max30102_t *obj, uint8_t sampleRate)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	70fb      	strb	r3, [r7, #3]
  bitMask(obj, MAX30102_PARTICLECONFIG, MAX30102_SAMPLERATE_MASK, sampleRate); // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	22e3      	movs	r2, #227	@ 0xe3
 80067d4:	210a      	movs	r1, #10
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff ff1a 	bl	8006610 <bitMask>
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <max30102_setpulsewidth>:

void max30102_setpulsewidth(max30102_t *obj, uint8_t pulseWidth)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  bitMask(obj, MAX30102_PARTICLECONFIG, MAX30102_PULSEWIDTH_MASK, pulseWidth); // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	22fc      	movs	r2, #252	@ 0xfc
 80067f4:	210a      	movs	r1, #10
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff ff0a 	bl	8006610 <bitMask>
}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <max30102_enableFIFORollover>:
void max30102_enableFIFORollover(max30102_t *obj)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  bitMask(obj, MAX30102_FIFOCONFIG, MAX30102_ROLLOVER_MASK, MAX30102_ROLLOVER_ENABLE);
 800680c:	22ef      	movs	r2, #239	@ 0xef
 800680e:	2310      	movs	r3, #16
 8006810:	2108      	movs	r1, #8
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff fefc 	bl	8006610 <bitMask>
}
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <max30102_enableSlot>:

void max30102_enableSlot(max30102_t *obj , uint8_t slotNumber, uint8_t device)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	70fb      	strb	r3, [r7, #3]
 800682c:	4613      	mov	r3, r2
 800682e:	70bb      	strb	r3, [r7, #2]

  switch (slotNumber)
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	3b01      	subs	r3, #1
 8006834:	2b03      	cmp	r3, #3
 8006836:	d82b      	bhi.n	8006890 <max30102_enableSlot+0x70>
 8006838:	a201      	add	r2, pc, #4	@ (adr r2, 8006840 <max30102_enableSlot+0x20>)
 800683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683e:	bf00      	nop
 8006840:	08006851 	.word	0x08006851
 8006844:	0800685f 	.word	0x0800685f
 8006848:	08006871 	.word	0x08006871
 800684c:	0800687f 	.word	0x0800687f
  {
    case (1):
      bitMask(obj, MAX30102_MULTILEDCONFIG1, MAX30102_SLOT1_MASK, device);
 8006850:	22f8      	movs	r2, #248	@ 0xf8
 8006852:	78bb      	ldrb	r3, [r7, #2]
 8006854:	2111      	movs	r1, #17
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff feda 	bl	8006610 <bitMask>
      break;
 800685c:	e019      	b.n	8006892 <max30102_enableSlot+0x72>
    case (2):
      bitMask(obj, MAX30102_MULTILEDCONFIG1, MAX30102_SLOT2_MASK, device << 4);
 800685e:	228f      	movs	r2, #143	@ 0x8f
 8006860:	78bb      	ldrb	r3, [r7, #2]
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2111      	movs	r1, #17
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7ff fed1 	bl	8006610 <bitMask>
      break;
 800686e:	e010      	b.n	8006892 <max30102_enableSlot+0x72>
    case (3):
      bitMask(obj, MAX30102_MULTILEDCONFIG2, MAX30102_SLOT3_MASK, device);
 8006870:	22f8      	movs	r2, #248	@ 0xf8
 8006872:	78bb      	ldrb	r3, [r7, #2]
 8006874:	2112      	movs	r1, #18
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7ff feca 	bl	8006610 <bitMask>
      break;
 800687c:	e009      	b.n	8006892 <max30102_enableSlot+0x72>
    case (4):
      bitMask(obj, MAX30102_MULTILEDCONFIG2, MAX30102_SLOT4_MASK, device << 4);
 800687e:	228f      	movs	r2, #143	@ 0x8f
 8006880:	78bb      	ldrb	r3, [r7, #2]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2112      	movs	r1, #18
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff fec1 	bl	8006610 <bitMask>
      break;
 800688e:	e000      	b.n	8006892 <max30102_enableSlot+0x72>
    default:
      //Shouldn't be here!
      break;
 8006890:	bf00      	nop
  }
}
 8006892:	bf00      	nop
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop

0800689c <max30102_set_pulseamplitude>:

void max30102_set_pulseamplitude(max30102_t *obj, uint8_t amplitude, max30102_colour_t colour_mode)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	70fb      	strb	r3, [r7, #3]
 80068a8:	4613      	mov	r3, r2
 80068aa:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_val = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	73fb      	strb	r3, [r7, #15]
	switch(colour_mode)
 80068b0:	78bb      	ldrb	r3, [r7, #2]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d817      	bhi.n	80068e8 <max30102_set_pulseamplitude+0x4c>
 80068b8:	a201      	add	r2, pc, #4	@ (adr r2, 80068c0 <max30102_set_pulseamplitude+0x24>)
 80068ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068be:	bf00      	nop
 80068c0:	080068d1 	.word	0x080068d1
 80068c4:	080068d7 	.word	0x080068d7
 80068c8:	080068dd 	.word	0x080068dd
 80068cc:	080068e3 	.word	0x080068e3
	{
		case RED_COLOUR:
		{
			reg_val = MAX30102_LED1_PULSEAMP;
 80068d0:	230c      	movs	r3, #12
 80068d2:	73fb      	strb	r3, [r7, #15]
			break;
 80068d4:	e008      	b.n	80068e8 <max30102_set_pulseamplitude+0x4c>
		}
		case GREEN_COLOUR:
		{
			reg_val = MAX30102_LED3_PULSEAMP;
 80068d6:	230e      	movs	r3, #14
 80068d8:	73fb      	strb	r3, [r7, #15]
			break;
 80068da:	e005      	b.n	80068e8 <max30102_set_pulseamplitude+0x4c>
		}
		case IR:
		{
			reg_val = MAX30102_LED2_PULSEAMP;
 80068dc:	230d      	movs	r3, #13
 80068de:	73fb      	strb	r3, [r7, #15]
			break;
 80068e0:	e002      	b.n	80068e8 <max30102_set_pulseamplitude+0x4c>
		}
		case PROXIMITY:
		{
			reg_val = MAX30102_LED_PROX_AMP;
 80068e2:	2310      	movs	r3, #16
 80068e4:	73fb      	strb	r3, [r7, #15]
			break;
 80068e6:	bf00      	nop
		}
	}
	write_register(obj , reg_val , amplitude);
 80068e8:	78fa      	ldrb	r2, [r7, #3]
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7ff fe6a 	bl	80065c8 <write_register>
}
 80068f4:	bf00      	nop
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <max30102_softReset>:

void max30102_softReset(max30102_t *obj)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
	uint8_t response = 0;
 8006904:	2300      	movs	r3, #0
 8006906:	73fb      	strb	r3, [r7, #15]
	bitMask(obj, MAX30102_MODECONFIG, MAX30102_RESET_MASK, MAX30102_RESET);
 8006908:	22bf      	movs	r2, #191	@ 0xbf
 800690a:	2340      	movs	r3, #64	@ 0x40
 800690c:	2109      	movs	r1, #9
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff fe7e 	bl	8006610 <bitMask>
	do
	  {
		  read_register(obj, MAX30102_MODECONFIG, &response);
 8006914:	f107 030f 	add.w	r3, r7, #15
 8006918:	461a      	mov	r2, r3
 800691a:	2109      	movs	r1, #9
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff fe2c 	bl	800657a <read_register>
		  HAL_Delay(1);
 8006922:	2001      	movs	r0, #1
 8006924:	f7fb f8f8 	bl	8001b18 <HAL_Delay>
	  }while((response & MAX30102_RESET) != 0);
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	2240      	movs	r2, #64	@ 0x40
 800692c:	4013      	ands	r3, r2
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1ef      	bne.n	8006914 <max30102_softReset+0x18>

}
 8006934:	bf00      	nop
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <max30102_checksamples>:




uint32_t max30102_checksamples(max30102_t *obj)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b08c      	sub	sp, #48	@ 0x30
 8006944:	af02      	add	r7, sp, #8
 8006946:	6078      	str	r0, [r7, #4]
	uint8_t command;
	int bytesLeftToRead = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	627b      	str	r3, [r7, #36]	@ 0x24
	int toGet = 0;
 800694c:	2300      	movs	r3, #0
 800694e:	623b      	str	r3, [r7, #32]
	int numberOfSamples = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	61fb      	str	r3, [r7, #28]

    read_register(obj, MAX30102_FIFOREADPTR , &readPointer);
 8006954:	4a6b      	ldr	r2, [pc, #428]	@ (8006b04 <max30102_checksamples+0x1c4>)
 8006956:	2106      	movs	r1, #6
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff fe0e 	bl	800657a <read_register>
    read_register(obj, MAX30102_FIFOWRITEPTR , &writePointer);
 800695e:	4a6a      	ldr	r2, [pc, #424]	@ (8006b08 <max30102_checksamples+0x1c8>)
 8006960:	2104      	movs	r1, #4
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff fe09 	bl	800657a <read_register>

  // Check if there is new data
  if (readPointer != writePointer)
 8006968:	4b66      	ldr	r3, [pc, #408]	@ (8006b04 <max30102_checksamples+0x1c4>)
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	4b66      	ldr	r3, [pc, #408]	@ (8006b08 <max30102_checksamples+0x1c8>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	f000 80c1 	beq.w	8006af8 <max30102_checksamples+0x1b8>
  {
    numberOfSamples = writePointer - readPointer;
 8006976:	4b64      	ldr	r3, [pc, #400]	@ (8006b08 <max30102_checksamples+0x1c8>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	4b61      	ldr	r3, [pc, #388]	@ (8006b04 <max30102_checksamples+0x1c4>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	61fb      	str	r3, [r7, #28]
    if (numberOfSamples < 0) numberOfSamples += 32; // Wrap around condition
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	2b00      	cmp	r3, #0
 8006988:	da02      	bge.n	8006990 <max30102_checksamples+0x50>
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	3320      	adds	r3, #32
 800698e:	61fb      	str	r3, [r7, #28]

    bytesLeftToRead = numberOfSamples * max30102_led_irg * 3;
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	4613      	mov	r3, r2
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	4413      	add	r3, r2
 8006998:	627b      	str	r3, [r7, #36]	@ 0x24
    command = MAX30102_FIFODATA;
 800699a:	2307      	movs	r3, #7
 800699c:	75fb      	strb	r3, [r7, #23]

    // Send the register address (FIFODATA) to read from
    HAL_I2C_Master_Transmit(obj->ui2c, MAX30102_I2C_ADDR << 1, &command, 1, HAL_MAX_DELAY);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6818      	ldr	r0, [r3, #0]
 80069a2:	f107 0217 	add.w	r2, r7, #23
 80069a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	2301      	movs	r3, #1
 80069ae:	21ae      	movs	r1, #174	@ 0xae
 80069b0:	f7fb fc52 	bl	8002258 <HAL_I2C_Master_Transmit>

    while (bytesLeftToRead > 0)
 80069b4:	e09c      	b.n	8006af0 <max30102_checksamples+0x1b0>
    {
      toGet = bytesLeftToRead;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b8:	623b      	str	r3, [r7, #32]
      if (toGet > I2C_BUFFER_LENGTH)
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	2b20      	cmp	r3, #32
 80069be:	dd01      	ble.n	80069c4 <max30102_checksamples+0x84>
      {
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (max30102_led_irg * 3)); // Trim to multiple of samples
 80069c0:	231b      	movs	r3, #27
 80069c2:	623b      	str	r3, [r7, #32]
      }

      bytesLeftToRead -= toGet;
 80069c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	627b      	str	r3, [r7, #36]	@ 0x24
      HAL_I2C_Master_Receive(obj->ui2c, MAX30102_I2C_ADDR << 1, dataBuffer, toGet, HAL_MAX_DELAY);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6818      	ldr	r0, [r3, #0]
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069d8:	9200      	str	r2, [sp, #0]
 80069da:	4a4c      	ldr	r2, [pc, #304]	@ (8006b0c <max30102_checksamples+0x1cc>)
 80069dc:	21ae      	movs	r1, #174	@ 0xae
 80069de:	f7fb fd53 	bl	8002488 <HAL_I2C_Master_Receive>

      int index = 0;
 80069e2:	2300      	movs	r3, #0
 80069e4:	61bb      	str	r3, [r7, #24]
      while (toGet > 0)
 80069e6:	e07f      	b.n	8006ae8 <max30102_checksamples+0x1a8>
      {
        obj->_head++;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 80069ee:	3301      	adds	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184
        obj->_head = (obj->_head + 1) % STORAGE_SIZE;  // Wrap condition
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 80069fe:	3301      	adds	r3, #1
 8006a00:	425a      	negs	r2, r3
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	f002 0203 	and.w	r2, r2, #3
 8006a0a:	bf58      	it	pl
 8006a0c:	4253      	negpl	r3, r2
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

        uint8_t temp[sizeof(uint32_t)] = {0};
 8006a16:	2300      	movs	r3, #0
 8006a18:	613b      	str	r3, [r7, #16]
        uint32_t tempLong = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]

        // Burst read three bytes for RED
        temp[2] = dataBuffer[index++];
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	61ba      	str	r2, [r7, #24]
 8006a24:	4a39      	ldr	r2, [pc, #228]	@ (8006b0c <max30102_checksamples+0x1cc>)
 8006a26:	5cd3      	ldrb	r3, [r2, r3]
 8006a28:	74bb      	strb	r3, [r7, #18]
        temp[1] = dataBuffer[index++];
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	61ba      	str	r2, [r7, #24]
 8006a30:	4a36      	ldr	r2, [pc, #216]	@ (8006b0c <max30102_checksamples+0x1cc>)
 8006a32:	5cd3      	ldrb	r3, [r2, r3]
 8006a34:	747b      	strb	r3, [r7, #17]
        temp[0] = dataBuffer[index++];
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	61ba      	str	r2, [r7, #24]
 8006a3c:	4a33      	ldr	r2, [pc, #204]	@ (8006b0c <max30102_checksamples+0x1cc>)
 8006a3e:	5cd3      	ldrb	r3, [r2, r3]
 8006a40:	743b      	strb	r3, [r7, #16]

        memcpy(&tempLong, temp, sizeof(tempLong));
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	60fb      	str	r3, [r7, #12]
        tempLong &= 0x3FFFF; // Zero out all but 18 bits
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8006a4c:	60fb      	str	r3, [r7, #12]
        obj->_red_samples[obj->_head] = tempLong;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	3320      	adds	r3, #32
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	605a      	str	r2, [r3, #4]

        if (max30102_led_irg > 1)
        {
          // Burst read three bytes for IR
          temp[2] = dataBuffer[index++];
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	61ba      	str	r2, [r7, #24]
 8006a66:	4a29      	ldr	r2, [pc, #164]	@ (8006b0c <max30102_checksamples+0x1cc>)
 8006a68:	5cd3      	ldrb	r3, [r2, r3]
 8006a6a:	74bb      	strb	r3, [r7, #18]
          temp[1] = dataBuffer[index++];
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	61ba      	str	r2, [r7, #24]
 8006a72:	4a26      	ldr	r2, [pc, #152]	@ (8006b0c <max30102_checksamples+0x1cc>)
 8006a74:	5cd3      	ldrb	r3, [r2, r3]
 8006a76:	747b      	strb	r3, [r7, #17]
          temp[0] = dataBuffer[index++];
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	61ba      	str	r2, [r7, #24]
 8006a7e:	4a23      	ldr	r2, [pc, #140]	@ (8006b0c <max30102_checksamples+0x1cc>)
 8006a80:	5cd3      	ldrb	r3, [r2, r3]
 8006a82:	743b      	strb	r3, [r7, #16]
          memcpy(&tempLong, temp, sizeof(tempLong));
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	60fb      	str	r3, [r7, #12]
          tempLong &= 0x3FFFF;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8006a8e:	60fb      	str	r3, [r7, #12]
          obj->_ir_samples[obj->_head] = tempLong;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	440b      	add	r3, r1
 8006a9e:	605a      	str	r2, [r3, #4]
        }

        if (max30102_led_irg > 2)
        {
          // Burst read three bytes for Green
          temp[2] = dataBuffer[index++];
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	61ba      	str	r2, [r7, #24]
 8006aa6:	4a19      	ldr	r2, [pc, #100]	@ (8006b0c <max30102_checksamples+0x1cc>)
 8006aa8:	5cd3      	ldrb	r3, [r2, r3]
 8006aaa:	74bb      	strb	r3, [r7, #18]
          temp[1] = dataBuffer[index++];
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	1c5a      	adds	r2, r3, #1
 8006ab0:	61ba      	str	r2, [r7, #24]
 8006ab2:	4a16      	ldr	r2, [pc, #88]	@ (8006b0c <max30102_checksamples+0x1cc>)
 8006ab4:	5cd3      	ldrb	r3, [r2, r3]
 8006ab6:	747b      	strb	r3, [r7, #17]
          temp[0] = dataBuffer[index++];
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	61ba      	str	r2, [r7, #24]
 8006abe:	4a13      	ldr	r2, [pc, #76]	@ (8006b0c <max30102_checksamples+0x1cc>)
 8006ac0:	5cd3      	ldrb	r3, [r2, r3]
 8006ac2:	743b      	strb	r3, [r7, #16]
          memcpy(&tempLong, temp, sizeof(tempLong));
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	60fb      	str	r3, [r7, #12]
          tempLong &= 0x3FFFF;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8006ace:	60fb      	str	r3, [r7, #12]
          obj->_green[obj->_head] = tempLong;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	3340      	adds	r3, #64	@ 0x40
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	440b      	add	r3, r1
 8006ae0:	605a      	str	r2, [r3, #4]
        }

        toGet -=max30102_led_irg * 3;
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	3b09      	subs	r3, #9
 8006ae6:	623b      	str	r3, [r7, #32]
      while (toGet > 0)
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f73f af7c 	bgt.w	80069e8 <max30102_checksamples+0xa8>
    while (bytesLeftToRead > 0)
 8006af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f73f af5f 	bgt.w	80069b6 <max30102_checksamples+0x76>
      }
    }
  }
  return numberOfSamples;
 8006af8:	69fb      	ldr	r3, [r7, #28]

}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3728      	adds	r7, #40	@ 0x28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	200008e4 	.word	0x200008e4
 8006b08:	200008e5 	.word	0x200008e5
 8006b0c:	200008c4 	.word	0x200008c4

08006b10 <max30102_safeCheck>:

uint32_t max30102_safeCheck(max30102_t *obj)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	const uint8_t maxTimeToCheck = 250;
 8006b18:	23fa      	movs	r3, #250	@ 0xfa
 8006b1a:	73fb      	strb	r3, [r7, #15]
    uint32_t markTime = HAL_GetTick();  // Get the current system tick (in ms)
 8006b1c:	f7fa fff0 	bl	8001b00 <HAL_GetTick>
 8006b20:	60b8      	str	r0, [r7, #8]

    while (1)
    {
        if (HAL_GetTick() - markTime > maxTimeToCheck)
 8006b22:	f7fa ffed 	bl	8001b00 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	1ad2      	subs	r2, r2, r3
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d901      	bls.n	8006b36 <max30102_safeCheck+0x26>
        {
            return false;  // Timeout occurred
 8006b32:	2300      	movs	r3, #0
 8006b34:	e011      	b.n	8006b5a <max30102_safeCheck+0x4a>
        }

        if (max30102_checksamples(obj) == true)  // Check if new data is available (assuming `check()` is implemented elsewhere)
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff ff02 	bl	8006940 <max30102_checksamples>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d107      	bne.n	8006b52 <max30102_safeCheck+0x42>
        {
        	return obj->_ir_samples[obj->_head];  // New data found
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	e003      	b.n	8006b5a <max30102_safeCheck+0x4a>
        }
        HAL_Delay(1);  // Delay for 1 millisecond
 8006b52:	2001      	movs	r0, #1
 8006b54:	f7fa ffe0 	bl	8001b18 <HAL_Delay>
        if (HAL_GetTick() - markTime > maxTimeToCheck)
 8006b58:	e7e3      	b.n	8006b22 <max30102_safeCheck+0x12>
    }
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <EXTI_Init>:

/*
 * Temperature Interrupts
 */
void EXTI_Init(max30102_t *obj)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]

    HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 1);  // Set priority (lower number means higher priority)
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	2102      	movs	r1, #2
 8006b6e:	2006      	movs	r0, #6
 8006b70:	f7fb f8ae 	bl	8001cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);          // Enable EXTI line 0 interrupt
 8006b74:	2006      	movs	r0, #6
 8006b76:	f7fb f8c7 	bl	8001d08 <HAL_NVIC_EnableIRQ>
}
 8006b7a:	bf00      	nop
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <Spo2AvgProcess>:
    stat->sum = 0.0;
    stat->count = 0;
}

void Spo2AvgProcess(MinMaxAvgStatistic *stat, float value)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	ed87 0a00 	vstr	s0, [r7]
    if (isnan(stat->min))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	edd3 7a00 	vldr	s15, [r3]
 8006b94:	eef4 7a67 	vcmp.f32	s15, s15
 8006b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b9c:	d706      	bvc.n	8006bac <Spo2AvgProcess+0x2a>
    {
        stat->min = value;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	601a      	str	r2, [r3, #0]
        stat->max = value;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	605a      	str	r2, [r3, #4]
 8006baa:	e01b      	b.n	8006be4 <Spo2AvgProcess+0x62>
    }
    else
    {
        stat->min = fminf(stat->min, value);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	edd3 7a00 	vldr	s15, [r3]
 8006bb2:	eef0 0a67 	vmov.f32	s1, s15
 8006bb6:	ed97 0a00 	vldr	s0, [r7]
 8006bba:	f005 f858 	bl	800bc6e <fminf>
 8006bbe:	eef0 7a40 	vmov.f32	s15, s0
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	edc3 7a00 	vstr	s15, [r3]
        stat->max = fmaxf(stat->max, value);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	edd3 7a01 	vldr	s15, [r3, #4]
 8006bce:	eef0 0a67 	vmov.f32	s1, s15
 8006bd2:	ed97 0a00 	vldr	s0, [r7]
 8006bd6:	f005 f82d 	bl	800bc34 <fmaxf>
 8006bda:	eef0 7a40 	vmov.f32	s15, s0
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	edc3 7a01 	vstr	s15, [r3, #4]
    }
    stat->sum += value;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	ed93 7a02 	vldr	s14, [r3, #8]
 8006bea:	edd7 7a00 	vldr	s15, [r7]
 8006bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	edc3 7a02 	vstr	s15, [r3, #8]
    stat->count++;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60da      	str	r2, [r3, #12]
}
 8006c02:	bf00      	nop
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <average>:


float average(MinMaxAvgStatistic *stat)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
    return (stat->count > 0) ? stat->sum / stat->count : 0.0;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	dd0b      	ble.n	8006c34 <average+0x28>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	ed93 7a02 	vldr	s14, [r3, #8]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006c32:	e001      	b.n	8006c38 <average+0x2c>
 8006c34:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8006c4c <average+0x40>
 8006c38:	eef0 7a66 	vmov.f32	s15, s13
}
 8006c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	00000000 	.word	0x00000000

08006c50 <minimum>:


float minimum(MinMaxAvgStatistic *stat)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
    return stat->min;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	ee07 3a90 	vmov	s15, r3
}
 8006c60:	eeb0 0a67 	vmov.f32	s0, s15
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <maximum>:

float maximum(MinMaxAvgStatistic *stat)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
    return stat->max;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	ee07 3a90 	vmov	s15, r3
}
 8006c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <initMinMaxAvgStatistic>:


void initMinMaxAvgStatistic(MinMaxAvgStatistic *stat) {
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
    stat->min = 0.0;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f04f 0200 	mov.w	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
    stat->max = 0.0;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	605a      	str	r2, [r3, #4]
    stat->sum = 0.0;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	609a      	str	r2, [r3, #8]
    stat->count = 0;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	60da      	str	r2, [r3, #12]
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
	...

08006cc0 <Spo2AvgInit>:

void Spo2AvgInit(max30102_t *obj)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	ed2d 8b02 	vpush	{d8}
 8006cc6:	b08a      	sub	sp, #40	@ 0x28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
	float rred , rir, r = 0;
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	627b      	str	r3, [r7, #36]	@ 0x24
	float sample[4];
	initMinMaxAvgStatistic(&stat_red);
 8006cd2:	485a      	ldr	r0, [pc, #360]	@ (8006e3c <Spo2AvgInit+0x17c>)
 8006cd4:	f7ff ffda 	bl	8006c8c <initMinMaxAvgStatistic>
	initMinMaxAvgStatistic(&stat_ir);
 8006cd8:	4859      	ldr	r0, [pc, #356]	@ (8006e40 <Spo2AvgInit+0x180>)
 8006cda:	f7ff ffd7 	bl	8006c8c <initMinMaxAvgStatistic>

	sample[0] = LowPassFilter_process(&low_pass_filter, obj->_red_samples[0]);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ce4:	ee07 3a90 	vmov	s15, r3
 8006ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cec:	eeb0 0a67 	vmov.f32	s0, s15
 8006cf0:	4854      	ldr	r0, [pc, #336]	@ (8006e44 <Spo2AvgInit+0x184>)
 8006cf2:	f7ff fa69 	bl	80061c8 <LowPassFilter_process>
 8006cf6:	eef0 7a40 	vmov.f32	s15, s0
 8006cfa:	edc7 7a03 	vstr	s15, [r7, #12]
	sample[1] = LowPassFilter_process(&low_pass_filter, obj->_red_samples[2]);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d04:	ee07 3a90 	vmov	s15, r3
 8006d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8006d10:	484c      	ldr	r0, [pc, #304]	@ (8006e44 <Spo2AvgInit+0x184>)
 8006d12:	f7ff fa59 	bl	80061c8 <LowPassFilter_process>
 8006d16:	eef0 7a40 	vmov.f32	s15, s0
 8006d1a:	edc7 7a04 	vstr	s15, [r7, #16]
	sample[2] = LowPassFilter_process(&low_pass_filter, obj->_ir_samples[0]);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d2e:	4845      	ldr	r0, [pc, #276]	@ (8006e44 <Spo2AvgInit+0x184>)
 8006d30:	f7ff fa4a 	bl	80061c8 <LowPassFilter_process>
 8006d34:	eef0 7a40 	vmov.f32	s15, s0
 8006d38:	edc7 7a05 	vstr	s15, [r7, #20]
	sample[3] = LowPassFilter_process(&low_pass_filter, obj->_ir_samples[2]);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	ee07 3a90 	vmov	s15, r3
 8006d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d48:	eeb0 0a67 	vmov.f32	s0, s15
 8006d4c:	483d      	ldr	r0, [pc, #244]	@ (8006e44 <Spo2AvgInit+0x184>)
 8006d4e:	f7ff fa3b 	bl	80061c8 <LowPassFilter_process>
 8006d52:	eef0 7a40 	vmov.f32	s15, s0
 8006d56:	edc7 7a06 	vstr	s15, [r7, #24]


	Spo2AvgProcess(&stat_red, sample[0]);
 8006d5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d62:	4836      	ldr	r0, [pc, #216]	@ (8006e3c <Spo2AvgInit+0x17c>)
 8006d64:	f7ff ff0d 	bl	8006b82 <Spo2AvgProcess>
	Spo2AvgProcess(&stat_red, sample[1]);
 8006d68:	edd7 7a04 	vldr	s15, [r7, #16]
 8006d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8006d70:	4832      	ldr	r0, [pc, #200]	@ (8006e3c <Spo2AvgInit+0x17c>)
 8006d72:	f7ff ff06 	bl	8006b82 <Spo2AvgProcess>
	Spo2AvgProcess(&stat_ir, sample[3]);
 8006d76:	edd7 7a06 	vldr	s15, [r7, #24]
 8006d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d7e:	4830      	ldr	r0, [pc, #192]	@ (8006e40 <Spo2AvgInit+0x180>)
 8006d80:	f7ff feff 	bl	8006b82 <Spo2AvgProcess>
	Spo2AvgProcess(&stat_ir, sample[4]);
 8006d84:	edd7 7a07 	vldr	s15, [r7, #28]
 8006d88:	eeb0 0a67 	vmov.f32	s0, s15
 8006d8c:	482c      	ldr	r0, [pc, #176]	@ (8006e40 <Spo2AvgInit+0x180>)
 8006d8e:	f7ff fef8 	bl	8006b82 <Spo2AvgProcess>

	rred = (maximum(&stat_red) - minimum(&stat_red)) / average(&stat_red);
 8006d92:	482a      	ldr	r0, [pc, #168]	@ (8006e3c <Spo2AvgInit+0x17c>)
 8006d94:	f7ff ff6b 	bl	8006c6e <maximum>
 8006d98:	eeb0 8a40 	vmov.f32	s16, s0
 8006d9c:	4827      	ldr	r0, [pc, #156]	@ (8006e3c <Spo2AvgInit+0x17c>)
 8006d9e:	f7ff ff57 	bl	8006c50 <minimum>
 8006da2:	eef0 7a40 	vmov.f32	s15, s0
 8006da6:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006daa:	4824      	ldr	r0, [pc, #144]	@ (8006e3c <Spo2AvgInit+0x17c>)
 8006dac:	f7ff ff2e 	bl	8006c0c <average>
 8006db0:	eeb0 7a40 	vmov.f32	s14, s0
 8006db4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8006db8:	edc7 7a08 	vstr	s15, [r7, #32]
	rir = (maximum(&stat_ir) - minimum(&stat_ir)) / average(&stat_ir);
 8006dbc:	4820      	ldr	r0, [pc, #128]	@ (8006e40 <Spo2AvgInit+0x180>)
 8006dbe:	f7ff ff56 	bl	8006c6e <maximum>
 8006dc2:	eeb0 8a40 	vmov.f32	s16, s0
 8006dc6:	481e      	ldr	r0, [pc, #120]	@ (8006e40 <Spo2AvgInit+0x180>)
 8006dc8:	f7ff ff42 	bl	8006c50 <minimum>
 8006dcc:	eef0 7a40 	vmov.f32	s15, s0
 8006dd0:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006dd4:	481a      	ldr	r0, [pc, #104]	@ (8006e40 <Spo2AvgInit+0x180>)
 8006dd6:	f7ff ff19 	bl	8006c0c <average>
 8006dda:	eeb0 7a40 	vmov.f32	s14, s0
 8006dde:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8006de2:	edc7 7a07 	vstr	s15, [r7, #28]
	r = rred / rir;
 8006de6:	edd7 6a08 	vldr	s13, [r7, #32]
 8006dea:	ed97 7a07 	vldr	s14, [r7, #28]
 8006dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006df2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	spo2 = kSpO2_A * r * r + kSpO2_B * r + kSpO2_C;
 8006df6:	4b14      	ldr	r3, [pc, #80]	@ (8006e48 <Spo2AvgInit+0x188>)
 8006df8:	ed93 7a00 	vldr	s14, [r3]
 8006dfc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006e00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e04:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006e08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8006e4c <Spo2AvgInit+0x18c>)
 8006e0e:	edd3 6a00 	vldr	s13, [r3]
 8006e12:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006e16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e50 <Spo2AvgInit+0x190>)
 8006e20:	edd3 7a00 	vldr	s15, [r3]
 8006e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e28:	4b0a      	ldr	r3, [pc, #40]	@ (8006e54 <Spo2AvgInit+0x194>)
 8006e2a:	edc3 7a00 	vstr	s15, [r3]
}
 8006e2e:	bf00      	nop
 8006e30:	3728      	adds	r7, #40	@ 0x28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	ecbd 8b02 	vpop	{d8}
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	200008e8 	.word	0x200008e8
 8006e40:	200008f8 	.word	0x200008f8
 8006e44:	20000884 	.word	0x20000884
 8006e48:	2000000c 	.word	0x2000000c
 8006e4c:	20000010 	.word	0x20000010
 8006e50:	20000014 	.word	0x20000014
 8006e54:	20000820 	.word	0x20000820

08006e58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	4603      	mov	r3, r0
 8006e60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e6a:	2b84      	cmp	r3, #132	@ 0x84
 8006e6c:	d005      	beq.n	8006e7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006e6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4413      	add	r3, r2
 8006e76:	3303      	adds	r3, #3
 8006e78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006e8c:	f000 fe38 	bl	8007b00 <vTaskStartScheduler>
  
  return osOK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006e96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e98:	b089      	sub	sp, #36	@ 0x24
 8006e9a:	af04      	add	r7, sp, #16
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d020      	beq.n	8006eea <osThreadCreate+0x54>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01c      	beq.n	8006eea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685c      	ldr	r4, [r3, #4]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	691e      	ldr	r6, [r3, #16]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff ffc8 	bl	8006e58 <makeFreeRtosPriority>
 8006ec8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ed2:	9202      	str	r2, [sp, #8]
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	9100      	str	r1, [sp, #0]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	4632      	mov	r2, r6
 8006edc:	4629      	mov	r1, r5
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f000 fc2c 	bl	800773c <xTaskCreateStatic>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	e01c      	b.n	8006f24 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685c      	ldr	r4, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ef6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff ffaa 	bl	8006e58 <makeFreeRtosPriority>
 8006f04:	4602      	mov	r2, r0
 8006f06:	f107 030c 	add.w	r3, r7, #12
 8006f0a:	9301      	str	r3, [sp, #4]
 8006f0c:	9200      	str	r2, [sp, #0]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	4632      	mov	r2, r6
 8006f12:	4629      	mov	r1, r5
 8006f14:	4620      	mov	r0, r4
 8006f16:	f000 fc77 	bl	8007808 <xTaskCreate>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d001      	beq.n	8006f24 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006f20:	2300      	movs	r3, #0
 8006f22:	e000      	b.n	8006f26 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006f24:	68fb      	ldr	r3, [r7, #12]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f2e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <osDelay+0x16>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	e000      	b.n	8006f46 <osDelay+0x18>
 8006f44:	2301      	movs	r3, #1
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fda2 	bl	8007a90 <vTaskDelay>
  
  return osOK;
 8006f4c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b086      	sub	sp, #24
 8006f5a:	af02      	add	r7, sp, #8
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00f      	beq.n	8006f88 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d10a      	bne.n	8006f84 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	2203      	movs	r2, #3
 8006f74:	9200      	str	r2, [sp, #0]
 8006f76:	2200      	movs	r2, #0
 8006f78:	2100      	movs	r1, #0
 8006f7a:	2001      	movs	r0, #1
 8006f7c:	f000 f92f 	bl	80071de <xQueueGenericCreateStatic>
 8006f80:	4603      	mov	r3, r0
 8006f82:	e016      	b.n	8006fb2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006f84:	2300      	movs	r3, #0
 8006f86:	e014      	b.n	8006fb2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d110      	bne.n	8006fb0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006f8e:	2203      	movs	r2, #3
 8006f90:	2100      	movs	r1, #0
 8006f92:	2001      	movs	r0, #1
 8006f94:	f000 f9aa 	bl	80072ec <xQueueGenericCreate>
 8006f98:	60f8      	str	r0, [r7, #12]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <osSemaphoreCreate+0x56>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 fa02 	bl	80073b0 <xQueueGenericSend>
      return sema;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	e000      	b.n	8006fb2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006fb0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f103 0208 	add.w	r2, r3, #8
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006fd2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f103 0208 	add.w	r2, r3, #8
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f103 0208 	add.w	r2, r3, #8
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006fee:	bf00      	nop
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689a      	ldr	r2, [r3, #8]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	601a      	str	r2, [r3, #0]
}
 8007050:	bf00      	nop
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007072:	d103      	bne.n	800707c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	60fb      	str	r3, [r7, #12]
 800707a:	e00c      	b.n	8007096 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3308      	adds	r3, #8
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	e002      	b.n	800708a <vListInsert+0x2e>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	60fb      	str	r3, [r7, #12]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	429a      	cmp	r2, r3
 8007094:	d2f6      	bcs.n	8007084 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	601a      	str	r2, [r3, #0]
}
 80070c2:	bf00      	nop
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80070ce:	b480      	push	{r7}
 80070d0:	b085      	sub	sp, #20
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	6892      	ldr	r2, [r2, #8]
 80070e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	6852      	ldr	r2, [r2, #4]
 80070ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d103      	bne.n	8007102 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	1e5a      	subs	r2, r3, #1
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10d      	bne.n	8007152 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713a:	b672      	cpsid	i
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	b662      	cpsie	i
 800714a:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800714c:	bf00      	nop
 800714e:	bf00      	nop
 8007150:	e7fd      	b.n	800714e <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007152:	f001 faf3 	bl	800873c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800715e:	68f9      	ldr	r1, [r7, #12]
 8007160:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007162:	fb01 f303 	mul.w	r3, r1, r3
 8007166:	441a      	add	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007182:	3b01      	subs	r3, #1
 8007184:	68f9      	ldr	r1, [r7, #12]
 8007186:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007188:	fb01 f303 	mul.w	r3, r1, r3
 800718c:	441a      	add	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	22ff      	movs	r2, #255	@ 0xff
 8007196:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	22ff      	movs	r2, #255	@ 0xff
 800719e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d109      	bne.n	80071bc <xQueueGenericReset+0x9a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00f      	beq.n	80071d0 <xQueueGenericReset+0xae>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3310      	adds	r3, #16
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 fed7 	bl	8007f68 <xTaskRemoveFromEventList>
 80071ba:	e009      	b.n	80071d0 <xQueueGenericReset+0xae>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3310      	adds	r3, #16
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff fefa 	bl	8006fba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	3324      	adds	r3, #36	@ 0x24
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7ff fef5 	bl	8006fba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80071d0:	f001 faea 	bl	80087a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80071d4:	2301      	movs	r3, #1
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b08e      	sub	sp, #56	@ 0x38
 80071e2:	af02      	add	r7, sp, #8
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	607a      	str	r2, [r7, #4]
 80071ea:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10d      	bne.n	800720e <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f6:	b672      	cpsid	i
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	b662      	cpsie	i
 8007206:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	e7fd      	b.n	800720a <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10d      	bne.n	8007230 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007218:	b672      	cpsid	i
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	b662      	cpsie	i
 8007228:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800722a:	bf00      	nop
 800722c:	bf00      	nop
 800722e:	e7fd      	b.n	800722c <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <xQueueGenericCreateStatic+0x5e>
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <xQueueGenericCreateStatic+0x62>
 800723c:	2301      	movs	r3, #1
 800723e:	e000      	b.n	8007242 <xQueueGenericCreateStatic+0x64>
 8007240:	2300      	movs	r3, #0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10d      	bne.n	8007262 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724a:	b672      	cpsid	i
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	b662      	cpsie	i
 800725a:	623b      	str	r3, [r7, #32]
}
 800725c:	bf00      	nop
 800725e:	bf00      	nop
 8007260:	e7fd      	b.n	800725e <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d102      	bne.n	800726e <xQueueGenericCreateStatic+0x90>
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <xQueueGenericCreateStatic+0x94>
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <xQueueGenericCreateStatic+0x96>
 8007272:	2300      	movs	r3, #0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10d      	bne.n	8007294 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727c:	b672      	cpsid	i
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	b662      	cpsie	i
 800728c:	61fb      	str	r3, [r7, #28]
}
 800728e:	bf00      	nop
 8007290:	bf00      	nop
 8007292:	e7fd      	b.n	8007290 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007294:	2348      	movs	r3, #72	@ 0x48
 8007296:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2b48      	cmp	r3, #72	@ 0x48
 800729c:	d00d      	beq.n	80072ba <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a2:	b672      	cpsid	i
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	b662      	cpsie	i
 80072b2:	61bb      	str	r3, [r7, #24]
}
 80072b4:	bf00      	nop
 80072b6:	bf00      	nop
 80072b8:	e7fd      	b.n	80072b6 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80072ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80072c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00d      	beq.n	80072e2 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80072c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072ce:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80072d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	4613      	mov	r3, r2
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	68b9      	ldr	r1, [r7, #8]
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 f848 	bl	8007372 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3730      	adds	r7, #48	@ 0x30
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	@ 0x28
 80072f0:	af02      	add	r7, sp, #8
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	4613      	mov	r3, r2
 80072f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10d      	bne.n	800731c <xQueueGenericCreate+0x30>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007304:	b672      	cpsid	i
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	b662      	cpsie	i
 8007314:	613b      	str	r3, [r7, #16]
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	e7fd      	b.n	8007318 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d102      	bne.n	8007328 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007322:	2300      	movs	r3, #0
 8007324:	61fb      	str	r3, [r7, #28]
 8007326:	e004      	b.n	8007332 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	fb02 f303 	mul.w	r3, r2, r3
 8007330:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	3348      	adds	r3, #72	@ 0x48
 8007336:	4618      	mov	r0, r3
 8007338:	f001 fae8 	bl	800890c <pvPortMalloc>
 800733c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d011      	beq.n	8007368 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	3348      	adds	r3, #72	@ 0x48
 800734c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007356:	79fa      	ldrb	r2, [r7, #7]
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	4613      	mov	r3, r2
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	68b9      	ldr	r1, [r7, #8]
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 f805 	bl	8007372 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007368:	69bb      	ldr	r3, [r7, #24]
	}
 800736a:	4618      	mov	r0, r3
 800736c:	3720      	adds	r7, #32
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b084      	sub	sp, #16
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	607a      	str	r2, [r7, #4]
 800737e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d103      	bne.n	800738e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	e002      	b.n	8007394 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073a0:	2101      	movs	r1, #1
 80073a2:	69b8      	ldr	r0, [r7, #24]
 80073a4:	f7ff febd 	bl	8007122 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80073a8:	bf00      	nop
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08e      	sub	sp, #56	@ 0x38
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073be:	2300      	movs	r3, #0
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80073c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10d      	bne.n	80073e8 <xQueueGenericSend+0x38>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d0:	b672      	cpsid	i
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	b662      	cpsie	i
 80073e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80073e2:	bf00      	nop
 80073e4:	bf00      	nop
 80073e6:	e7fd      	b.n	80073e4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d103      	bne.n	80073f6 <xQueueGenericSend+0x46>
 80073ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <xQueueGenericSend+0x4a>
 80073f6:	2301      	movs	r3, #1
 80073f8:	e000      	b.n	80073fc <xQueueGenericSend+0x4c>
 80073fa:	2300      	movs	r3, #0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10d      	bne.n	800741c <xQueueGenericSend+0x6c>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007404:	b672      	cpsid	i
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	b662      	cpsie	i
 8007414:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007416:	bf00      	nop
 8007418:	bf00      	nop
 800741a:	e7fd      	b.n	8007418 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2b02      	cmp	r3, #2
 8007420:	d103      	bne.n	800742a <xQueueGenericSend+0x7a>
 8007422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007426:	2b01      	cmp	r3, #1
 8007428:	d101      	bne.n	800742e <xQueueGenericSend+0x7e>
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <xQueueGenericSend+0x80>
 800742e:	2300      	movs	r3, #0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10d      	bne.n	8007450 <xQueueGenericSend+0xa0>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007438:	b672      	cpsid	i
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	b662      	cpsie	i
 8007448:	623b      	str	r3, [r7, #32]
}
 800744a:	bf00      	nop
 800744c:	bf00      	nop
 800744e:	e7fd      	b.n	800744c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007450:	f000 ff52 	bl	80082f8 <xTaskGetSchedulerState>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d102      	bne.n	8007460 <xQueueGenericSend+0xb0>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <xQueueGenericSend+0xb4>
 8007460:	2301      	movs	r3, #1
 8007462:	e000      	b.n	8007466 <xQueueGenericSend+0xb6>
 8007464:	2300      	movs	r3, #0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10d      	bne.n	8007486 <xQueueGenericSend+0xd6>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746e:	b672      	cpsid	i
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	b662      	cpsie	i
 800747e:	61fb      	str	r3, [r7, #28]
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	e7fd      	b.n	8007482 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007486:	f001 f959 	bl	800873c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800748a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800748e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007492:	429a      	cmp	r2, r3
 8007494:	d302      	bcc.n	800749c <xQueueGenericSend+0xec>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b02      	cmp	r3, #2
 800749a:	d112      	bne.n	80074c2 <xQueueGenericSend+0x112>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800749c:	683a      	ldr	r2, [r7, #0]
 800749e:	68b9      	ldr	r1, [r7, #8]
 80074a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074a2:	f000 f877 	bl	8007594 <prvCopyDataToQueue>
 80074a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d004      	beq.n	80074ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b2:	3324      	adds	r3, #36	@ 0x24
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 fd57 	bl	8007f68 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80074ba:	f001 f975 	bl	80087a8 <vPortExitCritical>
				return pdPASS;
 80074be:	2301      	movs	r3, #1
 80074c0:	e062      	b.n	8007588 <xQueueGenericSend+0x1d8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d103      	bne.n	80074d0 <xQueueGenericSend+0x120>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074c8:	f001 f96e 	bl	80087a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80074cc:	2300      	movs	r3, #0
 80074ce:	e05b      	b.n	8007588 <xQueueGenericSend+0x1d8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d106      	bne.n	80074e4 <xQueueGenericSend+0x134>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074d6:	f107 0314 	add.w	r3, r7, #20
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fdaa 	bl	8008034 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074e0:	2301      	movs	r3, #1
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074e4:	f001 f960 	bl	80087a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074e8:	f000 fb78 	bl	8007bdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074ec:	f001 f926 	bl	800873c <vPortEnterCritical>
 80074f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074f6:	b25b      	sxtb	r3, r3
 80074f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074fc:	d103      	bne.n	8007506 <xQueueGenericSend+0x156>
 80074fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007508:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800750c:	b25b      	sxtb	r3, r3
 800750e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007512:	d103      	bne.n	800751c <xQueueGenericSend+0x16c>
 8007514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800751c:	f001 f944 	bl	80087a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007520:	1d3a      	adds	r2, r7, #4
 8007522:	f107 0314 	add.w	r3, r7, #20
 8007526:	4611      	mov	r1, r2
 8007528:	4618      	mov	r0, r3
 800752a:	f000 fd99 	bl	8008060 <xTaskCheckForTimeOut>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d123      	bne.n	800757c <xQueueGenericSend+0x1cc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007534:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007536:	f000 f8e9 	bl	800770c <prvIsQueueFull>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d017      	beq.n	8007570 <xQueueGenericSend+0x1c0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	3310      	adds	r3, #16
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	4611      	mov	r1, r2
 8007548:	4618      	mov	r0, r3
 800754a:	f000 fce5 	bl	8007f18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800754e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007550:	f000 f88a 	bl	8007668 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007554:	f000 fb50 	bl	8007bf8 <xTaskResumeAll>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d193      	bne.n	8007486 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800755e:	4b0c      	ldr	r3, [pc, #48]	@ (8007590 <xQueueGenericSend+0x1e0>)
 8007560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	e78a      	b.n	8007486 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007570:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007572:	f000 f879 	bl	8007668 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007576:	f000 fb3f 	bl	8007bf8 <xTaskResumeAll>
 800757a:	e784      	b.n	8007486 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800757c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800757e:	f000 f873 	bl	8007668 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007582:	f000 fb39 	bl	8007bf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007586:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007588:	4618      	mov	r0, r3
 800758a:	3738      	adds	r7, #56	@ 0x38
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	e000ed04 	.word	0xe000ed04

08007594 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10d      	bne.n	80075ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d14d      	bne.n	8007656 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 feb8 	bl	8008334 <xTaskPriorityDisinherit>
 80075c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	609a      	str	r2, [r3, #8]
 80075cc:	e043      	b.n	8007656 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d119      	bne.n	8007608 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6858      	ldr	r0, [r3, #4]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075dc:	461a      	mov	r2, r3
 80075de:	68b9      	ldr	r1, [r7, #8]
 80075e0:	f002 f947 	bl	8009872 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ec:	441a      	add	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d32b      	bcc.n	8007656 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	605a      	str	r2, [r3, #4]
 8007606:	e026      	b.n	8007656 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	68d8      	ldr	r0, [r3, #12]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007610:	461a      	mov	r2, r3
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	f002 f92d 	bl	8009872 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007620:	425b      	negs	r3, r3
 8007622:	441a      	add	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	68da      	ldr	r2, [r3, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	429a      	cmp	r2, r3
 8007632:	d207      	bcs.n	8007644 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763c:	425b      	negs	r3, r3
 800763e:	441a      	add	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b02      	cmp	r3, #2
 8007648:	d105      	bne.n	8007656 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	3b01      	subs	r3, #1
 8007654:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800765e:	697b      	ldr	r3, [r7, #20]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007670:	f001 f864 	bl	800873c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800767a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800767c:	e011      	b.n	80076a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007682:	2b00      	cmp	r3, #0
 8007684:	d012      	beq.n	80076ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3324      	adds	r3, #36	@ 0x24
 800768a:	4618      	mov	r0, r3
 800768c:	f000 fc6c 	bl	8007f68 <xTaskRemoveFromEventList>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007696:	f000 fd4b 	bl	8008130 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800769a:	7bfb      	ldrb	r3, [r7, #15]
 800769c:	3b01      	subs	r3, #1
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	dce9      	bgt.n	800767e <prvUnlockQueue+0x16>
 80076aa:	e000      	b.n	80076ae <prvUnlockQueue+0x46>
					break;
 80076ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	22ff      	movs	r2, #255	@ 0xff
 80076b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80076b6:	f001 f877 	bl	80087a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076ba:	f001 f83f 	bl	800873c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076c6:	e011      	b.n	80076ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d012      	beq.n	80076f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3310      	adds	r3, #16
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fc47 	bl	8007f68 <xTaskRemoveFromEventList>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80076e0:	f000 fd26 	bl	8008130 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	dce9      	bgt.n	80076c8 <prvUnlockQueue+0x60>
 80076f4:	e000      	b.n	80076f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	22ff      	movs	r2, #255	@ 0xff
 80076fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007700:	f001 f852 	bl	80087a8 <vPortExitCritical>
}
 8007704:	bf00      	nop
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007714:	f001 f812 	bl	800873c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007720:	429a      	cmp	r2, r3
 8007722:	d102      	bne.n	800772a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007724:	2301      	movs	r3, #1
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	e001      	b.n	800772e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800772a:	2300      	movs	r3, #0
 800772c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800772e:	f001 f83b 	bl	80087a8 <vPortExitCritical>

	return xReturn;
 8007732:	68fb      	ldr	r3, [r7, #12]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08e      	sub	sp, #56	@ 0x38
 8007740:	af04      	add	r7, sp, #16
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800774a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10d      	bne.n	800776c <xTaskCreateStatic+0x30>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007754:	b672      	cpsid	i
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	b662      	cpsie	i
 8007764:	623b      	str	r3, [r7, #32]
}
 8007766:	bf00      	nop
 8007768:	bf00      	nop
 800776a:	e7fd      	b.n	8007768 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800776c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10d      	bne.n	800778e <xTaskCreateStatic+0x52>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007776:	b672      	cpsid	i
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	b662      	cpsie	i
 8007786:	61fb      	str	r3, [r7, #28]
}
 8007788:	bf00      	nop
 800778a:	bf00      	nop
 800778c:	e7fd      	b.n	800778a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800778e:	23a0      	movs	r3, #160	@ 0xa0
 8007790:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2ba0      	cmp	r3, #160	@ 0xa0
 8007796:	d00d      	beq.n	80077b4 <xTaskCreateStatic+0x78>
	__asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779c:	b672      	cpsid	i
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	b662      	cpsie	i
 80077ac:	61bb      	str	r3, [r7, #24]
}
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
 80077b2:	e7fd      	b.n	80077b0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80077b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80077b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d01e      	beq.n	80077fa <xTaskCreateStatic+0xbe>
 80077bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01b      	beq.n	80077fa <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80077c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80077cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80077d4:	2300      	movs	r3, #0
 80077d6:	9303      	str	r3, [sp, #12]
 80077d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077da:	9302      	str	r3, [sp, #8]
 80077dc:	f107 0314 	add.w	r3, r7, #20
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 f851 	bl	8007894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80077f4:	f000 f8f0 	bl	80079d8 <prvAddNewTaskToReadyList>
 80077f8:	e001      	b.n	80077fe <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80077fe:	697b      	ldr	r3, [r7, #20]
	}
 8007800:	4618      	mov	r0, r3
 8007802:	3728      	adds	r7, #40	@ 0x28
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007808:	b580      	push	{r7, lr}
 800780a:	b08c      	sub	sp, #48	@ 0x30
 800780c:	af04      	add	r7, sp, #16
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	603b      	str	r3, [r7, #0]
 8007814:	4613      	mov	r3, r2
 8007816:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007818:	88fb      	ldrh	r3, [r7, #6]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4618      	mov	r0, r3
 800781e:	f001 f875 	bl	800890c <pvPortMalloc>
 8007822:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00e      	beq.n	8007848 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800782a:	20a0      	movs	r0, #160	@ 0xa0
 800782c:	f001 f86e 	bl	800890c <pvPortMalloc>
 8007830:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	631a      	str	r2, [r3, #48]	@ 0x30
 800783e:	e005      	b.n	800784c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007840:	6978      	ldr	r0, [r7, #20]
 8007842:	f001 f931 	bl	8008aa8 <vPortFree>
 8007846:	e001      	b.n	800784c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007848:	2300      	movs	r3, #0
 800784a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d017      	beq.n	8007882 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800785a:	88fa      	ldrh	r2, [r7, #6]
 800785c:	2300      	movs	r3, #0
 800785e:	9303      	str	r3, [sp, #12]
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	9302      	str	r3, [sp, #8]
 8007864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007866:	9301      	str	r3, [sp, #4]
 8007868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	68b9      	ldr	r1, [r7, #8]
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 f80f 	bl	8007894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007876:	69f8      	ldr	r0, [r7, #28]
 8007878:	f000 f8ae 	bl	80079d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800787c:	2301      	movs	r3, #1
 800787e:	61bb      	str	r3, [r7, #24]
 8007880:	e002      	b.n	8007888 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007882:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007886:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007888:	69bb      	ldr	r3, [r7, #24]
	}
 800788a:	4618      	mov	r0, r3
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80078a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078a6:	6879      	ldr	r1, [r7, #4]
 80078a8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80078ac:	440b      	add	r3, r1
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	f023 0307 	bic.w	r3, r3, #7
 80078ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	f003 0307 	and.w	r3, r3, #7
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00d      	beq.n	80078e2 <prvInitialiseNewTask+0x4e>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ca:	b672      	cpsid	i
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	b662      	cpsie	i
 80078da:	617b      	str	r3, [r7, #20]
}
 80078dc:	bf00      	nop
 80078de:	bf00      	nop
 80078e0:	e7fd      	b.n	80078de <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d01f      	beq.n	8007928 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078e8:	2300      	movs	r3, #0
 80078ea:	61fb      	str	r3, [r7, #28]
 80078ec:	e012      	b.n	8007914 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	4413      	add	r3, r2
 80078f4:	7819      	ldrb	r1, [r3, #0]
 80078f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	4413      	add	r3, r2
 80078fc:	3334      	adds	r3, #52	@ 0x34
 80078fe:	460a      	mov	r2, r1
 8007900:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	4413      	add	r3, r2
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d006      	beq.n	800791c <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	3301      	adds	r3, #1
 8007912:	61fb      	str	r3, [r7, #28]
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	2b0f      	cmp	r3, #15
 8007918:	d9e9      	bls.n	80078ee <prvInitialiseNewTask+0x5a>
 800791a:	e000      	b.n	800791e <prvInitialiseNewTask+0x8a>
			{
				break;
 800791c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800791e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007926:	e003      	b.n	8007930 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007932:	2b06      	cmp	r3, #6
 8007934:	d901      	bls.n	800793a <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007936:	2306      	movs	r3, #6
 8007938:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800793a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800793e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007942:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007944:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007948:	2200      	movs	r2, #0
 800794a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794e:	3304      	adds	r3, #4
 8007950:	4618      	mov	r0, r3
 8007952:	f7ff fb52 	bl	8006ffa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007958:	3318      	adds	r3, #24
 800795a:	4618      	mov	r0, r3
 800795c:	f7ff fb4d 	bl	8006ffa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007964:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007968:	f1c3 0207 	rsb	r2, r3, #7
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007974:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007978:	2200      	movs	r2, #0
 800797a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800797e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007980:	2200      	movs	r2, #0
 8007982:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007988:	334c      	adds	r3, #76	@ 0x4c
 800798a:	224c      	movs	r2, #76	@ 0x4c
 800798c:	2100      	movs	r1, #0
 800798e:	4618      	mov	r0, r3
 8007990:	f001 fee0 	bl	8009754 <memset>
 8007994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007996:	4a0d      	ldr	r2, [pc, #52]	@ (80079cc <prvInitialiseNewTask+0x138>)
 8007998:	651a      	str	r2, [r3, #80]	@ 0x50
 800799a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799c:	4a0c      	ldr	r2, [pc, #48]	@ (80079d0 <prvInitialiseNewTask+0x13c>)
 800799e:	655a      	str	r2, [r3, #84]	@ 0x54
 80079a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a2:	4a0c      	ldr	r2, [pc, #48]	@ (80079d4 <prvInitialiseNewTask+0x140>)
 80079a4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	68f9      	ldr	r1, [r7, #12]
 80079aa:	69b8      	ldr	r0, [r7, #24]
 80079ac:	f000 fdb4 	bl	8008518 <pxPortInitialiseStack>
 80079b0:	4602      	mov	r2, r0
 80079b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80079b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079c2:	bf00      	nop
 80079c4:	3720      	adds	r7, #32
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20004654 	.word	0x20004654
 80079d0:	200046bc 	.word	0x200046bc
 80079d4:	20004724 	.word	0x20004724

080079d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80079e0:	f000 feac 	bl	800873c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80079e4:	4b24      	ldr	r3, [pc, #144]	@ (8007a78 <prvAddNewTaskToReadyList+0xa0>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3301      	adds	r3, #1
 80079ea:	4a23      	ldr	r2, [pc, #140]	@ (8007a78 <prvAddNewTaskToReadyList+0xa0>)
 80079ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80079ee:	4b23      	ldr	r3, [pc, #140]	@ (8007a7c <prvAddNewTaskToReadyList+0xa4>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80079f6:	4a21      	ldr	r2, [pc, #132]	@ (8007a7c <prvAddNewTaskToReadyList+0xa4>)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80079fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007a78 <prvAddNewTaskToReadyList+0xa0>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d110      	bne.n	8007a26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a04:	f000 fbb2 	bl	800816c <prvInitialiseTaskLists>
 8007a08:	e00d      	b.n	8007a26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8007a80 <prvAddNewTaskToReadyList+0xa8>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d109      	bne.n	8007a26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a12:	4b1a      	ldr	r3, [pc, #104]	@ (8007a7c <prvAddNewTaskToReadyList+0xa4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d802      	bhi.n	8007a26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a20:	4a16      	ldr	r2, [pc, #88]	@ (8007a7c <prvAddNewTaskToReadyList+0xa4>)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a26:	4b17      	ldr	r3, [pc, #92]	@ (8007a84 <prvAddNewTaskToReadyList+0xac>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	4a15      	ldr	r2, [pc, #84]	@ (8007a84 <prvAddNewTaskToReadyList+0xac>)
 8007a2e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a34:	2201      	movs	r2, #1
 8007a36:	409a      	lsls	r2, r3
 8007a38:	4b13      	ldr	r3, [pc, #76]	@ (8007a88 <prvAddNewTaskToReadyList+0xb0>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	4a12      	ldr	r2, [pc, #72]	@ (8007a88 <prvAddNewTaskToReadyList+0xb0>)
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8007a8c <prvAddNewTaskToReadyList+0xb4>)
 8007a50:	441a      	add	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3304      	adds	r3, #4
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f7ff fadb 	bl	8007014 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a5e:	f000 fea3 	bl	80087a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a62:	4b07      	ldr	r3, [pc, #28]	@ (8007a80 <prvAddNewTaskToReadyList+0xa8>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a6a:	4b04      	ldr	r3, [pc, #16]	@ (8007a7c <prvAddNewTaskToReadyList+0xa4>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a6e:	bf00      	nop
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000a08 	.word	0x20000a08
 8007a7c:	20000908 	.word	0x20000908
 8007a80:	20000a14 	.word	0x20000a14
 8007a84:	20000a24 	.word	0x20000a24
 8007a88:	20000a10 	.word	0x20000a10
 8007a8c:	2000090c 	.word	0x2000090c

08007a90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d01a      	beq.n	8007ad8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007aa2:	4b15      	ldr	r3, [pc, #84]	@ (8007af8 <vTaskDelay+0x68>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00d      	beq.n	8007ac6 <vTaskDelay+0x36>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aae:	b672      	cpsid	i
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	b662      	cpsie	i
 8007abe:	60bb      	str	r3, [r7, #8]
}
 8007ac0:	bf00      	nop
 8007ac2:	bf00      	nop
 8007ac4:	e7fd      	b.n	8007ac2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007ac6:	f000 f889 	bl	8007bdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007aca:	2100      	movs	r1, #0
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fcbd 	bl	800844c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ad2:	f000 f891 	bl	8007bf8 <xTaskResumeAll>
 8007ad6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d107      	bne.n	8007aee <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8007ade:	4b07      	ldr	r3, [pc, #28]	@ (8007afc <vTaskDelay+0x6c>)
 8007ae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007aee:	bf00      	nop
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20000a30 	.word	0x20000a30
 8007afc:	e000ed04 	.word	0xe000ed04

08007b00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08a      	sub	sp, #40	@ 0x28
 8007b04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b0e:	463a      	mov	r2, r7
 8007b10:	1d39      	adds	r1, r7, #4
 8007b12:	f107 0308 	add.w	r3, r7, #8
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7f9 fa36 	bl	8000f88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	9202      	str	r2, [sp, #8]
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	2300      	movs	r3, #0
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	460a      	mov	r2, r1
 8007b2e:	4923      	ldr	r1, [pc, #140]	@ (8007bbc <vTaskStartScheduler+0xbc>)
 8007b30:	4823      	ldr	r0, [pc, #140]	@ (8007bc0 <vTaskStartScheduler+0xc0>)
 8007b32:	f7ff fe03 	bl	800773c <xTaskCreateStatic>
 8007b36:	4603      	mov	r3, r0
 8007b38:	4a22      	ldr	r2, [pc, #136]	@ (8007bc4 <vTaskStartScheduler+0xc4>)
 8007b3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b3c:	4b21      	ldr	r3, [pc, #132]	@ (8007bc4 <vTaskStartScheduler+0xc4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b44:	2301      	movs	r3, #1
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	e001      	b.n	8007b4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d11d      	bne.n	8007b90 <vTaskStartScheduler+0x90>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b58:	b672      	cpsid	i
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	b662      	cpsie	i
 8007b68:	613b      	str	r3, [r7, #16]
}
 8007b6a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b6c:	4b16      	ldr	r3, [pc, #88]	@ (8007bc8 <vTaskStartScheduler+0xc8>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	334c      	adds	r3, #76	@ 0x4c
 8007b72:	4a16      	ldr	r2, [pc, #88]	@ (8007bcc <vTaskStartScheduler+0xcc>)
 8007b74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b76:	4b16      	ldr	r3, [pc, #88]	@ (8007bd0 <vTaskStartScheduler+0xd0>)
 8007b78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b7e:	4b15      	ldr	r3, [pc, #84]	@ (8007bd4 <vTaskStartScheduler+0xd4>)
 8007b80:	2201      	movs	r2, #1
 8007b82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b84:	4b14      	ldr	r3, [pc, #80]	@ (8007bd8 <vTaskStartScheduler+0xd8>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b8a:	f000 fd59 	bl	8008640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b8e:	e011      	b.n	8007bb4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b96:	d10d      	bne.n	8007bb4 <vTaskStartScheduler+0xb4>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9c:	b672      	cpsid	i
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	b662      	cpsie	i
 8007bac:	60fb      	str	r3, [r7, #12]
}
 8007bae:	bf00      	nop
 8007bb0:	bf00      	nop
 8007bb2:	e7fd      	b.n	8007bb0 <vTaskStartScheduler+0xb0>
}
 8007bb4:	bf00      	nop
 8007bb6:	3718      	adds	r7, #24
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	0800be20 	.word	0x0800be20
 8007bc0:	08008149 	.word	0x08008149
 8007bc4:	20000a2c 	.word	0x20000a2c
 8007bc8:	20000908 	.word	0x20000908
 8007bcc:	20000028 	.word	0x20000028
 8007bd0:	20000a28 	.word	0x20000a28
 8007bd4:	20000a14 	.word	0x20000a14
 8007bd8:	20000a0c 	.word	0x20000a0c

08007bdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007be0:	4b04      	ldr	r3, [pc, #16]	@ (8007bf4 <vTaskSuspendAll+0x18>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3301      	adds	r3, #1
 8007be6:	4a03      	ldr	r2, [pc, #12]	@ (8007bf4 <vTaskSuspendAll+0x18>)
 8007be8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007bea:	bf00      	nop
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	20000a30 	.word	0x20000a30

08007bf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c02:	2300      	movs	r3, #0
 8007c04:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c06:	4b3d      	ldr	r3, [pc, #244]	@ (8007cfc <xTaskResumeAll+0x104>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10d      	bne.n	8007c2a <xTaskResumeAll+0x32>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c12:	b672      	cpsid	i
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	b662      	cpsie	i
 8007c22:	603b      	str	r3, [r7, #0]
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop
 8007c28:	e7fd      	b.n	8007c26 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c2a:	f000 fd87 	bl	800873c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c2e:	4b33      	ldr	r3, [pc, #204]	@ (8007cfc <xTaskResumeAll+0x104>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	4a31      	ldr	r2, [pc, #196]	@ (8007cfc <xTaskResumeAll+0x104>)
 8007c36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c38:	4b30      	ldr	r3, [pc, #192]	@ (8007cfc <xTaskResumeAll+0x104>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d155      	bne.n	8007cec <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c40:	4b2f      	ldr	r3, [pc, #188]	@ (8007d00 <xTaskResumeAll+0x108>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d051      	beq.n	8007cec <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c48:	e02e      	b.n	8007ca8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8007d04 <xTaskResumeAll+0x10c>)
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3318      	adds	r3, #24
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff fa39 	bl	80070ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7ff fa34 	bl	80070ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	409a      	lsls	r2, r3
 8007c6e:	4b26      	ldr	r3, [pc, #152]	@ (8007d08 <xTaskResumeAll+0x110>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	4a24      	ldr	r2, [pc, #144]	@ (8007d08 <xTaskResumeAll+0x110>)
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4a21      	ldr	r2, [pc, #132]	@ (8007d0c <xTaskResumeAll+0x114>)
 8007c86:	441a      	add	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	f7ff f9c0 	bl	8007014 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c98:	4b1d      	ldr	r3, [pc, #116]	@ (8007d10 <xTaskResumeAll+0x118>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d302      	bcc.n	8007ca8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8007d14 <xTaskResumeAll+0x11c>)
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ca8:	4b16      	ldr	r3, [pc, #88]	@ (8007d04 <xTaskResumeAll+0x10c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1cc      	bne.n	8007c4a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cb6:	f000 faff 	bl	80082b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007cba:	4b17      	ldr	r3, [pc, #92]	@ (8007d18 <xTaskResumeAll+0x120>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d010      	beq.n	8007ce8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007cc6:	f000 f829 	bl	8007d1c <xTaskIncrementTick>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007cd0:	4b10      	ldr	r3, [pc, #64]	@ (8007d14 <xTaskResumeAll+0x11c>)
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1f1      	bne.n	8007cc6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d18 <xTaskResumeAll+0x120>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8007d14 <xTaskResumeAll+0x11c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cec:	f000 fd5c 	bl	80087a8 <vPortExitCritical>

	return xAlreadyYielded;
 8007cf0:	687b      	ldr	r3, [r7, #4]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000a30 	.word	0x20000a30
 8007d00:	20000a08 	.word	0x20000a08
 8007d04:	200009c8 	.word	0x200009c8
 8007d08:	20000a10 	.word	0x20000a10
 8007d0c:	2000090c 	.word	0x2000090c
 8007d10:	20000908 	.word	0x20000908
 8007d14:	20000a1c 	.word	0x20000a1c
 8007d18:	20000a18 	.word	0x20000a18

08007d1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d26:	4b40      	ldr	r3, [pc, #256]	@ (8007e28 <xTaskIncrementTick+0x10c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d172      	bne.n	8007e14 <xTaskIncrementTick+0xf8>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8007e2c <xTaskIncrementTick+0x110>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3301      	adds	r3, #1
 8007d34:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d36:	4a3d      	ldr	r2, [pc, #244]	@ (8007e2c <xTaskIncrementTick+0x110>)
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d123      	bne.n	8007d8a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d42:	4b3b      	ldr	r3, [pc, #236]	@ (8007e30 <xTaskIncrementTick+0x114>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00d      	beq.n	8007d68 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d50:	b672      	cpsid	i
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	b662      	cpsie	i
 8007d60:	603b      	str	r3, [r7, #0]
}
 8007d62:	bf00      	nop
 8007d64:	bf00      	nop
 8007d66:	e7fd      	b.n	8007d64 <xTaskIncrementTick+0x48>
 8007d68:	4b31      	ldr	r3, [pc, #196]	@ (8007e30 <xTaskIncrementTick+0x114>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	4b31      	ldr	r3, [pc, #196]	@ (8007e34 <xTaskIncrementTick+0x118>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a2f      	ldr	r2, [pc, #188]	@ (8007e30 <xTaskIncrementTick+0x114>)
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	4a2f      	ldr	r2, [pc, #188]	@ (8007e34 <xTaskIncrementTick+0x118>)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8007e38 <xTaskIncrementTick+0x11c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3301      	adds	r3, #1
 8007d82:	4a2d      	ldr	r2, [pc, #180]	@ (8007e38 <xTaskIncrementTick+0x11c>)
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	f000 fa97 	bl	80082b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8007e3c <xTaskIncrementTick+0x120>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d344      	bcc.n	8007e1e <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d94:	4b26      	ldr	r3, [pc, #152]	@ (8007e30 <xTaskIncrementTick+0x114>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d104      	bne.n	8007da8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d9e:	4b27      	ldr	r3, [pc, #156]	@ (8007e3c <xTaskIncrementTick+0x120>)
 8007da0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007da4:	601a      	str	r2, [r3, #0]
					break;
 8007da6:	e03a      	b.n	8007e1e <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007da8:	4b21      	ldr	r3, [pc, #132]	@ (8007e30 <xTaskIncrementTick+0x114>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d203      	bcs.n	8007dc8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8007e3c <xTaskIncrementTick+0x120>)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007dc6:	e02a      	b.n	8007e1e <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	3304      	adds	r3, #4
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff f97e 	bl	80070ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d004      	beq.n	8007de4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	3318      	adds	r3, #24
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff f975 	bl	80070ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de8:	2201      	movs	r2, #1
 8007dea:	409a      	lsls	r2, r3
 8007dec:	4b14      	ldr	r3, [pc, #80]	@ (8007e40 <xTaskIncrementTick+0x124>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	4a13      	ldr	r2, [pc, #76]	@ (8007e40 <xTaskIncrementTick+0x124>)
 8007df4:	6013      	str	r3, [r2, #0]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4a10      	ldr	r2, [pc, #64]	@ (8007e44 <xTaskIncrementTick+0x128>)
 8007e04:	441a      	add	r2, r3
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	f7ff f901 	bl	8007014 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e12:	e7bf      	b.n	8007d94 <xTaskIncrementTick+0x78>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e14:	4b0c      	ldr	r3, [pc, #48]	@ (8007e48 <xTaskIncrementTick+0x12c>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	4a0b      	ldr	r2, [pc, #44]	@ (8007e48 <xTaskIncrementTick+0x12c>)
 8007e1c:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007e1e:	697b      	ldr	r3, [r7, #20]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20000a30 	.word	0x20000a30
 8007e2c:	20000a0c 	.word	0x20000a0c
 8007e30:	200009c0 	.word	0x200009c0
 8007e34:	200009c4 	.word	0x200009c4
 8007e38:	20000a20 	.word	0x20000a20
 8007e3c:	20000a28 	.word	0x20000a28
 8007e40:	20000a10 	.word	0x20000a10
 8007e44:	2000090c 	.word	0x2000090c
 8007e48:	20000a18 	.word	0x20000a18

08007e4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e52:	4b2b      	ldr	r3, [pc, #172]	@ (8007f00 <vTaskSwitchContext+0xb4>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8007f04 <vTaskSwitchContext+0xb8>)
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e60:	e047      	b.n	8007ef2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007e62:	4b28      	ldr	r3, [pc, #160]	@ (8007f04 <vTaskSwitchContext+0xb8>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e68:	4b27      	ldr	r3, [pc, #156]	@ (8007f08 <vTaskSwitchContext+0xbc>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	fab3 f383 	clz	r3, r3
 8007e74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007e76:	7afb      	ldrb	r3, [r7, #11]
 8007e78:	f1c3 031f 	rsb	r3, r3, #31
 8007e7c:	617b      	str	r3, [r7, #20]
 8007e7e:	4923      	ldr	r1, [pc, #140]	@ (8007f0c <vTaskSwitchContext+0xc0>)
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	4613      	mov	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	440b      	add	r3, r1
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10d      	bne.n	8007eae <vTaskSwitchContext+0x62>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e96:	b672      	cpsid	i
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	b662      	cpsie	i
 8007ea6:	607b      	str	r3, [r7, #4]
}
 8007ea8:	bf00      	nop
 8007eaa:	bf00      	nop
 8007eac:	e7fd      	b.n	8007eaa <vTaskSwitchContext+0x5e>
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4a14      	ldr	r2, [pc, #80]	@ (8007f0c <vTaskSwitchContext+0xc0>)
 8007eba:	4413      	add	r3, r2
 8007ebc:	613b      	str	r3, [r7, #16]
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	605a      	str	r2, [r3, #4]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	3308      	adds	r3, #8
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d104      	bne.n	8007ede <vTaskSwitchContext+0x92>
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	605a      	str	r2, [r3, #4]
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8007f10 <vTaskSwitchContext+0xc4>)
 8007ee6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ee8:	4b09      	ldr	r3, [pc, #36]	@ (8007f10 <vTaskSwitchContext+0xc4>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	334c      	adds	r3, #76	@ 0x4c
 8007eee:	4a09      	ldr	r2, [pc, #36]	@ (8007f14 <vTaskSwitchContext+0xc8>)
 8007ef0:	6013      	str	r3, [r2, #0]
}
 8007ef2:	bf00      	nop
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	20000a30 	.word	0x20000a30
 8007f04:	20000a1c 	.word	0x20000a1c
 8007f08:	20000a10 	.word	0x20000a10
 8007f0c:	2000090c 	.word	0x2000090c
 8007f10:	20000908 	.word	0x20000908
 8007f14:	20000028 	.word	0x20000028

08007f18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10d      	bne.n	8007f44 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2c:	b672      	cpsid	i
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	b662      	cpsie	i
 8007f3c:	60fb      	str	r3, [r7, #12]
}
 8007f3e:	bf00      	nop
 8007f40:	bf00      	nop
 8007f42:	e7fd      	b.n	8007f40 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f44:	4b07      	ldr	r3, [pc, #28]	@ (8007f64 <vTaskPlaceOnEventList+0x4c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3318      	adds	r3, #24
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff f885 	bl	800705c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f52:	2101      	movs	r1, #1
 8007f54:	6838      	ldr	r0, [r7, #0]
 8007f56:	f000 fa79 	bl	800844c <prvAddCurrentTaskToDelayedList>
}
 8007f5a:	bf00      	nop
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20000908 	.word	0x20000908

08007f68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10d      	bne.n	8007f9a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f82:	b672      	cpsid	i
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	b662      	cpsie	i
 8007f92:	60fb      	str	r3, [r7, #12]
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	e7fd      	b.n	8007f96 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	3318      	adds	r3, #24
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7ff f895 	bl	80070ce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800801c <xTaskRemoveFromEventList+0xb4>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d11c      	bne.n	8007fe6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7ff f88c 	bl	80070ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fba:	2201      	movs	r2, #1
 8007fbc:	409a      	lsls	r2, r3
 8007fbe:	4b18      	ldr	r3, [pc, #96]	@ (8008020 <xTaskRemoveFromEventList+0xb8>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	4a16      	ldr	r2, [pc, #88]	@ (8008020 <xTaskRemoveFromEventList+0xb8>)
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fcc:	4613      	mov	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4a13      	ldr	r2, [pc, #76]	@ (8008024 <xTaskRemoveFromEventList+0xbc>)
 8007fd6:	441a      	add	r2, r3
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	3304      	adds	r3, #4
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	f7ff f818 	bl	8007014 <vListInsertEnd>
 8007fe4:	e005      	b.n	8007ff2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	3318      	adds	r3, #24
 8007fea:	4619      	mov	r1, r3
 8007fec:	480e      	ldr	r0, [pc, #56]	@ (8008028 <xTaskRemoveFromEventList+0xc0>)
 8007fee:	f7ff f811 	bl	8007014 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800802c <xTaskRemoveFromEventList+0xc4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d905      	bls.n	800800c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008000:	2301      	movs	r3, #1
 8008002:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008004:	4b0a      	ldr	r3, [pc, #40]	@ (8008030 <xTaskRemoveFromEventList+0xc8>)
 8008006:	2201      	movs	r2, #1
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	e001      	b.n	8008010 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800800c:	2300      	movs	r3, #0
 800800e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008010:	697b      	ldr	r3, [r7, #20]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20000a30 	.word	0x20000a30
 8008020:	20000a10 	.word	0x20000a10
 8008024:	2000090c 	.word	0x2000090c
 8008028:	200009c8 	.word	0x200009c8
 800802c:	20000908 	.word	0x20000908
 8008030:	20000a1c 	.word	0x20000a1c

08008034 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800803c:	4b06      	ldr	r3, [pc, #24]	@ (8008058 <vTaskInternalSetTimeOutState+0x24>)
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008044:	4b05      	ldr	r3, [pc, #20]	@ (800805c <vTaskInternalSetTimeOutState+0x28>)
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	605a      	str	r2, [r3, #4]
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	20000a20 	.word	0x20000a20
 800805c:	20000a0c 	.word	0x20000a0c

08008060 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b088      	sub	sp, #32
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10d      	bne.n	800808c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008074:	b672      	cpsid	i
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	b662      	cpsie	i
 8008084:	613b      	str	r3, [r7, #16]
}
 8008086:	bf00      	nop
 8008088:	bf00      	nop
 800808a:	e7fd      	b.n	8008088 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10d      	bne.n	80080ae <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008096:	b672      	cpsid	i
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	b662      	cpsie	i
 80080a6:	60fb      	str	r3, [r7, #12]
}
 80080a8:	bf00      	nop
 80080aa:	bf00      	nop
 80080ac:	e7fd      	b.n	80080aa <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80080ae:	f000 fb45 	bl	800873c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008128 <xTaskCheckForTimeOut+0xc8>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	69ba      	ldr	r2, [r7, #24]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080ca:	d102      	bne.n	80080d2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080cc:	2300      	movs	r3, #0
 80080ce:	61fb      	str	r3, [r7, #28]
 80080d0:	e023      	b.n	800811a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	4b15      	ldr	r3, [pc, #84]	@ (800812c <xTaskCheckForTimeOut+0xcc>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d007      	beq.n	80080ee <xTaskCheckForTimeOut+0x8e>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d302      	bcc.n	80080ee <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80080e8:	2301      	movs	r3, #1
 80080ea:	61fb      	str	r3, [r7, #28]
 80080ec:	e015      	b.n	800811a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d20b      	bcs.n	8008110 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	1ad2      	subs	r2, r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7ff ff95 	bl	8008034 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800810a:	2300      	movs	r3, #0
 800810c:	61fb      	str	r3, [r7, #28]
 800810e:	e004      	b.n	800811a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2200      	movs	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008116:	2301      	movs	r3, #1
 8008118:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800811a:	f000 fb45 	bl	80087a8 <vPortExitCritical>

	return xReturn;
 800811e:	69fb      	ldr	r3, [r7, #28]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3720      	adds	r7, #32
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20000a0c 	.word	0x20000a0c
 800812c:	20000a20 	.word	0x20000a20

08008130 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008134:	4b03      	ldr	r3, [pc, #12]	@ (8008144 <vTaskMissedYield+0x14>)
 8008136:	2201      	movs	r2, #1
 8008138:	601a      	str	r2, [r3, #0]
}
 800813a:	bf00      	nop
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	20000a1c 	.word	0x20000a1c

08008148 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008150:	f000 f84c 	bl	80081ec <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8008154:	4b04      	ldr	r3, [pc, #16]	@ (8008168 <prvIdleTask+0x20>)
 8008156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008164:	bf00      	nop
 8008166:	e7f3      	b.n	8008150 <prvIdleTask+0x8>
 8008168:	e000ed04 	.word	0xe000ed04

0800816c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008172:	2300      	movs	r3, #0
 8008174:	607b      	str	r3, [r7, #4]
 8008176:	e00c      	b.n	8008192 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	4613      	mov	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4a12      	ldr	r2, [pc, #72]	@ (80081cc <prvInitialiseTaskLists+0x60>)
 8008184:	4413      	add	r3, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe ff17 	bl	8006fba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3301      	adds	r3, #1
 8008190:	607b      	str	r3, [r7, #4]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b06      	cmp	r3, #6
 8008196:	d9ef      	bls.n	8008178 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008198:	480d      	ldr	r0, [pc, #52]	@ (80081d0 <prvInitialiseTaskLists+0x64>)
 800819a:	f7fe ff0e 	bl	8006fba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800819e:	480d      	ldr	r0, [pc, #52]	@ (80081d4 <prvInitialiseTaskLists+0x68>)
 80081a0:	f7fe ff0b 	bl	8006fba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081a4:	480c      	ldr	r0, [pc, #48]	@ (80081d8 <prvInitialiseTaskLists+0x6c>)
 80081a6:	f7fe ff08 	bl	8006fba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081aa:	480c      	ldr	r0, [pc, #48]	@ (80081dc <prvInitialiseTaskLists+0x70>)
 80081ac:	f7fe ff05 	bl	8006fba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081b0:	480b      	ldr	r0, [pc, #44]	@ (80081e0 <prvInitialiseTaskLists+0x74>)
 80081b2:	f7fe ff02 	bl	8006fba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081b6:	4b0b      	ldr	r3, [pc, #44]	@ (80081e4 <prvInitialiseTaskLists+0x78>)
 80081b8:	4a05      	ldr	r2, [pc, #20]	@ (80081d0 <prvInitialiseTaskLists+0x64>)
 80081ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081bc:	4b0a      	ldr	r3, [pc, #40]	@ (80081e8 <prvInitialiseTaskLists+0x7c>)
 80081be:	4a05      	ldr	r2, [pc, #20]	@ (80081d4 <prvInitialiseTaskLists+0x68>)
 80081c0:	601a      	str	r2, [r3, #0]
}
 80081c2:	bf00      	nop
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	2000090c 	.word	0x2000090c
 80081d0:	20000998 	.word	0x20000998
 80081d4:	200009ac 	.word	0x200009ac
 80081d8:	200009c8 	.word	0x200009c8
 80081dc:	200009dc 	.word	0x200009dc
 80081e0:	200009f4 	.word	0x200009f4
 80081e4:	200009c0 	.word	0x200009c0
 80081e8:	200009c4 	.word	0x200009c4

080081ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081f2:	e019      	b.n	8008228 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081f4:	f000 faa2 	bl	800873c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081f8:	4b10      	ldr	r3, [pc, #64]	@ (800823c <prvCheckTasksWaitingTermination+0x50>)
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3304      	adds	r3, #4
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe ff62 	bl	80070ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 800820a:	4b0d      	ldr	r3, [pc, #52]	@ (8008240 <prvCheckTasksWaitingTermination+0x54>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3b01      	subs	r3, #1
 8008210:	4a0b      	ldr	r2, [pc, #44]	@ (8008240 <prvCheckTasksWaitingTermination+0x54>)
 8008212:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008214:	4b0b      	ldr	r3, [pc, #44]	@ (8008244 <prvCheckTasksWaitingTermination+0x58>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3b01      	subs	r3, #1
 800821a:	4a0a      	ldr	r2, [pc, #40]	@ (8008244 <prvCheckTasksWaitingTermination+0x58>)
 800821c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800821e:	f000 fac3 	bl	80087a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f810 	bl	8008248 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008228:	4b06      	ldr	r3, [pc, #24]	@ (8008244 <prvCheckTasksWaitingTermination+0x58>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1e1      	bne.n	80081f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008230:	bf00      	nop
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	200009dc 	.word	0x200009dc
 8008240:	20000a08 	.word	0x20000a08
 8008244:	200009f0 	.word	0x200009f0

08008248 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	334c      	adds	r3, #76	@ 0x4c
 8008254:	4618      	mov	r0, r3
 8008256:	f001 fa89 	bl	800976c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008260:	2b00      	cmp	r3, #0
 8008262:	d108      	bne.n	8008276 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fc1d 	bl	8008aa8 <vPortFree>
				vPortFree( pxTCB );
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fc1a 	bl	8008aa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008274:	e01b      	b.n	80082ae <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800827c:	2b01      	cmp	r3, #1
 800827e:	d103      	bne.n	8008288 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fc11 	bl	8008aa8 <vPortFree>
	}
 8008286:	e012      	b.n	80082ae <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800828e:	2b02      	cmp	r3, #2
 8008290:	d00d      	beq.n	80082ae <prvDeleteTCB+0x66>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008296:	b672      	cpsid	i
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	b662      	cpsie	i
 80082a6:	60fb      	str	r3, [r7, #12]
}
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
 80082ac:	e7fd      	b.n	80082aa <prvDeleteTCB+0x62>
	}
 80082ae:	bf00      	nop
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082be:	4b0c      	ldr	r3, [pc, #48]	@ (80082f0 <prvResetNextTaskUnblockTime+0x38>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d104      	bne.n	80082d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082c8:	4b0a      	ldr	r3, [pc, #40]	@ (80082f4 <prvResetNextTaskUnblockTime+0x3c>)
 80082ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082d0:	e008      	b.n	80082e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082d2:	4b07      	ldr	r3, [pc, #28]	@ (80082f0 <prvResetNextTaskUnblockTime+0x38>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	4a04      	ldr	r2, [pc, #16]	@ (80082f4 <prvResetNextTaskUnblockTime+0x3c>)
 80082e2:	6013      	str	r3, [r2, #0]
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	200009c0 	.word	0x200009c0
 80082f4:	20000a28 	.word	0x20000a28

080082f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082fe:	4b0b      	ldr	r3, [pc, #44]	@ (800832c <xTaskGetSchedulerState+0x34>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d102      	bne.n	800830c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008306:	2301      	movs	r3, #1
 8008308:	607b      	str	r3, [r7, #4]
 800830a:	e008      	b.n	800831e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800830c:	4b08      	ldr	r3, [pc, #32]	@ (8008330 <xTaskGetSchedulerState+0x38>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d102      	bne.n	800831a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008314:	2302      	movs	r3, #2
 8008316:	607b      	str	r3, [r7, #4]
 8008318:	e001      	b.n	800831e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800831a:	2300      	movs	r3, #0
 800831c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800831e:	687b      	ldr	r3, [r7, #4]
	}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	20000a14 	.word	0x20000a14
 8008330:	20000a30 	.word	0x20000a30

08008334 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d074      	beq.n	8008434 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800834a:	4b3d      	ldr	r3, [pc, #244]	@ (8008440 <xTaskPriorityDisinherit+0x10c>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	429a      	cmp	r2, r3
 8008352:	d00d      	beq.n	8008370 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	b672      	cpsid	i
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	b662      	cpsie	i
 8008368:	60fb      	str	r3, [r7, #12]
}
 800836a:	bf00      	nop
 800836c:	bf00      	nop
 800836e:	e7fd      	b.n	800836c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10d      	bne.n	8008394 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837c:	b672      	cpsid	i
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	b662      	cpsie	i
 800838c:	60bb      	str	r3, [r7, #8]
}
 800838e:	bf00      	nop
 8008390:	bf00      	nop
 8008392:	e7fd      	b.n	8008390 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008398:	1e5a      	subs	r2, r3, #1
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d044      	beq.n	8008434 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d140      	bne.n	8008434 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	3304      	adds	r3, #4
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe fe89 	bl	80070ce <uxListRemove>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d115      	bne.n	80083ee <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c6:	491f      	ldr	r1, [pc, #124]	@ (8008444 <xTaskPriorityDisinherit+0x110>)
 80083c8:	4613      	mov	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	440b      	add	r3, r1
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10a      	bne.n	80083ee <xTaskPriorityDisinherit+0xba>
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083dc:	2201      	movs	r2, #1
 80083de:	fa02 f303 	lsl.w	r3, r2, r3
 80083e2:	43da      	mvns	r2, r3
 80083e4:	4b18      	ldr	r3, [pc, #96]	@ (8008448 <xTaskPriorityDisinherit+0x114>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4013      	ands	r3, r2
 80083ea:	4a17      	ldr	r2, [pc, #92]	@ (8008448 <xTaskPriorityDisinherit+0x114>)
 80083ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fa:	f1c3 0207 	rsb	r2, r3, #7
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008406:	2201      	movs	r2, #1
 8008408:	409a      	lsls	r2, r3
 800840a:	4b0f      	ldr	r3, [pc, #60]	@ (8008448 <xTaskPriorityDisinherit+0x114>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4313      	orrs	r3, r2
 8008410:	4a0d      	ldr	r2, [pc, #52]	@ (8008448 <xTaskPriorityDisinherit+0x114>)
 8008412:	6013      	str	r3, [r2, #0]
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008418:	4613      	mov	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4a08      	ldr	r2, [pc, #32]	@ (8008444 <xTaskPriorityDisinherit+0x110>)
 8008422:	441a      	add	r2, r3
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	3304      	adds	r3, #4
 8008428:	4619      	mov	r1, r3
 800842a:	4610      	mov	r0, r2
 800842c:	f7fe fdf2 	bl	8007014 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008430:	2301      	movs	r3, #1
 8008432:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008434:	697b      	ldr	r3, [r7, #20]
	}
 8008436:	4618      	mov	r0, r3
 8008438:	3718      	adds	r7, #24
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	20000908 	.word	0x20000908
 8008444:	2000090c 	.word	0x2000090c
 8008448:	20000a10 	.word	0x20000a10

0800844c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008456:	4b29      	ldr	r3, [pc, #164]	@ (80084fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800845c:	4b28      	ldr	r3, [pc, #160]	@ (8008500 <prvAddCurrentTaskToDelayedList+0xb4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3304      	adds	r3, #4
 8008462:	4618      	mov	r0, r3
 8008464:	f7fe fe33 	bl	80070ce <uxListRemove>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10b      	bne.n	8008486 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800846e:	4b24      	ldr	r3, [pc, #144]	@ (8008500 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008474:	2201      	movs	r2, #1
 8008476:	fa02 f303 	lsl.w	r3, r2, r3
 800847a:	43da      	mvns	r2, r3
 800847c:	4b21      	ldr	r3, [pc, #132]	@ (8008504 <prvAddCurrentTaskToDelayedList+0xb8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4013      	ands	r3, r2
 8008482:	4a20      	ldr	r2, [pc, #128]	@ (8008504 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008484:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800848c:	d10a      	bne.n	80084a4 <prvAddCurrentTaskToDelayedList+0x58>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d007      	beq.n	80084a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008494:	4b1a      	ldr	r3, [pc, #104]	@ (8008500 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3304      	adds	r3, #4
 800849a:	4619      	mov	r1, r3
 800849c:	481a      	ldr	r0, [pc, #104]	@ (8008508 <prvAddCurrentTaskToDelayedList+0xbc>)
 800849e:	f7fe fdb9 	bl	8007014 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084a2:	e026      	b.n	80084f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4413      	add	r3, r2
 80084aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084ac:	4b14      	ldr	r3, [pc, #80]	@ (8008500 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d209      	bcs.n	80084d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084bc:	4b13      	ldr	r3, [pc, #76]	@ (800850c <prvAddCurrentTaskToDelayedList+0xc0>)
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008500 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3304      	adds	r3, #4
 80084c6:	4619      	mov	r1, r3
 80084c8:	4610      	mov	r0, r2
 80084ca:	f7fe fdc7 	bl	800705c <vListInsert>
}
 80084ce:	e010      	b.n	80084f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008510 <prvAddCurrentTaskToDelayedList+0xc4>)
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008500 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3304      	adds	r3, #4
 80084da:	4619      	mov	r1, r3
 80084dc:	4610      	mov	r0, r2
 80084de:	f7fe fdbd 	bl	800705c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008514 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d202      	bcs.n	80084f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80084ec:	4a09      	ldr	r2, [pc, #36]	@ (8008514 <prvAddCurrentTaskToDelayedList+0xc8>)
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	6013      	str	r3, [r2, #0]
}
 80084f2:	bf00      	nop
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20000a0c 	.word	0x20000a0c
 8008500:	20000908 	.word	0x20000908
 8008504:	20000a10 	.word	0x20000a10
 8008508:	200009f4 	.word	0x200009f4
 800850c:	200009c4 	.word	0x200009c4
 8008510:	200009c0 	.word	0x200009c0
 8008514:	20000a28 	.word	0x20000a28

08008518 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3b04      	subs	r3, #4
 8008528:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3b04      	subs	r3, #4
 8008536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f023 0201 	bic.w	r2, r3, #1
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3b04      	subs	r3, #4
 8008546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008548:	4a0c      	ldr	r2, [pc, #48]	@ (800857c <pxPortInitialiseStack+0x64>)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3b14      	subs	r3, #20
 8008552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3b04      	subs	r3, #4
 800855e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f06f 0202 	mvn.w	r2, #2
 8008566:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3b20      	subs	r3, #32
 800856c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800856e:	68fb      	ldr	r3, [r7, #12]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	08008581 	.word	0x08008581

08008580 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800858a:	4b15      	ldr	r3, [pc, #84]	@ (80085e0 <prvTaskExitError+0x60>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008592:	d00d      	beq.n	80085b0 <prvTaskExitError+0x30>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008598:	b672      	cpsid	i
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	b662      	cpsie	i
 80085a8:	60fb      	str	r3, [r7, #12]
}
 80085aa:	bf00      	nop
 80085ac:	bf00      	nop
 80085ae:	e7fd      	b.n	80085ac <prvTaskExitError+0x2c>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b4:	b672      	cpsid	i
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	b662      	cpsie	i
 80085c4:	60bb      	str	r3, [r7, #8]
}
 80085c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085c8:	bf00      	nop
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0fc      	beq.n	80085ca <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085d0:	bf00      	nop
 80085d2:	bf00      	nop
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	20000018 	.word	0x20000018
	...

080085f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085f0:	4b07      	ldr	r3, [pc, #28]	@ (8008610 <pxCurrentTCBConst2>)
 80085f2:	6819      	ldr	r1, [r3, #0]
 80085f4:	6808      	ldr	r0, [r1, #0]
 80085f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fa:	f380 8809 	msr	PSP, r0
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f04f 0000 	mov.w	r0, #0
 8008606:	f380 8811 	msr	BASEPRI, r0
 800860a:	4770      	bx	lr
 800860c:	f3af 8000 	nop.w

08008610 <pxCurrentTCBConst2>:
 8008610:	20000908 	.word	0x20000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop

08008618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008618:	4808      	ldr	r0, [pc, #32]	@ (800863c <prvPortStartFirstTask+0x24>)
 800861a:	6800      	ldr	r0, [r0, #0]
 800861c:	6800      	ldr	r0, [r0, #0]
 800861e:	f380 8808 	msr	MSP, r0
 8008622:	f04f 0000 	mov.w	r0, #0
 8008626:	f380 8814 	msr	CONTROL, r0
 800862a:	b662      	cpsie	i
 800862c:	b661      	cpsie	f
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	df00      	svc	0
 8008638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800863a:	bf00      	nop
 800863c:	e000ed08 	.word	0xe000ed08

08008640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008646:	4b37      	ldr	r3, [pc, #220]	@ (8008724 <xPortStartScheduler+0xe4>)
 8008648:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	22ff      	movs	r2, #255	@ 0xff
 8008656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	b2db      	uxtb	r3, r3
 800865e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008668:	b2da      	uxtb	r2, r3
 800866a:	4b2f      	ldr	r3, [pc, #188]	@ (8008728 <xPortStartScheduler+0xe8>)
 800866c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800866e:	4b2f      	ldr	r3, [pc, #188]	@ (800872c <xPortStartScheduler+0xec>)
 8008670:	2207      	movs	r2, #7
 8008672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008674:	e009      	b.n	800868a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008676:	4b2d      	ldr	r3, [pc, #180]	@ (800872c <xPortStartScheduler+0xec>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3b01      	subs	r3, #1
 800867c:	4a2b      	ldr	r2, [pc, #172]	@ (800872c <xPortStartScheduler+0xec>)
 800867e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008680:	78fb      	ldrb	r3, [r7, #3]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	b2db      	uxtb	r3, r3
 8008688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800868a:	78fb      	ldrb	r3, [r7, #3]
 800868c:	b2db      	uxtb	r3, r3
 800868e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008692:	2b80      	cmp	r3, #128	@ 0x80
 8008694:	d0ef      	beq.n	8008676 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008696:	4b25      	ldr	r3, [pc, #148]	@ (800872c <xPortStartScheduler+0xec>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f1c3 0307 	rsb	r3, r3, #7
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d00d      	beq.n	80086be <xPortStartScheduler+0x7e>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a6:	b672      	cpsid	i
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	b662      	cpsie	i
 80086b6:	60bb      	str	r3, [r7, #8]
}
 80086b8:	bf00      	nop
 80086ba:	bf00      	nop
 80086bc:	e7fd      	b.n	80086ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086be:	4b1b      	ldr	r3, [pc, #108]	@ (800872c <xPortStartScheduler+0xec>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	021b      	lsls	r3, r3, #8
 80086c4:	4a19      	ldr	r2, [pc, #100]	@ (800872c <xPortStartScheduler+0xec>)
 80086c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086c8:	4b18      	ldr	r3, [pc, #96]	@ (800872c <xPortStartScheduler+0xec>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80086d0:	4a16      	ldr	r2, [pc, #88]	@ (800872c <xPortStartScheduler+0xec>)
 80086d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086dc:	4b14      	ldr	r3, [pc, #80]	@ (8008730 <xPortStartScheduler+0xf0>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a13      	ldr	r2, [pc, #76]	@ (8008730 <xPortStartScheduler+0xf0>)
 80086e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80086e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086e8:	4b11      	ldr	r3, [pc, #68]	@ (8008730 <xPortStartScheduler+0xf0>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a10      	ldr	r2, [pc, #64]	@ (8008730 <xPortStartScheduler+0xf0>)
 80086ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80086f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086f4:	f000 f8dc 	bl	80088b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008734 <xPortStartScheduler+0xf4>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086fe:	f000 f8fb 	bl	80088f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008702:	4b0d      	ldr	r3, [pc, #52]	@ (8008738 <xPortStartScheduler+0xf8>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a0c      	ldr	r2, [pc, #48]	@ (8008738 <xPortStartScheduler+0xf8>)
 8008708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800870c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800870e:	f7ff ff83 	bl	8008618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008712:	f7ff fb9b 	bl	8007e4c <vTaskSwitchContext>
	prvTaskExitError();
 8008716:	f7ff ff33 	bl	8008580 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	e000e400 	.word	0xe000e400
 8008728:	20000a34 	.word	0x20000a34
 800872c:	20000a38 	.word	0x20000a38
 8008730:	e000ed20 	.word	0xe000ed20
 8008734:	20000018 	.word	0x20000018
 8008738:	e000ef34 	.word	0xe000ef34

0800873c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008746:	b672      	cpsid	i
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	b662      	cpsie	i
 8008756:	607b      	str	r3, [r7, #4]
}
 8008758:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800875a:	4b11      	ldr	r3, [pc, #68]	@ (80087a0 <vPortEnterCritical+0x64>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3301      	adds	r3, #1
 8008760:	4a0f      	ldr	r2, [pc, #60]	@ (80087a0 <vPortEnterCritical+0x64>)
 8008762:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008764:	4b0e      	ldr	r3, [pc, #56]	@ (80087a0 <vPortEnterCritical+0x64>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d112      	bne.n	8008792 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800876c:	4b0d      	ldr	r3, [pc, #52]	@ (80087a4 <vPortEnterCritical+0x68>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00d      	beq.n	8008792 <vPortEnterCritical+0x56>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877a:	b672      	cpsid	i
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	b662      	cpsie	i
 800878a:	603b      	str	r3, [r7, #0]
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	e7fd      	b.n	800878e <vPortEnterCritical+0x52>
	}
}
 8008792:	bf00      	nop
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	20000018 	.word	0x20000018
 80087a4:	e000ed04 	.word	0xe000ed04

080087a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087ae:	4b13      	ldr	r3, [pc, #76]	@ (80087fc <vPortExitCritical+0x54>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10d      	bne.n	80087d2 <vPortExitCritical+0x2a>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ba:	b672      	cpsid	i
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	b662      	cpsie	i
 80087ca:	607b      	str	r3, [r7, #4]
}
 80087cc:	bf00      	nop
 80087ce:	bf00      	nop
 80087d0:	e7fd      	b.n	80087ce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80087d2:	4b0a      	ldr	r3, [pc, #40]	@ (80087fc <vPortExitCritical+0x54>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	4a08      	ldr	r2, [pc, #32]	@ (80087fc <vPortExitCritical+0x54>)
 80087da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087dc:	4b07      	ldr	r3, [pc, #28]	@ (80087fc <vPortExitCritical+0x54>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d105      	bne.n	80087f0 <vPortExitCritical+0x48>
 80087e4:	2300      	movs	r3, #0
 80087e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80087ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	20000018 	.word	0x20000018

08008800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008800:	f3ef 8009 	mrs	r0, PSP
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	4b15      	ldr	r3, [pc, #84]	@ (8008860 <pxCurrentTCBConst>)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	f01e 0f10 	tst.w	lr, #16
 8008810:	bf08      	it	eq
 8008812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881a:	6010      	str	r0, [r2, #0]
 800881c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008824:	b672      	cpsid	i
 8008826:	f380 8811 	msr	BASEPRI, r0
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	b662      	cpsie	i
 8008834:	f7ff fb0a 	bl	8007e4c <vTaskSwitchContext>
 8008838:	f04f 0000 	mov.w	r0, #0
 800883c:	f380 8811 	msr	BASEPRI, r0
 8008840:	bc09      	pop	{r0, r3}
 8008842:	6819      	ldr	r1, [r3, #0]
 8008844:	6808      	ldr	r0, [r1, #0]
 8008846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884a:	f01e 0f10 	tst.w	lr, #16
 800884e:	bf08      	it	eq
 8008850:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008854:	f380 8809 	msr	PSP, r0
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop

08008860 <pxCurrentTCBConst>:
 8008860:	20000908 	.word	0x20000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop

08008868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008872:	b672      	cpsid	i
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	b662      	cpsie	i
 8008882:	607b      	str	r3, [r7, #4]
}
 8008884:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008886:	f7ff fa49 	bl	8007d1c <xTaskIncrementTick>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008890:	4b06      	ldr	r3, [pc, #24]	@ (80088ac <SysTick_Handler+0x44>)
 8008892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008896:	601a      	str	r2, [r3, #0]
 8008898:	2300      	movs	r3, #0
 800889a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	f383 8811 	msr	BASEPRI, r3
}
 80088a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088a4:	bf00      	nop
 80088a6:	3708      	adds	r7, #8
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	e000ed04 	.word	0xe000ed04

080088b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088b0:	b480      	push	{r7}
 80088b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088b4:	4b0b      	ldr	r3, [pc, #44]	@ (80088e4 <vPortSetupTimerInterrupt+0x34>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088ba:	4b0b      	ldr	r3, [pc, #44]	@ (80088e8 <vPortSetupTimerInterrupt+0x38>)
 80088bc:	2200      	movs	r2, #0
 80088be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088c0:	4b0a      	ldr	r3, [pc, #40]	@ (80088ec <vPortSetupTimerInterrupt+0x3c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a0a      	ldr	r2, [pc, #40]	@ (80088f0 <vPortSetupTimerInterrupt+0x40>)
 80088c6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ca:	099b      	lsrs	r3, r3, #6
 80088cc:	4a09      	ldr	r2, [pc, #36]	@ (80088f4 <vPortSetupTimerInterrupt+0x44>)
 80088ce:	3b01      	subs	r3, #1
 80088d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088d2:	4b04      	ldr	r3, [pc, #16]	@ (80088e4 <vPortSetupTimerInterrupt+0x34>)
 80088d4:	2207      	movs	r2, #7
 80088d6:	601a      	str	r2, [r3, #0]
}
 80088d8:	bf00      	nop
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	e000e010 	.word	0xe000e010
 80088e8:	e000e018 	.word	0xe000e018
 80088ec:	20000000 	.word	0x20000000
 80088f0:	10624dd3 	.word	0x10624dd3
 80088f4:	e000e014 	.word	0xe000e014

080088f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008908 <vPortEnableVFP+0x10>
 80088fc:	6801      	ldr	r1, [r0, #0]
 80088fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008902:	6001      	str	r1, [r0, #0]
 8008904:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008906:	bf00      	nop
 8008908:	e000ed88 	.word	0xe000ed88

0800890c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08a      	sub	sp, #40	@ 0x28
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008914:	2300      	movs	r3, #0
 8008916:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008918:	f7ff f960 	bl	8007bdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800891c:	4b5d      	ldr	r3, [pc, #372]	@ (8008a94 <pvPortMalloc+0x188>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008924:	f000 f920 	bl	8008b68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008928:	4b5b      	ldr	r3, [pc, #364]	@ (8008a98 <pvPortMalloc+0x18c>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4013      	ands	r3, r2
 8008930:	2b00      	cmp	r3, #0
 8008932:	f040 8094 	bne.w	8008a5e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d020      	beq.n	800897e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800893c:	2208      	movs	r2, #8
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4413      	add	r3, r2
 8008942:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	2b00      	cmp	r3, #0
 800894c:	d017      	beq.n	800897e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f023 0307 	bic.w	r3, r3, #7
 8008954:	3308      	adds	r3, #8
 8008956:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f003 0307 	and.w	r3, r3, #7
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00d      	beq.n	800897e <pvPortMalloc+0x72>
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008966:	b672      	cpsid	i
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	b662      	cpsie	i
 8008976:	617b      	str	r3, [r7, #20]
}
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	e7fd      	b.n	800897a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d06c      	beq.n	8008a5e <pvPortMalloc+0x152>
 8008984:	4b45      	ldr	r3, [pc, #276]	@ (8008a9c <pvPortMalloc+0x190>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	429a      	cmp	r2, r3
 800898c:	d867      	bhi.n	8008a5e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800898e:	4b44      	ldr	r3, [pc, #272]	@ (8008aa0 <pvPortMalloc+0x194>)
 8008990:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008992:	4b43      	ldr	r3, [pc, #268]	@ (8008aa0 <pvPortMalloc+0x194>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008998:	e004      	b.n	80089a4 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800899a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d903      	bls.n	80089b6 <pvPortMalloc+0xaa>
 80089ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1f1      	bne.n	800899a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089b6:	4b37      	ldr	r3, [pc, #220]	@ (8008a94 <pvPortMalloc+0x188>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089bc:	429a      	cmp	r2, r3
 80089be:	d04e      	beq.n	8008a5e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2208      	movs	r2, #8
 80089c6:	4413      	add	r3, r2
 80089c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	1ad2      	subs	r2, r2, r3
 80089da:	2308      	movs	r3, #8
 80089dc:	005b      	lsls	r3, r3, #1
 80089de:	429a      	cmp	r2, r3
 80089e0:	d922      	bls.n	8008a28 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4413      	add	r3, r2
 80089e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	f003 0307 	and.w	r3, r3, #7
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00d      	beq.n	8008a10 <pvPortMalloc+0x104>
	__asm volatile
 80089f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f8:	b672      	cpsid	i
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	b662      	cpsie	i
 8008a08:	613b      	str	r3, [r7, #16]
}
 8008a0a:	bf00      	nop
 8008a0c:	bf00      	nop
 8008a0e:	e7fd      	b.n	8008a0c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	1ad2      	subs	r2, r2, r3
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a22:	69b8      	ldr	r0, [r7, #24]
 8008a24:	f000 f902 	bl	8008c2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a28:	4b1c      	ldr	r3, [pc, #112]	@ (8008a9c <pvPortMalloc+0x190>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	4a1a      	ldr	r2, [pc, #104]	@ (8008a9c <pvPortMalloc+0x190>)
 8008a34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a36:	4b19      	ldr	r3, [pc, #100]	@ (8008a9c <pvPortMalloc+0x190>)
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8008aa4 <pvPortMalloc+0x198>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d203      	bcs.n	8008a4a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a42:	4b16      	ldr	r3, [pc, #88]	@ (8008a9c <pvPortMalloc+0x190>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a17      	ldr	r2, [pc, #92]	@ (8008aa4 <pvPortMalloc+0x198>)
 8008a48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	4b12      	ldr	r3, [pc, #72]	@ (8008a98 <pvPortMalloc+0x18c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	431a      	orrs	r2, r3
 8008a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a5e:	f7ff f8cb 	bl	8007bf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	f003 0307 	and.w	r3, r3, #7
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00d      	beq.n	8008a88 <pvPortMalloc+0x17c>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a70:	b672      	cpsid	i
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	b662      	cpsie	i
 8008a80:	60fb      	str	r3, [r7, #12]
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	e7fd      	b.n	8008a84 <pvPortMalloc+0x178>
	return pvReturn;
 8008a88:	69fb      	ldr	r3, [r7, #28]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3728      	adds	r7, #40	@ 0x28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20004644 	.word	0x20004644
 8008a98:	20004650 	.word	0x20004650
 8008a9c:	20004648 	.word	0x20004648
 8008aa0:	2000463c 	.word	0x2000463c
 8008aa4:	2000464c 	.word	0x2000464c

08008aa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d04e      	beq.n	8008b58 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008aba:	2308      	movs	r3, #8
 8008abc:	425b      	negs	r3, r3
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	4b24      	ldr	r3, [pc, #144]	@ (8008b60 <vPortFree+0xb8>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10d      	bne.n	8008af2 <vPortFree+0x4a>
	__asm volatile
 8008ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ada:	b672      	cpsid	i
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	b662      	cpsie	i
 8008aea:	60fb      	str	r3, [r7, #12]
}
 8008aec:	bf00      	nop
 8008aee:	bf00      	nop
 8008af0:	e7fd      	b.n	8008aee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00d      	beq.n	8008b16 <vPortFree+0x6e>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afe:	b672      	cpsid	i
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	b662      	cpsie	i
 8008b0e:	60bb      	str	r3, [r7, #8]
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	e7fd      	b.n	8008b12 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	4b11      	ldr	r3, [pc, #68]	@ (8008b60 <vPortFree+0xb8>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4013      	ands	r3, r2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d019      	beq.n	8008b58 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d115      	bne.n	8008b58 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	4b0b      	ldr	r3, [pc, #44]	@ (8008b60 <vPortFree+0xb8>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	43db      	mvns	r3, r3
 8008b36:	401a      	ands	r2, r3
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b3c:	f7ff f84e 	bl	8007bdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	4b07      	ldr	r3, [pc, #28]	@ (8008b64 <vPortFree+0xbc>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4413      	add	r3, r2
 8008b4a:	4a06      	ldr	r2, [pc, #24]	@ (8008b64 <vPortFree+0xbc>)
 8008b4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b4e:	6938      	ldr	r0, [r7, #16]
 8008b50:	f000 f86c 	bl	8008c2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b54:	f7ff f850 	bl	8007bf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b58:	bf00      	nop
 8008b5a:	3718      	adds	r7, #24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	20004650 	.word	0x20004650
 8008b64:	20004648 	.word	0x20004648

08008b68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b6e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008b72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b74:	4b27      	ldr	r3, [pc, #156]	@ (8008c14 <prvHeapInit+0xac>)
 8008b76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f003 0307 	and.w	r3, r3, #7
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00c      	beq.n	8008b9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3307      	adds	r3, #7
 8008b86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0307 	bic.w	r3, r3, #7
 8008b8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	4a1f      	ldr	r2, [pc, #124]	@ (8008c14 <prvHeapInit+0xac>)
 8008b98:	4413      	add	r3, r2
 8008b9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8008c18 <prvHeapInit+0xb0>)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8008c18 <prvHeapInit+0xb0>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bb4:	2208      	movs	r2, #8
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	1a9b      	subs	r3, r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f023 0307 	bic.w	r3, r3, #7
 8008bc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4a15      	ldr	r2, [pc, #84]	@ (8008c1c <prvHeapInit+0xb4>)
 8008bc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bca:	4b14      	ldr	r3, [pc, #80]	@ (8008c1c <prvHeapInit+0xb4>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bd2:	4b12      	ldr	r3, [pc, #72]	@ (8008c1c <prvHeapInit+0xb4>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	1ad2      	subs	r2, r2, r3
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008be8:	4b0c      	ldr	r3, [pc, #48]	@ (8008c1c <prvHeapInit+0xb4>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8008c20 <prvHeapInit+0xb8>)
 8008bf6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	4a09      	ldr	r2, [pc, #36]	@ (8008c24 <prvHeapInit+0xbc>)
 8008bfe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c00:	4b09      	ldr	r3, [pc, #36]	@ (8008c28 <prvHeapInit+0xc0>)
 8008c02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008c06:	601a      	str	r2, [r3, #0]
}
 8008c08:	bf00      	nop
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	20000a3c 	.word	0x20000a3c
 8008c18:	2000463c 	.word	0x2000463c
 8008c1c:	20004644 	.word	0x20004644
 8008c20:	2000464c 	.word	0x2000464c
 8008c24:	20004648 	.word	0x20004648
 8008c28:	20004650 	.word	0x20004650

08008c2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c34:	4b28      	ldr	r3, [pc, #160]	@ (8008cd8 <prvInsertBlockIntoFreeList+0xac>)
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	e002      	b.n	8008c40 <prvInsertBlockIntoFreeList+0x14>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d8f7      	bhi.n	8008c3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	4413      	add	r3, r2
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d108      	bne.n	8008c6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	441a      	add	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	441a      	add	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d118      	bne.n	8008cb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	4b15      	ldr	r3, [pc, #84]	@ (8008cdc <prvInsertBlockIntoFreeList+0xb0>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d00d      	beq.n	8008caa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	441a      	add	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	e008      	b.n	8008cbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008caa:	4b0c      	ldr	r3, [pc, #48]	@ (8008cdc <prvInsertBlockIntoFreeList+0xb0>)
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	e003      	b.n	8008cbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d002      	beq.n	8008cca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cca:	bf00      	nop
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	2000463c 	.word	0x2000463c
 8008cdc:	20004644 	.word	0x20004644

08008ce0 <__cvt>:
 8008ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce4:	ec57 6b10 	vmov	r6, r7, d0
 8008ce8:	2f00      	cmp	r7, #0
 8008cea:	460c      	mov	r4, r1
 8008cec:	4619      	mov	r1, r3
 8008cee:	463b      	mov	r3, r7
 8008cf0:	bfbb      	ittet	lt
 8008cf2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008cf6:	461f      	movlt	r7, r3
 8008cf8:	2300      	movge	r3, #0
 8008cfa:	232d      	movlt	r3, #45	@ 0x2d
 8008cfc:	700b      	strb	r3, [r1, #0]
 8008cfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d00:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008d04:	4691      	mov	r9, r2
 8008d06:	f023 0820 	bic.w	r8, r3, #32
 8008d0a:	bfbc      	itt	lt
 8008d0c:	4632      	movlt	r2, r6
 8008d0e:	4616      	movlt	r6, r2
 8008d10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d14:	d005      	beq.n	8008d22 <__cvt+0x42>
 8008d16:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008d1a:	d100      	bne.n	8008d1e <__cvt+0x3e>
 8008d1c:	3401      	adds	r4, #1
 8008d1e:	2102      	movs	r1, #2
 8008d20:	e000      	b.n	8008d24 <__cvt+0x44>
 8008d22:	2103      	movs	r1, #3
 8008d24:	ab03      	add	r3, sp, #12
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	ab02      	add	r3, sp, #8
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	ec47 6b10 	vmov	d0, r6, r7
 8008d30:	4653      	mov	r3, sl
 8008d32:	4622      	mov	r2, r4
 8008d34:	f000 fe34 	bl	80099a0 <_dtoa_r>
 8008d38:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	d119      	bne.n	8008d74 <__cvt+0x94>
 8008d40:	f019 0f01 	tst.w	r9, #1
 8008d44:	d00e      	beq.n	8008d64 <__cvt+0x84>
 8008d46:	eb00 0904 	add.w	r9, r0, r4
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4630      	mov	r0, r6
 8008d50:	4639      	mov	r1, r7
 8008d52:	f7f7 fee1 	bl	8000b18 <__aeabi_dcmpeq>
 8008d56:	b108      	cbz	r0, 8008d5c <__cvt+0x7c>
 8008d58:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d5c:	2230      	movs	r2, #48	@ 0x30
 8008d5e:	9b03      	ldr	r3, [sp, #12]
 8008d60:	454b      	cmp	r3, r9
 8008d62:	d31e      	bcc.n	8008da2 <__cvt+0xc2>
 8008d64:	9b03      	ldr	r3, [sp, #12]
 8008d66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d68:	1b5b      	subs	r3, r3, r5
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	b004      	add	sp, #16
 8008d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d78:	eb00 0904 	add.w	r9, r0, r4
 8008d7c:	d1e5      	bne.n	8008d4a <__cvt+0x6a>
 8008d7e:	7803      	ldrb	r3, [r0, #0]
 8008d80:	2b30      	cmp	r3, #48	@ 0x30
 8008d82:	d10a      	bne.n	8008d9a <__cvt+0xba>
 8008d84:	2200      	movs	r2, #0
 8008d86:	2300      	movs	r3, #0
 8008d88:	4630      	mov	r0, r6
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	f7f7 fec4 	bl	8000b18 <__aeabi_dcmpeq>
 8008d90:	b918      	cbnz	r0, 8008d9a <__cvt+0xba>
 8008d92:	f1c4 0401 	rsb	r4, r4, #1
 8008d96:	f8ca 4000 	str.w	r4, [sl]
 8008d9a:	f8da 3000 	ldr.w	r3, [sl]
 8008d9e:	4499      	add	r9, r3
 8008da0:	e7d3      	b.n	8008d4a <__cvt+0x6a>
 8008da2:	1c59      	adds	r1, r3, #1
 8008da4:	9103      	str	r1, [sp, #12]
 8008da6:	701a      	strb	r2, [r3, #0]
 8008da8:	e7d9      	b.n	8008d5e <__cvt+0x7e>

08008daa <__exponent>:
 8008daa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dac:	2900      	cmp	r1, #0
 8008dae:	bfba      	itte	lt
 8008db0:	4249      	neglt	r1, r1
 8008db2:	232d      	movlt	r3, #45	@ 0x2d
 8008db4:	232b      	movge	r3, #43	@ 0x2b
 8008db6:	2909      	cmp	r1, #9
 8008db8:	7002      	strb	r2, [r0, #0]
 8008dba:	7043      	strb	r3, [r0, #1]
 8008dbc:	dd29      	ble.n	8008e12 <__exponent+0x68>
 8008dbe:	f10d 0307 	add.w	r3, sp, #7
 8008dc2:	461d      	mov	r5, r3
 8008dc4:	270a      	movs	r7, #10
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	fbb1 f6f7 	udiv	r6, r1, r7
 8008dcc:	fb07 1416 	mls	r4, r7, r6, r1
 8008dd0:	3430      	adds	r4, #48	@ 0x30
 8008dd2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	2c63      	cmp	r4, #99	@ 0x63
 8008dda:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008dde:	4631      	mov	r1, r6
 8008de0:	dcf1      	bgt.n	8008dc6 <__exponent+0x1c>
 8008de2:	3130      	adds	r1, #48	@ 0x30
 8008de4:	1e94      	subs	r4, r2, #2
 8008de6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008dea:	1c41      	adds	r1, r0, #1
 8008dec:	4623      	mov	r3, r4
 8008dee:	42ab      	cmp	r3, r5
 8008df0:	d30a      	bcc.n	8008e08 <__exponent+0x5e>
 8008df2:	f10d 0309 	add.w	r3, sp, #9
 8008df6:	1a9b      	subs	r3, r3, r2
 8008df8:	42ac      	cmp	r4, r5
 8008dfa:	bf88      	it	hi
 8008dfc:	2300      	movhi	r3, #0
 8008dfe:	3302      	adds	r3, #2
 8008e00:	4403      	add	r3, r0
 8008e02:	1a18      	subs	r0, r3, r0
 8008e04:	b003      	add	sp, #12
 8008e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e08:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008e0c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008e10:	e7ed      	b.n	8008dee <__exponent+0x44>
 8008e12:	2330      	movs	r3, #48	@ 0x30
 8008e14:	3130      	adds	r1, #48	@ 0x30
 8008e16:	7083      	strb	r3, [r0, #2]
 8008e18:	70c1      	strb	r1, [r0, #3]
 8008e1a:	1d03      	adds	r3, r0, #4
 8008e1c:	e7f1      	b.n	8008e02 <__exponent+0x58>
	...

08008e20 <_printf_float>:
 8008e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	b08d      	sub	sp, #52	@ 0x34
 8008e26:	460c      	mov	r4, r1
 8008e28:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008e2c:	4616      	mov	r6, r2
 8008e2e:	461f      	mov	r7, r3
 8008e30:	4605      	mov	r5, r0
 8008e32:	f000 fc97 	bl	8009764 <_localeconv_r>
 8008e36:	6803      	ldr	r3, [r0, #0]
 8008e38:	9304      	str	r3, [sp, #16]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7f7 fa40 	bl	80002c0 <strlen>
 8008e40:	2300      	movs	r3, #0
 8008e42:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e44:	f8d8 3000 	ldr.w	r3, [r8]
 8008e48:	9005      	str	r0, [sp, #20]
 8008e4a:	3307      	adds	r3, #7
 8008e4c:	f023 0307 	bic.w	r3, r3, #7
 8008e50:	f103 0208 	add.w	r2, r3, #8
 8008e54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008e58:	f8d4 b000 	ldr.w	fp, [r4]
 8008e5c:	f8c8 2000 	str.w	r2, [r8]
 8008e60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e64:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008e68:	9307      	str	r3, [sp, #28]
 8008e6a:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e6e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008e72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e76:	4b9c      	ldr	r3, [pc, #624]	@ (80090e8 <_printf_float+0x2c8>)
 8008e78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e7c:	f7f7 fe7e 	bl	8000b7c <__aeabi_dcmpun>
 8008e80:	bb70      	cbnz	r0, 8008ee0 <_printf_float+0xc0>
 8008e82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e86:	4b98      	ldr	r3, [pc, #608]	@ (80090e8 <_printf_float+0x2c8>)
 8008e88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e8c:	f7f7 fe58 	bl	8000b40 <__aeabi_dcmple>
 8008e90:	bb30      	cbnz	r0, 8008ee0 <_printf_float+0xc0>
 8008e92:	2200      	movs	r2, #0
 8008e94:	2300      	movs	r3, #0
 8008e96:	4640      	mov	r0, r8
 8008e98:	4649      	mov	r1, r9
 8008e9a:	f7f7 fe47 	bl	8000b2c <__aeabi_dcmplt>
 8008e9e:	b110      	cbz	r0, 8008ea6 <_printf_float+0x86>
 8008ea0:	232d      	movs	r3, #45	@ 0x2d
 8008ea2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ea6:	4a91      	ldr	r2, [pc, #580]	@ (80090ec <_printf_float+0x2cc>)
 8008ea8:	4b91      	ldr	r3, [pc, #580]	@ (80090f0 <_printf_float+0x2d0>)
 8008eaa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008eae:	bf94      	ite	ls
 8008eb0:	4690      	movls	r8, r2
 8008eb2:	4698      	movhi	r8, r3
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	6123      	str	r3, [r4, #16]
 8008eb8:	f02b 0304 	bic.w	r3, fp, #4
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	f04f 0900 	mov.w	r9, #0
 8008ec2:	9700      	str	r7, [sp, #0]
 8008ec4:	4633      	mov	r3, r6
 8008ec6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008ec8:	4621      	mov	r1, r4
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f000 f9d2 	bl	8009274 <_printf_common>
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	f040 808d 	bne.w	8008ff0 <_printf_float+0x1d0>
 8008ed6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008eda:	b00d      	add	sp, #52	@ 0x34
 8008edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee0:	4642      	mov	r2, r8
 8008ee2:	464b      	mov	r3, r9
 8008ee4:	4640      	mov	r0, r8
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	f7f7 fe48 	bl	8000b7c <__aeabi_dcmpun>
 8008eec:	b140      	cbz	r0, 8008f00 <_printf_float+0xe0>
 8008eee:	464b      	mov	r3, r9
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	bfbc      	itt	lt
 8008ef4:	232d      	movlt	r3, #45	@ 0x2d
 8008ef6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008efa:	4a7e      	ldr	r2, [pc, #504]	@ (80090f4 <_printf_float+0x2d4>)
 8008efc:	4b7e      	ldr	r3, [pc, #504]	@ (80090f8 <_printf_float+0x2d8>)
 8008efe:	e7d4      	b.n	8008eaa <_printf_float+0x8a>
 8008f00:	6863      	ldr	r3, [r4, #4]
 8008f02:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008f06:	9206      	str	r2, [sp, #24]
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	d13b      	bne.n	8008f84 <_printf_float+0x164>
 8008f0c:	2306      	movs	r3, #6
 8008f0e:	6063      	str	r3, [r4, #4]
 8008f10:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008f14:	2300      	movs	r3, #0
 8008f16:	6022      	str	r2, [r4, #0]
 8008f18:	9303      	str	r3, [sp, #12]
 8008f1a:	ab0a      	add	r3, sp, #40	@ 0x28
 8008f1c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008f20:	ab09      	add	r3, sp, #36	@ 0x24
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	6861      	ldr	r1, [r4, #4]
 8008f26:	ec49 8b10 	vmov	d0, r8, r9
 8008f2a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f7ff fed6 	bl	8008ce0 <__cvt>
 8008f34:	9b06      	ldr	r3, [sp, #24]
 8008f36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f38:	2b47      	cmp	r3, #71	@ 0x47
 8008f3a:	4680      	mov	r8, r0
 8008f3c:	d129      	bne.n	8008f92 <_printf_float+0x172>
 8008f3e:	1cc8      	adds	r0, r1, #3
 8008f40:	db02      	blt.n	8008f48 <_printf_float+0x128>
 8008f42:	6863      	ldr	r3, [r4, #4]
 8008f44:	4299      	cmp	r1, r3
 8008f46:	dd41      	ble.n	8008fcc <_printf_float+0x1ac>
 8008f48:	f1aa 0a02 	sub.w	sl, sl, #2
 8008f4c:	fa5f fa8a 	uxtb.w	sl, sl
 8008f50:	3901      	subs	r1, #1
 8008f52:	4652      	mov	r2, sl
 8008f54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008f58:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f5a:	f7ff ff26 	bl	8008daa <__exponent>
 8008f5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f60:	1813      	adds	r3, r2, r0
 8008f62:	2a01      	cmp	r2, #1
 8008f64:	4681      	mov	r9, r0
 8008f66:	6123      	str	r3, [r4, #16]
 8008f68:	dc02      	bgt.n	8008f70 <_printf_float+0x150>
 8008f6a:	6822      	ldr	r2, [r4, #0]
 8008f6c:	07d2      	lsls	r2, r2, #31
 8008f6e:	d501      	bpl.n	8008f74 <_printf_float+0x154>
 8008f70:	3301      	adds	r3, #1
 8008f72:	6123      	str	r3, [r4, #16]
 8008f74:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d0a2      	beq.n	8008ec2 <_printf_float+0xa2>
 8008f7c:	232d      	movs	r3, #45	@ 0x2d
 8008f7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f82:	e79e      	b.n	8008ec2 <_printf_float+0xa2>
 8008f84:	9a06      	ldr	r2, [sp, #24]
 8008f86:	2a47      	cmp	r2, #71	@ 0x47
 8008f88:	d1c2      	bne.n	8008f10 <_printf_float+0xf0>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1c0      	bne.n	8008f10 <_printf_float+0xf0>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e7bd      	b.n	8008f0e <_printf_float+0xee>
 8008f92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f96:	d9db      	bls.n	8008f50 <_printf_float+0x130>
 8008f98:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008f9c:	d118      	bne.n	8008fd0 <_printf_float+0x1b0>
 8008f9e:	2900      	cmp	r1, #0
 8008fa0:	6863      	ldr	r3, [r4, #4]
 8008fa2:	dd0b      	ble.n	8008fbc <_printf_float+0x19c>
 8008fa4:	6121      	str	r1, [r4, #16]
 8008fa6:	b913      	cbnz	r3, 8008fae <_printf_float+0x18e>
 8008fa8:	6822      	ldr	r2, [r4, #0]
 8008faa:	07d0      	lsls	r0, r2, #31
 8008fac:	d502      	bpl.n	8008fb4 <_printf_float+0x194>
 8008fae:	3301      	adds	r3, #1
 8008fb0:	440b      	add	r3, r1
 8008fb2:	6123      	str	r3, [r4, #16]
 8008fb4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008fb6:	f04f 0900 	mov.w	r9, #0
 8008fba:	e7db      	b.n	8008f74 <_printf_float+0x154>
 8008fbc:	b913      	cbnz	r3, 8008fc4 <_printf_float+0x1a4>
 8008fbe:	6822      	ldr	r2, [r4, #0]
 8008fc0:	07d2      	lsls	r2, r2, #31
 8008fc2:	d501      	bpl.n	8008fc8 <_printf_float+0x1a8>
 8008fc4:	3302      	adds	r3, #2
 8008fc6:	e7f4      	b.n	8008fb2 <_printf_float+0x192>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e7f2      	b.n	8008fb2 <_printf_float+0x192>
 8008fcc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008fd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fd2:	4299      	cmp	r1, r3
 8008fd4:	db05      	blt.n	8008fe2 <_printf_float+0x1c2>
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	6121      	str	r1, [r4, #16]
 8008fda:	07d8      	lsls	r0, r3, #31
 8008fdc:	d5ea      	bpl.n	8008fb4 <_printf_float+0x194>
 8008fde:	1c4b      	adds	r3, r1, #1
 8008fe0:	e7e7      	b.n	8008fb2 <_printf_float+0x192>
 8008fe2:	2900      	cmp	r1, #0
 8008fe4:	bfd4      	ite	le
 8008fe6:	f1c1 0202 	rsble	r2, r1, #2
 8008fea:	2201      	movgt	r2, #1
 8008fec:	4413      	add	r3, r2
 8008fee:	e7e0      	b.n	8008fb2 <_printf_float+0x192>
 8008ff0:	6823      	ldr	r3, [r4, #0]
 8008ff2:	055a      	lsls	r2, r3, #21
 8008ff4:	d407      	bmi.n	8009006 <_printf_float+0x1e6>
 8008ff6:	6923      	ldr	r3, [r4, #16]
 8008ff8:	4642      	mov	r2, r8
 8008ffa:	4631      	mov	r1, r6
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	47b8      	blx	r7
 8009000:	3001      	adds	r0, #1
 8009002:	d12b      	bne.n	800905c <_printf_float+0x23c>
 8009004:	e767      	b.n	8008ed6 <_printf_float+0xb6>
 8009006:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800900a:	f240 80dd 	bls.w	80091c8 <_printf_float+0x3a8>
 800900e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009012:	2200      	movs	r2, #0
 8009014:	2300      	movs	r3, #0
 8009016:	f7f7 fd7f 	bl	8000b18 <__aeabi_dcmpeq>
 800901a:	2800      	cmp	r0, #0
 800901c:	d033      	beq.n	8009086 <_printf_float+0x266>
 800901e:	4a37      	ldr	r2, [pc, #220]	@ (80090fc <_printf_float+0x2dc>)
 8009020:	2301      	movs	r3, #1
 8009022:	4631      	mov	r1, r6
 8009024:	4628      	mov	r0, r5
 8009026:	47b8      	blx	r7
 8009028:	3001      	adds	r0, #1
 800902a:	f43f af54 	beq.w	8008ed6 <_printf_float+0xb6>
 800902e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009032:	4543      	cmp	r3, r8
 8009034:	db02      	blt.n	800903c <_printf_float+0x21c>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	07d8      	lsls	r0, r3, #31
 800903a:	d50f      	bpl.n	800905c <_printf_float+0x23c>
 800903c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009040:	4631      	mov	r1, r6
 8009042:	4628      	mov	r0, r5
 8009044:	47b8      	blx	r7
 8009046:	3001      	adds	r0, #1
 8009048:	f43f af45 	beq.w	8008ed6 <_printf_float+0xb6>
 800904c:	f04f 0900 	mov.w	r9, #0
 8009050:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009054:	f104 0a1a 	add.w	sl, r4, #26
 8009058:	45c8      	cmp	r8, r9
 800905a:	dc09      	bgt.n	8009070 <_printf_float+0x250>
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	079b      	lsls	r3, r3, #30
 8009060:	f100 8103 	bmi.w	800926a <_printf_float+0x44a>
 8009064:	68e0      	ldr	r0, [r4, #12]
 8009066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009068:	4298      	cmp	r0, r3
 800906a:	bfb8      	it	lt
 800906c:	4618      	movlt	r0, r3
 800906e:	e734      	b.n	8008eda <_printf_float+0xba>
 8009070:	2301      	movs	r3, #1
 8009072:	4652      	mov	r2, sl
 8009074:	4631      	mov	r1, r6
 8009076:	4628      	mov	r0, r5
 8009078:	47b8      	blx	r7
 800907a:	3001      	adds	r0, #1
 800907c:	f43f af2b 	beq.w	8008ed6 <_printf_float+0xb6>
 8009080:	f109 0901 	add.w	r9, r9, #1
 8009084:	e7e8      	b.n	8009058 <_printf_float+0x238>
 8009086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009088:	2b00      	cmp	r3, #0
 800908a:	dc39      	bgt.n	8009100 <_printf_float+0x2e0>
 800908c:	4a1b      	ldr	r2, [pc, #108]	@ (80090fc <_printf_float+0x2dc>)
 800908e:	2301      	movs	r3, #1
 8009090:	4631      	mov	r1, r6
 8009092:	4628      	mov	r0, r5
 8009094:	47b8      	blx	r7
 8009096:	3001      	adds	r0, #1
 8009098:	f43f af1d 	beq.w	8008ed6 <_printf_float+0xb6>
 800909c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80090a0:	ea59 0303 	orrs.w	r3, r9, r3
 80090a4:	d102      	bne.n	80090ac <_printf_float+0x28c>
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	07d9      	lsls	r1, r3, #31
 80090aa:	d5d7      	bpl.n	800905c <_printf_float+0x23c>
 80090ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090b0:	4631      	mov	r1, r6
 80090b2:	4628      	mov	r0, r5
 80090b4:	47b8      	blx	r7
 80090b6:	3001      	adds	r0, #1
 80090b8:	f43f af0d 	beq.w	8008ed6 <_printf_float+0xb6>
 80090bc:	f04f 0a00 	mov.w	sl, #0
 80090c0:	f104 0b1a 	add.w	fp, r4, #26
 80090c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c6:	425b      	negs	r3, r3
 80090c8:	4553      	cmp	r3, sl
 80090ca:	dc01      	bgt.n	80090d0 <_printf_float+0x2b0>
 80090cc:	464b      	mov	r3, r9
 80090ce:	e793      	b.n	8008ff8 <_printf_float+0x1d8>
 80090d0:	2301      	movs	r3, #1
 80090d2:	465a      	mov	r2, fp
 80090d4:	4631      	mov	r1, r6
 80090d6:	4628      	mov	r0, r5
 80090d8:	47b8      	blx	r7
 80090da:	3001      	adds	r0, #1
 80090dc:	f43f aefb 	beq.w	8008ed6 <_printf_float+0xb6>
 80090e0:	f10a 0a01 	add.w	sl, sl, #1
 80090e4:	e7ee      	b.n	80090c4 <_printf_float+0x2a4>
 80090e6:	bf00      	nop
 80090e8:	7fefffff 	.word	0x7fefffff
 80090ec:	0800be40 	.word	0x0800be40
 80090f0:	0800be44 	.word	0x0800be44
 80090f4:	0800be48 	.word	0x0800be48
 80090f8:	0800be4c 	.word	0x0800be4c
 80090fc:	0800be50 	.word	0x0800be50
 8009100:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009102:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009106:	4553      	cmp	r3, sl
 8009108:	bfa8      	it	ge
 800910a:	4653      	movge	r3, sl
 800910c:	2b00      	cmp	r3, #0
 800910e:	4699      	mov	r9, r3
 8009110:	dc36      	bgt.n	8009180 <_printf_float+0x360>
 8009112:	f04f 0b00 	mov.w	fp, #0
 8009116:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800911a:	f104 021a 	add.w	r2, r4, #26
 800911e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009120:	9306      	str	r3, [sp, #24]
 8009122:	eba3 0309 	sub.w	r3, r3, r9
 8009126:	455b      	cmp	r3, fp
 8009128:	dc31      	bgt.n	800918e <_printf_float+0x36e>
 800912a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800912c:	459a      	cmp	sl, r3
 800912e:	dc3a      	bgt.n	80091a6 <_printf_float+0x386>
 8009130:	6823      	ldr	r3, [r4, #0]
 8009132:	07da      	lsls	r2, r3, #31
 8009134:	d437      	bmi.n	80091a6 <_printf_float+0x386>
 8009136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009138:	ebaa 0903 	sub.w	r9, sl, r3
 800913c:	9b06      	ldr	r3, [sp, #24]
 800913e:	ebaa 0303 	sub.w	r3, sl, r3
 8009142:	4599      	cmp	r9, r3
 8009144:	bfa8      	it	ge
 8009146:	4699      	movge	r9, r3
 8009148:	f1b9 0f00 	cmp.w	r9, #0
 800914c:	dc33      	bgt.n	80091b6 <_printf_float+0x396>
 800914e:	f04f 0800 	mov.w	r8, #0
 8009152:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009156:	f104 0b1a 	add.w	fp, r4, #26
 800915a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800915c:	ebaa 0303 	sub.w	r3, sl, r3
 8009160:	eba3 0309 	sub.w	r3, r3, r9
 8009164:	4543      	cmp	r3, r8
 8009166:	f77f af79 	ble.w	800905c <_printf_float+0x23c>
 800916a:	2301      	movs	r3, #1
 800916c:	465a      	mov	r2, fp
 800916e:	4631      	mov	r1, r6
 8009170:	4628      	mov	r0, r5
 8009172:	47b8      	blx	r7
 8009174:	3001      	adds	r0, #1
 8009176:	f43f aeae 	beq.w	8008ed6 <_printf_float+0xb6>
 800917a:	f108 0801 	add.w	r8, r8, #1
 800917e:	e7ec      	b.n	800915a <_printf_float+0x33a>
 8009180:	4642      	mov	r2, r8
 8009182:	4631      	mov	r1, r6
 8009184:	4628      	mov	r0, r5
 8009186:	47b8      	blx	r7
 8009188:	3001      	adds	r0, #1
 800918a:	d1c2      	bne.n	8009112 <_printf_float+0x2f2>
 800918c:	e6a3      	b.n	8008ed6 <_printf_float+0xb6>
 800918e:	2301      	movs	r3, #1
 8009190:	4631      	mov	r1, r6
 8009192:	4628      	mov	r0, r5
 8009194:	9206      	str	r2, [sp, #24]
 8009196:	47b8      	blx	r7
 8009198:	3001      	adds	r0, #1
 800919a:	f43f ae9c 	beq.w	8008ed6 <_printf_float+0xb6>
 800919e:	9a06      	ldr	r2, [sp, #24]
 80091a0:	f10b 0b01 	add.w	fp, fp, #1
 80091a4:	e7bb      	b.n	800911e <_printf_float+0x2fe>
 80091a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091aa:	4631      	mov	r1, r6
 80091ac:	4628      	mov	r0, r5
 80091ae:	47b8      	blx	r7
 80091b0:	3001      	adds	r0, #1
 80091b2:	d1c0      	bne.n	8009136 <_printf_float+0x316>
 80091b4:	e68f      	b.n	8008ed6 <_printf_float+0xb6>
 80091b6:	9a06      	ldr	r2, [sp, #24]
 80091b8:	464b      	mov	r3, r9
 80091ba:	4442      	add	r2, r8
 80091bc:	4631      	mov	r1, r6
 80091be:	4628      	mov	r0, r5
 80091c0:	47b8      	blx	r7
 80091c2:	3001      	adds	r0, #1
 80091c4:	d1c3      	bne.n	800914e <_printf_float+0x32e>
 80091c6:	e686      	b.n	8008ed6 <_printf_float+0xb6>
 80091c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80091cc:	f1ba 0f01 	cmp.w	sl, #1
 80091d0:	dc01      	bgt.n	80091d6 <_printf_float+0x3b6>
 80091d2:	07db      	lsls	r3, r3, #31
 80091d4:	d536      	bpl.n	8009244 <_printf_float+0x424>
 80091d6:	2301      	movs	r3, #1
 80091d8:	4642      	mov	r2, r8
 80091da:	4631      	mov	r1, r6
 80091dc:	4628      	mov	r0, r5
 80091de:	47b8      	blx	r7
 80091e0:	3001      	adds	r0, #1
 80091e2:	f43f ae78 	beq.w	8008ed6 <_printf_float+0xb6>
 80091e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091ea:	4631      	mov	r1, r6
 80091ec:	4628      	mov	r0, r5
 80091ee:	47b8      	blx	r7
 80091f0:	3001      	adds	r0, #1
 80091f2:	f43f ae70 	beq.w	8008ed6 <_printf_float+0xb6>
 80091f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80091fa:	2200      	movs	r2, #0
 80091fc:	2300      	movs	r3, #0
 80091fe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009202:	f7f7 fc89 	bl	8000b18 <__aeabi_dcmpeq>
 8009206:	b9c0      	cbnz	r0, 800923a <_printf_float+0x41a>
 8009208:	4653      	mov	r3, sl
 800920a:	f108 0201 	add.w	r2, r8, #1
 800920e:	4631      	mov	r1, r6
 8009210:	4628      	mov	r0, r5
 8009212:	47b8      	blx	r7
 8009214:	3001      	adds	r0, #1
 8009216:	d10c      	bne.n	8009232 <_printf_float+0x412>
 8009218:	e65d      	b.n	8008ed6 <_printf_float+0xb6>
 800921a:	2301      	movs	r3, #1
 800921c:	465a      	mov	r2, fp
 800921e:	4631      	mov	r1, r6
 8009220:	4628      	mov	r0, r5
 8009222:	47b8      	blx	r7
 8009224:	3001      	adds	r0, #1
 8009226:	f43f ae56 	beq.w	8008ed6 <_printf_float+0xb6>
 800922a:	f108 0801 	add.w	r8, r8, #1
 800922e:	45d0      	cmp	r8, sl
 8009230:	dbf3      	blt.n	800921a <_printf_float+0x3fa>
 8009232:	464b      	mov	r3, r9
 8009234:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009238:	e6df      	b.n	8008ffa <_printf_float+0x1da>
 800923a:	f04f 0800 	mov.w	r8, #0
 800923e:	f104 0b1a 	add.w	fp, r4, #26
 8009242:	e7f4      	b.n	800922e <_printf_float+0x40e>
 8009244:	2301      	movs	r3, #1
 8009246:	4642      	mov	r2, r8
 8009248:	e7e1      	b.n	800920e <_printf_float+0x3ee>
 800924a:	2301      	movs	r3, #1
 800924c:	464a      	mov	r2, r9
 800924e:	4631      	mov	r1, r6
 8009250:	4628      	mov	r0, r5
 8009252:	47b8      	blx	r7
 8009254:	3001      	adds	r0, #1
 8009256:	f43f ae3e 	beq.w	8008ed6 <_printf_float+0xb6>
 800925a:	f108 0801 	add.w	r8, r8, #1
 800925e:	68e3      	ldr	r3, [r4, #12]
 8009260:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009262:	1a5b      	subs	r3, r3, r1
 8009264:	4543      	cmp	r3, r8
 8009266:	dcf0      	bgt.n	800924a <_printf_float+0x42a>
 8009268:	e6fc      	b.n	8009064 <_printf_float+0x244>
 800926a:	f04f 0800 	mov.w	r8, #0
 800926e:	f104 0919 	add.w	r9, r4, #25
 8009272:	e7f4      	b.n	800925e <_printf_float+0x43e>

08009274 <_printf_common>:
 8009274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009278:	4616      	mov	r6, r2
 800927a:	4698      	mov	r8, r3
 800927c:	688a      	ldr	r2, [r1, #8]
 800927e:	690b      	ldr	r3, [r1, #16]
 8009280:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009284:	4293      	cmp	r3, r2
 8009286:	bfb8      	it	lt
 8009288:	4613      	movlt	r3, r2
 800928a:	6033      	str	r3, [r6, #0]
 800928c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009290:	4607      	mov	r7, r0
 8009292:	460c      	mov	r4, r1
 8009294:	b10a      	cbz	r2, 800929a <_printf_common+0x26>
 8009296:	3301      	adds	r3, #1
 8009298:	6033      	str	r3, [r6, #0]
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	0699      	lsls	r1, r3, #26
 800929e:	bf42      	ittt	mi
 80092a0:	6833      	ldrmi	r3, [r6, #0]
 80092a2:	3302      	addmi	r3, #2
 80092a4:	6033      	strmi	r3, [r6, #0]
 80092a6:	6825      	ldr	r5, [r4, #0]
 80092a8:	f015 0506 	ands.w	r5, r5, #6
 80092ac:	d106      	bne.n	80092bc <_printf_common+0x48>
 80092ae:	f104 0a19 	add.w	sl, r4, #25
 80092b2:	68e3      	ldr	r3, [r4, #12]
 80092b4:	6832      	ldr	r2, [r6, #0]
 80092b6:	1a9b      	subs	r3, r3, r2
 80092b8:	42ab      	cmp	r3, r5
 80092ba:	dc26      	bgt.n	800930a <_printf_common+0x96>
 80092bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80092c0:	6822      	ldr	r2, [r4, #0]
 80092c2:	3b00      	subs	r3, #0
 80092c4:	bf18      	it	ne
 80092c6:	2301      	movne	r3, #1
 80092c8:	0692      	lsls	r2, r2, #26
 80092ca:	d42b      	bmi.n	8009324 <_printf_common+0xb0>
 80092cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092d0:	4641      	mov	r1, r8
 80092d2:	4638      	mov	r0, r7
 80092d4:	47c8      	blx	r9
 80092d6:	3001      	adds	r0, #1
 80092d8:	d01e      	beq.n	8009318 <_printf_common+0xa4>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	6922      	ldr	r2, [r4, #16]
 80092de:	f003 0306 	and.w	r3, r3, #6
 80092e2:	2b04      	cmp	r3, #4
 80092e4:	bf02      	ittt	eq
 80092e6:	68e5      	ldreq	r5, [r4, #12]
 80092e8:	6833      	ldreq	r3, [r6, #0]
 80092ea:	1aed      	subeq	r5, r5, r3
 80092ec:	68a3      	ldr	r3, [r4, #8]
 80092ee:	bf0c      	ite	eq
 80092f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092f4:	2500      	movne	r5, #0
 80092f6:	4293      	cmp	r3, r2
 80092f8:	bfc4      	itt	gt
 80092fa:	1a9b      	subgt	r3, r3, r2
 80092fc:	18ed      	addgt	r5, r5, r3
 80092fe:	2600      	movs	r6, #0
 8009300:	341a      	adds	r4, #26
 8009302:	42b5      	cmp	r5, r6
 8009304:	d11a      	bne.n	800933c <_printf_common+0xc8>
 8009306:	2000      	movs	r0, #0
 8009308:	e008      	b.n	800931c <_printf_common+0xa8>
 800930a:	2301      	movs	r3, #1
 800930c:	4652      	mov	r2, sl
 800930e:	4641      	mov	r1, r8
 8009310:	4638      	mov	r0, r7
 8009312:	47c8      	blx	r9
 8009314:	3001      	adds	r0, #1
 8009316:	d103      	bne.n	8009320 <_printf_common+0xac>
 8009318:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800931c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009320:	3501      	adds	r5, #1
 8009322:	e7c6      	b.n	80092b2 <_printf_common+0x3e>
 8009324:	18e1      	adds	r1, r4, r3
 8009326:	1c5a      	adds	r2, r3, #1
 8009328:	2030      	movs	r0, #48	@ 0x30
 800932a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800932e:	4422      	add	r2, r4
 8009330:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009334:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009338:	3302      	adds	r3, #2
 800933a:	e7c7      	b.n	80092cc <_printf_common+0x58>
 800933c:	2301      	movs	r3, #1
 800933e:	4622      	mov	r2, r4
 8009340:	4641      	mov	r1, r8
 8009342:	4638      	mov	r0, r7
 8009344:	47c8      	blx	r9
 8009346:	3001      	adds	r0, #1
 8009348:	d0e6      	beq.n	8009318 <_printf_common+0xa4>
 800934a:	3601      	adds	r6, #1
 800934c:	e7d9      	b.n	8009302 <_printf_common+0x8e>
	...

08009350 <_printf_i>:
 8009350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009354:	7e0f      	ldrb	r7, [r1, #24]
 8009356:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009358:	2f78      	cmp	r7, #120	@ 0x78
 800935a:	4691      	mov	r9, r2
 800935c:	4680      	mov	r8, r0
 800935e:	460c      	mov	r4, r1
 8009360:	469a      	mov	sl, r3
 8009362:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009366:	d807      	bhi.n	8009378 <_printf_i+0x28>
 8009368:	2f62      	cmp	r7, #98	@ 0x62
 800936a:	d80a      	bhi.n	8009382 <_printf_i+0x32>
 800936c:	2f00      	cmp	r7, #0
 800936e:	f000 80d2 	beq.w	8009516 <_printf_i+0x1c6>
 8009372:	2f58      	cmp	r7, #88	@ 0x58
 8009374:	f000 80b9 	beq.w	80094ea <_printf_i+0x19a>
 8009378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800937c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009380:	e03a      	b.n	80093f8 <_printf_i+0xa8>
 8009382:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009386:	2b15      	cmp	r3, #21
 8009388:	d8f6      	bhi.n	8009378 <_printf_i+0x28>
 800938a:	a101      	add	r1, pc, #4	@ (adr r1, 8009390 <_printf_i+0x40>)
 800938c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009390:	080093e9 	.word	0x080093e9
 8009394:	080093fd 	.word	0x080093fd
 8009398:	08009379 	.word	0x08009379
 800939c:	08009379 	.word	0x08009379
 80093a0:	08009379 	.word	0x08009379
 80093a4:	08009379 	.word	0x08009379
 80093a8:	080093fd 	.word	0x080093fd
 80093ac:	08009379 	.word	0x08009379
 80093b0:	08009379 	.word	0x08009379
 80093b4:	08009379 	.word	0x08009379
 80093b8:	08009379 	.word	0x08009379
 80093bc:	080094fd 	.word	0x080094fd
 80093c0:	08009427 	.word	0x08009427
 80093c4:	080094b7 	.word	0x080094b7
 80093c8:	08009379 	.word	0x08009379
 80093cc:	08009379 	.word	0x08009379
 80093d0:	0800951f 	.word	0x0800951f
 80093d4:	08009379 	.word	0x08009379
 80093d8:	08009427 	.word	0x08009427
 80093dc:	08009379 	.word	0x08009379
 80093e0:	08009379 	.word	0x08009379
 80093e4:	080094bf 	.word	0x080094bf
 80093e8:	6833      	ldr	r3, [r6, #0]
 80093ea:	1d1a      	adds	r2, r3, #4
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6032      	str	r2, [r6, #0]
 80093f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093f8:	2301      	movs	r3, #1
 80093fa:	e09d      	b.n	8009538 <_printf_i+0x1e8>
 80093fc:	6833      	ldr	r3, [r6, #0]
 80093fe:	6820      	ldr	r0, [r4, #0]
 8009400:	1d19      	adds	r1, r3, #4
 8009402:	6031      	str	r1, [r6, #0]
 8009404:	0606      	lsls	r6, r0, #24
 8009406:	d501      	bpl.n	800940c <_printf_i+0xbc>
 8009408:	681d      	ldr	r5, [r3, #0]
 800940a:	e003      	b.n	8009414 <_printf_i+0xc4>
 800940c:	0645      	lsls	r5, r0, #25
 800940e:	d5fb      	bpl.n	8009408 <_printf_i+0xb8>
 8009410:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009414:	2d00      	cmp	r5, #0
 8009416:	da03      	bge.n	8009420 <_printf_i+0xd0>
 8009418:	232d      	movs	r3, #45	@ 0x2d
 800941a:	426d      	negs	r5, r5
 800941c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009420:	4859      	ldr	r0, [pc, #356]	@ (8009588 <_printf_i+0x238>)
 8009422:	230a      	movs	r3, #10
 8009424:	e011      	b.n	800944a <_printf_i+0xfa>
 8009426:	6821      	ldr	r1, [r4, #0]
 8009428:	6833      	ldr	r3, [r6, #0]
 800942a:	0608      	lsls	r0, r1, #24
 800942c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009430:	d402      	bmi.n	8009438 <_printf_i+0xe8>
 8009432:	0649      	lsls	r1, r1, #25
 8009434:	bf48      	it	mi
 8009436:	b2ad      	uxthmi	r5, r5
 8009438:	2f6f      	cmp	r7, #111	@ 0x6f
 800943a:	4853      	ldr	r0, [pc, #332]	@ (8009588 <_printf_i+0x238>)
 800943c:	6033      	str	r3, [r6, #0]
 800943e:	bf14      	ite	ne
 8009440:	230a      	movne	r3, #10
 8009442:	2308      	moveq	r3, #8
 8009444:	2100      	movs	r1, #0
 8009446:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800944a:	6866      	ldr	r6, [r4, #4]
 800944c:	60a6      	str	r6, [r4, #8]
 800944e:	2e00      	cmp	r6, #0
 8009450:	bfa2      	ittt	ge
 8009452:	6821      	ldrge	r1, [r4, #0]
 8009454:	f021 0104 	bicge.w	r1, r1, #4
 8009458:	6021      	strge	r1, [r4, #0]
 800945a:	b90d      	cbnz	r5, 8009460 <_printf_i+0x110>
 800945c:	2e00      	cmp	r6, #0
 800945e:	d04b      	beq.n	80094f8 <_printf_i+0x1a8>
 8009460:	4616      	mov	r6, r2
 8009462:	fbb5 f1f3 	udiv	r1, r5, r3
 8009466:	fb03 5711 	mls	r7, r3, r1, r5
 800946a:	5dc7      	ldrb	r7, [r0, r7]
 800946c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009470:	462f      	mov	r7, r5
 8009472:	42bb      	cmp	r3, r7
 8009474:	460d      	mov	r5, r1
 8009476:	d9f4      	bls.n	8009462 <_printf_i+0x112>
 8009478:	2b08      	cmp	r3, #8
 800947a:	d10b      	bne.n	8009494 <_printf_i+0x144>
 800947c:	6823      	ldr	r3, [r4, #0]
 800947e:	07df      	lsls	r7, r3, #31
 8009480:	d508      	bpl.n	8009494 <_printf_i+0x144>
 8009482:	6923      	ldr	r3, [r4, #16]
 8009484:	6861      	ldr	r1, [r4, #4]
 8009486:	4299      	cmp	r1, r3
 8009488:	bfde      	ittt	le
 800948a:	2330      	movle	r3, #48	@ 0x30
 800948c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009490:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009494:	1b92      	subs	r2, r2, r6
 8009496:	6122      	str	r2, [r4, #16]
 8009498:	f8cd a000 	str.w	sl, [sp]
 800949c:	464b      	mov	r3, r9
 800949e:	aa03      	add	r2, sp, #12
 80094a0:	4621      	mov	r1, r4
 80094a2:	4640      	mov	r0, r8
 80094a4:	f7ff fee6 	bl	8009274 <_printf_common>
 80094a8:	3001      	adds	r0, #1
 80094aa:	d14a      	bne.n	8009542 <_printf_i+0x1f2>
 80094ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094b0:	b004      	add	sp, #16
 80094b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	f043 0320 	orr.w	r3, r3, #32
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	4833      	ldr	r0, [pc, #204]	@ (800958c <_printf_i+0x23c>)
 80094c0:	2778      	movs	r7, #120	@ 0x78
 80094c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	6831      	ldr	r1, [r6, #0]
 80094ca:	061f      	lsls	r7, r3, #24
 80094cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80094d0:	d402      	bmi.n	80094d8 <_printf_i+0x188>
 80094d2:	065f      	lsls	r7, r3, #25
 80094d4:	bf48      	it	mi
 80094d6:	b2ad      	uxthmi	r5, r5
 80094d8:	6031      	str	r1, [r6, #0]
 80094da:	07d9      	lsls	r1, r3, #31
 80094dc:	bf44      	itt	mi
 80094de:	f043 0320 	orrmi.w	r3, r3, #32
 80094e2:	6023      	strmi	r3, [r4, #0]
 80094e4:	b11d      	cbz	r5, 80094ee <_printf_i+0x19e>
 80094e6:	2310      	movs	r3, #16
 80094e8:	e7ac      	b.n	8009444 <_printf_i+0xf4>
 80094ea:	4827      	ldr	r0, [pc, #156]	@ (8009588 <_printf_i+0x238>)
 80094ec:	e7e9      	b.n	80094c2 <_printf_i+0x172>
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	f023 0320 	bic.w	r3, r3, #32
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	e7f6      	b.n	80094e6 <_printf_i+0x196>
 80094f8:	4616      	mov	r6, r2
 80094fa:	e7bd      	b.n	8009478 <_printf_i+0x128>
 80094fc:	6833      	ldr	r3, [r6, #0]
 80094fe:	6825      	ldr	r5, [r4, #0]
 8009500:	6961      	ldr	r1, [r4, #20]
 8009502:	1d18      	adds	r0, r3, #4
 8009504:	6030      	str	r0, [r6, #0]
 8009506:	062e      	lsls	r6, r5, #24
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	d501      	bpl.n	8009510 <_printf_i+0x1c0>
 800950c:	6019      	str	r1, [r3, #0]
 800950e:	e002      	b.n	8009516 <_printf_i+0x1c6>
 8009510:	0668      	lsls	r0, r5, #25
 8009512:	d5fb      	bpl.n	800950c <_printf_i+0x1bc>
 8009514:	8019      	strh	r1, [r3, #0]
 8009516:	2300      	movs	r3, #0
 8009518:	6123      	str	r3, [r4, #16]
 800951a:	4616      	mov	r6, r2
 800951c:	e7bc      	b.n	8009498 <_printf_i+0x148>
 800951e:	6833      	ldr	r3, [r6, #0]
 8009520:	1d1a      	adds	r2, r3, #4
 8009522:	6032      	str	r2, [r6, #0]
 8009524:	681e      	ldr	r6, [r3, #0]
 8009526:	6862      	ldr	r2, [r4, #4]
 8009528:	2100      	movs	r1, #0
 800952a:	4630      	mov	r0, r6
 800952c:	f7f6 fe78 	bl	8000220 <memchr>
 8009530:	b108      	cbz	r0, 8009536 <_printf_i+0x1e6>
 8009532:	1b80      	subs	r0, r0, r6
 8009534:	6060      	str	r0, [r4, #4]
 8009536:	6863      	ldr	r3, [r4, #4]
 8009538:	6123      	str	r3, [r4, #16]
 800953a:	2300      	movs	r3, #0
 800953c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009540:	e7aa      	b.n	8009498 <_printf_i+0x148>
 8009542:	6923      	ldr	r3, [r4, #16]
 8009544:	4632      	mov	r2, r6
 8009546:	4649      	mov	r1, r9
 8009548:	4640      	mov	r0, r8
 800954a:	47d0      	blx	sl
 800954c:	3001      	adds	r0, #1
 800954e:	d0ad      	beq.n	80094ac <_printf_i+0x15c>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	079b      	lsls	r3, r3, #30
 8009554:	d413      	bmi.n	800957e <_printf_i+0x22e>
 8009556:	68e0      	ldr	r0, [r4, #12]
 8009558:	9b03      	ldr	r3, [sp, #12]
 800955a:	4298      	cmp	r0, r3
 800955c:	bfb8      	it	lt
 800955e:	4618      	movlt	r0, r3
 8009560:	e7a6      	b.n	80094b0 <_printf_i+0x160>
 8009562:	2301      	movs	r3, #1
 8009564:	4632      	mov	r2, r6
 8009566:	4649      	mov	r1, r9
 8009568:	4640      	mov	r0, r8
 800956a:	47d0      	blx	sl
 800956c:	3001      	adds	r0, #1
 800956e:	d09d      	beq.n	80094ac <_printf_i+0x15c>
 8009570:	3501      	adds	r5, #1
 8009572:	68e3      	ldr	r3, [r4, #12]
 8009574:	9903      	ldr	r1, [sp, #12]
 8009576:	1a5b      	subs	r3, r3, r1
 8009578:	42ab      	cmp	r3, r5
 800957a:	dcf2      	bgt.n	8009562 <_printf_i+0x212>
 800957c:	e7eb      	b.n	8009556 <_printf_i+0x206>
 800957e:	2500      	movs	r5, #0
 8009580:	f104 0619 	add.w	r6, r4, #25
 8009584:	e7f5      	b.n	8009572 <_printf_i+0x222>
 8009586:	bf00      	nop
 8009588:	0800be52 	.word	0x0800be52
 800958c:	0800be63 	.word	0x0800be63

08009590 <siprintf>:
 8009590:	b40e      	push	{r1, r2, r3}
 8009592:	b500      	push	{lr}
 8009594:	b09c      	sub	sp, #112	@ 0x70
 8009596:	ab1d      	add	r3, sp, #116	@ 0x74
 8009598:	9002      	str	r0, [sp, #8]
 800959a:	9006      	str	r0, [sp, #24]
 800959c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80095a0:	4809      	ldr	r0, [pc, #36]	@ (80095c8 <siprintf+0x38>)
 80095a2:	9107      	str	r1, [sp, #28]
 80095a4:	9104      	str	r1, [sp, #16]
 80095a6:	4909      	ldr	r1, [pc, #36]	@ (80095cc <siprintf+0x3c>)
 80095a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ac:	9105      	str	r1, [sp, #20]
 80095ae:	6800      	ldr	r0, [r0, #0]
 80095b0:	9301      	str	r3, [sp, #4]
 80095b2:	a902      	add	r1, sp, #8
 80095b4:	f001 f85e 	bl	800a674 <_svfiprintf_r>
 80095b8:	9b02      	ldr	r3, [sp, #8]
 80095ba:	2200      	movs	r2, #0
 80095bc:	701a      	strb	r2, [r3, #0]
 80095be:	b01c      	add	sp, #112	@ 0x70
 80095c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095c4:	b003      	add	sp, #12
 80095c6:	4770      	bx	lr
 80095c8:	20000028 	.word	0x20000028
 80095cc:	ffff0208 	.word	0xffff0208

080095d0 <std>:
 80095d0:	2300      	movs	r3, #0
 80095d2:	b510      	push	{r4, lr}
 80095d4:	4604      	mov	r4, r0
 80095d6:	e9c0 3300 	strd	r3, r3, [r0]
 80095da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095de:	6083      	str	r3, [r0, #8]
 80095e0:	8181      	strh	r1, [r0, #12]
 80095e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80095e4:	81c2      	strh	r2, [r0, #14]
 80095e6:	6183      	str	r3, [r0, #24]
 80095e8:	4619      	mov	r1, r3
 80095ea:	2208      	movs	r2, #8
 80095ec:	305c      	adds	r0, #92	@ 0x5c
 80095ee:	f000 f8b1 	bl	8009754 <memset>
 80095f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009628 <std+0x58>)
 80095f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80095f6:	4b0d      	ldr	r3, [pc, #52]	@ (800962c <std+0x5c>)
 80095f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80095fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009630 <std+0x60>)
 80095fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80095fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009634 <std+0x64>)
 8009600:	6323      	str	r3, [r4, #48]	@ 0x30
 8009602:	4b0d      	ldr	r3, [pc, #52]	@ (8009638 <std+0x68>)
 8009604:	6224      	str	r4, [r4, #32]
 8009606:	429c      	cmp	r4, r3
 8009608:	d006      	beq.n	8009618 <std+0x48>
 800960a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800960e:	4294      	cmp	r4, r2
 8009610:	d002      	beq.n	8009618 <std+0x48>
 8009612:	33d0      	adds	r3, #208	@ 0xd0
 8009614:	429c      	cmp	r4, r3
 8009616:	d105      	bne.n	8009624 <std+0x54>
 8009618:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800961c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009620:	f000 b924 	b.w	800986c <__retarget_lock_init_recursive>
 8009624:	bd10      	pop	{r4, pc}
 8009626:	bf00      	nop
 8009628:	0800b235 	.word	0x0800b235
 800962c:	0800b257 	.word	0x0800b257
 8009630:	0800b28f 	.word	0x0800b28f
 8009634:	0800b2b3 	.word	0x0800b2b3
 8009638:	20004654 	.word	0x20004654

0800963c <stdio_exit_handler>:
 800963c:	4a02      	ldr	r2, [pc, #8]	@ (8009648 <stdio_exit_handler+0xc>)
 800963e:	4903      	ldr	r1, [pc, #12]	@ (800964c <stdio_exit_handler+0x10>)
 8009640:	4803      	ldr	r0, [pc, #12]	@ (8009650 <stdio_exit_handler+0x14>)
 8009642:	f000 b869 	b.w	8009718 <_fwalk_sglue>
 8009646:	bf00      	nop
 8009648:	2000001c 	.word	0x2000001c
 800964c:	0800aac9 	.word	0x0800aac9
 8009650:	2000002c 	.word	0x2000002c

08009654 <cleanup_stdio>:
 8009654:	6841      	ldr	r1, [r0, #4]
 8009656:	4b0c      	ldr	r3, [pc, #48]	@ (8009688 <cleanup_stdio+0x34>)
 8009658:	4299      	cmp	r1, r3
 800965a:	b510      	push	{r4, lr}
 800965c:	4604      	mov	r4, r0
 800965e:	d001      	beq.n	8009664 <cleanup_stdio+0x10>
 8009660:	f001 fa32 	bl	800aac8 <_fflush_r>
 8009664:	68a1      	ldr	r1, [r4, #8]
 8009666:	4b09      	ldr	r3, [pc, #36]	@ (800968c <cleanup_stdio+0x38>)
 8009668:	4299      	cmp	r1, r3
 800966a:	d002      	beq.n	8009672 <cleanup_stdio+0x1e>
 800966c:	4620      	mov	r0, r4
 800966e:	f001 fa2b 	bl	800aac8 <_fflush_r>
 8009672:	68e1      	ldr	r1, [r4, #12]
 8009674:	4b06      	ldr	r3, [pc, #24]	@ (8009690 <cleanup_stdio+0x3c>)
 8009676:	4299      	cmp	r1, r3
 8009678:	d004      	beq.n	8009684 <cleanup_stdio+0x30>
 800967a:	4620      	mov	r0, r4
 800967c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009680:	f001 ba22 	b.w	800aac8 <_fflush_r>
 8009684:	bd10      	pop	{r4, pc}
 8009686:	bf00      	nop
 8009688:	20004654 	.word	0x20004654
 800968c:	200046bc 	.word	0x200046bc
 8009690:	20004724 	.word	0x20004724

08009694 <global_stdio_init.part.0>:
 8009694:	b510      	push	{r4, lr}
 8009696:	4b0b      	ldr	r3, [pc, #44]	@ (80096c4 <global_stdio_init.part.0+0x30>)
 8009698:	4c0b      	ldr	r4, [pc, #44]	@ (80096c8 <global_stdio_init.part.0+0x34>)
 800969a:	4a0c      	ldr	r2, [pc, #48]	@ (80096cc <global_stdio_init.part.0+0x38>)
 800969c:	601a      	str	r2, [r3, #0]
 800969e:	4620      	mov	r0, r4
 80096a0:	2200      	movs	r2, #0
 80096a2:	2104      	movs	r1, #4
 80096a4:	f7ff ff94 	bl	80095d0 <std>
 80096a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80096ac:	2201      	movs	r2, #1
 80096ae:	2109      	movs	r1, #9
 80096b0:	f7ff ff8e 	bl	80095d0 <std>
 80096b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80096b8:	2202      	movs	r2, #2
 80096ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096be:	2112      	movs	r1, #18
 80096c0:	f7ff bf86 	b.w	80095d0 <std>
 80096c4:	2000478c 	.word	0x2000478c
 80096c8:	20004654 	.word	0x20004654
 80096cc:	0800963d 	.word	0x0800963d

080096d0 <__sfp_lock_acquire>:
 80096d0:	4801      	ldr	r0, [pc, #4]	@ (80096d8 <__sfp_lock_acquire+0x8>)
 80096d2:	f000 b8cc 	b.w	800986e <__retarget_lock_acquire_recursive>
 80096d6:	bf00      	nop
 80096d8:	20004795 	.word	0x20004795

080096dc <__sfp_lock_release>:
 80096dc:	4801      	ldr	r0, [pc, #4]	@ (80096e4 <__sfp_lock_release+0x8>)
 80096de:	f000 b8c7 	b.w	8009870 <__retarget_lock_release_recursive>
 80096e2:	bf00      	nop
 80096e4:	20004795 	.word	0x20004795

080096e8 <__sinit>:
 80096e8:	b510      	push	{r4, lr}
 80096ea:	4604      	mov	r4, r0
 80096ec:	f7ff fff0 	bl	80096d0 <__sfp_lock_acquire>
 80096f0:	6a23      	ldr	r3, [r4, #32]
 80096f2:	b11b      	cbz	r3, 80096fc <__sinit+0x14>
 80096f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096f8:	f7ff bff0 	b.w	80096dc <__sfp_lock_release>
 80096fc:	4b04      	ldr	r3, [pc, #16]	@ (8009710 <__sinit+0x28>)
 80096fe:	6223      	str	r3, [r4, #32]
 8009700:	4b04      	ldr	r3, [pc, #16]	@ (8009714 <__sinit+0x2c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1f5      	bne.n	80096f4 <__sinit+0xc>
 8009708:	f7ff ffc4 	bl	8009694 <global_stdio_init.part.0>
 800970c:	e7f2      	b.n	80096f4 <__sinit+0xc>
 800970e:	bf00      	nop
 8009710:	08009655 	.word	0x08009655
 8009714:	2000478c 	.word	0x2000478c

08009718 <_fwalk_sglue>:
 8009718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800971c:	4607      	mov	r7, r0
 800971e:	4688      	mov	r8, r1
 8009720:	4614      	mov	r4, r2
 8009722:	2600      	movs	r6, #0
 8009724:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009728:	f1b9 0901 	subs.w	r9, r9, #1
 800972c:	d505      	bpl.n	800973a <_fwalk_sglue+0x22>
 800972e:	6824      	ldr	r4, [r4, #0]
 8009730:	2c00      	cmp	r4, #0
 8009732:	d1f7      	bne.n	8009724 <_fwalk_sglue+0xc>
 8009734:	4630      	mov	r0, r6
 8009736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800973a:	89ab      	ldrh	r3, [r5, #12]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d907      	bls.n	8009750 <_fwalk_sglue+0x38>
 8009740:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009744:	3301      	adds	r3, #1
 8009746:	d003      	beq.n	8009750 <_fwalk_sglue+0x38>
 8009748:	4629      	mov	r1, r5
 800974a:	4638      	mov	r0, r7
 800974c:	47c0      	blx	r8
 800974e:	4306      	orrs	r6, r0
 8009750:	3568      	adds	r5, #104	@ 0x68
 8009752:	e7e9      	b.n	8009728 <_fwalk_sglue+0x10>

08009754 <memset>:
 8009754:	4402      	add	r2, r0
 8009756:	4603      	mov	r3, r0
 8009758:	4293      	cmp	r3, r2
 800975a:	d100      	bne.n	800975e <memset+0xa>
 800975c:	4770      	bx	lr
 800975e:	f803 1b01 	strb.w	r1, [r3], #1
 8009762:	e7f9      	b.n	8009758 <memset+0x4>

08009764 <_localeconv_r>:
 8009764:	4800      	ldr	r0, [pc, #0]	@ (8009768 <_localeconv_r+0x4>)
 8009766:	4770      	bx	lr
 8009768:	20000168 	.word	0x20000168

0800976c <_reclaim_reent>:
 800976c:	4b29      	ldr	r3, [pc, #164]	@ (8009814 <_reclaim_reent+0xa8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4283      	cmp	r3, r0
 8009772:	b570      	push	{r4, r5, r6, lr}
 8009774:	4604      	mov	r4, r0
 8009776:	d04b      	beq.n	8009810 <_reclaim_reent+0xa4>
 8009778:	69c3      	ldr	r3, [r0, #28]
 800977a:	b1ab      	cbz	r3, 80097a8 <_reclaim_reent+0x3c>
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	b16b      	cbz	r3, 800979c <_reclaim_reent+0x30>
 8009780:	2500      	movs	r5, #0
 8009782:	69e3      	ldr	r3, [r4, #28]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	5959      	ldr	r1, [r3, r5]
 8009788:	2900      	cmp	r1, #0
 800978a:	d13b      	bne.n	8009804 <_reclaim_reent+0x98>
 800978c:	3504      	adds	r5, #4
 800978e:	2d80      	cmp	r5, #128	@ 0x80
 8009790:	d1f7      	bne.n	8009782 <_reclaim_reent+0x16>
 8009792:	69e3      	ldr	r3, [r4, #28]
 8009794:	4620      	mov	r0, r4
 8009796:	68d9      	ldr	r1, [r3, #12]
 8009798:	f000 fec6 	bl	800a528 <_free_r>
 800979c:	69e3      	ldr	r3, [r4, #28]
 800979e:	6819      	ldr	r1, [r3, #0]
 80097a0:	b111      	cbz	r1, 80097a8 <_reclaim_reent+0x3c>
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 fec0 	bl	800a528 <_free_r>
 80097a8:	6961      	ldr	r1, [r4, #20]
 80097aa:	b111      	cbz	r1, 80097b2 <_reclaim_reent+0x46>
 80097ac:	4620      	mov	r0, r4
 80097ae:	f000 febb 	bl	800a528 <_free_r>
 80097b2:	69e1      	ldr	r1, [r4, #28]
 80097b4:	b111      	cbz	r1, 80097bc <_reclaim_reent+0x50>
 80097b6:	4620      	mov	r0, r4
 80097b8:	f000 feb6 	bl	800a528 <_free_r>
 80097bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80097be:	b111      	cbz	r1, 80097c6 <_reclaim_reent+0x5a>
 80097c0:	4620      	mov	r0, r4
 80097c2:	f000 feb1 	bl	800a528 <_free_r>
 80097c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097c8:	b111      	cbz	r1, 80097d0 <_reclaim_reent+0x64>
 80097ca:	4620      	mov	r0, r4
 80097cc:	f000 feac 	bl	800a528 <_free_r>
 80097d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80097d2:	b111      	cbz	r1, 80097da <_reclaim_reent+0x6e>
 80097d4:	4620      	mov	r0, r4
 80097d6:	f000 fea7 	bl	800a528 <_free_r>
 80097da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80097dc:	b111      	cbz	r1, 80097e4 <_reclaim_reent+0x78>
 80097de:	4620      	mov	r0, r4
 80097e0:	f000 fea2 	bl	800a528 <_free_r>
 80097e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80097e6:	b111      	cbz	r1, 80097ee <_reclaim_reent+0x82>
 80097e8:	4620      	mov	r0, r4
 80097ea:	f000 fe9d 	bl	800a528 <_free_r>
 80097ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80097f0:	b111      	cbz	r1, 80097f8 <_reclaim_reent+0x8c>
 80097f2:	4620      	mov	r0, r4
 80097f4:	f000 fe98 	bl	800a528 <_free_r>
 80097f8:	6a23      	ldr	r3, [r4, #32]
 80097fa:	b14b      	cbz	r3, 8009810 <_reclaim_reent+0xa4>
 80097fc:	4620      	mov	r0, r4
 80097fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009802:	4718      	bx	r3
 8009804:	680e      	ldr	r6, [r1, #0]
 8009806:	4620      	mov	r0, r4
 8009808:	f000 fe8e 	bl	800a528 <_free_r>
 800980c:	4631      	mov	r1, r6
 800980e:	e7bb      	b.n	8009788 <_reclaim_reent+0x1c>
 8009810:	bd70      	pop	{r4, r5, r6, pc}
 8009812:	bf00      	nop
 8009814:	20000028 	.word	0x20000028

08009818 <__errno>:
 8009818:	4b01      	ldr	r3, [pc, #4]	@ (8009820 <__errno+0x8>)
 800981a:	6818      	ldr	r0, [r3, #0]
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	20000028 	.word	0x20000028

08009824 <__libc_init_array>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	4d0d      	ldr	r5, [pc, #52]	@ (800985c <__libc_init_array+0x38>)
 8009828:	4c0d      	ldr	r4, [pc, #52]	@ (8009860 <__libc_init_array+0x3c>)
 800982a:	1b64      	subs	r4, r4, r5
 800982c:	10a4      	asrs	r4, r4, #2
 800982e:	2600      	movs	r6, #0
 8009830:	42a6      	cmp	r6, r4
 8009832:	d109      	bne.n	8009848 <__libc_init_array+0x24>
 8009834:	4d0b      	ldr	r5, [pc, #44]	@ (8009864 <__libc_init_array+0x40>)
 8009836:	4c0c      	ldr	r4, [pc, #48]	@ (8009868 <__libc_init_array+0x44>)
 8009838:	f002 fa78 	bl	800bd2c <_init>
 800983c:	1b64      	subs	r4, r4, r5
 800983e:	10a4      	asrs	r4, r4, #2
 8009840:	2600      	movs	r6, #0
 8009842:	42a6      	cmp	r6, r4
 8009844:	d105      	bne.n	8009852 <__libc_init_array+0x2e>
 8009846:	bd70      	pop	{r4, r5, r6, pc}
 8009848:	f855 3b04 	ldr.w	r3, [r5], #4
 800984c:	4798      	blx	r3
 800984e:	3601      	adds	r6, #1
 8009850:	e7ee      	b.n	8009830 <__libc_init_array+0xc>
 8009852:	f855 3b04 	ldr.w	r3, [r5], #4
 8009856:	4798      	blx	r3
 8009858:	3601      	adds	r6, #1
 800985a:	e7f2      	b.n	8009842 <__libc_init_array+0x1e>
 800985c:	0800c1d0 	.word	0x0800c1d0
 8009860:	0800c1d0 	.word	0x0800c1d0
 8009864:	0800c1d0 	.word	0x0800c1d0
 8009868:	0800c1d4 	.word	0x0800c1d4

0800986c <__retarget_lock_init_recursive>:
 800986c:	4770      	bx	lr

0800986e <__retarget_lock_acquire_recursive>:
 800986e:	4770      	bx	lr

08009870 <__retarget_lock_release_recursive>:
 8009870:	4770      	bx	lr

08009872 <memcpy>:
 8009872:	440a      	add	r2, r1
 8009874:	4291      	cmp	r1, r2
 8009876:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800987a:	d100      	bne.n	800987e <memcpy+0xc>
 800987c:	4770      	bx	lr
 800987e:	b510      	push	{r4, lr}
 8009880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009888:	4291      	cmp	r1, r2
 800988a:	d1f9      	bne.n	8009880 <memcpy+0xe>
 800988c:	bd10      	pop	{r4, pc}

0800988e <quorem>:
 800988e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009892:	6903      	ldr	r3, [r0, #16]
 8009894:	690c      	ldr	r4, [r1, #16]
 8009896:	42a3      	cmp	r3, r4
 8009898:	4607      	mov	r7, r0
 800989a:	db7e      	blt.n	800999a <quorem+0x10c>
 800989c:	3c01      	subs	r4, #1
 800989e:	f101 0814 	add.w	r8, r1, #20
 80098a2:	00a3      	lsls	r3, r4, #2
 80098a4:	f100 0514 	add.w	r5, r0, #20
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098ae:	9301      	str	r3, [sp, #4]
 80098b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098b8:	3301      	adds	r3, #1
 80098ba:	429a      	cmp	r2, r3
 80098bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80098c4:	d32e      	bcc.n	8009924 <quorem+0x96>
 80098c6:	f04f 0a00 	mov.w	sl, #0
 80098ca:	46c4      	mov	ip, r8
 80098cc:	46ae      	mov	lr, r5
 80098ce:	46d3      	mov	fp, sl
 80098d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098d4:	b298      	uxth	r0, r3
 80098d6:	fb06 a000 	mla	r0, r6, r0, sl
 80098da:	0c02      	lsrs	r2, r0, #16
 80098dc:	0c1b      	lsrs	r3, r3, #16
 80098de:	fb06 2303 	mla	r3, r6, r3, r2
 80098e2:	f8de 2000 	ldr.w	r2, [lr]
 80098e6:	b280      	uxth	r0, r0
 80098e8:	b292      	uxth	r2, r2
 80098ea:	1a12      	subs	r2, r2, r0
 80098ec:	445a      	add	r2, fp
 80098ee:	f8de 0000 	ldr.w	r0, [lr]
 80098f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80098fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009900:	b292      	uxth	r2, r2
 8009902:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009906:	45e1      	cmp	r9, ip
 8009908:	f84e 2b04 	str.w	r2, [lr], #4
 800990c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009910:	d2de      	bcs.n	80098d0 <quorem+0x42>
 8009912:	9b00      	ldr	r3, [sp, #0]
 8009914:	58eb      	ldr	r3, [r5, r3]
 8009916:	b92b      	cbnz	r3, 8009924 <quorem+0x96>
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	3b04      	subs	r3, #4
 800991c:	429d      	cmp	r5, r3
 800991e:	461a      	mov	r2, r3
 8009920:	d32f      	bcc.n	8009982 <quorem+0xf4>
 8009922:	613c      	str	r4, [r7, #16]
 8009924:	4638      	mov	r0, r7
 8009926:	f001 fb7d 	bl	800b024 <__mcmp>
 800992a:	2800      	cmp	r0, #0
 800992c:	db25      	blt.n	800997a <quorem+0xec>
 800992e:	4629      	mov	r1, r5
 8009930:	2000      	movs	r0, #0
 8009932:	f858 2b04 	ldr.w	r2, [r8], #4
 8009936:	f8d1 c000 	ldr.w	ip, [r1]
 800993a:	fa1f fe82 	uxth.w	lr, r2
 800993e:	fa1f f38c 	uxth.w	r3, ip
 8009942:	eba3 030e 	sub.w	r3, r3, lr
 8009946:	4403      	add	r3, r0
 8009948:	0c12      	lsrs	r2, r2, #16
 800994a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800994e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009952:	b29b      	uxth	r3, r3
 8009954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009958:	45c1      	cmp	r9, r8
 800995a:	f841 3b04 	str.w	r3, [r1], #4
 800995e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009962:	d2e6      	bcs.n	8009932 <quorem+0xa4>
 8009964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009968:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800996c:	b922      	cbnz	r2, 8009978 <quorem+0xea>
 800996e:	3b04      	subs	r3, #4
 8009970:	429d      	cmp	r5, r3
 8009972:	461a      	mov	r2, r3
 8009974:	d30b      	bcc.n	800998e <quorem+0x100>
 8009976:	613c      	str	r4, [r7, #16]
 8009978:	3601      	adds	r6, #1
 800997a:	4630      	mov	r0, r6
 800997c:	b003      	add	sp, #12
 800997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009982:	6812      	ldr	r2, [r2, #0]
 8009984:	3b04      	subs	r3, #4
 8009986:	2a00      	cmp	r2, #0
 8009988:	d1cb      	bne.n	8009922 <quorem+0x94>
 800998a:	3c01      	subs	r4, #1
 800998c:	e7c6      	b.n	800991c <quorem+0x8e>
 800998e:	6812      	ldr	r2, [r2, #0]
 8009990:	3b04      	subs	r3, #4
 8009992:	2a00      	cmp	r2, #0
 8009994:	d1ef      	bne.n	8009976 <quorem+0xe8>
 8009996:	3c01      	subs	r4, #1
 8009998:	e7ea      	b.n	8009970 <quorem+0xe2>
 800999a:	2000      	movs	r0, #0
 800999c:	e7ee      	b.n	800997c <quorem+0xee>
	...

080099a0 <_dtoa_r>:
 80099a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	69c7      	ldr	r7, [r0, #28]
 80099a6:	b099      	sub	sp, #100	@ 0x64
 80099a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80099ac:	ec55 4b10 	vmov	r4, r5, d0
 80099b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80099b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80099b4:	4683      	mov	fp, r0
 80099b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80099b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099ba:	b97f      	cbnz	r7, 80099dc <_dtoa_r+0x3c>
 80099bc:	2010      	movs	r0, #16
 80099be:	f000 ff55 	bl	800a86c <malloc>
 80099c2:	4602      	mov	r2, r0
 80099c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80099c8:	b920      	cbnz	r0, 80099d4 <_dtoa_r+0x34>
 80099ca:	4ba7      	ldr	r3, [pc, #668]	@ (8009c68 <_dtoa_r+0x2c8>)
 80099cc:	21ef      	movs	r1, #239	@ 0xef
 80099ce:	48a7      	ldr	r0, [pc, #668]	@ (8009c6c <_dtoa_r+0x2cc>)
 80099d0:	f001 fd12 	bl	800b3f8 <__assert_func>
 80099d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80099d8:	6007      	str	r7, [r0, #0]
 80099da:	60c7      	str	r7, [r0, #12]
 80099dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099e0:	6819      	ldr	r1, [r3, #0]
 80099e2:	b159      	cbz	r1, 80099fc <_dtoa_r+0x5c>
 80099e4:	685a      	ldr	r2, [r3, #4]
 80099e6:	604a      	str	r2, [r1, #4]
 80099e8:	2301      	movs	r3, #1
 80099ea:	4093      	lsls	r3, r2
 80099ec:	608b      	str	r3, [r1, #8]
 80099ee:	4658      	mov	r0, fp
 80099f0:	f001 f8de 	bl	800abb0 <_Bfree>
 80099f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099f8:	2200      	movs	r2, #0
 80099fa:	601a      	str	r2, [r3, #0]
 80099fc:	1e2b      	subs	r3, r5, #0
 80099fe:	bfb9      	ittee	lt
 8009a00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a04:	9303      	strlt	r3, [sp, #12]
 8009a06:	2300      	movge	r3, #0
 8009a08:	6033      	strge	r3, [r6, #0]
 8009a0a:	9f03      	ldr	r7, [sp, #12]
 8009a0c:	4b98      	ldr	r3, [pc, #608]	@ (8009c70 <_dtoa_r+0x2d0>)
 8009a0e:	bfbc      	itt	lt
 8009a10:	2201      	movlt	r2, #1
 8009a12:	6032      	strlt	r2, [r6, #0]
 8009a14:	43bb      	bics	r3, r7
 8009a16:	d112      	bne.n	8009a3e <_dtoa_r+0x9e>
 8009a18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a24:	4323      	orrs	r3, r4
 8009a26:	f000 854d 	beq.w	800a4c4 <_dtoa_r+0xb24>
 8009a2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009c84 <_dtoa_r+0x2e4>
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 854f 	beq.w	800a4d4 <_dtoa_r+0xb34>
 8009a36:	f10a 0303 	add.w	r3, sl, #3
 8009a3a:	f000 bd49 	b.w	800a4d0 <_dtoa_r+0xb30>
 8009a3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a42:	2200      	movs	r2, #0
 8009a44:	ec51 0b17 	vmov	r0, r1, d7
 8009a48:	2300      	movs	r3, #0
 8009a4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009a4e:	f7f7 f863 	bl	8000b18 <__aeabi_dcmpeq>
 8009a52:	4680      	mov	r8, r0
 8009a54:	b158      	cbz	r0, 8009a6e <_dtoa_r+0xce>
 8009a56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a58:	2301      	movs	r3, #1
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a5e:	b113      	cbz	r3, 8009a66 <_dtoa_r+0xc6>
 8009a60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a62:	4b84      	ldr	r3, [pc, #528]	@ (8009c74 <_dtoa_r+0x2d4>)
 8009a64:	6013      	str	r3, [r2, #0]
 8009a66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009c88 <_dtoa_r+0x2e8>
 8009a6a:	f000 bd33 	b.w	800a4d4 <_dtoa_r+0xb34>
 8009a6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009a72:	aa16      	add	r2, sp, #88	@ 0x58
 8009a74:	a917      	add	r1, sp, #92	@ 0x5c
 8009a76:	4658      	mov	r0, fp
 8009a78:	f001 fb84 	bl	800b184 <__d2b>
 8009a7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009a80:	4681      	mov	r9, r0
 8009a82:	2e00      	cmp	r6, #0
 8009a84:	d077      	beq.n	8009b76 <_dtoa_r+0x1d6>
 8009a86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009a9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	4b74      	ldr	r3, [pc, #464]	@ (8009c78 <_dtoa_r+0x2d8>)
 8009aa6:	f7f6 fc17 	bl	80002d8 <__aeabi_dsub>
 8009aaa:	a369      	add	r3, pc, #420	@ (adr r3, 8009c50 <_dtoa_r+0x2b0>)
 8009aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab0:	f7f6 fdca 	bl	8000648 <__aeabi_dmul>
 8009ab4:	a368      	add	r3, pc, #416	@ (adr r3, 8009c58 <_dtoa_r+0x2b8>)
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	f7f6 fc0f 	bl	80002dc <__adddf3>
 8009abe:	4604      	mov	r4, r0
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	460d      	mov	r5, r1
 8009ac4:	f7f6 fd56 	bl	8000574 <__aeabi_i2d>
 8009ac8:	a365      	add	r3, pc, #404	@ (adr r3, 8009c60 <_dtoa_r+0x2c0>)
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f7f6 fdbb 	bl	8000648 <__aeabi_dmul>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	4629      	mov	r1, r5
 8009ada:	f7f6 fbff 	bl	80002dc <__adddf3>
 8009ade:	4604      	mov	r4, r0
 8009ae0:	460d      	mov	r5, r1
 8009ae2:	f7f7 f861 	bl	8000ba8 <__aeabi_d2iz>
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	4607      	mov	r7, r0
 8009aea:	2300      	movs	r3, #0
 8009aec:	4620      	mov	r0, r4
 8009aee:	4629      	mov	r1, r5
 8009af0:	f7f7 f81c 	bl	8000b2c <__aeabi_dcmplt>
 8009af4:	b140      	cbz	r0, 8009b08 <_dtoa_r+0x168>
 8009af6:	4638      	mov	r0, r7
 8009af8:	f7f6 fd3c 	bl	8000574 <__aeabi_i2d>
 8009afc:	4622      	mov	r2, r4
 8009afe:	462b      	mov	r3, r5
 8009b00:	f7f7 f80a 	bl	8000b18 <__aeabi_dcmpeq>
 8009b04:	b900      	cbnz	r0, 8009b08 <_dtoa_r+0x168>
 8009b06:	3f01      	subs	r7, #1
 8009b08:	2f16      	cmp	r7, #22
 8009b0a:	d851      	bhi.n	8009bb0 <_dtoa_r+0x210>
 8009b0c:	4b5b      	ldr	r3, [pc, #364]	@ (8009c7c <_dtoa_r+0x2dc>)
 8009b0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b1a:	f7f7 f807 	bl	8000b2c <__aeabi_dcmplt>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	d048      	beq.n	8009bb4 <_dtoa_r+0x214>
 8009b22:	3f01      	subs	r7, #1
 8009b24:	2300      	movs	r3, #0
 8009b26:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b2a:	1b9b      	subs	r3, r3, r6
 8009b2c:	1e5a      	subs	r2, r3, #1
 8009b2e:	bf44      	itt	mi
 8009b30:	f1c3 0801 	rsbmi	r8, r3, #1
 8009b34:	2300      	movmi	r3, #0
 8009b36:	9208      	str	r2, [sp, #32]
 8009b38:	bf54      	ite	pl
 8009b3a:	f04f 0800 	movpl.w	r8, #0
 8009b3e:	9308      	strmi	r3, [sp, #32]
 8009b40:	2f00      	cmp	r7, #0
 8009b42:	db39      	blt.n	8009bb8 <_dtoa_r+0x218>
 8009b44:	9b08      	ldr	r3, [sp, #32]
 8009b46:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009b48:	443b      	add	r3, r7
 8009b4a:	9308      	str	r3, [sp, #32]
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b52:	2b09      	cmp	r3, #9
 8009b54:	d864      	bhi.n	8009c20 <_dtoa_r+0x280>
 8009b56:	2b05      	cmp	r3, #5
 8009b58:	bfc4      	itt	gt
 8009b5a:	3b04      	subgt	r3, #4
 8009b5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b60:	f1a3 0302 	sub.w	r3, r3, #2
 8009b64:	bfcc      	ite	gt
 8009b66:	2400      	movgt	r4, #0
 8009b68:	2401      	movle	r4, #1
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d863      	bhi.n	8009c36 <_dtoa_r+0x296>
 8009b6e:	e8df f003 	tbb	[pc, r3]
 8009b72:	372a      	.short	0x372a
 8009b74:	5535      	.short	0x5535
 8009b76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009b7a:	441e      	add	r6, r3
 8009b7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009b80:	2b20      	cmp	r3, #32
 8009b82:	bfc1      	itttt	gt
 8009b84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009b88:	409f      	lslgt	r7, r3
 8009b8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009b8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009b92:	bfd6      	itet	le
 8009b94:	f1c3 0320 	rsble	r3, r3, #32
 8009b98:	ea47 0003 	orrgt.w	r0, r7, r3
 8009b9c:	fa04 f003 	lslle.w	r0, r4, r3
 8009ba0:	f7f6 fcd8 	bl	8000554 <__aeabi_ui2d>
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009baa:	3e01      	subs	r6, #1
 8009bac:	9214      	str	r2, [sp, #80]	@ 0x50
 8009bae:	e777      	b.n	8009aa0 <_dtoa_r+0x100>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e7b8      	b.n	8009b26 <_dtoa_r+0x186>
 8009bb4:	9012      	str	r0, [sp, #72]	@ 0x48
 8009bb6:	e7b7      	b.n	8009b28 <_dtoa_r+0x188>
 8009bb8:	427b      	negs	r3, r7
 8009bba:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	eba8 0807 	sub.w	r8, r8, r7
 8009bc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bc4:	e7c4      	b.n	8009b50 <_dtoa_r+0x1b0>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	dc35      	bgt.n	8009c3c <_dtoa_r+0x29c>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	9307      	str	r3, [sp, #28]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bda:	e00b      	b.n	8009bf4 <_dtoa_r+0x254>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e7f3      	b.n	8009bc8 <_dtoa_r+0x228>
 8009be0:	2300      	movs	r3, #0
 8009be2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009be4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009be6:	18fb      	adds	r3, r7, r3
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	3301      	adds	r3, #1
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	9307      	str	r3, [sp, #28]
 8009bf0:	bfb8      	it	lt
 8009bf2:	2301      	movlt	r3, #1
 8009bf4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	2204      	movs	r2, #4
 8009bfc:	f102 0514 	add.w	r5, r2, #20
 8009c00:	429d      	cmp	r5, r3
 8009c02:	d91f      	bls.n	8009c44 <_dtoa_r+0x2a4>
 8009c04:	6041      	str	r1, [r0, #4]
 8009c06:	4658      	mov	r0, fp
 8009c08:	f000 ff92 	bl	800ab30 <_Balloc>
 8009c0c:	4682      	mov	sl, r0
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d13c      	bne.n	8009c8c <_dtoa_r+0x2ec>
 8009c12:	4b1b      	ldr	r3, [pc, #108]	@ (8009c80 <_dtoa_r+0x2e0>)
 8009c14:	4602      	mov	r2, r0
 8009c16:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c1a:	e6d8      	b.n	80099ce <_dtoa_r+0x2e>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e7e0      	b.n	8009be2 <_dtoa_r+0x242>
 8009c20:	2401      	movs	r4, #1
 8009c22:	2300      	movs	r3, #0
 8009c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009c28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	9307      	str	r3, [sp, #28]
 8009c30:	2200      	movs	r2, #0
 8009c32:	2312      	movs	r3, #18
 8009c34:	e7d0      	b.n	8009bd8 <_dtoa_r+0x238>
 8009c36:	2301      	movs	r3, #1
 8009c38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c3a:	e7f5      	b.n	8009c28 <_dtoa_r+0x288>
 8009c3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	9307      	str	r3, [sp, #28]
 8009c42:	e7d7      	b.n	8009bf4 <_dtoa_r+0x254>
 8009c44:	3101      	adds	r1, #1
 8009c46:	0052      	lsls	r2, r2, #1
 8009c48:	e7d8      	b.n	8009bfc <_dtoa_r+0x25c>
 8009c4a:	bf00      	nop
 8009c4c:	f3af 8000 	nop.w
 8009c50:	636f4361 	.word	0x636f4361
 8009c54:	3fd287a7 	.word	0x3fd287a7
 8009c58:	8b60c8b3 	.word	0x8b60c8b3
 8009c5c:	3fc68a28 	.word	0x3fc68a28
 8009c60:	509f79fb 	.word	0x509f79fb
 8009c64:	3fd34413 	.word	0x3fd34413
 8009c68:	0800be81 	.word	0x0800be81
 8009c6c:	0800be98 	.word	0x0800be98
 8009c70:	7ff00000 	.word	0x7ff00000
 8009c74:	0800be51 	.word	0x0800be51
 8009c78:	3ff80000 	.word	0x3ff80000
 8009c7c:	0800bfa0 	.word	0x0800bfa0
 8009c80:	0800bef0 	.word	0x0800bef0
 8009c84:	0800be7d 	.word	0x0800be7d
 8009c88:	0800be50 	.word	0x0800be50
 8009c8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c90:	6018      	str	r0, [r3, #0]
 8009c92:	9b07      	ldr	r3, [sp, #28]
 8009c94:	2b0e      	cmp	r3, #14
 8009c96:	f200 80a4 	bhi.w	8009de2 <_dtoa_r+0x442>
 8009c9a:	2c00      	cmp	r4, #0
 8009c9c:	f000 80a1 	beq.w	8009de2 <_dtoa_r+0x442>
 8009ca0:	2f00      	cmp	r7, #0
 8009ca2:	dd33      	ble.n	8009d0c <_dtoa_r+0x36c>
 8009ca4:	4bad      	ldr	r3, [pc, #692]	@ (8009f5c <_dtoa_r+0x5bc>)
 8009ca6:	f007 020f 	and.w	r2, r7, #15
 8009caa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cae:	ed93 7b00 	vldr	d7, [r3]
 8009cb2:	05f8      	lsls	r0, r7, #23
 8009cb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009cb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009cbc:	d516      	bpl.n	8009cec <_dtoa_r+0x34c>
 8009cbe:	4ba8      	ldr	r3, [pc, #672]	@ (8009f60 <_dtoa_r+0x5c0>)
 8009cc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cc8:	f7f6 fde8 	bl	800089c <__aeabi_ddiv>
 8009ccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cd0:	f004 040f 	and.w	r4, r4, #15
 8009cd4:	2603      	movs	r6, #3
 8009cd6:	4da2      	ldr	r5, [pc, #648]	@ (8009f60 <_dtoa_r+0x5c0>)
 8009cd8:	b954      	cbnz	r4, 8009cf0 <_dtoa_r+0x350>
 8009cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ce2:	f7f6 fddb 	bl	800089c <__aeabi_ddiv>
 8009ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cea:	e028      	b.n	8009d3e <_dtoa_r+0x39e>
 8009cec:	2602      	movs	r6, #2
 8009cee:	e7f2      	b.n	8009cd6 <_dtoa_r+0x336>
 8009cf0:	07e1      	lsls	r1, r4, #31
 8009cf2:	d508      	bpl.n	8009d06 <_dtoa_r+0x366>
 8009cf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009cfc:	f7f6 fca4 	bl	8000648 <__aeabi_dmul>
 8009d00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d04:	3601      	adds	r6, #1
 8009d06:	1064      	asrs	r4, r4, #1
 8009d08:	3508      	adds	r5, #8
 8009d0a:	e7e5      	b.n	8009cd8 <_dtoa_r+0x338>
 8009d0c:	f000 80d2 	beq.w	8009eb4 <_dtoa_r+0x514>
 8009d10:	427c      	negs	r4, r7
 8009d12:	4b92      	ldr	r3, [pc, #584]	@ (8009f5c <_dtoa_r+0x5bc>)
 8009d14:	4d92      	ldr	r5, [pc, #584]	@ (8009f60 <_dtoa_r+0x5c0>)
 8009d16:	f004 020f 	and.w	r2, r4, #15
 8009d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d26:	f7f6 fc8f 	bl	8000648 <__aeabi_dmul>
 8009d2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d2e:	1124      	asrs	r4, r4, #4
 8009d30:	2300      	movs	r3, #0
 8009d32:	2602      	movs	r6, #2
 8009d34:	2c00      	cmp	r4, #0
 8009d36:	f040 80b2 	bne.w	8009e9e <_dtoa_r+0x4fe>
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1d3      	bne.n	8009ce6 <_dtoa_r+0x346>
 8009d3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 80b7 	beq.w	8009eb8 <_dtoa_r+0x518>
 8009d4a:	4b86      	ldr	r3, [pc, #536]	@ (8009f64 <_dtoa_r+0x5c4>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	4620      	mov	r0, r4
 8009d50:	4629      	mov	r1, r5
 8009d52:	f7f6 feeb 	bl	8000b2c <__aeabi_dcmplt>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	f000 80ae 	beq.w	8009eb8 <_dtoa_r+0x518>
 8009d5c:	9b07      	ldr	r3, [sp, #28]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 80aa 	beq.w	8009eb8 <_dtoa_r+0x518>
 8009d64:	9b00      	ldr	r3, [sp, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	dd37      	ble.n	8009dda <_dtoa_r+0x43a>
 8009d6a:	1e7b      	subs	r3, r7, #1
 8009d6c:	9304      	str	r3, [sp, #16]
 8009d6e:	4620      	mov	r0, r4
 8009d70:	4b7d      	ldr	r3, [pc, #500]	@ (8009f68 <_dtoa_r+0x5c8>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	4629      	mov	r1, r5
 8009d76:	f7f6 fc67 	bl	8000648 <__aeabi_dmul>
 8009d7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d7e:	9c00      	ldr	r4, [sp, #0]
 8009d80:	3601      	adds	r6, #1
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7f6 fbf6 	bl	8000574 <__aeabi_i2d>
 8009d88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d8c:	f7f6 fc5c 	bl	8000648 <__aeabi_dmul>
 8009d90:	4b76      	ldr	r3, [pc, #472]	@ (8009f6c <_dtoa_r+0x5cc>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	f7f6 faa2 	bl	80002dc <__adddf3>
 8009d98:	4605      	mov	r5, r0
 8009d9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009d9e:	2c00      	cmp	r4, #0
 8009da0:	f040 808d 	bne.w	8009ebe <_dtoa_r+0x51e>
 8009da4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009da8:	4b71      	ldr	r3, [pc, #452]	@ (8009f70 <_dtoa_r+0x5d0>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	f7f6 fa94 	bl	80002d8 <__aeabi_dsub>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009db8:	462a      	mov	r2, r5
 8009dba:	4633      	mov	r3, r6
 8009dbc:	f7f6 fed4 	bl	8000b68 <__aeabi_dcmpgt>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	f040 828b 	bne.w	800a2dc <_dtoa_r+0x93c>
 8009dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dca:	462a      	mov	r2, r5
 8009dcc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009dd0:	f7f6 feac 	bl	8000b2c <__aeabi_dcmplt>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	f040 8128 	bne.w	800a02a <_dtoa_r+0x68a>
 8009dda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009dde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009de2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f2c0 815a 	blt.w	800a09e <_dtoa_r+0x6fe>
 8009dea:	2f0e      	cmp	r7, #14
 8009dec:	f300 8157 	bgt.w	800a09e <_dtoa_r+0x6fe>
 8009df0:	4b5a      	ldr	r3, [pc, #360]	@ (8009f5c <_dtoa_r+0x5bc>)
 8009df2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009df6:	ed93 7b00 	vldr	d7, [r3]
 8009dfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	ed8d 7b00 	vstr	d7, [sp]
 8009e02:	da03      	bge.n	8009e0c <_dtoa_r+0x46c>
 8009e04:	9b07      	ldr	r3, [sp, #28]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f340 8101 	ble.w	800a00e <_dtoa_r+0x66e>
 8009e0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e10:	4656      	mov	r6, sl
 8009e12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e16:	4620      	mov	r0, r4
 8009e18:	4629      	mov	r1, r5
 8009e1a:	f7f6 fd3f 	bl	800089c <__aeabi_ddiv>
 8009e1e:	f7f6 fec3 	bl	8000ba8 <__aeabi_d2iz>
 8009e22:	4680      	mov	r8, r0
 8009e24:	f7f6 fba6 	bl	8000574 <__aeabi_i2d>
 8009e28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e2c:	f7f6 fc0c 	bl	8000648 <__aeabi_dmul>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4620      	mov	r0, r4
 8009e36:	4629      	mov	r1, r5
 8009e38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009e3c:	f7f6 fa4c 	bl	80002d8 <__aeabi_dsub>
 8009e40:	f806 4b01 	strb.w	r4, [r6], #1
 8009e44:	9d07      	ldr	r5, [sp, #28]
 8009e46:	eba6 040a 	sub.w	r4, r6, sl
 8009e4a:	42a5      	cmp	r5, r4
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	f040 8117 	bne.w	800a082 <_dtoa_r+0x6e2>
 8009e54:	f7f6 fa42 	bl	80002dc <__adddf3>
 8009e58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	460d      	mov	r5, r1
 8009e60:	f7f6 fe82 	bl	8000b68 <__aeabi_dcmpgt>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	f040 80f9 	bne.w	800a05c <_dtoa_r+0x6bc>
 8009e6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e6e:	4620      	mov	r0, r4
 8009e70:	4629      	mov	r1, r5
 8009e72:	f7f6 fe51 	bl	8000b18 <__aeabi_dcmpeq>
 8009e76:	b118      	cbz	r0, 8009e80 <_dtoa_r+0x4e0>
 8009e78:	f018 0f01 	tst.w	r8, #1
 8009e7c:	f040 80ee 	bne.w	800a05c <_dtoa_r+0x6bc>
 8009e80:	4649      	mov	r1, r9
 8009e82:	4658      	mov	r0, fp
 8009e84:	f000 fe94 	bl	800abb0 <_Bfree>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	7033      	strb	r3, [r6, #0]
 8009e8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e8e:	3701      	adds	r7, #1
 8009e90:	601f      	str	r7, [r3, #0]
 8009e92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f000 831d 	beq.w	800a4d4 <_dtoa_r+0xb34>
 8009e9a:	601e      	str	r6, [r3, #0]
 8009e9c:	e31a      	b.n	800a4d4 <_dtoa_r+0xb34>
 8009e9e:	07e2      	lsls	r2, r4, #31
 8009ea0:	d505      	bpl.n	8009eae <_dtoa_r+0x50e>
 8009ea2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ea6:	f7f6 fbcf 	bl	8000648 <__aeabi_dmul>
 8009eaa:	3601      	adds	r6, #1
 8009eac:	2301      	movs	r3, #1
 8009eae:	1064      	asrs	r4, r4, #1
 8009eb0:	3508      	adds	r5, #8
 8009eb2:	e73f      	b.n	8009d34 <_dtoa_r+0x394>
 8009eb4:	2602      	movs	r6, #2
 8009eb6:	e742      	b.n	8009d3e <_dtoa_r+0x39e>
 8009eb8:	9c07      	ldr	r4, [sp, #28]
 8009eba:	9704      	str	r7, [sp, #16]
 8009ebc:	e761      	b.n	8009d82 <_dtoa_r+0x3e2>
 8009ebe:	4b27      	ldr	r3, [pc, #156]	@ (8009f5c <_dtoa_r+0x5bc>)
 8009ec0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ec2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ec6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009eca:	4454      	add	r4, sl
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	d053      	beq.n	8009f78 <_dtoa_r+0x5d8>
 8009ed0:	4928      	ldr	r1, [pc, #160]	@ (8009f74 <_dtoa_r+0x5d4>)
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	f7f6 fce2 	bl	800089c <__aeabi_ddiv>
 8009ed8:	4633      	mov	r3, r6
 8009eda:	462a      	mov	r2, r5
 8009edc:	f7f6 f9fc 	bl	80002d8 <__aeabi_dsub>
 8009ee0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ee4:	4656      	mov	r6, sl
 8009ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eea:	f7f6 fe5d 	bl	8000ba8 <__aeabi_d2iz>
 8009eee:	4605      	mov	r5, r0
 8009ef0:	f7f6 fb40 	bl	8000574 <__aeabi_i2d>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009efc:	f7f6 f9ec 	bl	80002d8 <__aeabi_dsub>
 8009f00:	3530      	adds	r5, #48	@ 0x30
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f0a:	f806 5b01 	strb.w	r5, [r6], #1
 8009f0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f12:	f7f6 fe0b 	bl	8000b2c <__aeabi_dcmplt>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d171      	bne.n	8009ffe <_dtoa_r+0x65e>
 8009f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f1e:	4911      	ldr	r1, [pc, #68]	@ (8009f64 <_dtoa_r+0x5c4>)
 8009f20:	2000      	movs	r0, #0
 8009f22:	f7f6 f9d9 	bl	80002d8 <__aeabi_dsub>
 8009f26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f2a:	f7f6 fdff 	bl	8000b2c <__aeabi_dcmplt>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	f040 8095 	bne.w	800a05e <_dtoa_r+0x6be>
 8009f34:	42a6      	cmp	r6, r4
 8009f36:	f43f af50 	beq.w	8009dda <_dtoa_r+0x43a>
 8009f3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8009f68 <_dtoa_r+0x5c8>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	f7f6 fb81 	bl	8000648 <__aeabi_dmul>
 8009f46:	4b08      	ldr	r3, [pc, #32]	@ (8009f68 <_dtoa_r+0x5c8>)
 8009f48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f52:	f7f6 fb79 	bl	8000648 <__aeabi_dmul>
 8009f56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f5a:	e7c4      	b.n	8009ee6 <_dtoa_r+0x546>
 8009f5c:	0800bfa0 	.word	0x0800bfa0
 8009f60:	0800bf78 	.word	0x0800bf78
 8009f64:	3ff00000 	.word	0x3ff00000
 8009f68:	40240000 	.word	0x40240000
 8009f6c:	401c0000 	.word	0x401c0000
 8009f70:	40140000 	.word	0x40140000
 8009f74:	3fe00000 	.word	0x3fe00000
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f7f6 fb64 	bl	8000648 <__aeabi_dmul>
 8009f80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f84:	9415      	str	r4, [sp, #84]	@ 0x54
 8009f86:	4656      	mov	r6, sl
 8009f88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f8c:	f7f6 fe0c 	bl	8000ba8 <__aeabi_d2iz>
 8009f90:	4605      	mov	r5, r0
 8009f92:	f7f6 faef 	bl	8000574 <__aeabi_i2d>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f9e:	f7f6 f99b 	bl	80002d8 <__aeabi_dsub>
 8009fa2:	3530      	adds	r5, #48	@ 0x30
 8009fa4:	f806 5b01 	strb.w	r5, [r6], #1
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	42a6      	cmp	r6, r4
 8009fae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fb2:	f04f 0200 	mov.w	r2, #0
 8009fb6:	d124      	bne.n	800a002 <_dtoa_r+0x662>
 8009fb8:	4bac      	ldr	r3, [pc, #688]	@ (800a26c <_dtoa_r+0x8cc>)
 8009fba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009fbe:	f7f6 f98d 	bl	80002dc <__adddf3>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fca:	f7f6 fdcd 	bl	8000b68 <__aeabi_dcmpgt>
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d145      	bne.n	800a05e <_dtoa_r+0x6be>
 8009fd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009fd6:	49a5      	ldr	r1, [pc, #660]	@ (800a26c <_dtoa_r+0x8cc>)
 8009fd8:	2000      	movs	r0, #0
 8009fda:	f7f6 f97d 	bl	80002d8 <__aeabi_dsub>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fe6:	f7f6 fda1 	bl	8000b2c <__aeabi_dcmplt>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	f43f aef5 	beq.w	8009dda <_dtoa_r+0x43a>
 8009ff0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009ff2:	1e73      	subs	r3, r6, #1
 8009ff4:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ff6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ffa:	2b30      	cmp	r3, #48	@ 0x30
 8009ffc:	d0f8      	beq.n	8009ff0 <_dtoa_r+0x650>
 8009ffe:	9f04      	ldr	r7, [sp, #16]
 800a000:	e73e      	b.n	8009e80 <_dtoa_r+0x4e0>
 800a002:	4b9b      	ldr	r3, [pc, #620]	@ (800a270 <_dtoa_r+0x8d0>)
 800a004:	f7f6 fb20 	bl	8000648 <__aeabi_dmul>
 800a008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a00c:	e7bc      	b.n	8009f88 <_dtoa_r+0x5e8>
 800a00e:	d10c      	bne.n	800a02a <_dtoa_r+0x68a>
 800a010:	4b98      	ldr	r3, [pc, #608]	@ (800a274 <_dtoa_r+0x8d4>)
 800a012:	2200      	movs	r2, #0
 800a014:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a018:	f7f6 fb16 	bl	8000648 <__aeabi_dmul>
 800a01c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a020:	f7f6 fd98 	bl	8000b54 <__aeabi_dcmpge>
 800a024:	2800      	cmp	r0, #0
 800a026:	f000 8157 	beq.w	800a2d8 <_dtoa_r+0x938>
 800a02a:	2400      	movs	r4, #0
 800a02c:	4625      	mov	r5, r4
 800a02e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a030:	43db      	mvns	r3, r3
 800a032:	9304      	str	r3, [sp, #16]
 800a034:	4656      	mov	r6, sl
 800a036:	2700      	movs	r7, #0
 800a038:	4621      	mov	r1, r4
 800a03a:	4658      	mov	r0, fp
 800a03c:	f000 fdb8 	bl	800abb0 <_Bfree>
 800a040:	2d00      	cmp	r5, #0
 800a042:	d0dc      	beq.n	8009ffe <_dtoa_r+0x65e>
 800a044:	b12f      	cbz	r7, 800a052 <_dtoa_r+0x6b2>
 800a046:	42af      	cmp	r7, r5
 800a048:	d003      	beq.n	800a052 <_dtoa_r+0x6b2>
 800a04a:	4639      	mov	r1, r7
 800a04c:	4658      	mov	r0, fp
 800a04e:	f000 fdaf 	bl	800abb0 <_Bfree>
 800a052:	4629      	mov	r1, r5
 800a054:	4658      	mov	r0, fp
 800a056:	f000 fdab 	bl	800abb0 <_Bfree>
 800a05a:	e7d0      	b.n	8009ffe <_dtoa_r+0x65e>
 800a05c:	9704      	str	r7, [sp, #16]
 800a05e:	4633      	mov	r3, r6
 800a060:	461e      	mov	r6, r3
 800a062:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a066:	2a39      	cmp	r2, #57	@ 0x39
 800a068:	d107      	bne.n	800a07a <_dtoa_r+0x6da>
 800a06a:	459a      	cmp	sl, r3
 800a06c:	d1f8      	bne.n	800a060 <_dtoa_r+0x6c0>
 800a06e:	9a04      	ldr	r2, [sp, #16]
 800a070:	3201      	adds	r2, #1
 800a072:	9204      	str	r2, [sp, #16]
 800a074:	2230      	movs	r2, #48	@ 0x30
 800a076:	f88a 2000 	strb.w	r2, [sl]
 800a07a:	781a      	ldrb	r2, [r3, #0]
 800a07c:	3201      	adds	r2, #1
 800a07e:	701a      	strb	r2, [r3, #0]
 800a080:	e7bd      	b.n	8009ffe <_dtoa_r+0x65e>
 800a082:	4b7b      	ldr	r3, [pc, #492]	@ (800a270 <_dtoa_r+0x8d0>)
 800a084:	2200      	movs	r2, #0
 800a086:	f7f6 fadf 	bl	8000648 <__aeabi_dmul>
 800a08a:	2200      	movs	r2, #0
 800a08c:	2300      	movs	r3, #0
 800a08e:	4604      	mov	r4, r0
 800a090:	460d      	mov	r5, r1
 800a092:	f7f6 fd41 	bl	8000b18 <__aeabi_dcmpeq>
 800a096:	2800      	cmp	r0, #0
 800a098:	f43f aebb 	beq.w	8009e12 <_dtoa_r+0x472>
 800a09c:	e6f0      	b.n	8009e80 <_dtoa_r+0x4e0>
 800a09e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a0a0:	2a00      	cmp	r2, #0
 800a0a2:	f000 80db 	beq.w	800a25c <_dtoa_r+0x8bc>
 800a0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0a8:	2a01      	cmp	r2, #1
 800a0aa:	f300 80bf 	bgt.w	800a22c <_dtoa_r+0x88c>
 800a0ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a0b0:	2a00      	cmp	r2, #0
 800a0b2:	f000 80b7 	beq.w	800a224 <_dtoa_r+0x884>
 800a0b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a0ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a0bc:	4646      	mov	r6, r8
 800a0be:	9a08      	ldr	r2, [sp, #32]
 800a0c0:	2101      	movs	r1, #1
 800a0c2:	441a      	add	r2, r3
 800a0c4:	4658      	mov	r0, fp
 800a0c6:	4498      	add	r8, r3
 800a0c8:	9208      	str	r2, [sp, #32]
 800a0ca:	f000 fe25 	bl	800ad18 <__i2b>
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	b15e      	cbz	r6, 800a0ea <_dtoa_r+0x74a>
 800a0d2:	9b08      	ldr	r3, [sp, #32]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	dd08      	ble.n	800a0ea <_dtoa_r+0x74a>
 800a0d8:	42b3      	cmp	r3, r6
 800a0da:	9a08      	ldr	r2, [sp, #32]
 800a0dc:	bfa8      	it	ge
 800a0de:	4633      	movge	r3, r6
 800a0e0:	eba8 0803 	sub.w	r8, r8, r3
 800a0e4:	1af6      	subs	r6, r6, r3
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	9308      	str	r3, [sp, #32]
 800a0ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0ec:	b1f3      	cbz	r3, 800a12c <_dtoa_r+0x78c>
 800a0ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f000 80b7 	beq.w	800a264 <_dtoa_r+0x8c4>
 800a0f6:	b18c      	cbz	r4, 800a11c <_dtoa_r+0x77c>
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	4622      	mov	r2, r4
 800a0fc:	4658      	mov	r0, fp
 800a0fe:	f000 fecb 	bl	800ae98 <__pow5mult>
 800a102:	464a      	mov	r2, r9
 800a104:	4601      	mov	r1, r0
 800a106:	4605      	mov	r5, r0
 800a108:	4658      	mov	r0, fp
 800a10a:	f000 fe1b 	bl	800ad44 <__multiply>
 800a10e:	4649      	mov	r1, r9
 800a110:	9004      	str	r0, [sp, #16]
 800a112:	4658      	mov	r0, fp
 800a114:	f000 fd4c 	bl	800abb0 <_Bfree>
 800a118:	9b04      	ldr	r3, [sp, #16]
 800a11a:	4699      	mov	r9, r3
 800a11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a11e:	1b1a      	subs	r2, r3, r4
 800a120:	d004      	beq.n	800a12c <_dtoa_r+0x78c>
 800a122:	4649      	mov	r1, r9
 800a124:	4658      	mov	r0, fp
 800a126:	f000 feb7 	bl	800ae98 <__pow5mult>
 800a12a:	4681      	mov	r9, r0
 800a12c:	2101      	movs	r1, #1
 800a12e:	4658      	mov	r0, fp
 800a130:	f000 fdf2 	bl	800ad18 <__i2b>
 800a134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a136:	4604      	mov	r4, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 81cf 	beq.w	800a4dc <_dtoa_r+0xb3c>
 800a13e:	461a      	mov	r2, r3
 800a140:	4601      	mov	r1, r0
 800a142:	4658      	mov	r0, fp
 800a144:	f000 fea8 	bl	800ae98 <__pow5mult>
 800a148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	4604      	mov	r4, r0
 800a14e:	f300 8095 	bgt.w	800a27c <_dtoa_r+0x8dc>
 800a152:	9b02      	ldr	r3, [sp, #8]
 800a154:	2b00      	cmp	r3, #0
 800a156:	f040 8087 	bne.w	800a268 <_dtoa_r+0x8c8>
 800a15a:	9b03      	ldr	r3, [sp, #12]
 800a15c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a160:	2b00      	cmp	r3, #0
 800a162:	f040 8089 	bne.w	800a278 <_dtoa_r+0x8d8>
 800a166:	9b03      	ldr	r3, [sp, #12]
 800a168:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a16c:	0d1b      	lsrs	r3, r3, #20
 800a16e:	051b      	lsls	r3, r3, #20
 800a170:	b12b      	cbz	r3, 800a17e <_dtoa_r+0x7de>
 800a172:	9b08      	ldr	r3, [sp, #32]
 800a174:	3301      	adds	r3, #1
 800a176:	9308      	str	r3, [sp, #32]
 800a178:	f108 0801 	add.w	r8, r8, #1
 800a17c:	2301      	movs	r3, #1
 800a17e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a182:	2b00      	cmp	r3, #0
 800a184:	f000 81b0 	beq.w	800a4e8 <_dtoa_r+0xb48>
 800a188:	6923      	ldr	r3, [r4, #16]
 800a18a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a18e:	6918      	ldr	r0, [r3, #16]
 800a190:	f000 fd76 	bl	800ac80 <__hi0bits>
 800a194:	f1c0 0020 	rsb	r0, r0, #32
 800a198:	9b08      	ldr	r3, [sp, #32]
 800a19a:	4418      	add	r0, r3
 800a19c:	f010 001f 	ands.w	r0, r0, #31
 800a1a0:	d077      	beq.n	800a292 <_dtoa_r+0x8f2>
 800a1a2:	f1c0 0320 	rsb	r3, r0, #32
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	dd6b      	ble.n	800a282 <_dtoa_r+0x8e2>
 800a1aa:	9b08      	ldr	r3, [sp, #32]
 800a1ac:	f1c0 001c 	rsb	r0, r0, #28
 800a1b0:	4403      	add	r3, r0
 800a1b2:	4480      	add	r8, r0
 800a1b4:	4406      	add	r6, r0
 800a1b6:	9308      	str	r3, [sp, #32]
 800a1b8:	f1b8 0f00 	cmp.w	r8, #0
 800a1bc:	dd05      	ble.n	800a1ca <_dtoa_r+0x82a>
 800a1be:	4649      	mov	r1, r9
 800a1c0:	4642      	mov	r2, r8
 800a1c2:	4658      	mov	r0, fp
 800a1c4:	f000 fec2 	bl	800af4c <__lshift>
 800a1c8:	4681      	mov	r9, r0
 800a1ca:	9b08      	ldr	r3, [sp, #32]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	dd05      	ble.n	800a1dc <_dtoa_r+0x83c>
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	4658      	mov	r0, fp
 800a1d6:	f000 feb9 	bl	800af4c <__lshift>
 800a1da:	4604      	mov	r4, r0
 800a1dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d059      	beq.n	800a296 <_dtoa_r+0x8f6>
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	4648      	mov	r0, r9
 800a1e6:	f000 ff1d 	bl	800b024 <__mcmp>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	da53      	bge.n	800a296 <_dtoa_r+0x8f6>
 800a1ee:	1e7b      	subs	r3, r7, #1
 800a1f0:	9304      	str	r3, [sp, #16]
 800a1f2:	4649      	mov	r1, r9
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	220a      	movs	r2, #10
 800a1f8:	4658      	mov	r0, fp
 800a1fa:	f000 fcfb 	bl	800abf4 <__multadd>
 800a1fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a200:	4681      	mov	r9, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 8172 	beq.w	800a4ec <_dtoa_r+0xb4c>
 800a208:	2300      	movs	r3, #0
 800a20a:	4629      	mov	r1, r5
 800a20c:	220a      	movs	r2, #10
 800a20e:	4658      	mov	r0, fp
 800a210:	f000 fcf0 	bl	800abf4 <__multadd>
 800a214:	9b00      	ldr	r3, [sp, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	4605      	mov	r5, r0
 800a21a:	dc67      	bgt.n	800a2ec <_dtoa_r+0x94c>
 800a21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21e:	2b02      	cmp	r3, #2
 800a220:	dc41      	bgt.n	800a2a6 <_dtoa_r+0x906>
 800a222:	e063      	b.n	800a2ec <_dtoa_r+0x94c>
 800a224:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a226:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a22a:	e746      	b.n	800a0ba <_dtoa_r+0x71a>
 800a22c:	9b07      	ldr	r3, [sp, #28]
 800a22e:	1e5c      	subs	r4, r3, #1
 800a230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a232:	42a3      	cmp	r3, r4
 800a234:	bfbf      	itttt	lt
 800a236:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a238:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a23a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a23c:	1ae3      	sublt	r3, r4, r3
 800a23e:	bfb4      	ite	lt
 800a240:	18d2      	addlt	r2, r2, r3
 800a242:	1b1c      	subge	r4, r3, r4
 800a244:	9b07      	ldr	r3, [sp, #28]
 800a246:	bfbc      	itt	lt
 800a248:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a24a:	2400      	movlt	r4, #0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	bfb5      	itete	lt
 800a250:	eba8 0603 	sublt.w	r6, r8, r3
 800a254:	9b07      	ldrge	r3, [sp, #28]
 800a256:	2300      	movlt	r3, #0
 800a258:	4646      	movge	r6, r8
 800a25a:	e730      	b.n	800a0be <_dtoa_r+0x71e>
 800a25c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a25e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a260:	4646      	mov	r6, r8
 800a262:	e735      	b.n	800a0d0 <_dtoa_r+0x730>
 800a264:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a266:	e75c      	b.n	800a122 <_dtoa_r+0x782>
 800a268:	2300      	movs	r3, #0
 800a26a:	e788      	b.n	800a17e <_dtoa_r+0x7de>
 800a26c:	3fe00000 	.word	0x3fe00000
 800a270:	40240000 	.word	0x40240000
 800a274:	40140000 	.word	0x40140000
 800a278:	9b02      	ldr	r3, [sp, #8]
 800a27a:	e780      	b.n	800a17e <_dtoa_r+0x7de>
 800a27c:	2300      	movs	r3, #0
 800a27e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a280:	e782      	b.n	800a188 <_dtoa_r+0x7e8>
 800a282:	d099      	beq.n	800a1b8 <_dtoa_r+0x818>
 800a284:	9a08      	ldr	r2, [sp, #32]
 800a286:	331c      	adds	r3, #28
 800a288:	441a      	add	r2, r3
 800a28a:	4498      	add	r8, r3
 800a28c:	441e      	add	r6, r3
 800a28e:	9208      	str	r2, [sp, #32]
 800a290:	e792      	b.n	800a1b8 <_dtoa_r+0x818>
 800a292:	4603      	mov	r3, r0
 800a294:	e7f6      	b.n	800a284 <_dtoa_r+0x8e4>
 800a296:	9b07      	ldr	r3, [sp, #28]
 800a298:	9704      	str	r7, [sp, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	dc20      	bgt.n	800a2e0 <_dtoa_r+0x940>
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	dd1e      	ble.n	800a2e4 <_dtoa_r+0x944>
 800a2a6:	9b00      	ldr	r3, [sp, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f47f aec0 	bne.w	800a02e <_dtoa_r+0x68e>
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	2205      	movs	r2, #5
 800a2b2:	4658      	mov	r0, fp
 800a2b4:	f000 fc9e 	bl	800abf4 <__multadd>
 800a2b8:	4601      	mov	r1, r0
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	4648      	mov	r0, r9
 800a2be:	f000 feb1 	bl	800b024 <__mcmp>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	f77f aeb3 	ble.w	800a02e <_dtoa_r+0x68e>
 800a2c8:	4656      	mov	r6, sl
 800a2ca:	2331      	movs	r3, #49	@ 0x31
 800a2cc:	f806 3b01 	strb.w	r3, [r6], #1
 800a2d0:	9b04      	ldr	r3, [sp, #16]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	9304      	str	r3, [sp, #16]
 800a2d6:	e6ae      	b.n	800a036 <_dtoa_r+0x696>
 800a2d8:	9c07      	ldr	r4, [sp, #28]
 800a2da:	9704      	str	r7, [sp, #16]
 800a2dc:	4625      	mov	r5, r4
 800a2de:	e7f3      	b.n	800a2c8 <_dtoa_r+0x928>
 800a2e0:	9b07      	ldr	r3, [sp, #28]
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f000 8104 	beq.w	800a4f4 <_dtoa_r+0xb54>
 800a2ec:	2e00      	cmp	r6, #0
 800a2ee:	dd05      	ble.n	800a2fc <_dtoa_r+0x95c>
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	4632      	mov	r2, r6
 800a2f4:	4658      	mov	r0, fp
 800a2f6:	f000 fe29 	bl	800af4c <__lshift>
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d05a      	beq.n	800a3b8 <_dtoa_r+0xa18>
 800a302:	6869      	ldr	r1, [r5, #4]
 800a304:	4658      	mov	r0, fp
 800a306:	f000 fc13 	bl	800ab30 <_Balloc>
 800a30a:	4606      	mov	r6, r0
 800a30c:	b928      	cbnz	r0, 800a31a <_dtoa_r+0x97a>
 800a30e:	4b84      	ldr	r3, [pc, #528]	@ (800a520 <_dtoa_r+0xb80>)
 800a310:	4602      	mov	r2, r0
 800a312:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a316:	f7ff bb5a 	b.w	80099ce <_dtoa_r+0x2e>
 800a31a:	692a      	ldr	r2, [r5, #16]
 800a31c:	3202      	adds	r2, #2
 800a31e:	0092      	lsls	r2, r2, #2
 800a320:	f105 010c 	add.w	r1, r5, #12
 800a324:	300c      	adds	r0, #12
 800a326:	f7ff faa4 	bl	8009872 <memcpy>
 800a32a:	2201      	movs	r2, #1
 800a32c:	4631      	mov	r1, r6
 800a32e:	4658      	mov	r0, fp
 800a330:	f000 fe0c 	bl	800af4c <__lshift>
 800a334:	f10a 0301 	add.w	r3, sl, #1
 800a338:	9307      	str	r3, [sp, #28]
 800a33a:	9b00      	ldr	r3, [sp, #0]
 800a33c:	4453      	add	r3, sl
 800a33e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a340:	9b02      	ldr	r3, [sp, #8]
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	462f      	mov	r7, r5
 800a348:	930a      	str	r3, [sp, #40]	@ 0x28
 800a34a:	4605      	mov	r5, r0
 800a34c:	9b07      	ldr	r3, [sp, #28]
 800a34e:	4621      	mov	r1, r4
 800a350:	3b01      	subs	r3, #1
 800a352:	4648      	mov	r0, r9
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	f7ff fa9a 	bl	800988e <quorem>
 800a35a:	4639      	mov	r1, r7
 800a35c:	9002      	str	r0, [sp, #8]
 800a35e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a362:	4648      	mov	r0, r9
 800a364:	f000 fe5e 	bl	800b024 <__mcmp>
 800a368:	462a      	mov	r2, r5
 800a36a:	9008      	str	r0, [sp, #32]
 800a36c:	4621      	mov	r1, r4
 800a36e:	4658      	mov	r0, fp
 800a370:	f000 fe74 	bl	800b05c <__mdiff>
 800a374:	68c2      	ldr	r2, [r0, #12]
 800a376:	4606      	mov	r6, r0
 800a378:	bb02      	cbnz	r2, 800a3bc <_dtoa_r+0xa1c>
 800a37a:	4601      	mov	r1, r0
 800a37c:	4648      	mov	r0, r9
 800a37e:	f000 fe51 	bl	800b024 <__mcmp>
 800a382:	4602      	mov	r2, r0
 800a384:	4631      	mov	r1, r6
 800a386:	4658      	mov	r0, fp
 800a388:	920e      	str	r2, [sp, #56]	@ 0x38
 800a38a:	f000 fc11 	bl	800abb0 <_Bfree>
 800a38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a390:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a392:	9e07      	ldr	r6, [sp, #28]
 800a394:	ea43 0102 	orr.w	r1, r3, r2
 800a398:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a39a:	4319      	orrs	r1, r3
 800a39c:	d110      	bne.n	800a3c0 <_dtoa_r+0xa20>
 800a39e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3a2:	d029      	beq.n	800a3f8 <_dtoa_r+0xa58>
 800a3a4:	9b08      	ldr	r3, [sp, #32]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	dd02      	ble.n	800a3b0 <_dtoa_r+0xa10>
 800a3aa:	9b02      	ldr	r3, [sp, #8]
 800a3ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a3b0:	9b00      	ldr	r3, [sp, #0]
 800a3b2:	f883 8000 	strb.w	r8, [r3]
 800a3b6:	e63f      	b.n	800a038 <_dtoa_r+0x698>
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	e7bb      	b.n	800a334 <_dtoa_r+0x994>
 800a3bc:	2201      	movs	r2, #1
 800a3be:	e7e1      	b.n	800a384 <_dtoa_r+0x9e4>
 800a3c0:	9b08      	ldr	r3, [sp, #32]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	db04      	blt.n	800a3d0 <_dtoa_r+0xa30>
 800a3c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3c8:	430b      	orrs	r3, r1
 800a3ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3cc:	430b      	orrs	r3, r1
 800a3ce:	d120      	bne.n	800a412 <_dtoa_r+0xa72>
 800a3d0:	2a00      	cmp	r2, #0
 800a3d2:	dded      	ble.n	800a3b0 <_dtoa_r+0xa10>
 800a3d4:	4649      	mov	r1, r9
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	4658      	mov	r0, fp
 800a3da:	f000 fdb7 	bl	800af4c <__lshift>
 800a3de:	4621      	mov	r1, r4
 800a3e0:	4681      	mov	r9, r0
 800a3e2:	f000 fe1f 	bl	800b024 <__mcmp>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	dc03      	bgt.n	800a3f2 <_dtoa_r+0xa52>
 800a3ea:	d1e1      	bne.n	800a3b0 <_dtoa_r+0xa10>
 800a3ec:	f018 0f01 	tst.w	r8, #1
 800a3f0:	d0de      	beq.n	800a3b0 <_dtoa_r+0xa10>
 800a3f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3f6:	d1d8      	bne.n	800a3aa <_dtoa_r+0xa0a>
 800a3f8:	9a00      	ldr	r2, [sp, #0]
 800a3fa:	2339      	movs	r3, #57	@ 0x39
 800a3fc:	7013      	strb	r3, [r2, #0]
 800a3fe:	4633      	mov	r3, r6
 800a400:	461e      	mov	r6, r3
 800a402:	3b01      	subs	r3, #1
 800a404:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a408:	2a39      	cmp	r2, #57	@ 0x39
 800a40a:	d052      	beq.n	800a4b2 <_dtoa_r+0xb12>
 800a40c:	3201      	adds	r2, #1
 800a40e:	701a      	strb	r2, [r3, #0]
 800a410:	e612      	b.n	800a038 <_dtoa_r+0x698>
 800a412:	2a00      	cmp	r2, #0
 800a414:	dd07      	ble.n	800a426 <_dtoa_r+0xa86>
 800a416:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a41a:	d0ed      	beq.n	800a3f8 <_dtoa_r+0xa58>
 800a41c:	9a00      	ldr	r2, [sp, #0]
 800a41e:	f108 0301 	add.w	r3, r8, #1
 800a422:	7013      	strb	r3, [r2, #0]
 800a424:	e608      	b.n	800a038 <_dtoa_r+0x698>
 800a426:	9b07      	ldr	r3, [sp, #28]
 800a428:	9a07      	ldr	r2, [sp, #28]
 800a42a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a42e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a430:	4293      	cmp	r3, r2
 800a432:	d028      	beq.n	800a486 <_dtoa_r+0xae6>
 800a434:	4649      	mov	r1, r9
 800a436:	2300      	movs	r3, #0
 800a438:	220a      	movs	r2, #10
 800a43a:	4658      	mov	r0, fp
 800a43c:	f000 fbda 	bl	800abf4 <__multadd>
 800a440:	42af      	cmp	r7, r5
 800a442:	4681      	mov	r9, r0
 800a444:	f04f 0300 	mov.w	r3, #0
 800a448:	f04f 020a 	mov.w	r2, #10
 800a44c:	4639      	mov	r1, r7
 800a44e:	4658      	mov	r0, fp
 800a450:	d107      	bne.n	800a462 <_dtoa_r+0xac2>
 800a452:	f000 fbcf 	bl	800abf4 <__multadd>
 800a456:	4607      	mov	r7, r0
 800a458:	4605      	mov	r5, r0
 800a45a:	9b07      	ldr	r3, [sp, #28]
 800a45c:	3301      	adds	r3, #1
 800a45e:	9307      	str	r3, [sp, #28]
 800a460:	e774      	b.n	800a34c <_dtoa_r+0x9ac>
 800a462:	f000 fbc7 	bl	800abf4 <__multadd>
 800a466:	4629      	mov	r1, r5
 800a468:	4607      	mov	r7, r0
 800a46a:	2300      	movs	r3, #0
 800a46c:	220a      	movs	r2, #10
 800a46e:	4658      	mov	r0, fp
 800a470:	f000 fbc0 	bl	800abf4 <__multadd>
 800a474:	4605      	mov	r5, r0
 800a476:	e7f0      	b.n	800a45a <_dtoa_r+0xaba>
 800a478:	9b00      	ldr	r3, [sp, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	bfcc      	ite	gt
 800a47e:	461e      	movgt	r6, r3
 800a480:	2601      	movle	r6, #1
 800a482:	4456      	add	r6, sl
 800a484:	2700      	movs	r7, #0
 800a486:	4649      	mov	r1, r9
 800a488:	2201      	movs	r2, #1
 800a48a:	4658      	mov	r0, fp
 800a48c:	f000 fd5e 	bl	800af4c <__lshift>
 800a490:	4621      	mov	r1, r4
 800a492:	4681      	mov	r9, r0
 800a494:	f000 fdc6 	bl	800b024 <__mcmp>
 800a498:	2800      	cmp	r0, #0
 800a49a:	dcb0      	bgt.n	800a3fe <_dtoa_r+0xa5e>
 800a49c:	d102      	bne.n	800a4a4 <_dtoa_r+0xb04>
 800a49e:	f018 0f01 	tst.w	r8, #1
 800a4a2:	d1ac      	bne.n	800a3fe <_dtoa_r+0xa5e>
 800a4a4:	4633      	mov	r3, r6
 800a4a6:	461e      	mov	r6, r3
 800a4a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4ac:	2a30      	cmp	r2, #48	@ 0x30
 800a4ae:	d0fa      	beq.n	800a4a6 <_dtoa_r+0xb06>
 800a4b0:	e5c2      	b.n	800a038 <_dtoa_r+0x698>
 800a4b2:	459a      	cmp	sl, r3
 800a4b4:	d1a4      	bne.n	800a400 <_dtoa_r+0xa60>
 800a4b6:	9b04      	ldr	r3, [sp, #16]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	9304      	str	r3, [sp, #16]
 800a4bc:	2331      	movs	r3, #49	@ 0x31
 800a4be:	f88a 3000 	strb.w	r3, [sl]
 800a4c2:	e5b9      	b.n	800a038 <_dtoa_r+0x698>
 800a4c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a4c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a524 <_dtoa_r+0xb84>
 800a4ca:	b11b      	cbz	r3, 800a4d4 <_dtoa_r+0xb34>
 800a4cc:	f10a 0308 	add.w	r3, sl, #8
 800a4d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a4d2:	6013      	str	r3, [r2, #0]
 800a4d4:	4650      	mov	r0, sl
 800a4d6:	b019      	add	sp, #100	@ 0x64
 800a4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	f77f ae37 	ble.w	800a152 <_dtoa_r+0x7b2>
 800a4e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4e8:	2001      	movs	r0, #1
 800a4ea:	e655      	b.n	800a198 <_dtoa_r+0x7f8>
 800a4ec:	9b00      	ldr	r3, [sp, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	f77f aed6 	ble.w	800a2a0 <_dtoa_r+0x900>
 800a4f4:	4656      	mov	r6, sl
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	4648      	mov	r0, r9
 800a4fa:	f7ff f9c8 	bl	800988e <quorem>
 800a4fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a502:	f806 8b01 	strb.w	r8, [r6], #1
 800a506:	9b00      	ldr	r3, [sp, #0]
 800a508:	eba6 020a 	sub.w	r2, r6, sl
 800a50c:	4293      	cmp	r3, r2
 800a50e:	ddb3      	ble.n	800a478 <_dtoa_r+0xad8>
 800a510:	4649      	mov	r1, r9
 800a512:	2300      	movs	r3, #0
 800a514:	220a      	movs	r2, #10
 800a516:	4658      	mov	r0, fp
 800a518:	f000 fb6c 	bl	800abf4 <__multadd>
 800a51c:	4681      	mov	r9, r0
 800a51e:	e7ea      	b.n	800a4f6 <_dtoa_r+0xb56>
 800a520:	0800bef0 	.word	0x0800bef0
 800a524:	0800be74 	.word	0x0800be74

0800a528 <_free_r>:
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	4605      	mov	r5, r0
 800a52c:	2900      	cmp	r1, #0
 800a52e:	d041      	beq.n	800a5b4 <_free_r+0x8c>
 800a530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a534:	1f0c      	subs	r4, r1, #4
 800a536:	2b00      	cmp	r3, #0
 800a538:	bfb8      	it	lt
 800a53a:	18e4      	addlt	r4, r4, r3
 800a53c:	f000 faec 	bl	800ab18 <__malloc_lock>
 800a540:	4a1d      	ldr	r2, [pc, #116]	@ (800a5b8 <_free_r+0x90>)
 800a542:	6813      	ldr	r3, [r2, #0]
 800a544:	b933      	cbnz	r3, 800a554 <_free_r+0x2c>
 800a546:	6063      	str	r3, [r4, #4]
 800a548:	6014      	str	r4, [r2, #0]
 800a54a:	4628      	mov	r0, r5
 800a54c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a550:	f000 bae8 	b.w	800ab24 <__malloc_unlock>
 800a554:	42a3      	cmp	r3, r4
 800a556:	d908      	bls.n	800a56a <_free_r+0x42>
 800a558:	6820      	ldr	r0, [r4, #0]
 800a55a:	1821      	adds	r1, r4, r0
 800a55c:	428b      	cmp	r3, r1
 800a55e:	bf01      	itttt	eq
 800a560:	6819      	ldreq	r1, [r3, #0]
 800a562:	685b      	ldreq	r3, [r3, #4]
 800a564:	1809      	addeq	r1, r1, r0
 800a566:	6021      	streq	r1, [r4, #0]
 800a568:	e7ed      	b.n	800a546 <_free_r+0x1e>
 800a56a:	461a      	mov	r2, r3
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	b10b      	cbz	r3, 800a574 <_free_r+0x4c>
 800a570:	42a3      	cmp	r3, r4
 800a572:	d9fa      	bls.n	800a56a <_free_r+0x42>
 800a574:	6811      	ldr	r1, [r2, #0]
 800a576:	1850      	adds	r0, r2, r1
 800a578:	42a0      	cmp	r0, r4
 800a57a:	d10b      	bne.n	800a594 <_free_r+0x6c>
 800a57c:	6820      	ldr	r0, [r4, #0]
 800a57e:	4401      	add	r1, r0
 800a580:	1850      	adds	r0, r2, r1
 800a582:	4283      	cmp	r3, r0
 800a584:	6011      	str	r1, [r2, #0]
 800a586:	d1e0      	bne.n	800a54a <_free_r+0x22>
 800a588:	6818      	ldr	r0, [r3, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	6053      	str	r3, [r2, #4]
 800a58e:	4408      	add	r0, r1
 800a590:	6010      	str	r0, [r2, #0]
 800a592:	e7da      	b.n	800a54a <_free_r+0x22>
 800a594:	d902      	bls.n	800a59c <_free_r+0x74>
 800a596:	230c      	movs	r3, #12
 800a598:	602b      	str	r3, [r5, #0]
 800a59a:	e7d6      	b.n	800a54a <_free_r+0x22>
 800a59c:	6820      	ldr	r0, [r4, #0]
 800a59e:	1821      	adds	r1, r4, r0
 800a5a0:	428b      	cmp	r3, r1
 800a5a2:	bf04      	itt	eq
 800a5a4:	6819      	ldreq	r1, [r3, #0]
 800a5a6:	685b      	ldreq	r3, [r3, #4]
 800a5a8:	6063      	str	r3, [r4, #4]
 800a5aa:	bf04      	itt	eq
 800a5ac:	1809      	addeq	r1, r1, r0
 800a5ae:	6021      	streq	r1, [r4, #0]
 800a5b0:	6054      	str	r4, [r2, #4]
 800a5b2:	e7ca      	b.n	800a54a <_free_r+0x22>
 800a5b4:	bd38      	pop	{r3, r4, r5, pc}
 800a5b6:	bf00      	nop
 800a5b8:	2000479c 	.word	0x2000479c

0800a5bc <__ssputs_r>:
 800a5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c0:	688e      	ldr	r6, [r1, #8]
 800a5c2:	461f      	mov	r7, r3
 800a5c4:	42be      	cmp	r6, r7
 800a5c6:	680b      	ldr	r3, [r1, #0]
 800a5c8:	4682      	mov	sl, r0
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	4690      	mov	r8, r2
 800a5ce:	d82d      	bhi.n	800a62c <__ssputs_r+0x70>
 800a5d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a5d8:	d026      	beq.n	800a628 <__ssputs_r+0x6c>
 800a5da:	6965      	ldr	r5, [r4, #20]
 800a5dc:	6909      	ldr	r1, [r1, #16]
 800a5de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5e2:	eba3 0901 	sub.w	r9, r3, r1
 800a5e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5ea:	1c7b      	adds	r3, r7, #1
 800a5ec:	444b      	add	r3, r9
 800a5ee:	106d      	asrs	r5, r5, #1
 800a5f0:	429d      	cmp	r5, r3
 800a5f2:	bf38      	it	cc
 800a5f4:	461d      	movcc	r5, r3
 800a5f6:	0553      	lsls	r3, r2, #21
 800a5f8:	d527      	bpl.n	800a64a <__ssputs_r+0x8e>
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	f000 f960 	bl	800a8c0 <_malloc_r>
 800a600:	4606      	mov	r6, r0
 800a602:	b360      	cbz	r0, 800a65e <__ssputs_r+0xa2>
 800a604:	6921      	ldr	r1, [r4, #16]
 800a606:	464a      	mov	r2, r9
 800a608:	f7ff f933 	bl	8009872 <memcpy>
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a616:	81a3      	strh	r3, [r4, #12]
 800a618:	6126      	str	r6, [r4, #16]
 800a61a:	6165      	str	r5, [r4, #20]
 800a61c:	444e      	add	r6, r9
 800a61e:	eba5 0509 	sub.w	r5, r5, r9
 800a622:	6026      	str	r6, [r4, #0]
 800a624:	60a5      	str	r5, [r4, #8]
 800a626:	463e      	mov	r6, r7
 800a628:	42be      	cmp	r6, r7
 800a62a:	d900      	bls.n	800a62e <__ssputs_r+0x72>
 800a62c:	463e      	mov	r6, r7
 800a62e:	6820      	ldr	r0, [r4, #0]
 800a630:	4632      	mov	r2, r6
 800a632:	4641      	mov	r1, r8
 800a634:	f000 fe6f 	bl	800b316 <memmove>
 800a638:	68a3      	ldr	r3, [r4, #8]
 800a63a:	1b9b      	subs	r3, r3, r6
 800a63c:	60a3      	str	r3, [r4, #8]
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	4433      	add	r3, r6
 800a642:	6023      	str	r3, [r4, #0]
 800a644:	2000      	movs	r0, #0
 800a646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a64a:	462a      	mov	r2, r5
 800a64c:	f000 fe35 	bl	800b2ba <_realloc_r>
 800a650:	4606      	mov	r6, r0
 800a652:	2800      	cmp	r0, #0
 800a654:	d1e0      	bne.n	800a618 <__ssputs_r+0x5c>
 800a656:	6921      	ldr	r1, [r4, #16]
 800a658:	4650      	mov	r0, sl
 800a65a:	f7ff ff65 	bl	800a528 <_free_r>
 800a65e:	230c      	movs	r3, #12
 800a660:	f8ca 3000 	str.w	r3, [sl]
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a66a:	81a3      	strh	r3, [r4, #12]
 800a66c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a670:	e7e9      	b.n	800a646 <__ssputs_r+0x8a>
	...

0800a674 <_svfiprintf_r>:
 800a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	4698      	mov	r8, r3
 800a67a:	898b      	ldrh	r3, [r1, #12]
 800a67c:	061b      	lsls	r3, r3, #24
 800a67e:	b09d      	sub	sp, #116	@ 0x74
 800a680:	4607      	mov	r7, r0
 800a682:	460d      	mov	r5, r1
 800a684:	4614      	mov	r4, r2
 800a686:	d510      	bpl.n	800a6aa <_svfiprintf_r+0x36>
 800a688:	690b      	ldr	r3, [r1, #16]
 800a68a:	b973      	cbnz	r3, 800a6aa <_svfiprintf_r+0x36>
 800a68c:	2140      	movs	r1, #64	@ 0x40
 800a68e:	f000 f917 	bl	800a8c0 <_malloc_r>
 800a692:	6028      	str	r0, [r5, #0]
 800a694:	6128      	str	r0, [r5, #16]
 800a696:	b930      	cbnz	r0, 800a6a6 <_svfiprintf_r+0x32>
 800a698:	230c      	movs	r3, #12
 800a69a:	603b      	str	r3, [r7, #0]
 800a69c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6a0:	b01d      	add	sp, #116	@ 0x74
 800a6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a6:	2340      	movs	r3, #64	@ 0x40
 800a6a8:	616b      	str	r3, [r5, #20]
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ae:	2320      	movs	r3, #32
 800a6b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6b8:	2330      	movs	r3, #48	@ 0x30
 800a6ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a858 <_svfiprintf_r+0x1e4>
 800a6be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6c2:	f04f 0901 	mov.w	r9, #1
 800a6c6:	4623      	mov	r3, r4
 800a6c8:	469a      	mov	sl, r3
 800a6ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6ce:	b10a      	cbz	r2, 800a6d4 <_svfiprintf_r+0x60>
 800a6d0:	2a25      	cmp	r2, #37	@ 0x25
 800a6d2:	d1f9      	bne.n	800a6c8 <_svfiprintf_r+0x54>
 800a6d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a6d8:	d00b      	beq.n	800a6f2 <_svfiprintf_r+0x7e>
 800a6da:	465b      	mov	r3, fp
 800a6dc:	4622      	mov	r2, r4
 800a6de:	4629      	mov	r1, r5
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	f7ff ff6b 	bl	800a5bc <__ssputs_r>
 800a6e6:	3001      	adds	r0, #1
 800a6e8:	f000 80a7 	beq.w	800a83a <_svfiprintf_r+0x1c6>
 800a6ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6ee:	445a      	add	r2, fp
 800a6f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 809f 	beq.w	800a83a <_svfiprintf_r+0x1c6>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a706:	f10a 0a01 	add.w	sl, sl, #1
 800a70a:	9304      	str	r3, [sp, #16]
 800a70c:	9307      	str	r3, [sp, #28]
 800a70e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a712:	931a      	str	r3, [sp, #104]	@ 0x68
 800a714:	4654      	mov	r4, sl
 800a716:	2205      	movs	r2, #5
 800a718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a71c:	484e      	ldr	r0, [pc, #312]	@ (800a858 <_svfiprintf_r+0x1e4>)
 800a71e:	f7f5 fd7f 	bl	8000220 <memchr>
 800a722:	9a04      	ldr	r2, [sp, #16]
 800a724:	b9d8      	cbnz	r0, 800a75e <_svfiprintf_r+0xea>
 800a726:	06d0      	lsls	r0, r2, #27
 800a728:	bf44      	itt	mi
 800a72a:	2320      	movmi	r3, #32
 800a72c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a730:	0711      	lsls	r1, r2, #28
 800a732:	bf44      	itt	mi
 800a734:	232b      	movmi	r3, #43	@ 0x2b
 800a736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a73a:	f89a 3000 	ldrb.w	r3, [sl]
 800a73e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a740:	d015      	beq.n	800a76e <_svfiprintf_r+0xfa>
 800a742:	9a07      	ldr	r2, [sp, #28]
 800a744:	4654      	mov	r4, sl
 800a746:	2000      	movs	r0, #0
 800a748:	f04f 0c0a 	mov.w	ip, #10
 800a74c:	4621      	mov	r1, r4
 800a74e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a752:	3b30      	subs	r3, #48	@ 0x30
 800a754:	2b09      	cmp	r3, #9
 800a756:	d94b      	bls.n	800a7f0 <_svfiprintf_r+0x17c>
 800a758:	b1b0      	cbz	r0, 800a788 <_svfiprintf_r+0x114>
 800a75a:	9207      	str	r2, [sp, #28]
 800a75c:	e014      	b.n	800a788 <_svfiprintf_r+0x114>
 800a75e:	eba0 0308 	sub.w	r3, r0, r8
 800a762:	fa09 f303 	lsl.w	r3, r9, r3
 800a766:	4313      	orrs	r3, r2
 800a768:	9304      	str	r3, [sp, #16]
 800a76a:	46a2      	mov	sl, r4
 800a76c:	e7d2      	b.n	800a714 <_svfiprintf_r+0xa0>
 800a76e:	9b03      	ldr	r3, [sp, #12]
 800a770:	1d19      	adds	r1, r3, #4
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	9103      	str	r1, [sp, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	bfbb      	ittet	lt
 800a77a:	425b      	neglt	r3, r3
 800a77c:	f042 0202 	orrlt.w	r2, r2, #2
 800a780:	9307      	strge	r3, [sp, #28]
 800a782:	9307      	strlt	r3, [sp, #28]
 800a784:	bfb8      	it	lt
 800a786:	9204      	strlt	r2, [sp, #16]
 800a788:	7823      	ldrb	r3, [r4, #0]
 800a78a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a78c:	d10a      	bne.n	800a7a4 <_svfiprintf_r+0x130>
 800a78e:	7863      	ldrb	r3, [r4, #1]
 800a790:	2b2a      	cmp	r3, #42	@ 0x2a
 800a792:	d132      	bne.n	800a7fa <_svfiprintf_r+0x186>
 800a794:	9b03      	ldr	r3, [sp, #12]
 800a796:	1d1a      	adds	r2, r3, #4
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	9203      	str	r2, [sp, #12]
 800a79c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7a0:	3402      	adds	r4, #2
 800a7a2:	9305      	str	r3, [sp, #20]
 800a7a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a868 <_svfiprintf_r+0x1f4>
 800a7a8:	7821      	ldrb	r1, [r4, #0]
 800a7aa:	2203      	movs	r2, #3
 800a7ac:	4650      	mov	r0, sl
 800a7ae:	f7f5 fd37 	bl	8000220 <memchr>
 800a7b2:	b138      	cbz	r0, 800a7c4 <_svfiprintf_r+0x150>
 800a7b4:	9b04      	ldr	r3, [sp, #16]
 800a7b6:	eba0 000a 	sub.w	r0, r0, sl
 800a7ba:	2240      	movs	r2, #64	@ 0x40
 800a7bc:	4082      	lsls	r2, r0
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	3401      	adds	r4, #1
 800a7c2:	9304      	str	r3, [sp, #16]
 800a7c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c8:	4824      	ldr	r0, [pc, #144]	@ (800a85c <_svfiprintf_r+0x1e8>)
 800a7ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a7ce:	2206      	movs	r2, #6
 800a7d0:	f7f5 fd26 	bl	8000220 <memchr>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	d036      	beq.n	800a846 <_svfiprintf_r+0x1d2>
 800a7d8:	4b21      	ldr	r3, [pc, #132]	@ (800a860 <_svfiprintf_r+0x1ec>)
 800a7da:	bb1b      	cbnz	r3, 800a824 <_svfiprintf_r+0x1b0>
 800a7dc:	9b03      	ldr	r3, [sp, #12]
 800a7de:	3307      	adds	r3, #7
 800a7e0:	f023 0307 	bic.w	r3, r3, #7
 800a7e4:	3308      	adds	r3, #8
 800a7e6:	9303      	str	r3, [sp, #12]
 800a7e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ea:	4433      	add	r3, r6
 800a7ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ee:	e76a      	b.n	800a6c6 <_svfiprintf_r+0x52>
 800a7f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	2001      	movs	r0, #1
 800a7f8:	e7a8      	b.n	800a74c <_svfiprintf_r+0xd8>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	3401      	adds	r4, #1
 800a7fe:	9305      	str	r3, [sp, #20]
 800a800:	4619      	mov	r1, r3
 800a802:	f04f 0c0a 	mov.w	ip, #10
 800a806:	4620      	mov	r0, r4
 800a808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a80c:	3a30      	subs	r2, #48	@ 0x30
 800a80e:	2a09      	cmp	r2, #9
 800a810:	d903      	bls.n	800a81a <_svfiprintf_r+0x1a6>
 800a812:	2b00      	cmp	r3, #0
 800a814:	d0c6      	beq.n	800a7a4 <_svfiprintf_r+0x130>
 800a816:	9105      	str	r1, [sp, #20]
 800a818:	e7c4      	b.n	800a7a4 <_svfiprintf_r+0x130>
 800a81a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a81e:	4604      	mov	r4, r0
 800a820:	2301      	movs	r3, #1
 800a822:	e7f0      	b.n	800a806 <_svfiprintf_r+0x192>
 800a824:	ab03      	add	r3, sp, #12
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	462a      	mov	r2, r5
 800a82a:	4b0e      	ldr	r3, [pc, #56]	@ (800a864 <_svfiprintf_r+0x1f0>)
 800a82c:	a904      	add	r1, sp, #16
 800a82e:	4638      	mov	r0, r7
 800a830:	f7fe faf6 	bl	8008e20 <_printf_float>
 800a834:	1c42      	adds	r2, r0, #1
 800a836:	4606      	mov	r6, r0
 800a838:	d1d6      	bne.n	800a7e8 <_svfiprintf_r+0x174>
 800a83a:	89ab      	ldrh	r3, [r5, #12]
 800a83c:	065b      	lsls	r3, r3, #25
 800a83e:	f53f af2d 	bmi.w	800a69c <_svfiprintf_r+0x28>
 800a842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a844:	e72c      	b.n	800a6a0 <_svfiprintf_r+0x2c>
 800a846:	ab03      	add	r3, sp, #12
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	462a      	mov	r2, r5
 800a84c:	4b05      	ldr	r3, [pc, #20]	@ (800a864 <_svfiprintf_r+0x1f0>)
 800a84e:	a904      	add	r1, sp, #16
 800a850:	4638      	mov	r0, r7
 800a852:	f7fe fd7d 	bl	8009350 <_printf_i>
 800a856:	e7ed      	b.n	800a834 <_svfiprintf_r+0x1c0>
 800a858:	0800bf01 	.word	0x0800bf01
 800a85c:	0800bf0b 	.word	0x0800bf0b
 800a860:	08008e21 	.word	0x08008e21
 800a864:	0800a5bd 	.word	0x0800a5bd
 800a868:	0800bf07 	.word	0x0800bf07

0800a86c <malloc>:
 800a86c:	4b02      	ldr	r3, [pc, #8]	@ (800a878 <malloc+0xc>)
 800a86e:	4601      	mov	r1, r0
 800a870:	6818      	ldr	r0, [r3, #0]
 800a872:	f000 b825 	b.w	800a8c0 <_malloc_r>
 800a876:	bf00      	nop
 800a878:	20000028 	.word	0x20000028

0800a87c <sbrk_aligned>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	4e0f      	ldr	r6, [pc, #60]	@ (800a8bc <sbrk_aligned+0x40>)
 800a880:	460c      	mov	r4, r1
 800a882:	6831      	ldr	r1, [r6, #0]
 800a884:	4605      	mov	r5, r0
 800a886:	b911      	cbnz	r1, 800a88e <sbrk_aligned+0x12>
 800a888:	f000 fd94 	bl	800b3b4 <_sbrk_r>
 800a88c:	6030      	str	r0, [r6, #0]
 800a88e:	4621      	mov	r1, r4
 800a890:	4628      	mov	r0, r5
 800a892:	f000 fd8f 	bl	800b3b4 <_sbrk_r>
 800a896:	1c43      	adds	r3, r0, #1
 800a898:	d103      	bne.n	800a8a2 <sbrk_aligned+0x26>
 800a89a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a89e:	4620      	mov	r0, r4
 800a8a0:	bd70      	pop	{r4, r5, r6, pc}
 800a8a2:	1cc4      	adds	r4, r0, #3
 800a8a4:	f024 0403 	bic.w	r4, r4, #3
 800a8a8:	42a0      	cmp	r0, r4
 800a8aa:	d0f8      	beq.n	800a89e <sbrk_aligned+0x22>
 800a8ac:	1a21      	subs	r1, r4, r0
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f000 fd80 	bl	800b3b4 <_sbrk_r>
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	d1f2      	bne.n	800a89e <sbrk_aligned+0x22>
 800a8b8:	e7ef      	b.n	800a89a <sbrk_aligned+0x1e>
 800a8ba:	bf00      	nop
 800a8bc:	20004798 	.word	0x20004798

0800a8c0 <_malloc_r>:
 800a8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c4:	1ccd      	adds	r5, r1, #3
 800a8c6:	f025 0503 	bic.w	r5, r5, #3
 800a8ca:	3508      	adds	r5, #8
 800a8cc:	2d0c      	cmp	r5, #12
 800a8ce:	bf38      	it	cc
 800a8d0:	250c      	movcc	r5, #12
 800a8d2:	2d00      	cmp	r5, #0
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	db01      	blt.n	800a8dc <_malloc_r+0x1c>
 800a8d8:	42a9      	cmp	r1, r5
 800a8da:	d904      	bls.n	800a8e6 <_malloc_r+0x26>
 800a8dc:	230c      	movs	r3, #12
 800a8de:	6033      	str	r3, [r6, #0]
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9bc <_malloc_r+0xfc>
 800a8ea:	f000 f915 	bl	800ab18 <__malloc_lock>
 800a8ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a8f2:	461c      	mov	r4, r3
 800a8f4:	bb44      	cbnz	r4, 800a948 <_malloc_r+0x88>
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	f7ff ffbf 	bl	800a87c <sbrk_aligned>
 800a8fe:	1c43      	adds	r3, r0, #1
 800a900:	4604      	mov	r4, r0
 800a902:	d158      	bne.n	800a9b6 <_malloc_r+0xf6>
 800a904:	f8d8 4000 	ldr.w	r4, [r8]
 800a908:	4627      	mov	r7, r4
 800a90a:	2f00      	cmp	r7, #0
 800a90c:	d143      	bne.n	800a996 <_malloc_r+0xd6>
 800a90e:	2c00      	cmp	r4, #0
 800a910:	d04b      	beq.n	800a9aa <_malloc_r+0xea>
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	4639      	mov	r1, r7
 800a916:	4630      	mov	r0, r6
 800a918:	eb04 0903 	add.w	r9, r4, r3
 800a91c:	f000 fd4a 	bl	800b3b4 <_sbrk_r>
 800a920:	4581      	cmp	r9, r0
 800a922:	d142      	bne.n	800a9aa <_malloc_r+0xea>
 800a924:	6821      	ldr	r1, [r4, #0]
 800a926:	1a6d      	subs	r5, r5, r1
 800a928:	4629      	mov	r1, r5
 800a92a:	4630      	mov	r0, r6
 800a92c:	f7ff ffa6 	bl	800a87c <sbrk_aligned>
 800a930:	3001      	adds	r0, #1
 800a932:	d03a      	beq.n	800a9aa <_malloc_r+0xea>
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	442b      	add	r3, r5
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	f8d8 3000 	ldr.w	r3, [r8]
 800a93e:	685a      	ldr	r2, [r3, #4]
 800a940:	bb62      	cbnz	r2, 800a99c <_malloc_r+0xdc>
 800a942:	f8c8 7000 	str.w	r7, [r8]
 800a946:	e00f      	b.n	800a968 <_malloc_r+0xa8>
 800a948:	6822      	ldr	r2, [r4, #0]
 800a94a:	1b52      	subs	r2, r2, r5
 800a94c:	d420      	bmi.n	800a990 <_malloc_r+0xd0>
 800a94e:	2a0b      	cmp	r2, #11
 800a950:	d917      	bls.n	800a982 <_malloc_r+0xc2>
 800a952:	1961      	adds	r1, r4, r5
 800a954:	42a3      	cmp	r3, r4
 800a956:	6025      	str	r5, [r4, #0]
 800a958:	bf18      	it	ne
 800a95a:	6059      	strne	r1, [r3, #4]
 800a95c:	6863      	ldr	r3, [r4, #4]
 800a95e:	bf08      	it	eq
 800a960:	f8c8 1000 	streq.w	r1, [r8]
 800a964:	5162      	str	r2, [r4, r5]
 800a966:	604b      	str	r3, [r1, #4]
 800a968:	4630      	mov	r0, r6
 800a96a:	f000 f8db 	bl	800ab24 <__malloc_unlock>
 800a96e:	f104 000b 	add.w	r0, r4, #11
 800a972:	1d23      	adds	r3, r4, #4
 800a974:	f020 0007 	bic.w	r0, r0, #7
 800a978:	1ac2      	subs	r2, r0, r3
 800a97a:	bf1c      	itt	ne
 800a97c:	1a1b      	subne	r3, r3, r0
 800a97e:	50a3      	strne	r3, [r4, r2]
 800a980:	e7af      	b.n	800a8e2 <_malloc_r+0x22>
 800a982:	6862      	ldr	r2, [r4, #4]
 800a984:	42a3      	cmp	r3, r4
 800a986:	bf0c      	ite	eq
 800a988:	f8c8 2000 	streq.w	r2, [r8]
 800a98c:	605a      	strne	r2, [r3, #4]
 800a98e:	e7eb      	b.n	800a968 <_malloc_r+0xa8>
 800a990:	4623      	mov	r3, r4
 800a992:	6864      	ldr	r4, [r4, #4]
 800a994:	e7ae      	b.n	800a8f4 <_malloc_r+0x34>
 800a996:	463c      	mov	r4, r7
 800a998:	687f      	ldr	r7, [r7, #4]
 800a99a:	e7b6      	b.n	800a90a <_malloc_r+0x4a>
 800a99c:	461a      	mov	r2, r3
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	42a3      	cmp	r3, r4
 800a9a2:	d1fb      	bne.n	800a99c <_malloc_r+0xdc>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	6053      	str	r3, [r2, #4]
 800a9a8:	e7de      	b.n	800a968 <_malloc_r+0xa8>
 800a9aa:	230c      	movs	r3, #12
 800a9ac:	6033      	str	r3, [r6, #0]
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f000 f8b8 	bl	800ab24 <__malloc_unlock>
 800a9b4:	e794      	b.n	800a8e0 <_malloc_r+0x20>
 800a9b6:	6005      	str	r5, [r0, #0]
 800a9b8:	e7d6      	b.n	800a968 <_malloc_r+0xa8>
 800a9ba:	bf00      	nop
 800a9bc:	2000479c 	.word	0x2000479c

0800a9c0 <__sflush_r>:
 800a9c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c8:	0716      	lsls	r6, r2, #28
 800a9ca:	4605      	mov	r5, r0
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	d454      	bmi.n	800aa7a <__sflush_r+0xba>
 800a9d0:	684b      	ldr	r3, [r1, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	dc02      	bgt.n	800a9dc <__sflush_r+0x1c>
 800a9d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	dd48      	ble.n	800aa6e <__sflush_r+0xae>
 800a9dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9de:	2e00      	cmp	r6, #0
 800a9e0:	d045      	beq.n	800aa6e <__sflush_r+0xae>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a9e8:	682f      	ldr	r7, [r5, #0]
 800a9ea:	6a21      	ldr	r1, [r4, #32]
 800a9ec:	602b      	str	r3, [r5, #0]
 800a9ee:	d030      	beq.n	800aa52 <__sflush_r+0x92>
 800a9f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a9f2:	89a3      	ldrh	r3, [r4, #12]
 800a9f4:	0759      	lsls	r1, r3, #29
 800a9f6:	d505      	bpl.n	800aa04 <__sflush_r+0x44>
 800a9f8:	6863      	ldr	r3, [r4, #4]
 800a9fa:	1ad2      	subs	r2, r2, r3
 800a9fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a9fe:	b10b      	cbz	r3, 800aa04 <__sflush_r+0x44>
 800aa00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa02:	1ad2      	subs	r2, r2, r3
 800aa04:	2300      	movs	r3, #0
 800aa06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa08:	6a21      	ldr	r1, [r4, #32]
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	47b0      	blx	r6
 800aa0e:	1c43      	adds	r3, r0, #1
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	d106      	bne.n	800aa22 <__sflush_r+0x62>
 800aa14:	6829      	ldr	r1, [r5, #0]
 800aa16:	291d      	cmp	r1, #29
 800aa18:	d82b      	bhi.n	800aa72 <__sflush_r+0xb2>
 800aa1a:	4a2a      	ldr	r2, [pc, #168]	@ (800aac4 <__sflush_r+0x104>)
 800aa1c:	410a      	asrs	r2, r1
 800aa1e:	07d6      	lsls	r6, r2, #31
 800aa20:	d427      	bmi.n	800aa72 <__sflush_r+0xb2>
 800aa22:	2200      	movs	r2, #0
 800aa24:	6062      	str	r2, [r4, #4]
 800aa26:	04d9      	lsls	r1, r3, #19
 800aa28:	6922      	ldr	r2, [r4, #16]
 800aa2a:	6022      	str	r2, [r4, #0]
 800aa2c:	d504      	bpl.n	800aa38 <__sflush_r+0x78>
 800aa2e:	1c42      	adds	r2, r0, #1
 800aa30:	d101      	bne.n	800aa36 <__sflush_r+0x76>
 800aa32:	682b      	ldr	r3, [r5, #0]
 800aa34:	b903      	cbnz	r3, 800aa38 <__sflush_r+0x78>
 800aa36:	6560      	str	r0, [r4, #84]	@ 0x54
 800aa38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa3a:	602f      	str	r7, [r5, #0]
 800aa3c:	b1b9      	cbz	r1, 800aa6e <__sflush_r+0xae>
 800aa3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa42:	4299      	cmp	r1, r3
 800aa44:	d002      	beq.n	800aa4c <__sflush_r+0x8c>
 800aa46:	4628      	mov	r0, r5
 800aa48:	f7ff fd6e 	bl	800a528 <_free_r>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa50:	e00d      	b.n	800aa6e <__sflush_r+0xae>
 800aa52:	2301      	movs	r3, #1
 800aa54:	4628      	mov	r0, r5
 800aa56:	47b0      	blx	r6
 800aa58:	4602      	mov	r2, r0
 800aa5a:	1c50      	adds	r0, r2, #1
 800aa5c:	d1c9      	bne.n	800a9f2 <__sflush_r+0x32>
 800aa5e:	682b      	ldr	r3, [r5, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0c6      	beq.n	800a9f2 <__sflush_r+0x32>
 800aa64:	2b1d      	cmp	r3, #29
 800aa66:	d001      	beq.n	800aa6c <__sflush_r+0xac>
 800aa68:	2b16      	cmp	r3, #22
 800aa6a:	d11e      	bne.n	800aaaa <__sflush_r+0xea>
 800aa6c:	602f      	str	r7, [r5, #0]
 800aa6e:	2000      	movs	r0, #0
 800aa70:	e022      	b.n	800aab8 <__sflush_r+0xf8>
 800aa72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa76:	b21b      	sxth	r3, r3
 800aa78:	e01b      	b.n	800aab2 <__sflush_r+0xf2>
 800aa7a:	690f      	ldr	r7, [r1, #16]
 800aa7c:	2f00      	cmp	r7, #0
 800aa7e:	d0f6      	beq.n	800aa6e <__sflush_r+0xae>
 800aa80:	0793      	lsls	r3, r2, #30
 800aa82:	680e      	ldr	r6, [r1, #0]
 800aa84:	bf08      	it	eq
 800aa86:	694b      	ldreq	r3, [r1, #20]
 800aa88:	600f      	str	r7, [r1, #0]
 800aa8a:	bf18      	it	ne
 800aa8c:	2300      	movne	r3, #0
 800aa8e:	eba6 0807 	sub.w	r8, r6, r7
 800aa92:	608b      	str	r3, [r1, #8]
 800aa94:	f1b8 0f00 	cmp.w	r8, #0
 800aa98:	dde9      	ble.n	800aa6e <__sflush_r+0xae>
 800aa9a:	6a21      	ldr	r1, [r4, #32]
 800aa9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aa9e:	4643      	mov	r3, r8
 800aaa0:	463a      	mov	r2, r7
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	47b0      	blx	r6
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	dc08      	bgt.n	800aabc <__sflush_r+0xfc>
 800aaaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aab2:	81a3      	strh	r3, [r4, #12]
 800aab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aabc:	4407      	add	r7, r0
 800aabe:	eba8 0800 	sub.w	r8, r8, r0
 800aac2:	e7e7      	b.n	800aa94 <__sflush_r+0xd4>
 800aac4:	dfbffffe 	.word	0xdfbffffe

0800aac8 <_fflush_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	690b      	ldr	r3, [r1, #16]
 800aacc:	4605      	mov	r5, r0
 800aace:	460c      	mov	r4, r1
 800aad0:	b913      	cbnz	r3, 800aad8 <_fflush_r+0x10>
 800aad2:	2500      	movs	r5, #0
 800aad4:	4628      	mov	r0, r5
 800aad6:	bd38      	pop	{r3, r4, r5, pc}
 800aad8:	b118      	cbz	r0, 800aae2 <_fflush_r+0x1a>
 800aada:	6a03      	ldr	r3, [r0, #32]
 800aadc:	b90b      	cbnz	r3, 800aae2 <_fflush_r+0x1a>
 800aade:	f7fe fe03 	bl	80096e8 <__sinit>
 800aae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d0f3      	beq.n	800aad2 <_fflush_r+0xa>
 800aaea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aaec:	07d0      	lsls	r0, r2, #31
 800aaee:	d404      	bmi.n	800aafa <_fflush_r+0x32>
 800aaf0:	0599      	lsls	r1, r3, #22
 800aaf2:	d402      	bmi.n	800aafa <_fflush_r+0x32>
 800aaf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aaf6:	f7fe feba 	bl	800986e <__retarget_lock_acquire_recursive>
 800aafa:	4628      	mov	r0, r5
 800aafc:	4621      	mov	r1, r4
 800aafe:	f7ff ff5f 	bl	800a9c0 <__sflush_r>
 800ab02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab04:	07da      	lsls	r2, r3, #31
 800ab06:	4605      	mov	r5, r0
 800ab08:	d4e4      	bmi.n	800aad4 <_fflush_r+0xc>
 800ab0a:	89a3      	ldrh	r3, [r4, #12]
 800ab0c:	059b      	lsls	r3, r3, #22
 800ab0e:	d4e1      	bmi.n	800aad4 <_fflush_r+0xc>
 800ab10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab12:	f7fe fead 	bl	8009870 <__retarget_lock_release_recursive>
 800ab16:	e7dd      	b.n	800aad4 <_fflush_r+0xc>

0800ab18 <__malloc_lock>:
 800ab18:	4801      	ldr	r0, [pc, #4]	@ (800ab20 <__malloc_lock+0x8>)
 800ab1a:	f7fe bea8 	b.w	800986e <__retarget_lock_acquire_recursive>
 800ab1e:	bf00      	nop
 800ab20:	20004794 	.word	0x20004794

0800ab24 <__malloc_unlock>:
 800ab24:	4801      	ldr	r0, [pc, #4]	@ (800ab2c <__malloc_unlock+0x8>)
 800ab26:	f7fe bea3 	b.w	8009870 <__retarget_lock_release_recursive>
 800ab2a:	bf00      	nop
 800ab2c:	20004794 	.word	0x20004794

0800ab30 <_Balloc>:
 800ab30:	b570      	push	{r4, r5, r6, lr}
 800ab32:	69c6      	ldr	r6, [r0, #28]
 800ab34:	4604      	mov	r4, r0
 800ab36:	460d      	mov	r5, r1
 800ab38:	b976      	cbnz	r6, 800ab58 <_Balloc+0x28>
 800ab3a:	2010      	movs	r0, #16
 800ab3c:	f7ff fe96 	bl	800a86c <malloc>
 800ab40:	4602      	mov	r2, r0
 800ab42:	61e0      	str	r0, [r4, #28]
 800ab44:	b920      	cbnz	r0, 800ab50 <_Balloc+0x20>
 800ab46:	4b18      	ldr	r3, [pc, #96]	@ (800aba8 <_Balloc+0x78>)
 800ab48:	4818      	ldr	r0, [pc, #96]	@ (800abac <_Balloc+0x7c>)
 800ab4a:	216b      	movs	r1, #107	@ 0x6b
 800ab4c:	f000 fc54 	bl	800b3f8 <__assert_func>
 800ab50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab54:	6006      	str	r6, [r0, #0]
 800ab56:	60c6      	str	r6, [r0, #12]
 800ab58:	69e6      	ldr	r6, [r4, #28]
 800ab5a:	68f3      	ldr	r3, [r6, #12]
 800ab5c:	b183      	cbz	r3, 800ab80 <_Balloc+0x50>
 800ab5e:	69e3      	ldr	r3, [r4, #28]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab66:	b9b8      	cbnz	r0, 800ab98 <_Balloc+0x68>
 800ab68:	2101      	movs	r1, #1
 800ab6a:	fa01 f605 	lsl.w	r6, r1, r5
 800ab6e:	1d72      	adds	r2, r6, #5
 800ab70:	0092      	lsls	r2, r2, #2
 800ab72:	4620      	mov	r0, r4
 800ab74:	f000 fc5e 	bl	800b434 <_calloc_r>
 800ab78:	b160      	cbz	r0, 800ab94 <_Balloc+0x64>
 800ab7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab7e:	e00e      	b.n	800ab9e <_Balloc+0x6e>
 800ab80:	2221      	movs	r2, #33	@ 0x21
 800ab82:	2104      	movs	r1, #4
 800ab84:	4620      	mov	r0, r4
 800ab86:	f000 fc55 	bl	800b434 <_calloc_r>
 800ab8a:	69e3      	ldr	r3, [r4, #28]
 800ab8c:	60f0      	str	r0, [r6, #12]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1e4      	bne.n	800ab5e <_Balloc+0x2e>
 800ab94:	2000      	movs	r0, #0
 800ab96:	bd70      	pop	{r4, r5, r6, pc}
 800ab98:	6802      	ldr	r2, [r0, #0]
 800ab9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab9e:	2300      	movs	r3, #0
 800aba0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aba4:	e7f7      	b.n	800ab96 <_Balloc+0x66>
 800aba6:	bf00      	nop
 800aba8:	0800be81 	.word	0x0800be81
 800abac:	0800bf12 	.word	0x0800bf12

0800abb0 <_Bfree>:
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	69c6      	ldr	r6, [r0, #28]
 800abb4:	4605      	mov	r5, r0
 800abb6:	460c      	mov	r4, r1
 800abb8:	b976      	cbnz	r6, 800abd8 <_Bfree+0x28>
 800abba:	2010      	movs	r0, #16
 800abbc:	f7ff fe56 	bl	800a86c <malloc>
 800abc0:	4602      	mov	r2, r0
 800abc2:	61e8      	str	r0, [r5, #28]
 800abc4:	b920      	cbnz	r0, 800abd0 <_Bfree+0x20>
 800abc6:	4b09      	ldr	r3, [pc, #36]	@ (800abec <_Bfree+0x3c>)
 800abc8:	4809      	ldr	r0, [pc, #36]	@ (800abf0 <_Bfree+0x40>)
 800abca:	218f      	movs	r1, #143	@ 0x8f
 800abcc:	f000 fc14 	bl	800b3f8 <__assert_func>
 800abd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abd4:	6006      	str	r6, [r0, #0]
 800abd6:	60c6      	str	r6, [r0, #12]
 800abd8:	b13c      	cbz	r4, 800abea <_Bfree+0x3a>
 800abda:	69eb      	ldr	r3, [r5, #28]
 800abdc:	6862      	ldr	r2, [r4, #4]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abe4:	6021      	str	r1, [r4, #0]
 800abe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abea:	bd70      	pop	{r4, r5, r6, pc}
 800abec:	0800be81 	.word	0x0800be81
 800abf0:	0800bf12 	.word	0x0800bf12

0800abf4 <__multadd>:
 800abf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf8:	690d      	ldr	r5, [r1, #16]
 800abfa:	4607      	mov	r7, r0
 800abfc:	460c      	mov	r4, r1
 800abfe:	461e      	mov	r6, r3
 800ac00:	f101 0c14 	add.w	ip, r1, #20
 800ac04:	2000      	movs	r0, #0
 800ac06:	f8dc 3000 	ldr.w	r3, [ip]
 800ac0a:	b299      	uxth	r1, r3
 800ac0c:	fb02 6101 	mla	r1, r2, r1, r6
 800ac10:	0c1e      	lsrs	r6, r3, #16
 800ac12:	0c0b      	lsrs	r3, r1, #16
 800ac14:	fb02 3306 	mla	r3, r2, r6, r3
 800ac18:	b289      	uxth	r1, r1
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac20:	4285      	cmp	r5, r0
 800ac22:	f84c 1b04 	str.w	r1, [ip], #4
 800ac26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac2a:	dcec      	bgt.n	800ac06 <__multadd+0x12>
 800ac2c:	b30e      	cbz	r6, 800ac72 <__multadd+0x7e>
 800ac2e:	68a3      	ldr	r3, [r4, #8]
 800ac30:	42ab      	cmp	r3, r5
 800ac32:	dc19      	bgt.n	800ac68 <__multadd+0x74>
 800ac34:	6861      	ldr	r1, [r4, #4]
 800ac36:	4638      	mov	r0, r7
 800ac38:	3101      	adds	r1, #1
 800ac3a:	f7ff ff79 	bl	800ab30 <_Balloc>
 800ac3e:	4680      	mov	r8, r0
 800ac40:	b928      	cbnz	r0, 800ac4e <__multadd+0x5a>
 800ac42:	4602      	mov	r2, r0
 800ac44:	4b0c      	ldr	r3, [pc, #48]	@ (800ac78 <__multadd+0x84>)
 800ac46:	480d      	ldr	r0, [pc, #52]	@ (800ac7c <__multadd+0x88>)
 800ac48:	21ba      	movs	r1, #186	@ 0xba
 800ac4a:	f000 fbd5 	bl	800b3f8 <__assert_func>
 800ac4e:	6922      	ldr	r2, [r4, #16]
 800ac50:	3202      	adds	r2, #2
 800ac52:	f104 010c 	add.w	r1, r4, #12
 800ac56:	0092      	lsls	r2, r2, #2
 800ac58:	300c      	adds	r0, #12
 800ac5a:	f7fe fe0a 	bl	8009872 <memcpy>
 800ac5e:	4621      	mov	r1, r4
 800ac60:	4638      	mov	r0, r7
 800ac62:	f7ff ffa5 	bl	800abb0 <_Bfree>
 800ac66:	4644      	mov	r4, r8
 800ac68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac6c:	3501      	adds	r5, #1
 800ac6e:	615e      	str	r6, [r3, #20]
 800ac70:	6125      	str	r5, [r4, #16]
 800ac72:	4620      	mov	r0, r4
 800ac74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac78:	0800bef0 	.word	0x0800bef0
 800ac7c:	0800bf12 	.word	0x0800bf12

0800ac80 <__hi0bits>:
 800ac80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ac84:	4603      	mov	r3, r0
 800ac86:	bf36      	itet	cc
 800ac88:	0403      	lslcc	r3, r0, #16
 800ac8a:	2000      	movcs	r0, #0
 800ac8c:	2010      	movcc	r0, #16
 800ac8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac92:	bf3c      	itt	cc
 800ac94:	021b      	lslcc	r3, r3, #8
 800ac96:	3008      	addcc	r0, #8
 800ac98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac9c:	bf3c      	itt	cc
 800ac9e:	011b      	lslcc	r3, r3, #4
 800aca0:	3004      	addcc	r0, #4
 800aca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aca6:	bf3c      	itt	cc
 800aca8:	009b      	lslcc	r3, r3, #2
 800acaa:	3002      	addcc	r0, #2
 800acac:	2b00      	cmp	r3, #0
 800acae:	db05      	blt.n	800acbc <__hi0bits+0x3c>
 800acb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800acb4:	f100 0001 	add.w	r0, r0, #1
 800acb8:	bf08      	it	eq
 800acba:	2020      	moveq	r0, #32
 800acbc:	4770      	bx	lr

0800acbe <__lo0bits>:
 800acbe:	6803      	ldr	r3, [r0, #0]
 800acc0:	4602      	mov	r2, r0
 800acc2:	f013 0007 	ands.w	r0, r3, #7
 800acc6:	d00b      	beq.n	800ace0 <__lo0bits+0x22>
 800acc8:	07d9      	lsls	r1, r3, #31
 800acca:	d421      	bmi.n	800ad10 <__lo0bits+0x52>
 800accc:	0798      	lsls	r0, r3, #30
 800acce:	bf49      	itett	mi
 800acd0:	085b      	lsrmi	r3, r3, #1
 800acd2:	089b      	lsrpl	r3, r3, #2
 800acd4:	2001      	movmi	r0, #1
 800acd6:	6013      	strmi	r3, [r2, #0]
 800acd8:	bf5c      	itt	pl
 800acda:	6013      	strpl	r3, [r2, #0]
 800acdc:	2002      	movpl	r0, #2
 800acde:	4770      	bx	lr
 800ace0:	b299      	uxth	r1, r3
 800ace2:	b909      	cbnz	r1, 800ace8 <__lo0bits+0x2a>
 800ace4:	0c1b      	lsrs	r3, r3, #16
 800ace6:	2010      	movs	r0, #16
 800ace8:	b2d9      	uxtb	r1, r3
 800acea:	b909      	cbnz	r1, 800acf0 <__lo0bits+0x32>
 800acec:	3008      	adds	r0, #8
 800acee:	0a1b      	lsrs	r3, r3, #8
 800acf0:	0719      	lsls	r1, r3, #28
 800acf2:	bf04      	itt	eq
 800acf4:	091b      	lsreq	r3, r3, #4
 800acf6:	3004      	addeq	r0, #4
 800acf8:	0799      	lsls	r1, r3, #30
 800acfa:	bf04      	itt	eq
 800acfc:	089b      	lsreq	r3, r3, #2
 800acfe:	3002      	addeq	r0, #2
 800ad00:	07d9      	lsls	r1, r3, #31
 800ad02:	d403      	bmi.n	800ad0c <__lo0bits+0x4e>
 800ad04:	085b      	lsrs	r3, r3, #1
 800ad06:	f100 0001 	add.w	r0, r0, #1
 800ad0a:	d003      	beq.n	800ad14 <__lo0bits+0x56>
 800ad0c:	6013      	str	r3, [r2, #0]
 800ad0e:	4770      	bx	lr
 800ad10:	2000      	movs	r0, #0
 800ad12:	4770      	bx	lr
 800ad14:	2020      	movs	r0, #32
 800ad16:	4770      	bx	lr

0800ad18 <__i2b>:
 800ad18:	b510      	push	{r4, lr}
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	2101      	movs	r1, #1
 800ad1e:	f7ff ff07 	bl	800ab30 <_Balloc>
 800ad22:	4602      	mov	r2, r0
 800ad24:	b928      	cbnz	r0, 800ad32 <__i2b+0x1a>
 800ad26:	4b05      	ldr	r3, [pc, #20]	@ (800ad3c <__i2b+0x24>)
 800ad28:	4805      	ldr	r0, [pc, #20]	@ (800ad40 <__i2b+0x28>)
 800ad2a:	f240 1145 	movw	r1, #325	@ 0x145
 800ad2e:	f000 fb63 	bl	800b3f8 <__assert_func>
 800ad32:	2301      	movs	r3, #1
 800ad34:	6144      	str	r4, [r0, #20]
 800ad36:	6103      	str	r3, [r0, #16]
 800ad38:	bd10      	pop	{r4, pc}
 800ad3a:	bf00      	nop
 800ad3c:	0800bef0 	.word	0x0800bef0
 800ad40:	0800bf12 	.word	0x0800bf12

0800ad44 <__multiply>:
 800ad44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad48:	4614      	mov	r4, r2
 800ad4a:	690a      	ldr	r2, [r1, #16]
 800ad4c:	6923      	ldr	r3, [r4, #16]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	bfa8      	it	ge
 800ad52:	4623      	movge	r3, r4
 800ad54:	460f      	mov	r7, r1
 800ad56:	bfa4      	itt	ge
 800ad58:	460c      	movge	r4, r1
 800ad5a:	461f      	movge	r7, r3
 800ad5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ad60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ad64:	68a3      	ldr	r3, [r4, #8]
 800ad66:	6861      	ldr	r1, [r4, #4]
 800ad68:	eb0a 0609 	add.w	r6, sl, r9
 800ad6c:	42b3      	cmp	r3, r6
 800ad6e:	b085      	sub	sp, #20
 800ad70:	bfb8      	it	lt
 800ad72:	3101      	addlt	r1, #1
 800ad74:	f7ff fedc 	bl	800ab30 <_Balloc>
 800ad78:	b930      	cbnz	r0, 800ad88 <__multiply+0x44>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	4b44      	ldr	r3, [pc, #272]	@ (800ae90 <__multiply+0x14c>)
 800ad7e:	4845      	ldr	r0, [pc, #276]	@ (800ae94 <__multiply+0x150>)
 800ad80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ad84:	f000 fb38 	bl	800b3f8 <__assert_func>
 800ad88:	f100 0514 	add.w	r5, r0, #20
 800ad8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad90:	462b      	mov	r3, r5
 800ad92:	2200      	movs	r2, #0
 800ad94:	4543      	cmp	r3, r8
 800ad96:	d321      	bcc.n	800addc <__multiply+0x98>
 800ad98:	f107 0114 	add.w	r1, r7, #20
 800ad9c:	f104 0214 	add.w	r2, r4, #20
 800ada0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ada4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ada8:	9302      	str	r3, [sp, #8]
 800adaa:	1b13      	subs	r3, r2, r4
 800adac:	3b15      	subs	r3, #21
 800adae:	f023 0303 	bic.w	r3, r3, #3
 800adb2:	3304      	adds	r3, #4
 800adb4:	f104 0715 	add.w	r7, r4, #21
 800adb8:	42ba      	cmp	r2, r7
 800adba:	bf38      	it	cc
 800adbc:	2304      	movcc	r3, #4
 800adbe:	9301      	str	r3, [sp, #4]
 800adc0:	9b02      	ldr	r3, [sp, #8]
 800adc2:	9103      	str	r1, [sp, #12]
 800adc4:	428b      	cmp	r3, r1
 800adc6:	d80c      	bhi.n	800ade2 <__multiply+0x9e>
 800adc8:	2e00      	cmp	r6, #0
 800adca:	dd03      	ble.n	800add4 <__multiply+0x90>
 800adcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800add0:	2b00      	cmp	r3, #0
 800add2:	d05b      	beq.n	800ae8c <__multiply+0x148>
 800add4:	6106      	str	r6, [r0, #16]
 800add6:	b005      	add	sp, #20
 800add8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800addc:	f843 2b04 	str.w	r2, [r3], #4
 800ade0:	e7d8      	b.n	800ad94 <__multiply+0x50>
 800ade2:	f8b1 a000 	ldrh.w	sl, [r1]
 800ade6:	f1ba 0f00 	cmp.w	sl, #0
 800adea:	d024      	beq.n	800ae36 <__multiply+0xf2>
 800adec:	f104 0e14 	add.w	lr, r4, #20
 800adf0:	46a9      	mov	r9, r5
 800adf2:	f04f 0c00 	mov.w	ip, #0
 800adf6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800adfa:	f8d9 3000 	ldr.w	r3, [r9]
 800adfe:	fa1f fb87 	uxth.w	fp, r7
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	fb0a 330b 	mla	r3, sl, fp, r3
 800ae08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ae0c:	f8d9 7000 	ldr.w	r7, [r9]
 800ae10:	4463      	add	r3, ip
 800ae12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae16:	fb0a c70b 	mla	r7, sl, fp, ip
 800ae1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae24:	4572      	cmp	r2, lr
 800ae26:	f849 3b04 	str.w	r3, [r9], #4
 800ae2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae2e:	d8e2      	bhi.n	800adf6 <__multiply+0xb2>
 800ae30:	9b01      	ldr	r3, [sp, #4]
 800ae32:	f845 c003 	str.w	ip, [r5, r3]
 800ae36:	9b03      	ldr	r3, [sp, #12]
 800ae38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ae3c:	3104      	adds	r1, #4
 800ae3e:	f1b9 0f00 	cmp.w	r9, #0
 800ae42:	d021      	beq.n	800ae88 <__multiply+0x144>
 800ae44:	682b      	ldr	r3, [r5, #0]
 800ae46:	f104 0c14 	add.w	ip, r4, #20
 800ae4a:	46ae      	mov	lr, r5
 800ae4c:	f04f 0a00 	mov.w	sl, #0
 800ae50:	f8bc b000 	ldrh.w	fp, [ip]
 800ae54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ae58:	fb09 770b 	mla	r7, r9, fp, r7
 800ae5c:	4457      	add	r7, sl
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae64:	f84e 3b04 	str.w	r3, [lr], #4
 800ae68:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ae6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae70:	f8be 3000 	ldrh.w	r3, [lr]
 800ae74:	fb09 330a 	mla	r3, r9, sl, r3
 800ae78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ae7c:	4562      	cmp	r2, ip
 800ae7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae82:	d8e5      	bhi.n	800ae50 <__multiply+0x10c>
 800ae84:	9f01      	ldr	r7, [sp, #4]
 800ae86:	51eb      	str	r3, [r5, r7]
 800ae88:	3504      	adds	r5, #4
 800ae8a:	e799      	b.n	800adc0 <__multiply+0x7c>
 800ae8c:	3e01      	subs	r6, #1
 800ae8e:	e79b      	b.n	800adc8 <__multiply+0x84>
 800ae90:	0800bef0 	.word	0x0800bef0
 800ae94:	0800bf12 	.word	0x0800bf12

0800ae98 <__pow5mult>:
 800ae98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae9c:	4615      	mov	r5, r2
 800ae9e:	f012 0203 	ands.w	r2, r2, #3
 800aea2:	4607      	mov	r7, r0
 800aea4:	460e      	mov	r6, r1
 800aea6:	d007      	beq.n	800aeb8 <__pow5mult+0x20>
 800aea8:	4c25      	ldr	r4, [pc, #148]	@ (800af40 <__pow5mult+0xa8>)
 800aeaa:	3a01      	subs	r2, #1
 800aeac:	2300      	movs	r3, #0
 800aeae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aeb2:	f7ff fe9f 	bl	800abf4 <__multadd>
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	10ad      	asrs	r5, r5, #2
 800aeba:	d03d      	beq.n	800af38 <__pow5mult+0xa0>
 800aebc:	69fc      	ldr	r4, [r7, #28]
 800aebe:	b97c      	cbnz	r4, 800aee0 <__pow5mult+0x48>
 800aec0:	2010      	movs	r0, #16
 800aec2:	f7ff fcd3 	bl	800a86c <malloc>
 800aec6:	4602      	mov	r2, r0
 800aec8:	61f8      	str	r0, [r7, #28]
 800aeca:	b928      	cbnz	r0, 800aed8 <__pow5mult+0x40>
 800aecc:	4b1d      	ldr	r3, [pc, #116]	@ (800af44 <__pow5mult+0xac>)
 800aece:	481e      	ldr	r0, [pc, #120]	@ (800af48 <__pow5mult+0xb0>)
 800aed0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aed4:	f000 fa90 	bl	800b3f8 <__assert_func>
 800aed8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aedc:	6004      	str	r4, [r0, #0]
 800aede:	60c4      	str	r4, [r0, #12]
 800aee0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aee4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aee8:	b94c      	cbnz	r4, 800aefe <__pow5mult+0x66>
 800aeea:	f240 2171 	movw	r1, #625	@ 0x271
 800aeee:	4638      	mov	r0, r7
 800aef0:	f7ff ff12 	bl	800ad18 <__i2b>
 800aef4:	2300      	movs	r3, #0
 800aef6:	f8c8 0008 	str.w	r0, [r8, #8]
 800aefa:	4604      	mov	r4, r0
 800aefc:	6003      	str	r3, [r0, #0]
 800aefe:	f04f 0900 	mov.w	r9, #0
 800af02:	07eb      	lsls	r3, r5, #31
 800af04:	d50a      	bpl.n	800af1c <__pow5mult+0x84>
 800af06:	4631      	mov	r1, r6
 800af08:	4622      	mov	r2, r4
 800af0a:	4638      	mov	r0, r7
 800af0c:	f7ff ff1a 	bl	800ad44 <__multiply>
 800af10:	4631      	mov	r1, r6
 800af12:	4680      	mov	r8, r0
 800af14:	4638      	mov	r0, r7
 800af16:	f7ff fe4b 	bl	800abb0 <_Bfree>
 800af1a:	4646      	mov	r6, r8
 800af1c:	106d      	asrs	r5, r5, #1
 800af1e:	d00b      	beq.n	800af38 <__pow5mult+0xa0>
 800af20:	6820      	ldr	r0, [r4, #0]
 800af22:	b938      	cbnz	r0, 800af34 <__pow5mult+0x9c>
 800af24:	4622      	mov	r2, r4
 800af26:	4621      	mov	r1, r4
 800af28:	4638      	mov	r0, r7
 800af2a:	f7ff ff0b 	bl	800ad44 <__multiply>
 800af2e:	6020      	str	r0, [r4, #0]
 800af30:	f8c0 9000 	str.w	r9, [r0]
 800af34:	4604      	mov	r4, r0
 800af36:	e7e4      	b.n	800af02 <__pow5mult+0x6a>
 800af38:	4630      	mov	r0, r6
 800af3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af3e:	bf00      	nop
 800af40:	0800bf6c 	.word	0x0800bf6c
 800af44:	0800be81 	.word	0x0800be81
 800af48:	0800bf12 	.word	0x0800bf12

0800af4c <__lshift>:
 800af4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af50:	460c      	mov	r4, r1
 800af52:	6849      	ldr	r1, [r1, #4]
 800af54:	6923      	ldr	r3, [r4, #16]
 800af56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af5a:	68a3      	ldr	r3, [r4, #8]
 800af5c:	4607      	mov	r7, r0
 800af5e:	4691      	mov	r9, r2
 800af60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af64:	f108 0601 	add.w	r6, r8, #1
 800af68:	42b3      	cmp	r3, r6
 800af6a:	db0b      	blt.n	800af84 <__lshift+0x38>
 800af6c:	4638      	mov	r0, r7
 800af6e:	f7ff fddf 	bl	800ab30 <_Balloc>
 800af72:	4605      	mov	r5, r0
 800af74:	b948      	cbnz	r0, 800af8a <__lshift+0x3e>
 800af76:	4602      	mov	r2, r0
 800af78:	4b28      	ldr	r3, [pc, #160]	@ (800b01c <__lshift+0xd0>)
 800af7a:	4829      	ldr	r0, [pc, #164]	@ (800b020 <__lshift+0xd4>)
 800af7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800af80:	f000 fa3a 	bl	800b3f8 <__assert_func>
 800af84:	3101      	adds	r1, #1
 800af86:	005b      	lsls	r3, r3, #1
 800af88:	e7ee      	b.n	800af68 <__lshift+0x1c>
 800af8a:	2300      	movs	r3, #0
 800af8c:	f100 0114 	add.w	r1, r0, #20
 800af90:	f100 0210 	add.w	r2, r0, #16
 800af94:	4618      	mov	r0, r3
 800af96:	4553      	cmp	r3, sl
 800af98:	db33      	blt.n	800b002 <__lshift+0xb6>
 800af9a:	6920      	ldr	r0, [r4, #16]
 800af9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afa0:	f104 0314 	add.w	r3, r4, #20
 800afa4:	f019 091f 	ands.w	r9, r9, #31
 800afa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afb0:	d02b      	beq.n	800b00a <__lshift+0xbe>
 800afb2:	f1c9 0e20 	rsb	lr, r9, #32
 800afb6:	468a      	mov	sl, r1
 800afb8:	2200      	movs	r2, #0
 800afba:	6818      	ldr	r0, [r3, #0]
 800afbc:	fa00 f009 	lsl.w	r0, r0, r9
 800afc0:	4310      	orrs	r0, r2
 800afc2:	f84a 0b04 	str.w	r0, [sl], #4
 800afc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800afca:	459c      	cmp	ip, r3
 800afcc:	fa22 f20e 	lsr.w	r2, r2, lr
 800afd0:	d8f3      	bhi.n	800afba <__lshift+0x6e>
 800afd2:	ebac 0304 	sub.w	r3, ip, r4
 800afd6:	3b15      	subs	r3, #21
 800afd8:	f023 0303 	bic.w	r3, r3, #3
 800afdc:	3304      	adds	r3, #4
 800afde:	f104 0015 	add.w	r0, r4, #21
 800afe2:	4584      	cmp	ip, r0
 800afe4:	bf38      	it	cc
 800afe6:	2304      	movcc	r3, #4
 800afe8:	50ca      	str	r2, [r1, r3]
 800afea:	b10a      	cbz	r2, 800aff0 <__lshift+0xa4>
 800afec:	f108 0602 	add.w	r6, r8, #2
 800aff0:	3e01      	subs	r6, #1
 800aff2:	4638      	mov	r0, r7
 800aff4:	612e      	str	r6, [r5, #16]
 800aff6:	4621      	mov	r1, r4
 800aff8:	f7ff fdda 	bl	800abb0 <_Bfree>
 800affc:	4628      	mov	r0, r5
 800affe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b002:	f842 0f04 	str.w	r0, [r2, #4]!
 800b006:	3301      	adds	r3, #1
 800b008:	e7c5      	b.n	800af96 <__lshift+0x4a>
 800b00a:	3904      	subs	r1, #4
 800b00c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b010:	f841 2f04 	str.w	r2, [r1, #4]!
 800b014:	459c      	cmp	ip, r3
 800b016:	d8f9      	bhi.n	800b00c <__lshift+0xc0>
 800b018:	e7ea      	b.n	800aff0 <__lshift+0xa4>
 800b01a:	bf00      	nop
 800b01c:	0800bef0 	.word	0x0800bef0
 800b020:	0800bf12 	.word	0x0800bf12

0800b024 <__mcmp>:
 800b024:	690a      	ldr	r2, [r1, #16]
 800b026:	4603      	mov	r3, r0
 800b028:	6900      	ldr	r0, [r0, #16]
 800b02a:	1a80      	subs	r0, r0, r2
 800b02c:	b530      	push	{r4, r5, lr}
 800b02e:	d10e      	bne.n	800b04e <__mcmp+0x2a>
 800b030:	3314      	adds	r3, #20
 800b032:	3114      	adds	r1, #20
 800b034:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b038:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b03c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b040:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b044:	4295      	cmp	r5, r2
 800b046:	d003      	beq.n	800b050 <__mcmp+0x2c>
 800b048:	d205      	bcs.n	800b056 <__mcmp+0x32>
 800b04a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b04e:	bd30      	pop	{r4, r5, pc}
 800b050:	42a3      	cmp	r3, r4
 800b052:	d3f3      	bcc.n	800b03c <__mcmp+0x18>
 800b054:	e7fb      	b.n	800b04e <__mcmp+0x2a>
 800b056:	2001      	movs	r0, #1
 800b058:	e7f9      	b.n	800b04e <__mcmp+0x2a>
	...

0800b05c <__mdiff>:
 800b05c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b060:	4689      	mov	r9, r1
 800b062:	4606      	mov	r6, r0
 800b064:	4611      	mov	r1, r2
 800b066:	4648      	mov	r0, r9
 800b068:	4614      	mov	r4, r2
 800b06a:	f7ff ffdb 	bl	800b024 <__mcmp>
 800b06e:	1e05      	subs	r5, r0, #0
 800b070:	d112      	bne.n	800b098 <__mdiff+0x3c>
 800b072:	4629      	mov	r1, r5
 800b074:	4630      	mov	r0, r6
 800b076:	f7ff fd5b 	bl	800ab30 <_Balloc>
 800b07a:	4602      	mov	r2, r0
 800b07c:	b928      	cbnz	r0, 800b08a <__mdiff+0x2e>
 800b07e:	4b3f      	ldr	r3, [pc, #252]	@ (800b17c <__mdiff+0x120>)
 800b080:	f240 2137 	movw	r1, #567	@ 0x237
 800b084:	483e      	ldr	r0, [pc, #248]	@ (800b180 <__mdiff+0x124>)
 800b086:	f000 f9b7 	bl	800b3f8 <__assert_func>
 800b08a:	2301      	movs	r3, #1
 800b08c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b090:	4610      	mov	r0, r2
 800b092:	b003      	add	sp, #12
 800b094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b098:	bfbc      	itt	lt
 800b09a:	464b      	movlt	r3, r9
 800b09c:	46a1      	movlt	r9, r4
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b0a4:	bfba      	itte	lt
 800b0a6:	461c      	movlt	r4, r3
 800b0a8:	2501      	movlt	r5, #1
 800b0aa:	2500      	movge	r5, #0
 800b0ac:	f7ff fd40 	bl	800ab30 <_Balloc>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	b918      	cbnz	r0, 800b0bc <__mdiff+0x60>
 800b0b4:	4b31      	ldr	r3, [pc, #196]	@ (800b17c <__mdiff+0x120>)
 800b0b6:	f240 2145 	movw	r1, #581	@ 0x245
 800b0ba:	e7e3      	b.n	800b084 <__mdiff+0x28>
 800b0bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b0c0:	6926      	ldr	r6, [r4, #16]
 800b0c2:	60c5      	str	r5, [r0, #12]
 800b0c4:	f109 0310 	add.w	r3, r9, #16
 800b0c8:	f109 0514 	add.w	r5, r9, #20
 800b0cc:	f104 0e14 	add.w	lr, r4, #20
 800b0d0:	f100 0b14 	add.w	fp, r0, #20
 800b0d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b0d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b0dc:	9301      	str	r3, [sp, #4]
 800b0de:	46d9      	mov	r9, fp
 800b0e0:	f04f 0c00 	mov.w	ip, #0
 800b0e4:	9b01      	ldr	r3, [sp, #4]
 800b0e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b0ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b0ee:	9301      	str	r3, [sp, #4]
 800b0f0:	fa1f f38a 	uxth.w	r3, sl
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	b283      	uxth	r3, r0
 800b0f8:	1acb      	subs	r3, r1, r3
 800b0fa:	0c00      	lsrs	r0, r0, #16
 800b0fc:	4463      	add	r3, ip
 800b0fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b102:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b106:	b29b      	uxth	r3, r3
 800b108:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b10c:	4576      	cmp	r6, lr
 800b10e:	f849 3b04 	str.w	r3, [r9], #4
 800b112:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b116:	d8e5      	bhi.n	800b0e4 <__mdiff+0x88>
 800b118:	1b33      	subs	r3, r6, r4
 800b11a:	3b15      	subs	r3, #21
 800b11c:	f023 0303 	bic.w	r3, r3, #3
 800b120:	3415      	adds	r4, #21
 800b122:	3304      	adds	r3, #4
 800b124:	42a6      	cmp	r6, r4
 800b126:	bf38      	it	cc
 800b128:	2304      	movcc	r3, #4
 800b12a:	441d      	add	r5, r3
 800b12c:	445b      	add	r3, fp
 800b12e:	461e      	mov	r6, r3
 800b130:	462c      	mov	r4, r5
 800b132:	4544      	cmp	r4, r8
 800b134:	d30e      	bcc.n	800b154 <__mdiff+0xf8>
 800b136:	f108 0103 	add.w	r1, r8, #3
 800b13a:	1b49      	subs	r1, r1, r5
 800b13c:	f021 0103 	bic.w	r1, r1, #3
 800b140:	3d03      	subs	r5, #3
 800b142:	45a8      	cmp	r8, r5
 800b144:	bf38      	it	cc
 800b146:	2100      	movcc	r1, #0
 800b148:	440b      	add	r3, r1
 800b14a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b14e:	b191      	cbz	r1, 800b176 <__mdiff+0x11a>
 800b150:	6117      	str	r7, [r2, #16]
 800b152:	e79d      	b.n	800b090 <__mdiff+0x34>
 800b154:	f854 1b04 	ldr.w	r1, [r4], #4
 800b158:	46e6      	mov	lr, ip
 800b15a:	0c08      	lsrs	r0, r1, #16
 800b15c:	fa1c fc81 	uxtah	ip, ip, r1
 800b160:	4471      	add	r1, lr
 800b162:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b166:	b289      	uxth	r1, r1
 800b168:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b16c:	f846 1b04 	str.w	r1, [r6], #4
 800b170:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b174:	e7dd      	b.n	800b132 <__mdiff+0xd6>
 800b176:	3f01      	subs	r7, #1
 800b178:	e7e7      	b.n	800b14a <__mdiff+0xee>
 800b17a:	bf00      	nop
 800b17c:	0800bef0 	.word	0x0800bef0
 800b180:	0800bf12 	.word	0x0800bf12

0800b184 <__d2b>:
 800b184:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b188:	460f      	mov	r7, r1
 800b18a:	2101      	movs	r1, #1
 800b18c:	ec59 8b10 	vmov	r8, r9, d0
 800b190:	4616      	mov	r6, r2
 800b192:	f7ff fccd 	bl	800ab30 <_Balloc>
 800b196:	4604      	mov	r4, r0
 800b198:	b930      	cbnz	r0, 800b1a8 <__d2b+0x24>
 800b19a:	4602      	mov	r2, r0
 800b19c:	4b23      	ldr	r3, [pc, #140]	@ (800b22c <__d2b+0xa8>)
 800b19e:	4824      	ldr	r0, [pc, #144]	@ (800b230 <__d2b+0xac>)
 800b1a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b1a4:	f000 f928 	bl	800b3f8 <__assert_func>
 800b1a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b1ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1b0:	b10d      	cbz	r5, 800b1b6 <__d2b+0x32>
 800b1b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1b6:	9301      	str	r3, [sp, #4]
 800b1b8:	f1b8 0300 	subs.w	r3, r8, #0
 800b1bc:	d023      	beq.n	800b206 <__d2b+0x82>
 800b1be:	4668      	mov	r0, sp
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	f7ff fd7c 	bl	800acbe <__lo0bits>
 800b1c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b1ca:	b1d0      	cbz	r0, 800b202 <__d2b+0x7e>
 800b1cc:	f1c0 0320 	rsb	r3, r0, #32
 800b1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d4:	430b      	orrs	r3, r1
 800b1d6:	40c2      	lsrs	r2, r0
 800b1d8:	6163      	str	r3, [r4, #20]
 800b1da:	9201      	str	r2, [sp, #4]
 800b1dc:	9b01      	ldr	r3, [sp, #4]
 800b1de:	61a3      	str	r3, [r4, #24]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	bf0c      	ite	eq
 800b1e4:	2201      	moveq	r2, #1
 800b1e6:	2202      	movne	r2, #2
 800b1e8:	6122      	str	r2, [r4, #16]
 800b1ea:	b1a5      	cbz	r5, 800b216 <__d2b+0x92>
 800b1ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b1f0:	4405      	add	r5, r0
 800b1f2:	603d      	str	r5, [r7, #0]
 800b1f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b1f8:	6030      	str	r0, [r6, #0]
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	b003      	add	sp, #12
 800b1fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b202:	6161      	str	r1, [r4, #20]
 800b204:	e7ea      	b.n	800b1dc <__d2b+0x58>
 800b206:	a801      	add	r0, sp, #4
 800b208:	f7ff fd59 	bl	800acbe <__lo0bits>
 800b20c:	9b01      	ldr	r3, [sp, #4]
 800b20e:	6163      	str	r3, [r4, #20]
 800b210:	3020      	adds	r0, #32
 800b212:	2201      	movs	r2, #1
 800b214:	e7e8      	b.n	800b1e8 <__d2b+0x64>
 800b216:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b21a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b21e:	6038      	str	r0, [r7, #0]
 800b220:	6918      	ldr	r0, [r3, #16]
 800b222:	f7ff fd2d 	bl	800ac80 <__hi0bits>
 800b226:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b22a:	e7e5      	b.n	800b1f8 <__d2b+0x74>
 800b22c:	0800bef0 	.word	0x0800bef0
 800b230:	0800bf12 	.word	0x0800bf12

0800b234 <__sread>:
 800b234:	b510      	push	{r4, lr}
 800b236:	460c      	mov	r4, r1
 800b238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b23c:	f000 f8a8 	bl	800b390 <_read_r>
 800b240:	2800      	cmp	r0, #0
 800b242:	bfab      	itete	ge
 800b244:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b246:	89a3      	ldrhlt	r3, [r4, #12]
 800b248:	181b      	addge	r3, r3, r0
 800b24a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b24e:	bfac      	ite	ge
 800b250:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b252:	81a3      	strhlt	r3, [r4, #12]
 800b254:	bd10      	pop	{r4, pc}

0800b256 <__swrite>:
 800b256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b25a:	461f      	mov	r7, r3
 800b25c:	898b      	ldrh	r3, [r1, #12]
 800b25e:	05db      	lsls	r3, r3, #23
 800b260:	4605      	mov	r5, r0
 800b262:	460c      	mov	r4, r1
 800b264:	4616      	mov	r6, r2
 800b266:	d505      	bpl.n	800b274 <__swrite+0x1e>
 800b268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b26c:	2302      	movs	r3, #2
 800b26e:	2200      	movs	r2, #0
 800b270:	f000 f87c 	bl	800b36c <_lseek_r>
 800b274:	89a3      	ldrh	r3, [r4, #12]
 800b276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b27a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b27e:	81a3      	strh	r3, [r4, #12]
 800b280:	4632      	mov	r2, r6
 800b282:	463b      	mov	r3, r7
 800b284:	4628      	mov	r0, r5
 800b286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b28a:	f000 b8a3 	b.w	800b3d4 <_write_r>

0800b28e <__sseek>:
 800b28e:	b510      	push	{r4, lr}
 800b290:	460c      	mov	r4, r1
 800b292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b296:	f000 f869 	bl	800b36c <_lseek_r>
 800b29a:	1c43      	adds	r3, r0, #1
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	bf15      	itete	ne
 800b2a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b2a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b2a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b2aa:	81a3      	strheq	r3, [r4, #12]
 800b2ac:	bf18      	it	ne
 800b2ae:	81a3      	strhne	r3, [r4, #12]
 800b2b0:	bd10      	pop	{r4, pc}

0800b2b2 <__sclose>:
 800b2b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b6:	f000 b849 	b.w	800b34c <_close_r>

0800b2ba <_realloc_r>:
 800b2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2be:	4680      	mov	r8, r0
 800b2c0:	4615      	mov	r5, r2
 800b2c2:	460c      	mov	r4, r1
 800b2c4:	b921      	cbnz	r1, 800b2d0 <_realloc_r+0x16>
 800b2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ca:	4611      	mov	r1, r2
 800b2cc:	f7ff baf8 	b.w	800a8c0 <_malloc_r>
 800b2d0:	b92a      	cbnz	r2, 800b2de <_realloc_r+0x24>
 800b2d2:	f7ff f929 	bl	800a528 <_free_r>
 800b2d6:	2400      	movs	r4, #0
 800b2d8:	4620      	mov	r0, r4
 800b2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2de:	f000 f8cf 	bl	800b480 <_malloc_usable_size_r>
 800b2e2:	4285      	cmp	r5, r0
 800b2e4:	4606      	mov	r6, r0
 800b2e6:	d802      	bhi.n	800b2ee <_realloc_r+0x34>
 800b2e8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b2ec:	d8f4      	bhi.n	800b2d8 <_realloc_r+0x1e>
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	4640      	mov	r0, r8
 800b2f2:	f7ff fae5 	bl	800a8c0 <_malloc_r>
 800b2f6:	4607      	mov	r7, r0
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d0ec      	beq.n	800b2d6 <_realloc_r+0x1c>
 800b2fc:	42b5      	cmp	r5, r6
 800b2fe:	462a      	mov	r2, r5
 800b300:	4621      	mov	r1, r4
 800b302:	bf28      	it	cs
 800b304:	4632      	movcs	r2, r6
 800b306:	f7fe fab4 	bl	8009872 <memcpy>
 800b30a:	4621      	mov	r1, r4
 800b30c:	4640      	mov	r0, r8
 800b30e:	f7ff f90b 	bl	800a528 <_free_r>
 800b312:	463c      	mov	r4, r7
 800b314:	e7e0      	b.n	800b2d8 <_realloc_r+0x1e>

0800b316 <memmove>:
 800b316:	4288      	cmp	r0, r1
 800b318:	b510      	push	{r4, lr}
 800b31a:	eb01 0402 	add.w	r4, r1, r2
 800b31e:	d902      	bls.n	800b326 <memmove+0x10>
 800b320:	4284      	cmp	r4, r0
 800b322:	4623      	mov	r3, r4
 800b324:	d807      	bhi.n	800b336 <memmove+0x20>
 800b326:	1e43      	subs	r3, r0, #1
 800b328:	42a1      	cmp	r1, r4
 800b32a:	d008      	beq.n	800b33e <memmove+0x28>
 800b32c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b330:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b334:	e7f8      	b.n	800b328 <memmove+0x12>
 800b336:	4402      	add	r2, r0
 800b338:	4601      	mov	r1, r0
 800b33a:	428a      	cmp	r2, r1
 800b33c:	d100      	bne.n	800b340 <memmove+0x2a>
 800b33e:	bd10      	pop	{r4, pc}
 800b340:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b344:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b348:	e7f7      	b.n	800b33a <memmove+0x24>
	...

0800b34c <_close_r>:
 800b34c:	b538      	push	{r3, r4, r5, lr}
 800b34e:	4d06      	ldr	r5, [pc, #24]	@ (800b368 <_close_r+0x1c>)
 800b350:	2300      	movs	r3, #0
 800b352:	4604      	mov	r4, r0
 800b354:	4608      	mov	r0, r1
 800b356:	602b      	str	r3, [r5, #0]
 800b358:	f7f6 fb0b 	bl	8001972 <_close>
 800b35c:	1c43      	adds	r3, r0, #1
 800b35e:	d102      	bne.n	800b366 <_close_r+0x1a>
 800b360:	682b      	ldr	r3, [r5, #0]
 800b362:	b103      	cbz	r3, 800b366 <_close_r+0x1a>
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	bd38      	pop	{r3, r4, r5, pc}
 800b368:	20004790 	.word	0x20004790

0800b36c <_lseek_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4d07      	ldr	r5, [pc, #28]	@ (800b38c <_lseek_r+0x20>)
 800b370:	4604      	mov	r4, r0
 800b372:	4608      	mov	r0, r1
 800b374:	4611      	mov	r1, r2
 800b376:	2200      	movs	r2, #0
 800b378:	602a      	str	r2, [r5, #0]
 800b37a:	461a      	mov	r2, r3
 800b37c:	f7f6 fb20 	bl	80019c0 <_lseek>
 800b380:	1c43      	adds	r3, r0, #1
 800b382:	d102      	bne.n	800b38a <_lseek_r+0x1e>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	b103      	cbz	r3, 800b38a <_lseek_r+0x1e>
 800b388:	6023      	str	r3, [r4, #0]
 800b38a:	bd38      	pop	{r3, r4, r5, pc}
 800b38c:	20004790 	.word	0x20004790

0800b390 <_read_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4d07      	ldr	r5, [pc, #28]	@ (800b3b0 <_read_r+0x20>)
 800b394:	4604      	mov	r4, r0
 800b396:	4608      	mov	r0, r1
 800b398:	4611      	mov	r1, r2
 800b39a:	2200      	movs	r2, #0
 800b39c:	602a      	str	r2, [r5, #0]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	f7f6 faae 	bl	8001900 <_read>
 800b3a4:	1c43      	adds	r3, r0, #1
 800b3a6:	d102      	bne.n	800b3ae <_read_r+0x1e>
 800b3a8:	682b      	ldr	r3, [r5, #0]
 800b3aa:	b103      	cbz	r3, 800b3ae <_read_r+0x1e>
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	20004790 	.word	0x20004790

0800b3b4 <_sbrk_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4d06      	ldr	r5, [pc, #24]	@ (800b3d0 <_sbrk_r+0x1c>)
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	4608      	mov	r0, r1
 800b3be:	602b      	str	r3, [r5, #0]
 800b3c0:	f7f6 fb0c 	bl	80019dc <_sbrk>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d102      	bne.n	800b3ce <_sbrk_r+0x1a>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	b103      	cbz	r3, 800b3ce <_sbrk_r+0x1a>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	20004790 	.word	0x20004790

0800b3d4 <_write_r>:
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	4d07      	ldr	r5, [pc, #28]	@ (800b3f4 <_write_r+0x20>)
 800b3d8:	4604      	mov	r4, r0
 800b3da:	4608      	mov	r0, r1
 800b3dc:	4611      	mov	r1, r2
 800b3de:	2200      	movs	r2, #0
 800b3e0:	602a      	str	r2, [r5, #0]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	f7f6 faa9 	bl	800193a <_write>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d102      	bne.n	800b3f2 <_write_r+0x1e>
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	b103      	cbz	r3, 800b3f2 <_write_r+0x1e>
 800b3f0:	6023      	str	r3, [r4, #0]
 800b3f2:	bd38      	pop	{r3, r4, r5, pc}
 800b3f4:	20004790 	.word	0x20004790

0800b3f8 <__assert_func>:
 800b3f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3fa:	4614      	mov	r4, r2
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	4b09      	ldr	r3, [pc, #36]	@ (800b424 <__assert_func+0x2c>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4605      	mov	r5, r0
 800b404:	68d8      	ldr	r0, [r3, #12]
 800b406:	b954      	cbnz	r4, 800b41e <__assert_func+0x26>
 800b408:	4b07      	ldr	r3, [pc, #28]	@ (800b428 <__assert_func+0x30>)
 800b40a:	461c      	mov	r4, r3
 800b40c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b410:	9100      	str	r1, [sp, #0]
 800b412:	462b      	mov	r3, r5
 800b414:	4905      	ldr	r1, [pc, #20]	@ (800b42c <__assert_func+0x34>)
 800b416:	f000 f83b 	bl	800b490 <fiprintf>
 800b41a:	f000 f858 	bl	800b4ce <abort>
 800b41e:	4b04      	ldr	r3, [pc, #16]	@ (800b430 <__assert_func+0x38>)
 800b420:	e7f4      	b.n	800b40c <__assert_func+0x14>
 800b422:	bf00      	nop
 800b424:	20000028 	.word	0x20000028
 800b428:	0800c1ae 	.word	0x0800c1ae
 800b42c:	0800c180 	.word	0x0800c180
 800b430:	0800c173 	.word	0x0800c173

0800b434 <_calloc_r>:
 800b434:	b570      	push	{r4, r5, r6, lr}
 800b436:	fba1 5402 	umull	r5, r4, r1, r2
 800b43a:	b93c      	cbnz	r4, 800b44c <_calloc_r+0x18>
 800b43c:	4629      	mov	r1, r5
 800b43e:	f7ff fa3f 	bl	800a8c0 <_malloc_r>
 800b442:	4606      	mov	r6, r0
 800b444:	b928      	cbnz	r0, 800b452 <_calloc_r+0x1e>
 800b446:	2600      	movs	r6, #0
 800b448:	4630      	mov	r0, r6
 800b44a:	bd70      	pop	{r4, r5, r6, pc}
 800b44c:	220c      	movs	r2, #12
 800b44e:	6002      	str	r2, [r0, #0]
 800b450:	e7f9      	b.n	800b446 <_calloc_r+0x12>
 800b452:	462a      	mov	r2, r5
 800b454:	4621      	mov	r1, r4
 800b456:	f7fe f97d 	bl	8009754 <memset>
 800b45a:	e7f5      	b.n	800b448 <_calloc_r+0x14>

0800b45c <__ascii_mbtowc>:
 800b45c:	b082      	sub	sp, #8
 800b45e:	b901      	cbnz	r1, 800b462 <__ascii_mbtowc+0x6>
 800b460:	a901      	add	r1, sp, #4
 800b462:	b142      	cbz	r2, 800b476 <__ascii_mbtowc+0x1a>
 800b464:	b14b      	cbz	r3, 800b47a <__ascii_mbtowc+0x1e>
 800b466:	7813      	ldrb	r3, [r2, #0]
 800b468:	600b      	str	r3, [r1, #0]
 800b46a:	7812      	ldrb	r2, [r2, #0]
 800b46c:	1e10      	subs	r0, r2, #0
 800b46e:	bf18      	it	ne
 800b470:	2001      	movne	r0, #1
 800b472:	b002      	add	sp, #8
 800b474:	4770      	bx	lr
 800b476:	4610      	mov	r0, r2
 800b478:	e7fb      	b.n	800b472 <__ascii_mbtowc+0x16>
 800b47a:	f06f 0001 	mvn.w	r0, #1
 800b47e:	e7f8      	b.n	800b472 <__ascii_mbtowc+0x16>

0800b480 <_malloc_usable_size_r>:
 800b480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b484:	1f18      	subs	r0, r3, #4
 800b486:	2b00      	cmp	r3, #0
 800b488:	bfbc      	itt	lt
 800b48a:	580b      	ldrlt	r3, [r1, r0]
 800b48c:	18c0      	addlt	r0, r0, r3
 800b48e:	4770      	bx	lr

0800b490 <fiprintf>:
 800b490:	b40e      	push	{r1, r2, r3}
 800b492:	b503      	push	{r0, r1, lr}
 800b494:	4601      	mov	r1, r0
 800b496:	ab03      	add	r3, sp, #12
 800b498:	4805      	ldr	r0, [pc, #20]	@ (800b4b0 <fiprintf+0x20>)
 800b49a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b49e:	6800      	ldr	r0, [r0, #0]
 800b4a0:	9301      	str	r3, [sp, #4]
 800b4a2:	f000 f845 	bl	800b530 <_vfiprintf_r>
 800b4a6:	b002      	add	sp, #8
 800b4a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4ac:	b003      	add	sp, #12
 800b4ae:	4770      	bx	lr
 800b4b0:	20000028 	.word	0x20000028

0800b4b4 <__ascii_wctomb>:
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	4608      	mov	r0, r1
 800b4b8:	b141      	cbz	r1, 800b4cc <__ascii_wctomb+0x18>
 800b4ba:	2aff      	cmp	r2, #255	@ 0xff
 800b4bc:	d904      	bls.n	800b4c8 <__ascii_wctomb+0x14>
 800b4be:	228a      	movs	r2, #138	@ 0x8a
 800b4c0:	601a      	str	r2, [r3, #0]
 800b4c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4c6:	4770      	bx	lr
 800b4c8:	700a      	strb	r2, [r1, #0]
 800b4ca:	2001      	movs	r0, #1
 800b4cc:	4770      	bx	lr

0800b4ce <abort>:
 800b4ce:	b508      	push	{r3, lr}
 800b4d0:	2006      	movs	r0, #6
 800b4d2:	f000 fa85 	bl	800b9e0 <raise>
 800b4d6:	2001      	movs	r0, #1
 800b4d8:	f7f6 fa07 	bl	80018ea <_exit>

0800b4dc <__sfputc_r>:
 800b4dc:	6893      	ldr	r3, [r2, #8]
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	b410      	push	{r4}
 800b4e4:	6093      	str	r3, [r2, #8]
 800b4e6:	da08      	bge.n	800b4fa <__sfputc_r+0x1e>
 800b4e8:	6994      	ldr	r4, [r2, #24]
 800b4ea:	42a3      	cmp	r3, r4
 800b4ec:	db01      	blt.n	800b4f2 <__sfputc_r+0x16>
 800b4ee:	290a      	cmp	r1, #10
 800b4f0:	d103      	bne.n	800b4fa <__sfputc_r+0x1e>
 800b4f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4f6:	f000 b933 	b.w	800b760 <__swbuf_r>
 800b4fa:	6813      	ldr	r3, [r2, #0]
 800b4fc:	1c58      	adds	r0, r3, #1
 800b4fe:	6010      	str	r0, [r2, #0]
 800b500:	7019      	strb	r1, [r3, #0]
 800b502:	4608      	mov	r0, r1
 800b504:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b508:	4770      	bx	lr

0800b50a <__sfputs_r>:
 800b50a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50c:	4606      	mov	r6, r0
 800b50e:	460f      	mov	r7, r1
 800b510:	4614      	mov	r4, r2
 800b512:	18d5      	adds	r5, r2, r3
 800b514:	42ac      	cmp	r4, r5
 800b516:	d101      	bne.n	800b51c <__sfputs_r+0x12>
 800b518:	2000      	movs	r0, #0
 800b51a:	e007      	b.n	800b52c <__sfputs_r+0x22>
 800b51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b520:	463a      	mov	r2, r7
 800b522:	4630      	mov	r0, r6
 800b524:	f7ff ffda 	bl	800b4dc <__sfputc_r>
 800b528:	1c43      	adds	r3, r0, #1
 800b52a:	d1f3      	bne.n	800b514 <__sfputs_r+0xa>
 800b52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b530 <_vfiprintf_r>:
 800b530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b534:	460d      	mov	r5, r1
 800b536:	b09d      	sub	sp, #116	@ 0x74
 800b538:	4614      	mov	r4, r2
 800b53a:	4698      	mov	r8, r3
 800b53c:	4606      	mov	r6, r0
 800b53e:	b118      	cbz	r0, 800b548 <_vfiprintf_r+0x18>
 800b540:	6a03      	ldr	r3, [r0, #32]
 800b542:	b90b      	cbnz	r3, 800b548 <_vfiprintf_r+0x18>
 800b544:	f7fe f8d0 	bl	80096e8 <__sinit>
 800b548:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b54a:	07d9      	lsls	r1, r3, #31
 800b54c:	d405      	bmi.n	800b55a <_vfiprintf_r+0x2a>
 800b54e:	89ab      	ldrh	r3, [r5, #12]
 800b550:	059a      	lsls	r2, r3, #22
 800b552:	d402      	bmi.n	800b55a <_vfiprintf_r+0x2a>
 800b554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b556:	f7fe f98a 	bl	800986e <__retarget_lock_acquire_recursive>
 800b55a:	89ab      	ldrh	r3, [r5, #12]
 800b55c:	071b      	lsls	r3, r3, #28
 800b55e:	d501      	bpl.n	800b564 <_vfiprintf_r+0x34>
 800b560:	692b      	ldr	r3, [r5, #16]
 800b562:	b99b      	cbnz	r3, 800b58c <_vfiprintf_r+0x5c>
 800b564:	4629      	mov	r1, r5
 800b566:	4630      	mov	r0, r6
 800b568:	f000 f938 	bl	800b7dc <__swsetup_r>
 800b56c:	b170      	cbz	r0, 800b58c <_vfiprintf_r+0x5c>
 800b56e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b570:	07dc      	lsls	r4, r3, #31
 800b572:	d504      	bpl.n	800b57e <_vfiprintf_r+0x4e>
 800b574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b578:	b01d      	add	sp, #116	@ 0x74
 800b57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b57e:	89ab      	ldrh	r3, [r5, #12]
 800b580:	0598      	lsls	r0, r3, #22
 800b582:	d4f7      	bmi.n	800b574 <_vfiprintf_r+0x44>
 800b584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b586:	f7fe f973 	bl	8009870 <__retarget_lock_release_recursive>
 800b58a:	e7f3      	b.n	800b574 <_vfiprintf_r+0x44>
 800b58c:	2300      	movs	r3, #0
 800b58e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b590:	2320      	movs	r3, #32
 800b592:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b596:	f8cd 800c 	str.w	r8, [sp, #12]
 800b59a:	2330      	movs	r3, #48	@ 0x30
 800b59c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b74c <_vfiprintf_r+0x21c>
 800b5a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5a4:	f04f 0901 	mov.w	r9, #1
 800b5a8:	4623      	mov	r3, r4
 800b5aa:	469a      	mov	sl, r3
 800b5ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5b0:	b10a      	cbz	r2, 800b5b6 <_vfiprintf_r+0x86>
 800b5b2:	2a25      	cmp	r2, #37	@ 0x25
 800b5b4:	d1f9      	bne.n	800b5aa <_vfiprintf_r+0x7a>
 800b5b6:	ebba 0b04 	subs.w	fp, sl, r4
 800b5ba:	d00b      	beq.n	800b5d4 <_vfiprintf_r+0xa4>
 800b5bc:	465b      	mov	r3, fp
 800b5be:	4622      	mov	r2, r4
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	f7ff ffa1 	bl	800b50a <__sfputs_r>
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	f000 80a7 	beq.w	800b71c <_vfiprintf_r+0x1ec>
 800b5ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5d0:	445a      	add	r2, fp
 800b5d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f000 809f 	beq.w	800b71c <_vfiprintf_r+0x1ec>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b5e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5e8:	f10a 0a01 	add.w	sl, sl, #1
 800b5ec:	9304      	str	r3, [sp, #16]
 800b5ee:	9307      	str	r3, [sp, #28]
 800b5f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5f6:	4654      	mov	r4, sl
 800b5f8:	2205      	movs	r2, #5
 800b5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5fe:	4853      	ldr	r0, [pc, #332]	@ (800b74c <_vfiprintf_r+0x21c>)
 800b600:	f7f4 fe0e 	bl	8000220 <memchr>
 800b604:	9a04      	ldr	r2, [sp, #16]
 800b606:	b9d8      	cbnz	r0, 800b640 <_vfiprintf_r+0x110>
 800b608:	06d1      	lsls	r1, r2, #27
 800b60a:	bf44      	itt	mi
 800b60c:	2320      	movmi	r3, #32
 800b60e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b612:	0713      	lsls	r3, r2, #28
 800b614:	bf44      	itt	mi
 800b616:	232b      	movmi	r3, #43	@ 0x2b
 800b618:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b61c:	f89a 3000 	ldrb.w	r3, [sl]
 800b620:	2b2a      	cmp	r3, #42	@ 0x2a
 800b622:	d015      	beq.n	800b650 <_vfiprintf_r+0x120>
 800b624:	9a07      	ldr	r2, [sp, #28]
 800b626:	4654      	mov	r4, sl
 800b628:	2000      	movs	r0, #0
 800b62a:	f04f 0c0a 	mov.w	ip, #10
 800b62e:	4621      	mov	r1, r4
 800b630:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b634:	3b30      	subs	r3, #48	@ 0x30
 800b636:	2b09      	cmp	r3, #9
 800b638:	d94b      	bls.n	800b6d2 <_vfiprintf_r+0x1a2>
 800b63a:	b1b0      	cbz	r0, 800b66a <_vfiprintf_r+0x13a>
 800b63c:	9207      	str	r2, [sp, #28]
 800b63e:	e014      	b.n	800b66a <_vfiprintf_r+0x13a>
 800b640:	eba0 0308 	sub.w	r3, r0, r8
 800b644:	fa09 f303 	lsl.w	r3, r9, r3
 800b648:	4313      	orrs	r3, r2
 800b64a:	9304      	str	r3, [sp, #16]
 800b64c:	46a2      	mov	sl, r4
 800b64e:	e7d2      	b.n	800b5f6 <_vfiprintf_r+0xc6>
 800b650:	9b03      	ldr	r3, [sp, #12]
 800b652:	1d19      	adds	r1, r3, #4
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	9103      	str	r1, [sp, #12]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	bfbb      	ittet	lt
 800b65c:	425b      	neglt	r3, r3
 800b65e:	f042 0202 	orrlt.w	r2, r2, #2
 800b662:	9307      	strge	r3, [sp, #28]
 800b664:	9307      	strlt	r3, [sp, #28]
 800b666:	bfb8      	it	lt
 800b668:	9204      	strlt	r2, [sp, #16]
 800b66a:	7823      	ldrb	r3, [r4, #0]
 800b66c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b66e:	d10a      	bne.n	800b686 <_vfiprintf_r+0x156>
 800b670:	7863      	ldrb	r3, [r4, #1]
 800b672:	2b2a      	cmp	r3, #42	@ 0x2a
 800b674:	d132      	bne.n	800b6dc <_vfiprintf_r+0x1ac>
 800b676:	9b03      	ldr	r3, [sp, #12]
 800b678:	1d1a      	adds	r2, r3, #4
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	9203      	str	r2, [sp, #12]
 800b67e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b682:	3402      	adds	r4, #2
 800b684:	9305      	str	r3, [sp, #20]
 800b686:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b75c <_vfiprintf_r+0x22c>
 800b68a:	7821      	ldrb	r1, [r4, #0]
 800b68c:	2203      	movs	r2, #3
 800b68e:	4650      	mov	r0, sl
 800b690:	f7f4 fdc6 	bl	8000220 <memchr>
 800b694:	b138      	cbz	r0, 800b6a6 <_vfiprintf_r+0x176>
 800b696:	9b04      	ldr	r3, [sp, #16]
 800b698:	eba0 000a 	sub.w	r0, r0, sl
 800b69c:	2240      	movs	r2, #64	@ 0x40
 800b69e:	4082      	lsls	r2, r0
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	3401      	adds	r4, #1
 800b6a4:	9304      	str	r3, [sp, #16]
 800b6a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6aa:	4829      	ldr	r0, [pc, #164]	@ (800b750 <_vfiprintf_r+0x220>)
 800b6ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6b0:	2206      	movs	r2, #6
 800b6b2:	f7f4 fdb5 	bl	8000220 <memchr>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d03f      	beq.n	800b73a <_vfiprintf_r+0x20a>
 800b6ba:	4b26      	ldr	r3, [pc, #152]	@ (800b754 <_vfiprintf_r+0x224>)
 800b6bc:	bb1b      	cbnz	r3, 800b706 <_vfiprintf_r+0x1d6>
 800b6be:	9b03      	ldr	r3, [sp, #12]
 800b6c0:	3307      	adds	r3, #7
 800b6c2:	f023 0307 	bic.w	r3, r3, #7
 800b6c6:	3308      	adds	r3, #8
 800b6c8:	9303      	str	r3, [sp, #12]
 800b6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6cc:	443b      	add	r3, r7
 800b6ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6d0:	e76a      	b.n	800b5a8 <_vfiprintf_r+0x78>
 800b6d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6d6:	460c      	mov	r4, r1
 800b6d8:	2001      	movs	r0, #1
 800b6da:	e7a8      	b.n	800b62e <_vfiprintf_r+0xfe>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	3401      	adds	r4, #1
 800b6e0:	9305      	str	r3, [sp, #20]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	f04f 0c0a 	mov.w	ip, #10
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6ee:	3a30      	subs	r2, #48	@ 0x30
 800b6f0:	2a09      	cmp	r2, #9
 800b6f2:	d903      	bls.n	800b6fc <_vfiprintf_r+0x1cc>
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d0c6      	beq.n	800b686 <_vfiprintf_r+0x156>
 800b6f8:	9105      	str	r1, [sp, #20]
 800b6fa:	e7c4      	b.n	800b686 <_vfiprintf_r+0x156>
 800b6fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b700:	4604      	mov	r4, r0
 800b702:	2301      	movs	r3, #1
 800b704:	e7f0      	b.n	800b6e8 <_vfiprintf_r+0x1b8>
 800b706:	ab03      	add	r3, sp, #12
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	462a      	mov	r2, r5
 800b70c:	4b12      	ldr	r3, [pc, #72]	@ (800b758 <_vfiprintf_r+0x228>)
 800b70e:	a904      	add	r1, sp, #16
 800b710:	4630      	mov	r0, r6
 800b712:	f7fd fb85 	bl	8008e20 <_printf_float>
 800b716:	4607      	mov	r7, r0
 800b718:	1c78      	adds	r0, r7, #1
 800b71a:	d1d6      	bne.n	800b6ca <_vfiprintf_r+0x19a>
 800b71c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b71e:	07d9      	lsls	r1, r3, #31
 800b720:	d405      	bmi.n	800b72e <_vfiprintf_r+0x1fe>
 800b722:	89ab      	ldrh	r3, [r5, #12]
 800b724:	059a      	lsls	r2, r3, #22
 800b726:	d402      	bmi.n	800b72e <_vfiprintf_r+0x1fe>
 800b728:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b72a:	f7fe f8a1 	bl	8009870 <__retarget_lock_release_recursive>
 800b72e:	89ab      	ldrh	r3, [r5, #12]
 800b730:	065b      	lsls	r3, r3, #25
 800b732:	f53f af1f 	bmi.w	800b574 <_vfiprintf_r+0x44>
 800b736:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b738:	e71e      	b.n	800b578 <_vfiprintf_r+0x48>
 800b73a:	ab03      	add	r3, sp, #12
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	462a      	mov	r2, r5
 800b740:	4b05      	ldr	r3, [pc, #20]	@ (800b758 <_vfiprintf_r+0x228>)
 800b742:	a904      	add	r1, sp, #16
 800b744:	4630      	mov	r0, r6
 800b746:	f7fd fe03 	bl	8009350 <_printf_i>
 800b74a:	e7e4      	b.n	800b716 <_vfiprintf_r+0x1e6>
 800b74c:	0800bf01 	.word	0x0800bf01
 800b750:	0800bf0b 	.word	0x0800bf0b
 800b754:	08008e21 	.word	0x08008e21
 800b758:	0800b50b 	.word	0x0800b50b
 800b75c:	0800bf07 	.word	0x0800bf07

0800b760 <__swbuf_r>:
 800b760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b762:	460e      	mov	r6, r1
 800b764:	4614      	mov	r4, r2
 800b766:	4605      	mov	r5, r0
 800b768:	b118      	cbz	r0, 800b772 <__swbuf_r+0x12>
 800b76a:	6a03      	ldr	r3, [r0, #32]
 800b76c:	b90b      	cbnz	r3, 800b772 <__swbuf_r+0x12>
 800b76e:	f7fd ffbb 	bl	80096e8 <__sinit>
 800b772:	69a3      	ldr	r3, [r4, #24]
 800b774:	60a3      	str	r3, [r4, #8]
 800b776:	89a3      	ldrh	r3, [r4, #12]
 800b778:	071a      	lsls	r2, r3, #28
 800b77a:	d501      	bpl.n	800b780 <__swbuf_r+0x20>
 800b77c:	6923      	ldr	r3, [r4, #16]
 800b77e:	b943      	cbnz	r3, 800b792 <__swbuf_r+0x32>
 800b780:	4621      	mov	r1, r4
 800b782:	4628      	mov	r0, r5
 800b784:	f000 f82a 	bl	800b7dc <__swsetup_r>
 800b788:	b118      	cbz	r0, 800b792 <__swbuf_r+0x32>
 800b78a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b78e:	4638      	mov	r0, r7
 800b790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b792:	6823      	ldr	r3, [r4, #0]
 800b794:	6922      	ldr	r2, [r4, #16]
 800b796:	1a98      	subs	r0, r3, r2
 800b798:	6963      	ldr	r3, [r4, #20]
 800b79a:	b2f6      	uxtb	r6, r6
 800b79c:	4283      	cmp	r3, r0
 800b79e:	4637      	mov	r7, r6
 800b7a0:	dc05      	bgt.n	800b7ae <__swbuf_r+0x4e>
 800b7a2:	4621      	mov	r1, r4
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	f7ff f98f 	bl	800aac8 <_fflush_r>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d1ed      	bne.n	800b78a <__swbuf_r+0x2a>
 800b7ae:	68a3      	ldr	r3, [r4, #8]
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	60a3      	str	r3, [r4, #8]
 800b7b4:	6823      	ldr	r3, [r4, #0]
 800b7b6:	1c5a      	adds	r2, r3, #1
 800b7b8:	6022      	str	r2, [r4, #0]
 800b7ba:	701e      	strb	r6, [r3, #0]
 800b7bc:	6962      	ldr	r2, [r4, #20]
 800b7be:	1c43      	adds	r3, r0, #1
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d004      	beq.n	800b7ce <__swbuf_r+0x6e>
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	07db      	lsls	r3, r3, #31
 800b7c8:	d5e1      	bpl.n	800b78e <__swbuf_r+0x2e>
 800b7ca:	2e0a      	cmp	r6, #10
 800b7cc:	d1df      	bne.n	800b78e <__swbuf_r+0x2e>
 800b7ce:	4621      	mov	r1, r4
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	f7ff f979 	bl	800aac8 <_fflush_r>
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d0d9      	beq.n	800b78e <__swbuf_r+0x2e>
 800b7da:	e7d6      	b.n	800b78a <__swbuf_r+0x2a>

0800b7dc <__swsetup_r>:
 800b7dc:	b538      	push	{r3, r4, r5, lr}
 800b7de:	4b29      	ldr	r3, [pc, #164]	@ (800b884 <__swsetup_r+0xa8>)
 800b7e0:	4605      	mov	r5, r0
 800b7e2:	6818      	ldr	r0, [r3, #0]
 800b7e4:	460c      	mov	r4, r1
 800b7e6:	b118      	cbz	r0, 800b7f0 <__swsetup_r+0x14>
 800b7e8:	6a03      	ldr	r3, [r0, #32]
 800b7ea:	b90b      	cbnz	r3, 800b7f0 <__swsetup_r+0x14>
 800b7ec:	f7fd ff7c 	bl	80096e8 <__sinit>
 800b7f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7f4:	0719      	lsls	r1, r3, #28
 800b7f6:	d422      	bmi.n	800b83e <__swsetup_r+0x62>
 800b7f8:	06da      	lsls	r2, r3, #27
 800b7fa:	d407      	bmi.n	800b80c <__swsetup_r+0x30>
 800b7fc:	2209      	movs	r2, #9
 800b7fe:	602a      	str	r2, [r5, #0]
 800b800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b804:	81a3      	strh	r3, [r4, #12]
 800b806:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b80a:	e033      	b.n	800b874 <__swsetup_r+0x98>
 800b80c:	0758      	lsls	r0, r3, #29
 800b80e:	d512      	bpl.n	800b836 <__swsetup_r+0x5a>
 800b810:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b812:	b141      	cbz	r1, 800b826 <__swsetup_r+0x4a>
 800b814:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b818:	4299      	cmp	r1, r3
 800b81a:	d002      	beq.n	800b822 <__swsetup_r+0x46>
 800b81c:	4628      	mov	r0, r5
 800b81e:	f7fe fe83 	bl	800a528 <_free_r>
 800b822:	2300      	movs	r3, #0
 800b824:	6363      	str	r3, [r4, #52]	@ 0x34
 800b826:	89a3      	ldrh	r3, [r4, #12]
 800b828:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b82c:	81a3      	strh	r3, [r4, #12]
 800b82e:	2300      	movs	r3, #0
 800b830:	6063      	str	r3, [r4, #4]
 800b832:	6923      	ldr	r3, [r4, #16]
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	89a3      	ldrh	r3, [r4, #12]
 800b838:	f043 0308 	orr.w	r3, r3, #8
 800b83c:	81a3      	strh	r3, [r4, #12]
 800b83e:	6923      	ldr	r3, [r4, #16]
 800b840:	b94b      	cbnz	r3, 800b856 <__swsetup_r+0x7a>
 800b842:	89a3      	ldrh	r3, [r4, #12]
 800b844:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b84c:	d003      	beq.n	800b856 <__swsetup_r+0x7a>
 800b84e:	4621      	mov	r1, r4
 800b850:	4628      	mov	r0, r5
 800b852:	f000 f83f 	bl	800b8d4 <__smakebuf_r>
 800b856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b85a:	f013 0201 	ands.w	r2, r3, #1
 800b85e:	d00a      	beq.n	800b876 <__swsetup_r+0x9a>
 800b860:	2200      	movs	r2, #0
 800b862:	60a2      	str	r2, [r4, #8]
 800b864:	6962      	ldr	r2, [r4, #20]
 800b866:	4252      	negs	r2, r2
 800b868:	61a2      	str	r2, [r4, #24]
 800b86a:	6922      	ldr	r2, [r4, #16]
 800b86c:	b942      	cbnz	r2, 800b880 <__swsetup_r+0xa4>
 800b86e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b872:	d1c5      	bne.n	800b800 <__swsetup_r+0x24>
 800b874:	bd38      	pop	{r3, r4, r5, pc}
 800b876:	0799      	lsls	r1, r3, #30
 800b878:	bf58      	it	pl
 800b87a:	6962      	ldrpl	r2, [r4, #20]
 800b87c:	60a2      	str	r2, [r4, #8]
 800b87e:	e7f4      	b.n	800b86a <__swsetup_r+0x8e>
 800b880:	2000      	movs	r0, #0
 800b882:	e7f7      	b.n	800b874 <__swsetup_r+0x98>
 800b884:	20000028 	.word	0x20000028

0800b888 <__swhatbuf_r>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	460c      	mov	r4, r1
 800b88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b890:	2900      	cmp	r1, #0
 800b892:	b096      	sub	sp, #88	@ 0x58
 800b894:	4615      	mov	r5, r2
 800b896:	461e      	mov	r6, r3
 800b898:	da0d      	bge.n	800b8b6 <__swhatbuf_r+0x2e>
 800b89a:	89a3      	ldrh	r3, [r4, #12]
 800b89c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b8a0:	f04f 0100 	mov.w	r1, #0
 800b8a4:	bf14      	ite	ne
 800b8a6:	2340      	movne	r3, #64	@ 0x40
 800b8a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	6031      	str	r1, [r6, #0]
 800b8b0:	602b      	str	r3, [r5, #0]
 800b8b2:	b016      	add	sp, #88	@ 0x58
 800b8b4:	bd70      	pop	{r4, r5, r6, pc}
 800b8b6:	466a      	mov	r2, sp
 800b8b8:	f000 f848 	bl	800b94c <_fstat_r>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	dbec      	blt.n	800b89a <__swhatbuf_r+0x12>
 800b8c0:	9901      	ldr	r1, [sp, #4]
 800b8c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b8c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b8ca:	4259      	negs	r1, r3
 800b8cc:	4159      	adcs	r1, r3
 800b8ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8d2:	e7eb      	b.n	800b8ac <__swhatbuf_r+0x24>

0800b8d4 <__smakebuf_r>:
 800b8d4:	898b      	ldrh	r3, [r1, #12]
 800b8d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8d8:	079d      	lsls	r5, r3, #30
 800b8da:	4606      	mov	r6, r0
 800b8dc:	460c      	mov	r4, r1
 800b8de:	d507      	bpl.n	800b8f0 <__smakebuf_r+0x1c>
 800b8e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	6123      	str	r3, [r4, #16]
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	6163      	str	r3, [r4, #20]
 800b8ec:	b003      	add	sp, #12
 800b8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8f0:	ab01      	add	r3, sp, #4
 800b8f2:	466a      	mov	r2, sp
 800b8f4:	f7ff ffc8 	bl	800b888 <__swhatbuf_r>
 800b8f8:	9f00      	ldr	r7, [sp, #0]
 800b8fa:	4605      	mov	r5, r0
 800b8fc:	4639      	mov	r1, r7
 800b8fe:	4630      	mov	r0, r6
 800b900:	f7fe ffde 	bl	800a8c0 <_malloc_r>
 800b904:	b948      	cbnz	r0, 800b91a <__smakebuf_r+0x46>
 800b906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b90a:	059a      	lsls	r2, r3, #22
 800b90c:	d4ee      	bmi.n	800b8ec <__smakebuf_r+0x18>
 800b90e:	f023 0303 	bic.w	r3, r3, #3
 800b912:	f043 0302 	orr.w	r3, r3, #2
 800b916:	81a3      	strh	r3, [r4, #12]
 800b918:	e7e2      	b.n	800b8e0 <__smakebuf_r+0xc>
 800b91a:	89a3      	ldrh	r3, [r4, #12]
 800b91c:	6020      	str	r0, [r4, #0]
 800b91e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b922:	81a3      	strh	r3, [r4, #12]
 800b924:	9b01      	ldr	r3, [sp, #4]
 800b926:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b92a:	b15b      	cbz	r3, 800b944 <__smakebuf_r+0x70>
 800b92c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b930:	4630      	mov	r0, r6
 800b932:	f000 f81d 	bl	800b970 <_isatty_r>
 800b936:	b128      	cbz	r0, 800b944 <__smakebuf_r+0x70>
 800b938:	89a3      	ldrh	r3, [r4, #12]
 800b93a:	f023 0303 	bic.w	r3, r3, #3
 800b93e:	f043 0301 	orr.w	r3, r3, #1
 800b942:	81a3      	strh	r3, [r4, #12]
 800b944:	89a3      	ldrh	r3, [r4, #12]
 800b946:	431d      	orrs	r5, r3
 800b948:	81a5      	strh	r5, [r4, #12]
 800b94a:	e7cf      	b.n	800b8ec <__smakebuf_r+0x18>

0800b94c <_fstat_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	4d07      	ldr	r5, [pc, #28]	@ (800b96c <_fstat_r+0x20>)
 800b950:	2300      	movs	r3, #0
 800b952:	4604      	mov	r4, r0
 800b954:	4608      	mov	r0, r1
 800b956:	4611      	mov	r1, r2
 800b958:	602b      	str	r3, [r5, #0]
 800b95a:	f7f6 f816 	bl	800198a <_fstat>
 800b95e:	1c43      	adds	r3, r0, #1
 800b960:	d102      	bne.n	800b968 <_fstat_r+0x1c>
 800b962:	682b      	ldr	r3, [r5, #0]
 800b964:	b103      	cbz	r3, 800b968 <_fstat_r+0x1c>
 800b966:	6023      	str	r3, [r4, #0]
 800b968:	bd38      	pop	{r3, r4, r5, pc}
 800b96a:	bf00      	nop
 800b96c:	20004790 	.word	0x20004790

0800b970 <_isatty_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	4d06      	ldr	r5, [pc, #24]	@ (800b98c <_isatty_r+0x1c>)
 800b974:	2300      	movs	r3, #0
 800b976:	4604      	mov	r4, r0
 800b978:	4608      	mov	r0, r1
 800b97a:	602b      	str	r3, [r5, #0]
 800b97c:	f7f6 f815 	bl	80019aa <_isatty>
 800b980:	1c43      	adds	r3, r0, #1
 800b982:	d102      	bne.n	800b98a <_isatty_r+0x1a>
 800b984:	682b      	ldr	r3, [r5, #0]
 800b986:	b103      	cbz	r3, 800b98a <_isatty_r+0x1a>
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	20004790 	.word	0x20004790

0800b990 <_raise_r>:
 800b990:	291f      	cmp	r1, #31
 800b992:	b538      	push	{r3, r4, r5, lr}
 800b994:	4605      	mov	r5, r0
 800b996:	460c      	mov	r4, r1
 800b998:	d904      	bls.n	800b9a4 <_raise_r+0x14>
 800b99a:	2316      	movs	r3, #22
 800b99c:	6003      	str	r3, [r0, #0]
 800b99e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9a2:	bd38      	pop	{r3, r4, r5, pc}
 800b9a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b9a6:	b112      	cbz	r2, 800b9ae <_raise_r+0x1e>
 800b9a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9ac:	b94b      	cbnz	r3, 800b9c2 <_raise_r+0x32>
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f000 f830 	bl	800ba14 <_getpid_r>
 800b9b4:	4622      	mov	r2, r4
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9be:	f000 b817 	b.w	800b9f0 <_kill_r>
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d00a      	beq.n	800b9dc <_raise_r+0x4c>
 800b9c6:	1c59      	adds	r1, r3, #1
 800b9c8:	d103      	bne.n	800b9d2 <_raise_r+0x42>
 800b9ca:	2316      	movs	r3, #22
 800b9cc:	6003      	str	r3, [r0, #0]
 800b9ce:	2001      	movs	r0, #1
 800b9d0:	e7e7      	b.n	800b9a2 <_raise_r+0x12>
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b9d8:	4620      	mov	r0, r4
 800b9da:	4798      	blx	r3
 800b9dc:	2000      	movs	r0, #0
 800b9de:	e7e0      	b.n	800b9a2 <_raise_r+0x12>

0800b9e0 <raise>:
 800b9e0:	4b02      	ldr	r3, [pc, #8]	@ (800b9ec <raise+0xc>)
 800b9e2:	4601      	mov	r1, r0
 800b9e4:	6818      	ldr	r0, [r3, #0]
 800b9e6:	f7ff bfd3 	b.w	800b990 <_raise_r>
 800b9ea:	bf00      	nop
 800b9ec:	20000028 	.word	0x20000028

0800b9f0 <_kill_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	4d07      	ldr	r5, [pc, #28]	@ (800ba10 <_kill_r+0x20>)
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	4608      	mov	r0, r1
 800b9fa:	4611      	mov	r1, r2
 800b9fc:	602b      	str	r3, [r5, #0]
 800b9fe:	f7f5 ff64 	bl	80018ca <_kill>
 800ba02:	1c43      	adds	r3, r0, #1
 800ba04:	d102      	bne.n	800ba0c <_kill_r+0x1c>
 800ba06:	682b      	ldr	r3, [r5, #0]
 800ba08:	b103      	cbz	r3, 800ba0c <_kill_r+0x1c>
 800ba0a:	6023      	str	r3, [r4, #0]
 800ba0c:	bd38      	pop	{r3, r4, r5, pc}
 800ba0e:	bf00      	nop
 800ba10:	20004790 	.word	0x20004790

0800ba14 <_getpid_r>:
 800ba14:	f7f5 bf51 	b.w	80018ba <_getpid>

0800ba18 <expf>:
 800ba18:	b508      	push	{r3, lr}
 800ba1a:	ed2d 8b02 	vpush	{d8}
 800ba1e:	eef0 8a40 	vmov.f32	s17, s0
 800ba22:	f000 f839 	bl	800ba98 <__ieee754_expf>
 800ba26:	eeb0 8a40 	vmov.f32	s16, s0
 800ba2a:	eeb0 0a68 	vmov.f32	s0, s17
 800ba2e:	f000 f829 	bl	800ba84 <finitef>
 800ba32:	b160      	cbz	r0, 800ba4e <expf+0x36>
 800ba34:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800ba74 <expf+0x5c>
 800ba38:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ba3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba40:	dd0a      	ble.n	800ba58 <expf+0x40>
 800ba42:	f7fd fee9 	bl	8009818 <__errno>
 800ba46:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800ba78 <expf+0x60>
 800ba4a:	2322      	movs	r3, #34	@ 0x22
 800ba4c:	6003      	str	r3, [r0, #0]
 800ba4e:	eeb0 0a48 	vmov.f32	s0, s16
 800ba52:	ecbd 8b02 	vpop	{d8}
 800ba56:	bd08      	pop	{r3, pc}
 800ba58:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ba7c <expf+0x64>
 800ba5c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ba60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba64:	d5f3      	bpl.n	800ba4e <expf+0x36>
 800ba66:	f7fd fed7 	bl	8009818 <__errno>
 800ba6a:	2322      	movs	r3, #34	@ 0x22
 800ba6c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800ba80 <expf+0x68>
 800ba70:	6003      	str	r3, [r0, #0]
 800ba72:	e7ec      	b.n	800ba4e <expf+0x36>
 800ba74:	42b17217 	.word	0x42b17217
 800ba78:	7f800000 	.word	0x7f800000
 800ba7c:	c2cff1b5 	.word	0xc2cff1b5
 800ba80:	00000000 	.word	0x00000000

0800ba84 <finitef>:
 800ba84:	ee10 3a10 	vmov	r3, s0
 800ba88:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ba8c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ba90:	bfac      	ite	ge
 800ba92:	2000      	movge	r0, #0
 800ba94:	2001      	movlt	r0, #1
 800ba96:	4770      	bx	lr

0800ba98 <__ieee754_expf>:
 800ba98:	ee10 2a10 	vmov	r2, s0
 800ba9c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800baa0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800baa4:	d902      	bls.n	800baac <__ieee754_expf+0x14>
 800baa6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800baaa:	4770      	bx	lr
 800baac:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800bab0:	d106      	bne.n	800bac0 <__ieee754_expf+0x28>
 800bab2:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800bbec <__ieee754_expf+0x154>
 800bab6:	2900      	cmp	r1, #0
 800bab8:	bf18      	it	ne
 800baba:	eeb0 0a67 	vmovne.f32	s0, s15
 800babe:	4770      	bx	lr
 800bac0:	484b      	ldr	r0, [pc, #300]	@ (800bbf0 <__ieee754_expf+0x158>)
 800bac2:	4282      	cmp	r2, r0
 800bac4:	dd02      	ble.n	800bacc <__ieee754_expf+0x34>
 800bac6:	2000      	movs	r0, #0
 800bac8:	f000 b92a 	b.w	800bd20 <__math_oflowf>
 800bacc:	2a00      	cmp	r2, #0
 800bace:	da05      	bge.n	800badc <__ieee754_expf+0x44>
 800bad0:	4a48      	ldr	r2, [pc, #288]	@ (800bbf4 <__ieee754_expf+0x15c>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d902      	bls.n	800badc <__ieee754_expf+0x44>
 800bad6:	2000      	movs	r0, #0
 800bad8:	f000 b91c 	b.w	800bd14 <__math_uflowf>
 800badc:	4a46      	ldr	r2, [pc, #280]	@ (800bbf8 <__ieee754_expf+0x160>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800bae4:	d952      	bls.n	800bb8c <__ieee754_expf+0xf4>
 800bae6:	4a45      	ldr	r2, [pc, #276]	@ (800bbfc <__ieee754_expf+0x164>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800baee:	d834      	bhi.n	800bb5a <__ieee754_expf+0xc2>
 800baf0:	4b43      	ldr	r3, [pc, #268]	@ (800bc00 <__ieee754_expf+0x168>)
 800baf2:	4413      	add	r3, r2
 800baf4:	ed93 7a00 	vldr	s14, [r3]
 800baf8:	4b42      	ldr	r3, [pc, #264]	@ (800bc04 <__ieee754_expf+0x16c>)
 800bafa:	4413      	add	r3, r2
 800bafc:	ee30 7a47 	vsub.f32	s14, s0, s14
 800bb00:	f1c1 0201 	rsb	r2, r1, #1
 800bb04:	edd3 7a00 	vldr	s15, [r3]
 800bb08:	1a52      	subs	r2, r2, r1
 800bb0a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800bb0e:	ee20 6a00 	vmul.f32	s12, s0, s0
 800bb12:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800bc08 <__ieee754_expf+0x170>
 800bb16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bc0c <__ieee754_expf+0x174>
 800bb1a:	eee6 6a05 	vfma.f32	s13, s12, s10
 800bb1e:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800bc10 <__ieee754_expf+0x178>
 800bb22:	eea6 5a86 	vfma.f32	s10, s13, s12
 800bb26:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800bc14 <__ieee754_expf+0x17c>
 800bb2a:	eee5 6a06 	vfma.f32	s13, s10, s12
 800bb2e:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800bc18 <__ieee754_expf+0x180>
 800bb32:	eea6 5a86 	vfma.f32	s10, s13, s12
 800bb36:	eef0 6a40 	vmov.f32	s13, s0
 800bb3a:	eee5 6a46 	vfms.f32	s13, s10, s12
 800bb3e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800bb42:	ee20 5a26 	vmul.f32	s10, s0, s13
 800bb46:	bb92      	cbnz	r2, 800bbae <__ieee754_expf+0x116>
 800bb48:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800bb4c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800bb50:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bb54:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800bb58:	4770      	bx	lr
 800bb5a:	4b30      	ldr	r3, [pc, #192]	@ (800bc1c <__ieee754_expf+0x184>)
 800bb5c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800bc20 <__ieee754_expf+0x188>
 800bb60:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800bc24 <__ieee754_expf+0x18c>
 800bb64:	4413      	add	r3, r2
 800bb66:	edd3 7a00 	vldr	s15, [r3]
 800bb6a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bb6e:	eeb0 7a40 	vmov.f32	s14, s0
 800bb72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb76:	ee17 2a90 	vmov	r2, s15
 800bb7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb7e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800bb82:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800bc28 <__ieee754_expf+0x190>
 800bb86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bb8a:	e7be      	b.n	800bb0a <__ieee754_expf+0x72>
 800bb8c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800bb90:	d20b      	bcs.n	800bbaa <__ieee754_expf+0x112>
 800bb92:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800bc2c <__ieee754_expf+0x194>
 800bb96:	ee70 6a26 	vadd.f32	s13, s0, s13
 800bb9a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800bb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bba2:	dd02      	ble.n	800bbaa <__ieee754_expf+0x112>
 800bba4:	ee30 0a25 	vadd.f32	s0, s0, s11
 800bba8:	4770      	bx	lr
 800bbaa:	2200      	movs	r2, #0
 800bbac:	e7af      	b.n	800bb0e <__ieee754_expf+0x76>
 800bbae:	ee36 6a66 	vsub.f32	s12, s12, s13
 800bbb2:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800bbb6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800bbba:	bfb8      	it	lt
 800bbbc:	3264      	addlt	r2, #100	@ 0x64
 800bbbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bbc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbc6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800bbca:	ee17 3a90 	vmov	r3, s15
 800bbce:	bfab      	itete	ge
 800bbd0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800bbd4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800bbd8:	ee00 3a10 	vmovge	s0, r3
 800bbdc:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800bc30 <__ieee754_expf+0x198>
 800bbe0:	bfbc      	itt	lt
 800bbe2:	ee00 3a10 	vmovlt	s0, r3
 800bbe6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800bbea:	4770      	bx	lr
 800bbec:	00000000 	.word	0x00000000
 800bbf0:	42b17217 	.word	0x42b17217
 800bbf4:	42cff1b5 	.word	0x42cff1b5
 800bbf8:	3eb17218 	.word	0x3eb17218
 800bbfc:	3f851591 	.word	0x3f851591
 800bc00:	0800c1b8 	.word	0x0800c1b8
 800bc04:	0800c1b0 	.word	0x0800c1b0
 800bc08:	3331bb4c 	.word	0x3331bb4c
 800bc0c:	b5ddea0e 	.word	0xb5ddea0e
 800bc10:	388ab355 	.word	0x388ab355
 800bc14:	bb360b61 	.word	0xbb360b61
 800bc18:	3e2aaaab 	.word	0x3e2aaaab
 800bc1c:	0800c1c0 	.word	0x0800c1c0
 800bc20:	3fb8aa3b 	.word	0x3fb8aa3b
 800bc24:	3f317180 	.word	0x3f317180
 800bc28:	3717f7d1 	.word	0x3717f7d1
 800bc2c:	7149f2ca 	.word	0x7149f2ca
 800bc30:	0d800000 	.word	0x0d800000

0800bc34 <fmaxf>:
 800bc34:	b508      	push	{r3, lr}
 800bc36:	ed2d 8b02 	vpush	{d8}
 800bc3a:	eeb0 8a40 	vmov.f32	s16, s0
 800bc3e:	eef0 8a60 	vmov.f32	s17, s1
 800bc42:	f000 f831 	bl	800bca8 <__fpclassifyf>
 800bc46:	b930      	cbnz	r0, 800bc56 <fmaxf+0x22>
 800bc48:	eeb0 8a68 	vmov.f32	s16, s17
 800bc4c:	eeb0 0a48 	vmov.f32	s0, s16
 800bc50:	ecbd 8b02 	vpop	{d8}
 800bc54:	bd08      	pop	{r3, pc}
 800bc56:	eeb0 0a68 	vmov.f32	s0, s17
 800bc5a:	f000 f825 	bl	800bca8 <__fpclassifyf>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d0f4      	beq.n	800bc4c <fmaxf+0x18>
 800bc62:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc6a:	dded      	ble.n	800bc48 <fmaxf+0x14>
 800bc6c:	e7ee      	b.n	800bc4c <fmaxf+0x18>

0800bc6e <fminf>:
 800bc6e:	b508      	push	{r3, lr}
 800bc70:	ed2d 8b02 	vpush	{d8}
 800bc74:	eeb0 8a40 	vmov.f32	s16, s0
 800bc78:	eef0 8a60 	vmov.f32	s17, s1
 800bc7c:	f000 f814 	bl	800bca8 <__fpclassifyf>
 800bc80:	b930      	cbnz	r0, 800bc90 <fminf+0x22>
 800bc82:	eeb0 8a68 	vmov.f32	s16, s17
 800bc86:	eeb0 0a48 	vmov.f32	s0, s16
 800bc8a:	ecbd 8b02 	vpop	{d8}
 800bc8e:	bd08      	pop	{r3, pc}
 800bc90:	eeb0 0a68 	vmov.f32	s0, s17
 800bc94:	f000 f808 	bl	800bca8 <__fpclassifyf>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d0f4      	beq.n	800bc86 <fminf+0x18>
 800bc9c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca4:	d5ed      	bpl.n	800bc82 <fminf+0x14>
 800bca6:	e7ee      	b.n	800bc86 <fminf+0x18>

0800bca8 <__fpclassifyf>:
 800bca8:	ee10 3a10 	vmov	r3, s0
 800bcac:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800bcb0:	d00d      	beq.n	800bcce <__fpclassifyf+0x26>
 800bcb2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800bcb6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800bcba:	d30a      	bcc.n	800bcd2 <__fpclassifyf+0x2a>
 800bcbc:	4b07      	ldr	r3, [pc, #28]	@ (800bcdc <__fpclassifyf+0x34>)
 800bcbe:	1e42      	subs	r2, r0, #1
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d908      	bls.n	800bcd6 <__fpclassifyf+0x2e>
 800bcc4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800bcc8:	4258      	negs	r0, r3
 800bcca:	4158      	adcs	r0, r3
 800bccc:	4770      	bx	lr
 800bcce:	2002      	movs	r0, #2
 800bcd0:	4770      	bx	lr
 800bcd2:	2004      	movs	r0, #4
 800bcd4:	4770      	bx	lr
 800bcd6:	2003      	movs	r0, #3
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	007ffffe 	.word	0x007ffffe

0800bce0 <with_errnof>:
 800bce0:	b510      	push	{r4, lr}
 800bce2:	ed2d 8b02 	vpush	{d8}
 800bce6:	eeb0 8a40 	vmov.f32	s16, s0
 800bcea:	4604      	mov	r4, r0
 800bcec:	f7fd fd94 	bl	8009818 <__errno>
 800bcf0:	eeb0 0a48 	vmov.f32	s0, s16
 800bcf4:	ecbd 8b02 	vpop	{d8}
 800bcf8:	6004      	str	r4, [r0, #0]
 800bcfa:	bd10      	pop	{r4, pc}

0800bcfc <xflowf>:
 800bcfc:	b130      	cbz	r0, 800bd0c <xflowf+0x10>
 800bcfe:	eef1 7a40 	vneg.f32	s15, s0
 800bd02:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bd06:	2022      	movs	r0, #34	@ 0x22
 800bd08:	f7ff bfea 	b.w	800bce0 <with_errnof>
 800bd0c:	eef0 7a40 	vmov.f32	s15, s0
 800bd10:	e7f7      	b.n	800bd02 <xflowf+0x6>
	...

0800bd14 <__math_uflowf>:
 800bd14:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bd1c <__math_uflowf+0x8>
 800bd18:	f7ff bff0 	b.w	800bcfc <xflowf>
 800bd1c:	10000000 	.word	0x10000000

0800bd20 <__math_oflowf>:
 800bd20:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bd28 <__math_oflowf+0x8>
 800bd24:	f7ff bfea 	b.w	800bcfc <xflowf>
 800bd28:	70000000 	.word	0x70000000

0800bd2c <_init>:
 800bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2e:	bf00      	nop
 800bd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd32:	bc08      	pop	{r3}
 800bd34:	469e      	mov	lr, r3
 800bd36:	4770      	bx	lr

0800bd38 <_fini>:
 800bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3a:	bf00      	nop
 800bd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd3e:	bc08      	pop	{r3}
 800bd40:	469e      	mov	lr, r3
 800bd42:	4770      	bx	lr
