
freertos_L7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010784  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08010968  08010968  00011968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010fa8  08010fa8  000121fc  2**0
                  CONTENTS
  4 .ARM          00000008  08010fa8  08010fa8  00011fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010fb0  08010fb0  000121fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010fb0  08010fb0  00011fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010fb4  08010fb4  00011fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  08010fb8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c1c  200001fc  080111b4  000121fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e18  080111b4  00012e18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025306  00000000  00000000  0001222c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005637  00000000  00000000  00037532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f18  00000000  00000000  0003cb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000180e  00000000  00000000  0003ea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029acd  00000000  00000000  00040296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029b84  00000000  00000000  00069d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee125  00000000  00000000  000938e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181a0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094d0  00000000  00000000  00181a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  0018af20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801094c 	.word	0x0801094c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0801094c 	.word	0x0801094c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	4a06      	ldr	r2, [pc, #24]	@ (8000fb8 <vApplicationGetIdleTaskMemory+0x30>)
 8000f9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2280      	movs	r2, #128	@ 0x80
 8000fa4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000218 	.word	0x20000218
 8000fb8:	200002b8 	.word	0x200002b8

08000fbc <HAL_GPIO_EXTI_Callback>:
FIL fil;        // File handle
FRESULT fres;   // Result after operations


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
    if (GPIO_Pin == GPIO_PIN_0)
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d10d      	bne.n	8000fec <HAL_GPIO_EXTI_Callback+0x30>
    {
    	readtemperature = true;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
    	//xSemaphoreGiveFromISR(flagSemaphore, &xHigherPriorityTaskWoken);
    	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d007      	beq.n	8000fec <HAL_GPIO_EXTI_Callback+0x30>
 8000fdc:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <HAL_GPIO_EXTI_Callback+0x40>)
 8000fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	f3bf 8f4f 	dsb	sy
 8000fe8:	f3bf 8f6f 	isb	sy


    }
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	200008a8 	.word	0x200008a8
 8000ffc:	e000ed04 	.word	0xe000ed04

08001000 <myprintf>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void myprintf(const char *fmt, ...) {
 8001000:	b40f      	push	{r0, r1, r2, r3}
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001016:	480b      	ldr	r0, [pc, #44]	@ (8001044 <myprintf+0x44>)
 8001018:	f00d f99e 	bl	800e358 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 800101c:	4809      	ldr	r0, [pc, #36]	@ (8001044 <myprintf+0x44>)
 800101e:	f7ff f94f 	bl	80002c0 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	b29a      	uxth	r2, r3
 800102a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800102e:	4905      	ldr	r1, [pc, #20]	@ (8001044 <myprintf+0x44>)
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <myprintf+0x48>)
 8001032:	f005 fa2f 	bl	8006494 <HAL_UART_Transmit>

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001040:	b004      	add	sp, #16
 8001042:	4770      	bx	lr
 8001044:	20000d20 	.word	0x20000d20
 8001048:	2000050c 	.word	0x2000050c

0800104c <sd_init>:
void sd_init()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0

	 myprintf("\r\n~ SD card started ~\r\n\r\n");
 8001052:	482b      	ldr	r0, [pc, #172]	@ (8001100 <sd_init+0xb4>)
 8001054:	f7ff ffd4 	bl	8001000 <myprintf>
    //os_delay(1000);
	    // Mount the file system
	    fres = f_mount(&FatFs, "/", 1); // 1 = mount immediately
 8001058:	2201      	movs	r2, #1
 800105a:	492a      	ldr	r1, [pc, #168]	@ (8001104 <sd_init+0xb8>)
 800105c:	482a      	ldr	r0, [pc, #168]	@ (8001108 <sd_init+0xbc>)
 800105e:	f009 f981 	bl	800a364 <f_mount>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4b29      	ldr	r3, [pc, #164]	@ (800110c <sd_init+0xc0>)
 8001068:	701a      	strb	r2, [r3, #0]
	    if (fres != FR_OK) {
 800106a:	4b28      	ldr	r3, [pc, #160]	@ (800110c <sd_init+0xc0>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d006      	beq.n	8001080 <sd_init+0x34>
	        myprintf("f_mount error (%i)\r\n", fres);
 8001072:	4b26      	ldr	r3, [pc, #152]	@ (800110c <sd_init+0xc0>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	4825      	ldr	r0, [pc, #148]	@ (8001110 <sd_init+0xc4>)
 800107a:	f7ff ffc1 	bl	8001000 <myprintf>
 800107e:	e03b      	b.n	80010f8 <sd_init+0xac>
	        return; // Infinite loop on failure
	    } else {
	        myprintf("f_mount success (%i)\r\n", fres);
 8001080:	4b22      	ldr	r3, [pc, #136]	@ (800110c <sd_init+0xc0>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	4823      	ldr	r0, [pc, #140]	@ (8001114 <sd_init+0xc8>)
 8001088:	f7ff ffba 	bl	8001000 <myprintf>
	    // Variables for free space calculation
	    DWORD free_clusters, free_sectors, total_sectors;
	    FATFS* getFreeFs;

	    // Get free space
	    fres = f_getfree("", &free_clusters, &getFreeFs);
 800108c:	463a      	mov	r2, r7
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4619      	mov	r1, r3
 8001092:	4821      	ldr	r0, [pc, #132]	@ (8001118 <sd_init+0xcc>)
 8001094:	f009 fde7 	bl	800ac66 <f_getfree>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <sd_init+0xc0>)
 800109e:	701a      	strb	r2, [r3, #0]
	    if (fres != FR_OK) {
 80010a0:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <sd_init+0xc0>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d007      	beq.n	80010b8 <sd_init+0x6c>
	        myprintf("f_getfree error (%i)\r\n", fres);
 80010a8:	4b18      	ldr	r3, [pc, #96]	@ (800110c <sd_init+0xc0>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	481b      	ldr	r0, [pc, #108]	@ (800111c <sd_init+0xd0>)
 80010b0:	f7ff ffa6 	bl	8001000 <myprintf>
	        while (1); // Infinite loop on failure
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <sd_init+0x68>
	    }

	    // Calculate total and free space (formula from ChaN's documentation)
	    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	3b02      	subs	r3, #2
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	8952      	ldrh	r2, [r2, #10]
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	60fb      	str	r3, [r7, #12]
	    free_sectors = free_clusters * getFreeFs->csize;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	895b      	ldrh	r3, [r3, #10]
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	fb02 f303 	mul.w	r3, r2, r3
 80010d4:	60bb      	str	r3, [r7, #8]

	    myprintf("SD card stats:\r\n");
 80010d6:	4812      	ldr	r0, [pc, #72]	@ (8001120 <sd_init+0xd4>)
 80010d8:	f7ff ff92 	bl	8001000 <myprintf>
	    myprintf("%10lu KiB total drive space.\r\n", total_sectors / 2);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	085b      	lsrs	r3, r3, #1
 80010e0:	4619      	mov	r1, r3
 80010e2:	4810      	ldr	r0, [pc, #64]	@ (8001124 <sd_init+0xd8>)
 80010e4:	f7ff ff8c 	bl	8001000 <myprintf>
	    myprintf("%10lu KiB available.\r\n", free_sectors / 2);
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	085b      	lsrs	r3, r3, #1
 80010ec:	4619      	mov	r1, r3
 80010ee:	480e      	ldr	r0, [pc, #56]	@ (8001128 <sd_init+0xdc>)
 80010f0:	f7ff ff86 	bl	8001000 <myprintf>

	    // Open file for writing
	    sd_open();
 80010f4:	f000 f866 	bl	80011c4 <sd_open>



}
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	08010968 	.word	0x08010968
 8001104:	08010984 	.word	0x08010984
 8001108:	200008b8 	.word	0x200008b8
 800110c:	20000d1c 	.word	0x20000d1c
 8001110:	08010988 	.word	0x08010988
 8001114:	080109a0 	.word	0x080109a0
 8001118:	080109b8 	.word	0x080109b8
 800111c:	080109bc 	.word	0x080109bc
 8001120:	080109d4 	.word	0x080109d4
 8001124:	080109e8 	.word	0x080109e8
 8001128:	08010a08 	.word	0x08010a08

0800112c <sd_write>:
void sd_write()
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	fres = f_open(&fil, "write_os.txt", FA_WRITE | FA_OPEN_APPEND);
 8001130:	2232      	movs	r2, #50	@ 0x32
 8001132:	491c      	ldr	r1, [pc, #112]	@ (80011a4 <sd_write+0x78>)
 8001134:	481c      	ldr	r0, [pc, #112]	@ (80011a8 <sd_write+0x7c>)
 8001136:	f009 f979 	bl	800a42c <f_open>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <sd_write+0x80>)
 8001140:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK)
 8001142:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <sd_write+0x80>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d113      	bne.n	8001172 <sd_write+0x46>
			    {
			        myprintf("Opened 'write.txt' for writing successfully.\r\n");
 800114a:	4819      	ldr	r0, [pc, #100]	@ (80011b0 <sd_write+0x84>)
 800114c:	f7ff ff58 	bl	8001000 <myprintf>
			    } else
			    {
			        myprintf("f_open error (%i)\r\n", fres);
			        while (1); // Infinite loop on failure
			    }
			 fres = f_write(&fil, log_console.msg, log_console.msg_len, &bytesWrote);
 8001150:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <sd_write+0x88>)
 8001152:	889b      	ldrh	r3, [r3, #4]
 8001154:	461a      	mov	r2, r3
 8001156:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <sd_write+0x8c>)
 8001158:	4918      	ldr	r1, [pc, #96]	@ (80011bc <sd_write+0x90>)
 800115a:	4813      	ldr	r0, [pc, #76]	@ (80011a8 <sd_write+0x7c>)
 800115c:	f009 fb27 	bl	800a7ae <f_write>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <sd_write+0x80>)
 8001166:	701a      	strb	r2, [r3, #0]
			 if (fres == FR_OK)
 8001168:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <sd_write+0x80>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10c      	bne.n	800118a <sd_write+0x5e>
 8001170:	e007      	b.n	8001182 <sd_write+0x56>
			        myprintf("f_open error (%i)\r\n", fres);
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <sd_write+0x80>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4619      	mov	r1, r3
 8001178:	4811      	ldr	r0, [pc, #68]	@ (80011c0 <sd_write+0x94>)
 800117a:	f7ff ff41 	bl	8001000 <myprintf>
			        while (1); // Infinite loop on failure
 800117e:	bf00      	nop
 8001180:	e7fd      	b.n	800117e <sd_write+0x52>
			 		    {
			 		        myprintf("Opened 'write.txt' for writing successfully.\r\n");
 8001182:	480b      	ldr	r0, [pc, #44]	@ (80011b0 <sd_write+0x84>)
 8001184:	f7ff ff3c 	bl	8001000 <myprintf>
 8001188:	e007      	b.n	800119a <sd_write+0x6e>
			 		    } else
			 		    {
			 		        myprintf("f_open error (%i)\r\n", fres);
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <sd_write+0x80>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	480b      	ldr	r0, [pc, #44]	@ (80011c0 <sd_write+0x94>)
 8001192:	f7ff ff35 	bl	8001000 <myprintf>
			 		        while (1); // Infinite loop on failure
 8001196:	bf00      	nop
 8001198:	e7fd      	b.n	8001196 <sd_write+0x6a>
			 		    }
	f_close(&fil);
 800119a:	4803      	ldr	r0, [pc, #12]	@ (80011a8 <sd_write+0x7c>)
 800119c:	f009 fd34 	bl	800ac08 <f_close>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	08010a20 	.word	0x08010a20
 80011a8:	20000aec 	.word	0x20000aec
 80011ac:	20000d1c 	.word	0x20000d1c
 80011b0:	08010a30 	.word	0x08010a30
 80011b4:	200005a0 	.word	0x200005a0
 80011b8:	200008b4 	.word	0x200008b4
 80011bc:	200005a6 	.word	0x200005a6
 80011c0:	08010a60 	.word	0x08010a60

080011c4 <sd_open>:
void sd_open()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80011c8:	221a      	movs	r2, #26
 80011ca:	490e      	ldr	r1, [pc, #56]	@ (8001204 <sd_open+0x40>)
 80011cc:	480e      	ldr	r0, [pc, #56]	@ (8001208 <sd_open+0x44>)
 80011ce:	f009 f92d 	bl	800a42c <f_open>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <sd_open+0x48>)
 80011d8:	701a      	strb	r2, [r3, #0]
		    if (fres == FR_OK)
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <sd_open+0x48>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d103      	bne.n	80011ea <sd_open+0x26>
		    {
		        myprintf("Opened 'write.txt' for writing successfully.\r\n");
 80011e2:	480b      	ldr	r0, [pc, #44]	@ (8001210 <sd_open+0x4c>)
 80011e4:	f7ff ff0c 	bl	8001000 <myprintf>
 80011e8:	e007      	b.n	80011fa <sd_open+0x36>
		    } else
		    {
		        myprintf("f_open error (%i)\r\n", fres);
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <sd_open+0x48>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4619      	mov	r1, r3
 80011f0:	4808      	ldr	r0, [pc, #32]	@ (8001214 <sd_open+0x50>)
 80011f2:	f7ff ff05 	bl	8001000 <myprintf>
		        while (1); // Infinite loop on failure
 80011f6:	bf00      	nop
 80011f8:	e7fd      	b.n	80011f6 <sd_open+0x32>
		    }
	f_close(&fil);
 80011fa:	4803      	ldr	r0, [pc, #12]	@ (8001208 <sd_open+0x44>)
 80011fc:	f009 fd04 	bl	800ac08 <f_close>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	08010a74 	.word	0x08010a74
 8001208:	20000aec 	.word	0x20000aec
 800120c:	20000d1c 	.word	0x20000d1c
 8001210:	08010a30 	.word	0x08010a30
 8001214:	08010a60 	.word	0x08010a60

08001218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b090      	sub	sp, #64	@ 0x40
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121e:	f000 fe32 	bl	8001e86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001222:	f000 f8d9 	bl	80013d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8001226:	f000 f945 	bl	80014b4 <MX_GPIO_Init>
   MX_SPI1_Init();
 800122a:	f000 fa35 	bl	8001698 <MX_SPI1_Init>
    MX_FATFS_Init();
 800122e:	f005 fde9 	bl	8006e04 <MX_FATFS_Init>
    sd_init();
 8001232:	f7ff ff0b 	bl	800104c <sd_init>
  /* USER CODE BEGIN 2 */
   binarySemaphore = xSemaphoreCreateBinary();
 8001236:	2203      	movs	r2, #3
 8001238:	2100      	movs	r1, #0
 800123a:	2001      	movs	r0, #1
 800123c:	f00a f979 	bl	800b532 <xQueueGenericCreate>
 8001240:	4603      	mov	r3, r0
 8001242:	4a56      	ldr	r2, [pc, #344]	@ (800139c <main+0x184>)
 8001244:	6013      	str	r3, [r2, #0]
   flagSemaphore = xSemaphoreCreateBinary();
 8001246:	2203      	movs	r2, #3
 8001248:	2100      	movs	r1, #0
 800124a:	2001      	movs	r0, #1
 800124c:	f00a f971 	bl	800b532 <xQueueGenericCreate>
 8001250:	4603      	mov	r3, r0
 8001252:	4a53      	ldr	r2, [pc, #332]	@ (80013a0 <main+0x188>)
 8001254:	6013      	str	r3, [r2, #0]
   erlog_init(&log_console, &huart3);
 8001256:	4953      	ldr	r1, [pc, #332]	@ (80013a4 <main+0x18c>)
 8001258:	4853      	ldr	r0, [pc, #332]	@ (80013a8 <main+0x190>)
 800125a:	f006 fb59 	bl	8007910 <erlog_init>
   max30102_init(&max30102 , &hi2c2);
 800125e:	4953      	ldr	r1, [pc, #332]	@ (80013ac <main+0x194>)
 8001260:	4853      	ldr	r0, [pc, #332]	@ (80013b0 <main+0x198>)
 8001262:	f006 fe6b 	bl	8007f3c <max30102_init>

   read_register(&max30102, MAX30102_REVISIONID , &max30102.revision_id);
 8001266:	4a53      	ldr	r2, [pc, #332]	@ (80013b4 <main+0x19c>)
 8001268:	21fe      	movs	r1, #254	@ 0xfe
 800126a:	4851      	ldr	r0, [pc, #324]	@ (80013b0 <main+0x198>)
 800126c:	f006 fe89 	bl	8007f82 <read_register>
   read_register(&max30102, MAX30102_PARTID , &max30102.part_id);
 8001270:	4a51      	ldr	r2, [pc, #324]	@ (80013b8 <main+0x1a0>)
 8001272:	21ff      	movs	r1, #255	@ 0xff
 8001274:	484e      	ldr	r0, [pc, #312]	@ (80013b0 <main+0x198>)
 8001276:	f006 fe84 	bl	8007f82 <read_register>
   log_console.msg_len = sprintf((char *)log_console.msg,"MAX30102 Revision_id: %x, Part_id: %x\r\n", max30102.revision_id, max30102.part_id);
 800127a:	4b4d      	ldr	r3, [pc, #308]	@ (80013b0 <main+0x198>)
 800127c:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8001280:	461a      	mov	r2, r3
 8001282:	4b4b      	ldr	r3, [pc, #300]	@ (80013b0 <main+0x198>)
 8001284:	f893 3187 	ldrb.w	r3, [r3, #391]	@ 0x187
 8001288:	494c      	ldr	r1, [pc, #304]	@ (80013bc <main+0x1a4>)
 800128a:	484d      	ldr	r0, [pc, #308]	@ (80013c0 <main+0x1a8>)
 800128c:	f00c ff56 	bl	800e13c <siprintf>
 8001290:	4603      	mov	r3, r0
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b44      	ldr	r3, [pc, #272]	@ (80013a8 <main+0x190>)
 8001296:	809a      	strh	r2, [r3, #4]
   erlog_write(&log_console);
 8001298:	4843      	ldr	r0, [pc, #268]	@ (80013a8 <main+0x190>)
 800129a:	f006 fb54 	bl	8007946 <erlog_write>
   erlog_clear(&log_console);
 800129e:	4842      	ldr	r0, [pc, #264]	@ (80013a8 <main+0x190>)
 80012a0:	f006 fb63 	bl	800796a <erlog_clear>


   max30102_clear_fifo(&max30102);
 80012a4:	4842      	ldr	r0, [pc, #264]	@ (80013b0 <main+0x198>)
 80012a6:	f006 feed 	bl	8008084 <max30102_clear_fifo>
   max30102_softReset(&max30102);
 80012aa:	4841      	ldr	r0, [pc, #260]	@ (80013b0 <main+0x198>)
 80012ac:	f007 f82a 	bl	8008304 <max30102_softReset>
   max30102_set_fifoaverage(&max30102 , max30102_smp_ave_4);
 80012b0:	2140      	movs	r1, #64	@ 0x40
 80012b2:	483f      	ldr	r0, [pc, #252]	@ (80013b0 <main+0x198>)
 80012b4:	f006 fefd 	bl	80080b2 <max30102_set_fifoaverage>
   max30102_enableFIFORollover(&max30102);
 80012b8:	483d      	ldr	r0, [pc, #244]	@ (80013b0 <main+0x198>)
 80012ba:	f006 ffa7 	bl	800820c <max30102_enableFIFORollover>

   max30102_setpulsewidth(&max30102 , max30102_pw_18_bit);
 80012be:	2103      	movs	r1, #3
 80012c0:	483b      	ldr	r0, [pc, #236]	@ (80013b0 <main+0x198>)
 80012c2:	f006 ff93 	bl	80081ec <max30102_setpulsewidth>
   max30102_setadcrange(&max30102, max30102_adc_4096);
 80012c6:	2120      	movs	r1, #32
 80012c8:	4839      	ldr	r0, [pc, #228]	@ (80013b0 <main+0x198>)
 80012ca:	f006 ff6f 	bl	80081ac <max30102_setadcrange>
   max30102_setsamplerate(&max30102, max30102_sr_400);
 80012ce:	210c      	movs	r1, #12
 80012d0:	4837      	ldr	r0, [pc, #220]	@ (80013b0 <main+0x198>)
 80012d2:	f006 ff7b 	bl	80081cc <max30102_setsamplerate>
   max30102_setledmode(&max30102 , max30102_led_irg);
 80012d6:	2103      	movs	r1, #3
 80012d8:	4835      	ldr	r0, [pc, #212]	@ (80013b0 <main+0x198>)
 80012da:	f006 ff57 	bl	800818c <max30102_setledmode>
   max30102_set_pulseamplitude(&max30102, 0x1F, RED_COLOUR);   // configure heartbeat sensor colours
 80012de:	2201      	movs	r2, #1
 80012e0:	211f      	movs	r1, #31
 80012e2:	4833      	ldr	r0, [pc, #204]	@ (80013b0 <main+0x198>)
 80012e4:	f006 ffde 	bl	80082a4 <max30102_set_pulseamplitude>
   max30102_set_pulseamplitude(&max30102, 0x1F, GREEN_COLOUR);
 80012e8:	2202      	movs	r2, #2
 80012ea:	211f      	movs	r1, #31
 80012ec:	4830      	ldr	r0, [pc, #192]	@ (80013b0 <main+0x198>)
 80012ee:	f006 ffd9 	bl	80082a4 <max30102_set_pulseamplitude>
   max30102_set_pulseamplitude(&max30102, 0x1F, IR);
 80012f2:	2203      	movs	r2, #3
 80012f4:	211f      	movs	r1, #31
 80012f6:	482e      	ldr	r0, [pc, #184]	@ (80013b0 <main+0x198>)
 80012f8:	f006 ffd4 	bl	80082a4 <max30102_set_pulseamplitude>
   max30102_set_pulseamplitude(&max30102, 0x1F, PROXIMITY);
 80012fc:	2204      	movs	r2, #4
 80012fe:	211f      	movs	r1, #31
 8001300:	482b      	ldr	r0, [pc, #172]	@ (80013b0 <main+0x198>)
 8001302:	f006 ffcf 	bl	80082a4 <max30102_set_pulseamplitude>

   max30102_enableSlot(&max30102 , 3, SLOT_GREEN_LED);
 8001306:	2303      	movs	r3, #3
 8001308:	461a      	mov	r2, r3
 800130a:	2103      	movs	r1, #3
 800130c:	4828      	ldr	r0, [pc, #160]	@ (80013b0 <main+0x198>)
 800130e:	f006 ff8b 	bl	8008228 <max30102_enableSlot>
   max30102_set_pulseamplitude(&max30102, 0x0A, RED_COLOUR);   // configure heartbeat sensor colours
 8001312:	2201      	movs	r2, #1
 8001314:	210a      	movs	r1, #10
 8001316:	4826      	ldr	r0, [pc, #152]	@ (80013b0 <main+0x198>)
 8001318:	f006 ffc4 	bl	80082a4 <max30102_set_pulseamplitude>
   max30102_set_pulseamplitude(&max30102, 0x00, GREEN_COLOUR);
 800131c:	2202      	movs	r2, #2
 800131e:	2100      	movs	r1, #0
 8001320:	4823      	ldr	r0, [pc, #140]	@ (80013b0 <main+0x198>)
 8001322:	f006 ffbf 	bl	80082a4 <max30102_set_pulseamplitude>
   EXTI_Init(&max30102);
 8001326:	4822      	ldr	r0, [pc, #136]	@ (80013b0 <main+0x198>)
 8001328:	f007 f91b 	bl	8008562 <EXTI_Init>
   max30102_enableDIETEMPRDY(&max30102);
 800132c:	4820      	ldr	r0, [pc, #128]	@ (80013b0 <main+0x198>)
 800132e:	f006 fe9b 	bl	8008068 <max30102_enableDIETEMPRDY>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of logger */
  osSemaphoreDef(logger);
 8001332:	2300      	movs	r3, #0
 8001334:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001336:	2300      	movs	r3, #0
 8001338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  loggerHandle = osSemaphoreCreate(osSemaphore(logger), 1);
 800133a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800133e:	2101      	movs	r1, #1
 8001340:	4618      	mov	r0, r3
 8001342:	f009 fe85 	bl	800b050 <osSemaphoreCreate>
 8001346:	4603      	mov	r3, r0
 8001348:	4a1e      	ldr	r2, [pc, #120]	@ (80013c4 <main+0x1ac>)
 800134a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of logdata */
  osThreadDef(logdata, log_data, osPriorityNormal, 0, 512);
 800134c:	4b1e      	ldr	r3, [pc, #120]	@ (80013c8 <main+0x1b0>)
 800134e:	f107 041c 	add.w	r4, r7, #28
 8001352:	461d      	mov	r5, r3
 8001354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001358:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800135c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  logdataHandle = osThreadCreate(osThread(logdata), NULL);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f009 fe12 	bl	800af90 <osThreadCreate>
 800136c:	4603      	mov	r3, r0
 800136e:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <main+0x1b4>)
 8001370:	6013      	str	r3, [r2, #0]

  /* definition and creation of max30102_acq */
  osThreadDef(max30102_acq, max30102_acqure, osPriorityIdle, 0, 512);
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <main+0x1b8>)
 8001374:	463c      	mov	r4, r7
 8001376:	461d      	mov	r5, r3
 8001378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001380:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  max30102_acqHandle = osThreadCreate(osThread(max30102_acq), NULL);
 8001384:	463b      	mov	r3, r7
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f009 fe01 	bl	800af90 <osThreadCreate>
 800138e:	4603      	mov	r3, r0
 8001390:	4a10      	ldr	r2, [pc, #64]	@ (80013d4 <main+0x1bc>)
 8001392:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001394:	f009 fdf5 	bl	800af82 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <main+0x180>
 800139c:	200008ac 	.word	0x200008ac
 80013a0:	200008b0 	.word	0x200008b0
 80013a4:	2000050c 	.word	0x2000050c
 80013a8:	200005a0 	.word	0x200005a0
 80013ac:	200004b8 	.word	0x200004b8
 80013b0:	200006a8 	.word	0x200006a8
 80013b4:	20000830 	.word	0x20000830
 80013b8:	2000082f 	.word	0x2000082f
 80013bc:	08010a80 	.word	0x08010a80
 80013c0:	200005a6 	.word	0x200005a6
 80013c4:	2000059c 	.word	0x2000059c
 80013c8:	08010ab0 	.word	0x08010ab0
 80013cc:	20000594 	.word	0x20000594
 80013d0:	08010adc 	.word	0x08010adc
 80013d4:	20000598 	.word	0x20000598

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b094      	sub	sp, #80	@ 0x50
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	2230      	movs	r2, #48	@ 0x30
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00c ffc4 	bl	800e374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013fc:	f002 ff0a 	bl	8004214 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001400:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <SystemClock_Config+0xd4>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	4a29      	ldr	r2, [pc, #164]	@ (80014ac <SystemClock_Config+0xd4>)
 8001406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800140a:	6413      	str	r3, [r2, #64]	@ 0x40
 800140c:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <SystemClock_Config+0xd4>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001418:	4b25      	ldr	r3, [pc, #148]	@ (80014b0 <SystemClock_Config+0xd8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001420:	4a23      	ldr	r2, [pc, #140]	@ (80014b0 <SystemClock_Config+0xd8>)
 8001422:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b21      	ldr	r3, [pc, #132]	@ (80014b0 <SystemClock_Config+0xd8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001434:	2303      	movs	r3, #3
 8001436:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001438:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143e:	2301      	movs	r3, #1
 8001440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001442:	2310      	movs	r3, #16
 8001444:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001446:	2302      	movs	r3, #2
 8001448:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800144a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800144e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001450:	2304      	movs	r3, #4
 8001452:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001454:	23d8      	movs	r3, #216	@ 0xd8
 8001456:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001458:	2302      	movs	r3, #2
 800145a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800145c:	2309      	movs	r3, #9
 800145e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001460:	f107 0320 	add.w	r3, r7, #32
 8001464:	4618      	mov	r0, r3
 8001466:	f002 fee5 	bl	8004234 <HAL_RCC_OscConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001470:	f000 fa0c 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001474:	230f      	movs	r3, #15
 8001476:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001480:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001484:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001486:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800148a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f003 f972 	bl	800477c <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800149e:	f000 f9f5 	bl	800188c <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3750      	adds	r7, #80	@ 0x50
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40007000 	.word	0x40007000

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	@ 0x30
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a6c      	ldr	r2, [pc, #432]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014e2:	4b67      	ldr	r3, [pc, #412]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a66      	ldr	r2, [pc, #408]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 80014e8:	f043 0320 	orr.w	r3, r3, #32
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b64      	ldr	r3, [pc, #400]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fa:	4b61      	ldr	r3, [pc, #388]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a60      	ldr	r2, [pc, #384]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 8001500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b5e      	ldr	r3, [pc, #376]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	4b5b      	ldr	r3, [pc, #364]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a5a      	ldr	r2, [pc, #360]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b58      	ldr	r3, [pc, #352]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	4b55      	ldr	r3, [pc, #340]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a54      	ldr	r2, [pc, #336]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b52      	ldr	r3, [pc, #328]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001542:	4b4f      	ldr	r3, [pc, #316]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a4e      	ldr	r2, [pc, #312]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 8001548:	f043 0308 	orr.w	r3, r3, #8
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b4c      	ldr	r3, [pc, #304]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800155a:	4b49      	ldr	r3, [pc, #292]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a48      	ldr	r2, [pc, #288]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 8001560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b46      	ldr	r3, [pc, #280]	@ (8001680 <MX_GPIO_Init+0x1cc>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001578:	4842      	ldr	r0, [pc, #264]	@ (8001684 <MX_GPIO_Init+0x1d0>)
 800157a:	f000 ff83 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001584:	4840      	ldr	r0, [pc, #256]	@ (8001688 <MX_GPIO_Init+0x1d4>)
 8001586:	f000 ff7d 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	2140      	movs	r1, #64	@ 0x40
 800158e:	483f      	ldr	r0, [pc, #252]	@ (800168c <MX_GPIO_Init+0x1d8>)
 8001590:	f000 ff78 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001594:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800159a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800159e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4839      	ldr	r0, [pc, #228]	@ (8001690 <MX_GPIO_Init+0x1dc>)
 80015ac:	f000 fdce 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80015b0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	482e      	ldr	r0, [pc, #184]	@ (8001684 <MX_GPIO_Init+0x1d0>)
 80015ca:	f000 fdbf 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80015ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	4828      	ldr	r0, [pc, #160]	@ (8001688 <MX_GPIO_Init+0x1d4>)
 80015e8:	f000 fdb0 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015ec:	2340      	movs	r3, #64	@ 0x40
 80015ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	4619      	mov	r1, r3
 8001602:	4822      	ldr	r0, [pc, #136]	@ (800168c <MX_GPIO_Init+0x1d8>)
 8001604:	f000 fda2 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001608:	2380      	movs	r3, #128	@ 0x80
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4619      	mov	r1, r3
 800161a:	481c      	ldr	r0, [pc, #112]	@ (800168c <MX_GPIO_Init+0x1d8>)
 800161c:	f000 fd96 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001620:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001632:	230a      	movs	r3, #10
 8001634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	4619      	mov	r1, r3
 800163c:	4815      	ldr	r0, [pc, #84]	@ (8001694 <MX_GPIO_Init+0x1e0>)
 800163e:	f000 fd85 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001642:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	480f      	ldr	r0, [pc, #60]	@ (8001694 <MX_GPIO_Init+0x1e0>)
 8001658:	f000 fd78 	bl	800214c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800165c:	2301      	movs	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 8001660:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001664:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001666:	2301      	movs	r3, #1
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_GPIO_Init+0x1d4>)
 8001672:	f000 fd6b 	bl	800214c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001676:	bf00      	nop
 8001678:	3730      	adds	r7, #48	@ 0x30
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400
 8001688:	40020c00 	.word	0x40020c00
 800168c:	40021800 	.word	0x40021800
 8001690:	40020800 	.word	0x40020800
 8001694:	40020000 	.word	0x40020000

08001698 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <MX_SPI1_Init+0x74>)
 800169e:	4a1c      	ldr	r2, [pc, #112]	@ (8001710 <MX_SPI1_Init+0x78>)
 80016a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016a2:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <MX_SPI1_Init+0x74>)
 80016a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016aa:	4b18      	ldr	r3, [pc, #96]	@ (800170c <MX_SPI1_Init+0x74>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <MX_SPI1_Init+0x74>)
 80016b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80016b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b8:	4b14      	ldr	r3, [pc, #80]	@ (800170c <MX_SPI1_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016be:	4b13      	ldr	r3, [pc, #76]	@ (800170c <MX_SPI1_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <MX_SPI1_Init+0x74>)
 80016c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <MX_SPI1_Init+0x74>)
 80016ce:	2230      	movs	r2, #48	@ 0x30
 80016d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <MX_SPI1_Init+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <MX_SPI1_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <MX_SPI1_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <MX_SPI1_Init+0x74>)
 80016e6:	2207      	movs	r2, #7
 80016e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <MX_SPI1_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_SPI1_Init+0x74>)
 80016f2:	2208      	movs	r2, #8
 80016f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_SPI1_Init+0x74>)
 80016f8:	f003 fde0 	bl	80052bc <HAL_SPI_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001702:	f000 f8c3 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000834 	.word	0x20000834
 8001710:	40013000 	.word	0x40013000

08001714 <log_data>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_log_data */
void log_data(void const * argument)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

	  if (xSemaphoreTake(binarySemaphore, portMAX_DELAY) == pdTRUE)
 800171c:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <log_data+0x38>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001724:	4618      	mov	r0, r3
 8001726:	f00a f909 	bl	800b93c <xQueueSemaphoreTake>
 800172a:	4603      	mov	r3, r0
 800172c:	2b01      	cmp	r3, #1
 800172e:	d1f5      	bne.n	800171c <log_data+0x8>
	  {
		  if(log_console.msg_len != 0)
 8001730:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <log_data+0x3c>)
 8001732:	889b      	ldrh	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f1      	beq.n	800171c <log_data+0x8>
		  {
			  sd_write();
 8001738:	f7ff fcf8 	bl	800112c <sd_write>
			  erlog_write(&log_console);
 800173c:	4804      	ldr	r0, [pc, #16]	@ (8001750 <log_data+0x3c>)
 800173e:	f006 f902 	bl	8007946 <erlog_write>
			  erlog_clear(&log_console);
 8001742:	4803      	ldr	r0, [pc, #12]	@ (8001750 <log_data+0x3c>)
 8001744:	f006 f911 	bl	800796a <erlog_clear>
	  if (xSemaphoreTake(binarySemaphore, portMAX_DELAY) == pdTRUE)
 8001748:	e7e8      	b.n	800171c <log_data+0x8>
 800174a:	bf00      	nop
 800174c:	200008ac 	.word	0x200008ac
 8001750:	200005a0 	.word	0x200005a0

08001754 <max30102_acqure>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_max30102_acqure */
void max30102_acqure(void const * argument)
{
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af02      	add	r7, sp, #8
 800175a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN max30102_acqure */
  /* Infinite loop */
  int ir_values = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  if(readtemperature == true)
 8001760:	4b34      	ldr	r3, [pc, #208]	@ (8001834 <max30102_acqure+0xe0>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d01f      	beq.n	80017aa <max30102_acqure+0x56>
	  {
	  		temp = max30102_readtemp(&max30102);
 800176a:	4833      	ldr	r0, [pc, #204]	@ (8001838 <max30102_acqure+0xe4>)
 800176c:	f006 fcb2 	bl	80080d4 <max30102_readtemp>
 8001770:	eef0 7a40 	vmov.f32	s15, s0
 8001774:	4b31      	ldr	r3, [pc, #196]	@ (800183c <max30102_acqure+0xe8>)
 8001776:	edc3 7a00 	vstr	s15, [r3]
	  	  	log_console.msg_len= sprintf((char *)log_console.msg,"Temp :- %0.2f C \r\n", temp);
 800177a:	4b30      	ldr	r3, [pc, #192]	@ (800183c <max30102_acqure+0xe8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe ff0a 	bl	8000598 <__aeabi_f2d>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	492d      	ldr	r1, [pc, #180]	@ (8001840 <max30102_acqure+0xec>)
 800178a:	482e      	ldr	r0, [pc, #184]	@ (8001844 <max30102_acqure+0xf0>)
 800178c:	f00c fcd6 	bl	800e13c <siprintf>
 8001790:	4603      	mov	r3, r0
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b2c      	ldr	r3, [pc, #176]	@ (8001848 <max30102_acqure+0xf4>)
 8001796:	809a      	strh	r2, [r3, #4]
	  	  	erlog_write(&log_console);
 8001798:	482b      	ldr	r0, [pc, #172]	@ (8001848 <max30102_acqure+0xf4>)
 800179a:	f006 f8d4 	bl	8007946 <erlog_write>
	  	  	erlog_clear(&log_console);
 800179e:	482a      	ldr	r0, [pc, #168]	@ (8001848 <max30102_acqure+0xf4>)
 80017a0:	f006 f8e3 	bl	800796a <erlog_clear>
	  	  	readtemperature = false;
 80017a4:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <max30102_acqure+0xe0>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
	  }
	 ir_values = max30102_safeCheck(&max30102);
 80017aa:	4823      	ldr	r0, [pc, #140]	@ (8001838 <max30102_acqure+0xe4>)
 80017ac:	f006 feb0 	bl	8008510 <max30102_safeCheck>
 80017b0:	4603      	mov	r3, r0
 80017b2:	60fb      	str	r3, [r7, #12]
	 if(ir_values > 50000)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80017ba:	4293      	cmp	r3, r2
 80017bc:	dd20      	ble.n	8001800 <max30102_acqure+0xac>
	 {
	  	checkbeat(ir_values);
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f006 fb1e 	bl	8007e00 <checkbeat>
	  	Spo2AvgInit(&max30102);
 80017c4:	481c      	ldr	r0, [pc, #112]	@ (8001838 <max30102_acqure+0xe4>)
 80017c6:	f006 ff7b 	bl	80086c0 <Spo2AvgInit>
	  	log_console.msg_len= sprintf((char *)log_console.msg,"Finger Detected , Heartbeat:- %f , spo2 - %f\r\n", beatsPerMinute, spo2);
 80017ca:	4b20      	ldr	r3, [pc, #128]	@ (800184c <max30102_acqure+0xf8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fee2 	bl	8000598 <__aeabi_f2d>
 80017d4:	4604      	mov	r4, r0
 80017d6:	460d      	mov	r5, r1
 80017d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <max30102_acqure+0xfc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fedb 	bl	8000598 <__aeabi_f2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	e9cd 2300 	strd	r2, r3, [sp]
 80017ea:	4622      	mov	r2, r4
 80017ec:	462b      	mov	r3, r5
 80017ee:	4919      	ldr	r1, [pc, #100]	@ (8001854 <max30102_acqure+0x100>)
 80017f0:	4814      	ldr	r0, [pc, #80]	@ (8001844 <max30102_acqure+0xf0>)
 80017f2:	f00c fca3 	bl	800e13c <siprintf>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <max30102_acqure+0xf4>)
 80017fc:	809a      	strh	r2, [r3, #4]
 80017fe:	e00d      	b.n	800181c <max30102_acqure+0xc8>

	  }
	  else
	  {

	  		 HighPassFilter_reset(&high_pass_filter);
 8001800:	4815      	ldr	r0, [pc, #84]	@ (8001858 <max30102_acqure+0x104>)
 8001802:	f006 f967 	bl	8007ad4 <HighPassFilter_reset>
	  		 LowPassFilter_reset(&low_pass_filter);
 8001806:	4815      	ldr	r0, [pc, #84]	@ (800185c <max30102_acqure+0x108>)
 8001808:	f006 fa07 	bl	8007c1a <LowPassFilter_reset>
	  		 beatsPerMinute = 0;
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <max30102_acqure+0xf8>)
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
	  		 beatAvg = 0;
 8001814:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <max30102_acqure+0x10c>)
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
	  		 //strcpy(log_console.msg , "..No finger detected..\r\n");
	  		 //log_console.msg_len = strlen(log_console.msg);
	  }
	 osDelay(1000);
 800181c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001820:	f009 fc02 	bl	800b028 <osDelay>
	 xSemaphoreGive(binarySemaphore);
 8001824:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <max30102_acqure+0x110>)
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	2300      	movs	r3, #0
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	f009 fee3 	bl	800b5f8 <xQueueGenericSend>
	  if(readtemperature == true)
 8001832:	e795      	b.n	8001760 <max30102_acqure+0xc>
 8001834:	200008a8 	.word	0x200008a8
 8001838:	200006a8 	.word	0x200006a8
 800183c:	20000898 	.word	0x20000898
 8001840:	08010af8 	.word	0x08010af8
 8001844:	200005a6 	.word	0x200005a6
 8001848:	200005a0 	.word	0x200005a0
 800184c:	200008a0 	.word	0x200008a0
 8001850:	2000089c 	.word	0x2000089c
 8001854:	08010b0c 	.word	0x08010b0c
 8001858:	20000e98 	.word	0x20000e98
 800185c:	20000e88 	.word	0x20000e88
 8001860:	200008a4 	.word	0x200008a4
 8001864:	200008ac 	.word	0x200008ac

08001868 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800187a:	f000 fb11 	bl	8001ea0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40001000 	.word	0x40001000

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <Error_Handler+0x8>

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	4a10      	ldr	r2, [pc, #64]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018aa:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c2:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <HAL_MspInit+0x4c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	210f      	movs	r1, #15
 80018d2:	f06f 0001 	mvn.w	r0, #1
 80018d6:	f000 fbdf 	bl	8002098 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800

080018e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b0aa      	sub	sp, #168	@ 0xa8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2280      	movs	r2, #128	@ 0x80
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f00c fd33 	bl	800e374 <memset>
  if(hi2c->Instance==I2C2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a29      	ldr	r2, [pc, #164]	@ (80019b8 <HAL_I2C_MspInit+0xd0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d14b      	bne.n	80019b0 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001918:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800191c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800191e:	2300      	movs	r3, #0
 8001920:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4618      	mov	r0, r3
 8001928:	f003 f97e 	bl	8004c28 <HAL_RCCEx_PeriphCLKConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001932:	f7ff ffab 	bl	800188c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001936:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <HAL_I2C_MspInit+0xd4>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a20      	ldr	r2, [pc, #128]	@ (80019bc <HAL_I2C_MspInit+0xd4>)
 800193c:	f043 0320 	orr.w	r3, r3, #32
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <HAL_I2C_MspInit+0xd4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0320 	and.w	r3, r3, #32
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800194e:	2303      	movs	r3, #3
 8001950:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001954:	2312      	movs	r3, #18
 8001956:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001966:	2304      	movs	r3, #4
 8001968:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800196c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001970:	4619      	mov	r1, r3
 8001972:	4813      	ldr	r0, [pc, #76]	@ (80019c0 <HAL_I2C_MspInit+0xd8>)
 8001974:	f000 fbea 	bl	800214c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001978:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <HAL_I2C_MspInit+0xd4>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	4a0f      	ldr	r2, [pc, #60]	@ (80019bc <HAL_I2C_MspInit+0xd4>)
 800197e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001982:	6413      	str	r3, [r2, #64]	@ 0x40
 8001984:	4b0d      	ldr	r3, [pc, #52]	@ (80019bc <HAL_I2C_MspInit+0xd4>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001988:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2105      	movs	r1, #5
 8001994:	2021      	movs	r0, #33	@ 0x21
 8001996:	f000 fb7f 	bl	8002098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800199a:	2021      	movs	r0, #33	@ 0x21
 800199c:	f000 fb98 	bl	80020d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2105      	movs	r1, #5
 80019a4:	2022      	movs	r0, #34	@ 0x22
 80019a6:	f000 fb77 	bl	8002098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80019aa:	2022      	movs	r0, #34	@ 0x22
 80019ac:	f000 fb90 	bl	80020d0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80019b0:	bf00      	nop
 80019b2:	37a8      	adds	r7, #168	@ 0xa8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40005800 	.word	0x40005800
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40021400 	.word	0x40021400

080019c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	@ 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a17      	ldr	r2, [pc, #92]	@ (8001a40 <HAL_SPI_MspInit+0x7c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d127      	bne.n	8001a36 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019e6:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <HAL_SPI_MspInit+0x80>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	4a16      	ldr	r2, [pc, #88]	@ (8001a44 <HAL_SPI_MspInit+0x80>)
 80019ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019f2:	4b14      	ldr	r3, [pc, #80]	@ (8001a44 <HAL_SPI_MspInit+0x80>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <HAL_SPI_MspInit+0x80>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a10      	ldr	r2, [pc, #64]	@ (8001a44 <HAL_SPI_MspInit+0x80>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <HAL_SPI_MspInit+0x80>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a16:	23e0      	movs	r3, #224	@ 0xe0
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a26:	2305      	movs	r3, #5
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <HAL_SPI_MspInit+0x84>)
 8001a32:	f000 fb8b 	bl	800214c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	@ 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40013000 	.word	0x40013000
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020000 	.word	0x40020000

08001a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0aa      	sub	sp, #168	@ 0xa8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2280      	movs	r2, #128	@ 0x80
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f00c fc81 	bl	800e374 <memset>
  if(huart->Instance==USART3)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a22      	ldr	r2, [pc, #136]	@ (8001b00 <HAL_UART_MspInit+0xb4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d13c      	bne.n	8001af6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a80:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 f8cc 	bl	8004c28 <HAL_RCCEx_PeriphCLKConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a96:	f7ff fef9 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <HAL_UART_MspInit+0xb8>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	4a19      	ldr	r2, [pc, #100]	@ (8001b04 <HAL_UART_MspInit+0xb8>)
 8001aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa6:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <HAL_UART_MspInit+0xb8>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab2:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <HAL_UART_MspInit+0xb8>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a13      	ldr	r2, [pc, #76]	@ (8001b04 <HAL_UART_MspInit+0xb8>)
 8001ab8:	f043 0308 	orr.w	r3, r3, #8
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <HAL_UART_MspInit+0xb8>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001aca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ae4:	2307      	movs	r3, #7
 8001ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aea:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	@ (8001b08 <HAL_UART_MspInit+0xbc>)
 8001af2:	f000 fb2b 	bl	800214c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001af6:	bf00      	nop
 8001af8:	37a8      	adds	r7, #168	@ 0xa8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40004800 	.word	0x40004800
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40020c00 	.word	0x40020c00

08001b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08e      	sub	sp, #56	@ 0x38
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b1c:	4b33      	ldr	r3, [pc, #204]	@ (8001bec <HAL_InitTick+0xe0>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	4a32      	ldr	r2, [pc, #200]	@ (8001bec <HAL_InitTick+0xe0>)
 8001b22:	f043 0310 	orr.w	r3, r3, #16
 8001b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b28:	4b30      	ldr	r3, [pc, #192]	@ (8001bec <HAL_InitTick+0xe0>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b34:	f107 0210 	add.w	r2, r7, #16
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 f840 	bl	8004bc4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d103      	bne.n	8001b56 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b4e:	f003 f811 	bl	8004b74 <HAL_RCC_GetPCLK1Freq>
 8001b52:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b54:	e004      	b.n	8001b60 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b56:	f003 f80d 	bl	8004b74 <HAL_RCC_GetPCLK1Freq>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b62:	4a23      	ldr	r2, [pc, #140]	@ (8001bf0 <HAL_InitTick+0xe4>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	0c9b      	lsrs	r3, r3, #18
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b6e:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <HAL_InitTick+0xe8>)
 8001b70:	4a21      	ldr	r2, [pc, #132]	@ (8001bf8 <HAL_InitTick+0xec>)
 8001b72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b74:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf4 <HAL_InitTick+0xe8>)
 8001b76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf4 <HAL_InitTick+0xe8>)
 8001b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b82:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf4 <HAL_InitTick+0xe8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <HAL_InitTick+0xe8>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8e:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <HAL_InitTick+0xe8>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001b94:	4817      	ldr	r0, [pc, #92]	@ (8001bf4 <HAL_InitTick+0xe8>)
 8001b96:	f004 f95b 	bl	8005e50 <HAL_TIM_Base_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d11b      	bne.n	8001be0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ba8:	4812      	ldr	r0, [pc, #72]	@ (8001bf4 <HAL_InitTick+0xe8>)
 8001baa:	f004 f9b3 	bl	8005f14 <HAL_TIM_Base_Start_IT>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001bb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d111      	bne.n	8001be0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bbc:	2036      	movs	r0, #54	@ 0x36
 8001bbe:	f000 fa87 	bl	80020d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d808      	bhi.n	8001bda <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	2036      	movs	r0, #54	@ 0x36
 8001bce:	f000 fa63 	bl	8002098 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <HAL_InitTick+0xf0>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e002      	b.n	8001be0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001be0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3738      	adds	r7, #56	@ 0x38
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	431bde83 	.word	0x431bde83
 8001bf4:	20000e20 	.word	0x20000e20
 8001bf8:	40001000 	.word	0x40001000
 8001bfc:	20000004 	.word	0x20000004

08001c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <NMI_Handler+0x4>

08001c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <HardFault_Handler+0x4>

08001c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <MemManage_Handler+0x4>

08001c18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <I2C2_EV_IRQHandler+0x10>)
 8001c3e:	f001 f92b 	bl	8002e98 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200004b8 	.word	0x200004b8

08001c4c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <I2C2_ER_IRQHandler+0x10>)
 8001c52:	f001 f93b 	bl	8002ecc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200004b8 	.word	0x200004b8

08001c60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <TIM6_DAC_IRQHandler+0x10>)
 8001c66:	f004 f9cd 	bl	8006004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000e20 	.word	0x20000e20

08001c74 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);  // Call the HAL handler to manage the interrupt
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f000 fc1d 	bl	80024b8 <HAL_GPIO_EXTI_IRQHandler>
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  return 1;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <_kill>:

int _kill(int pid, int sig)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c9c:	f00c fbcc 	bl	800e438 <__errno>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2216      	movs	r2, #22
 8001ca4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_exit>:

void _exit (int status)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffe7 	bl	8001c92 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <_exit+0x12>

08001cc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e00a      	b.n	8001cf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cda:	f3af 8000 	nop.w
 8001cde:	4601      	mov	r1, r0
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	60ba      	str	r2, [r7, #8]
 8001ce6:	b2ca      	uxtb	r2, r1
 8001ce8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3301      	adds	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	dbf0      	blt.n	8001cda <_read+0x12>
  }

  return len;
 8001cf8:	687b      	ldr	r3, [r7, #4]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	e009      	b.n	8001d28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	60ba      	str	r2, [r7, #8]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	3301      	adds	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	dbf1      	blt.n	8001d14 <_write+0x12>
  }
  return len;
 8001d30:	687b      	ldr	r3, [r7, #4]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_close>:

int _close(int file)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d62:	605a      	str	r2, [r3, #4]
  return 0;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <_isatty>:

int _isatty(int file)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dac:	4a14      	ldr	r2, [pc, #80]	@ (8001e00 <_sbrk+0x5c>)
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <_sbrk+0x60>)
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db8:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <_sbrk+0x64>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	@ (8001e0c <_sbrk+0x68>)
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <_sbrk+0x64>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d207      	bcs.n	8001de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd4:	f00c fb30 	bl	800e438 <__errno>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	220c      	movs	r2, #12
 8001ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001de2:	e009      	b.n	8001df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de4:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dea:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <_sbrk+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	4a05      	ldr	r2, [pc, #20]	@ (8001e08 <_sbrk+0x64>)
 8001df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df6:	68fb      	ldr	r3, [r7, #12]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20040000 	.word	0x20040000
 8001e04:	00000400 	.word	0x00000400
 8001e08:	20000e6c 	.word	0x20000e6c
 8001e0c:	20004e18 	.word	0x20004e18

08001e10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <SystemInit+0x20>)
 8001e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e1a:	4a05      	ldr	r2, [pc, #20]	@ (8001e30 <SystemInit+0x20>)
 8001e1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001e38:	f7ff ffea 	bl	8001e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e3c:	480c      	ldr	r0, [pc, #48]	@ (8001e70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e3e:	490d      	ldr	r1, [pc, #52]	@ (8001e74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e40:	4a0d      	ldr	r2, [pc, #52]	@ (8001e78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e44:	e002      	b.n	8001e4c <LoopCopyDataInit>

08001e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4a:	3304      	adds	r3, #4

08001e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e50:	d3f9      	bcc.n	8001e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e52:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e54:	4c0a      	ldr	r4, [pc, #40]	@ (8001e80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e58:	e001      	b.n	8001e5e <LoopFillZerobss>

08001e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e5c:	3204      	adds	r2, #4

08001e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e60:	d3fb      	bcc.n	8001e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e62:	f00c faef 	bl	800e444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e66:	f7ff f9d7 	bl	8001218 <main>
  bx  lr    
 8001e6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e6c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e74:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001e78:	08010fb8 	.word	0x08010fb8
  ldr r2, =_sbss
 8001e7c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001e80:	20004e18 	.word	0x20004e18

08001e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <ADC_IRQHandler>

08001e86 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8a:	2003      	movs	r0, #3
 8001e8c:	f000 f8f9 	bl	8002082 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e90:	200f      	movs	r0, #15
 8001e92:	f7ff fe3b 	bl	8001b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e96:	f7ff fcff 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <HAL_IncTick+0x20>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_IncTick+0x24>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	4a04      	ldr	r2, [pc, #16]	@ (8001ec4 <HAL_IncTick+0x24>)
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	20000e70 	.word	0x20000e70

08001ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	@ (8001edc <HAL_GetTick+0x14>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000e70 	.word	0x20000e70

08001ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee8:	f7ff ffee 	bl	8001ec8 <HAL_GetTick>
 8001eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ef8:	d005      	beq.n	8001f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efa:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <HAL_Delay+0x44>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4413      	add	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f06:	bf00      	nop
 8001f08:	f7ff ffde 	bl	8001ec8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d8f7      	bhi.n	8001f08 <HAL_Delay+0x28>
  {
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000008 	.word	0x20000008

08001f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f38:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <__NVIC_SetPriorityGrouping+0x40>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f44:	4013      	ands	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	@ (8001f68 <__NVIC_SetPriorityGrouping+0x40>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00
 8001f6c:	05fa0000 	.word	0x05fa0000

08001f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f74:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <__NVIC_GetPriorityGrouping+0x18>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	f003 0307 	and.w	r3, r3, #7
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	db0b      	blt.n	8001fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	4907      	ldr	r1, [pc, #28]	@ (8001fc4 <__NVIC_EnableIRQ+0x38>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	2001      	movs	r0, #1
 8001fae:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	db0a      	blt.n	8001ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	490c      	ldr	r1, [pc, #48]	@ (8002014 <__NVIC_SetPriority+0x4c>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	0112      	lsls	r2, r2, #4
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	440b      	add	r3, r1
 8001fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff0:	e00a      	b.n	8002008 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4908      	ldr	r1, [pc, #32]	@ (8002018 <__NVIC_SetPriority+0x50>)
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3b04      	subs	r3, #4
 8002000:	0112      	lsls	r2, r2, #4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	440b      	add	r3, r1
 8002006:	761a      	strb	r2, [r3, #24]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000e100 	.word	0xe000e100
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	@ 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f1c3 0307 	rsb	r3, r3, #7
 8002036:	2b04      	cmp	r3, #4
 8002038:	bf28      	it	cs
 800203a:	2304      	movcs	r3, #4
 800203c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3304      	adds	r3, #4
 8002042:	2b06      	cmp	r3, #6
 8002044:	d902      	bls.n	800204c <NVIC_EncodePriority+0x30>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3b03      	subs	r3, #3
 800204a:	e000      	b.n	800204e <NVIC_EncodePriority+0x32>
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	401a      	ands	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002064:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43d9      	mvns	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	4313      	orrs	r3, r2
         );
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	@ 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ff4c 	bl	8001f28 <__NVIC_SetPriorityGrouping>
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020aa:	f7ff ff61 	bl	8001f70 <__NVIC_GetPriorityGrouping>
 80020ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	68b9      	ldr	r1, [r7, #8]
 80020b4:	6978      	ldr	r0, [r7, #20]
 80020b6:	f7ff ffb1 	bl	800201c <NVIC_EncodePriority>
 80020ba:	4602      	mov	r2, r0
 80020bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ff80 	bl	8001fc8 <__NVIC_SetPriority>
}
 80020c8:	bf00      	nop
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff54 	bl	8001f8c <__NVIC_EnableIRQ>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d004      	beq.n	800210a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2280      	movs	r2, #128	@ 0x80
 8002104:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e00c      	b.n	8002124 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2205      	movs	r2, #5
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800213e:	b2db      	uxtb	r3, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	@ 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	e169      	b.n	8002440 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	429a      	cmp	r2, r3
 8002186:	f040 8158 	bne.w	800243a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d005      	beq.n	80021a2 <HAL_GPIO_Init+0x56>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d130      	bne.n	8002204 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 0201 	and.w	r2, r3, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b03      	cmp	r3, #3
 800220e:	d017      	beq.n	8002240 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d123      	bne.n	8002294 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	220f      	movs	r2, #15
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	08da      	lsrs	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3208      	adds	r2, #8
 800228e:	69b9      	ldr	r1, [r7, #24]
 8002290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0203 	and.w	r2, r3, #3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80b2 	beq.w	800243a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	4b60      	ldr	r3, [pc, #384]	@ (8002458 <HAL_GPIO_Init+0x30c>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	4a5f      	ldr	r2, [pc, #380]	@ (8002458 <HAL_GPIO_Init+0x30c>)
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002458 <HAL_GPIO_Init+0x30c>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022ee:	4a5b      	ldr	r2, [pc, #364]	@ (800245c <HAL_GPIO_Init+0x310>)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	3302      	adds	r3, #2
 80022f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	220f      	movs	r2, #15
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a52      	ldr	r2, [pc, #328]	@ (8002460 <HAL_GPIO_Init+0x314>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d02b      	beq.n	8002372 <HAL_GPIO_Init+0x226>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a51      	ldr	r2, [pc, #324]	@ (8002464 <HAL_GPIO_Init+0x318>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d025      	beq.n	800236e <HAL_GPIO_Init+0x222>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a50      	ldr	r2, [pc, #320]	@ (8002468 <HAL_GPIO_Init+0x31c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d01f      	beq.n	800236a <HAL_GPIO_Init+0x21e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4f      	ldr	r2, [pc, #316]	@ (800246c <HAL_GPIO_Init+0x320>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d019      	beq.n	8002366 <HAL_GPIO_Init+0x21a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4e      	ldr	r2, [pc, #312]	@ (8002470 <HAL_GPIO_Init+0x324>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d013      	beq.n	8002362 <HAL_GPIO_Init+0x216>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4d      	ldr	r2, [pc, #308]	@ (8002474 <HAL_GPIO_Init+0x328>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00d      	beq.n	800235e <HAL_GPIO_Init+0x212>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4c      	ldr	r2, [pc, #304]	@ (8002478 <HAL_GPIO_Init+0x32c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d007      	beq.n	800235a <HAL_GPIO_Init+0x20e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4b      	ldr	r2, [pc, #300]	@ (800247c <HAL_GPIO_Init+0x330>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d101      	bne.n	8002356 <HAL_GPIO_Init+0x20a>
 8002352:	2307      	movs	r3, #7
 8002354:	e00e      	b.n	8002374 <HAL_GPIO_Init+0x228>
 8002356:	2308      	movs	r3, #8
 8002358:	e00c      	b.n	8002374 <HAL_GPIO_Init+0x228>
 800235a:	2306      	movs	r3, #6
 800235c:	e00a      	b.n	8002374 <HAL_GPIO_Init+0x228>
 800235e:	2305      	movs	r3, #5
 8002360:	e008      	b.n	8002374 <HAL_GPIO_Init+0x228>
 8002362:	2304      	movs	r3, #4
 8002364:	e006      	b.n	8002374 <HAL_GPIO_Init+0x228>
 8002366:	2303      	movs	r3, #3
 8002368:	e004      	b.n	8002374 <HAL_GPIO_Init+0x228>
 800236a:	2302      	movs	r3, #2
 800236c:	e002      	b.n	8002374 <HAL_GPIO_Init+0x228>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_GPIO_Init+0x228>
 8002372:	2300      	movs	r3, #0
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	f002 0203 	and.w	r2, r2, #3
 800237a:	0092      	lsls	r2, r2, #2
 800237c:	4093      	lsls	r3, r2
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002384:	4935      	ldr	r1, [pc, #212]	@ (800245c <HAL_GPIO_Init+0x310>)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	3302      	adds	r3, #2
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002392:	4b3b      	ldr	r3, [pc, #236]	@ (8002480 <HAL_GPIO_Init+0x334>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023b6:	4a32      	ldr	r2, [pc, #200]	@ (8002480 <HAL_GPIO_Init+0x334>)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023bc:	4b30      	ldr	r3, [pc, #192]	@ (8002480 <HAL_GPIO_Init+0x334>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023e0:	4a27      	ldr	r2, [pc, #156]	@ (8002480 <HAL_GPIO_Init+0x334>)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023e6:	4b26      	ldr	r3, [pc, #152]	@ (8002480 <HAL_GPIO_Init+0x334>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800240a:	4a1d      	ldr	r2, [pc, #116]	@ (8002480 <HAL_GPIO_Init+0x334>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002410:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <HAL_GPIO_Init+0x334>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002434:	4a12      	ldr	r2, [pc, #72]	@ (8002480 <HAL_GPIO_Init+0x334>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3301      	adds	r3, #1
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2b0f      	cmp	r3, #15
 8002444:	f67f ae92 	bls.w	800216c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3724      	adds	r7, #36	@ 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	40013800 	.word	0x40013800
 8002460:	40020000 	.word	0x40020000
 8002464:	40020400 	.word	0x40020400
 8002468:	40020800 	.word	0x40020800
 800246c:	40020c00 	.word	0x40020c00
 8002470:	40021000 	.word	0x40021000
 8002474:	40021400 	.word	0x40021400
 8002478:	40021800 	.word	0x40021800
 800247c:	40021c00 	.word	0x40021c00
 8002480:	40013c00 	.word	0x40013c00

08002484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
 8002490:	4613      	mov	r3, r2
 8002492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002494:	787b      	ldrb	r3, [r7, #1]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024a0:	e003      	b.n	80024aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024a2:	887b      	ldrh	r3, [r7, #2]
 80024a4:	041a      	lsls	r2, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	619a      	str	r2, [r3, #24]
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024c2:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ce:	4a05      	ldr	r2, [pc, #20]	@ (80024e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fd70 	bl	8000fbc <HAL_GPIO_EXTI_Callback>
  }
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40013c00 	.word	0x40013c00

080024e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e08b      	b.n	8002612 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff f9ea 	bl	80018e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	@ 0x24
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002538:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002548:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	e006      	b.n	8002570 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800256e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d108      	bne.n	800258a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	e007      	b.n	800259a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002598:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b1d      	ldr	r3, [pc, #116]	@ (800261c <HAL_I2C_Init+0x134>)
 80025a6:	430b      	orrs	r3, r1
 80025a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69d9      	ldr	r1, [r3, #28]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1a      	ldr	r2, [r3, #32]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	02008000 	.word	0x02008000

08002620 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	461a      	mov	r2, r3
 800262c:	460b      	mov	r3, r1
 800262e:	817b      	strh	r3, [r7, #10]
 8002630:	4613      	mov	r3, r2
 8002632:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b20      	cmp	r3, #32
 800263e:	f040 80fd 	bne.w	800283c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_I2C_Master_Transmit+0x30>
 800264c:	2302      	movs	r3, #2
 800264e:	e0f6      	b.n	800283e <HAL_I2C_Master_Transmit+0x21e>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002658:	f7ff fc36 	bl	8001ec8 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2319      	movs	r3, #25
 8002664:	2201      	movs	r2, #1
 8002666:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f001 fa5b 	bl	8003b26 <I2C_WaitOnFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e0e1      	b.n	800283e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2221      	movs	r2, #33	@ 0x21
 800267e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2210      	movs	r2, #16
 8002686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	893a      	ldrh	r2, [r7, #8]
 800269a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2bff      	cmp	r3, #255	@ 0xff
 80026aa:	d906      	bls.n	80026ba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	22ff      	movs	r2, #255	@ 0xff
 80026b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80026b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e007      	b.n	80026ca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80026c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026c8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d024      	beq.n	800271c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	781a      	ldrb	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002706:	b2db      	uxtb	r3, r3
 8002708:	3301      	adds	r3, #1
 800270a:	b2da      	uxtb	r2, r3
 800270c:	8979      	ldrh	r1, [r7, #10]
 800270e:	4b4e      	ldr	r3, [pc, #312]	@ (8002848 <HAL_I2C_Master_Transmit+0x228>)
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f001 fc55 	bl	8003fc4 <I2C_TransferConfig>
 800271a:	e066      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002720:	b2da      	uxtb	r2, r3
 8002722:	8979      	ldrh	r1, [r7, #10]
 8002724:	4b48      	ldr	r3, [pc, #288]	@ (8002848 <HAL_I2C_Master_Transmit+0x228>)
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f001 fc4a 	bl	8003fc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002730:	e05b      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	6a39      	ldr	r1, [r7, #32]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f001 fa4e 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e07b      	b.n	800283e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d034      	beq.n	80027ea <HAL_I2C_Master_Transmit+0x1ca>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002784:	2b00      	cmp	r3, #0
 8002786:	d130      	bne.n	80027ea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	2200      	movs	r2, #0
 8002790:	2180      	movs	r1, #128	@ 0x80
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f001 f9c7 	bl	8003b26 <I2C_WaitOnFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e04d      	b.n	800283e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2bff      	cmp	r3, #255	@ 0xff
 80027aa:	d90e      	bls.n	80027ca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	22ff      	movs	r2, #255	@ 0xff
 80027b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	8979      	ldrh	r1, [r7, #10]
 80027ba:	2300      	movs	r3, #0
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f001 fbfe 	bl	8003fc4 <I2C_TransferConfig>
 80027c8:	e00f      	b.n	80027ea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	8979      	ldrh	r1, [r7, #10]
 80027dc:	2300      	movs	r3, #0
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f001 fbed 	bl	8003fc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d19e      	bne.n	8002732 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	6a39      	ldr	r1, [r7, #32]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f001 fa34 	bl	8003c66 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e01a      	b.n	800283e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2220      	movs	r2, #32
 800280e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6859      	ldr	r1, [r3, #4]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <HAL_I2C_Master_Transmit+0x22c>)
 800281c:	400b      	ands	r3, r1
 800281e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	e000      	b.n	800283e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800283c:	2302      	movs	r3, #2
  }
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	80002000 	.word	0x80002000
 800284c:	fe00e800 	.word	0xfe00e800

08002850 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	461a      	mov	r2, r3
 800285c:	460b      	mov	r3, r1
 800285e:	817b      	strh	r3, [r7, #10]
 8002860:	4613      	mov	r3, r2
 8002862:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b20      	cmp	r3, #32
 800286e:	f040 80db 	bne.w	8002a28 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_I2C_Master_Receive+0x30>
 800287c:	2302      	movs	r3, #2
 800287e:	e0d4      	b.n	8002a2a <HAL_I2C_Master_Receive+0x1da>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002888:	f7ff fb1e 	bl	8001ec8 <HAL_GetTick>
 800288c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	2319      	movs	r3, #25
 8002894:	2201      	movs	r2, #1
 8002896:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f001 f943 	bl	8003b26 <I2C_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0bf      	b.n	8002a2a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2222      	movs	r2, #34	@ 0x22
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2210      	movs	r2, #16
 80028b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	893a      	ldrh	r2, [r7, #8]
 80028ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2bff      	cmp	r3, #255	@ 0xff
 80028da:	d90e      	bls.n	80028fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	8979      	ldrh	r1, [r7, #10]
 80028ea:	4b52      	ldr	r3, [pc, #328]	@ (8002a34 <HAL_I2C_Master_Receive+0x1e4>)
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f001 fb66 	bl	8003fc4 <I2C_TransferConfig>
 80028f8:	e06d      	b.n	80029d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002908:	b2da      	uxtb	r2, r3
 800290a:	8979      	ldrh	r1, [r7, #10]
 800290c:	4b49      	ldr	r3, [pc, #292]	@ (8002a34 <HAL_I2C_Master_Receive+0x1e4>)
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f001 fb55 	bl	8003fc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800291a:	e05c      	b.n	80029d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	6a39      	ldr	r1, [r7, #32]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f001 f9e3 	bl	8003cec <I2C_WaitOnRXNEFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e07c      	b.n	8002a2a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d034      	beq.n	80029d6 <HAL_I2C_Master_Receive+0x186>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002970:	2b00      	cmp	r3, #0
 8002972:	d130      	bne.n	80029d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	2200      	movs	r2, #0
 800297c:	2180      	movs	r1, #128	@ 0x80
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f001 f8d1 	bl	8003b26 <I2C_WaitOnFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e04d      	b.n	8002a2a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002992:	b29b      	uxth	r3, r3
 8002994:	2bff      	cmp	r3, #255	@ 0xff
 8002996:	d90e      	bls.n	80029b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	22ff      	movs	r2, #255	@ 0xff
 800299c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	8979      	ldrh	r1, [r7, #10]
 80029a6:	2300      	movs	r3, #0
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f001 fb08 	bl	8003fc4 <I2C_TransferConfig>
 80029b4:	e00f      	b.n	80029d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	8979      	ldrh	r1, [r7, #10]
 80029c8:	2300      	movs	r3, #0
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f001 faf7 	bl	8003fc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d19d      	bne.n	800291c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	6a39      	ldr	r1, [r7, #32]
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f001 f93e 	bl	8003c66 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e01a      	b.n	8002a2a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2220      	movs	r2, #32
 80029fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6859      	ldr	r1, [r3, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <HAL_I2C_Master_Receive+0x1e8>)
 8002a08:	400b      	ands	r3, r1
 8002a0a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	e000      	b.n	8002a2a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	80002400 	.word	0x80002400
 8002a38:	fe00e800 	.word	0xfe00e800

08002a3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	817b      	strh	r3, [r7, #10]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	813b      	strh	r3, [r7, #8]
 8002a52:	4613      	mov	r3, r2
 8002a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	f040 80f9 	bne.w	8002c56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_I2C_Mem_Write+0x34>
 8002a6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a76:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0ed      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_I2C_Mem_Write+0x4e>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e0e6      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a92:	f7ff fa19 	bl	8001ec8 <HAL_GetTick>
 8002a96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2319      	movs	r3, #25
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f001 f83e 	bl	8003b26 <I2C_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0d1      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2221      	movs	r2, #33	@ 0x21
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2240      	movs	r2, #64	@ 0x40
 8002ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a3a      	ldr	r2, [r7, #32]
 8002ace:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002adc:	88f8      	ldrh	r0, [r7, #6]
 8002ade:	893a      	ldrh	r2, [r7, #8]
 8002ae0:	8979      	ldrh	r1, [r7, #10]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	4603      	mov	r3, r0
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 fb81 	bl	80031f4 <I2C_RequestMemoryWrite>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0a9      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2bff      	cmp	r3, #255	@ 0xff
 8002b0c:	d90e      	bls.n	8002b2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	22ff      	movs	r2, #255	@ 0xff
 8002b12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	8979      	ldrh	r1, [r7, #10]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f001 fa4d 	bl	8003fc4 <I2C_TransferConfig>
 8002b2a:	e00f      	b.n	8002b4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	8979      	ldrh	r1, [r7, #10]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f001 fa3c 	bl	8003fc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f001 f841 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e07b      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	781a      	ldrb	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d034      	beq.n	8002c04 <HAL_I2C_Mem_Write+0x1c8>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d130      	bne.n	8002c04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2180      	movs	r1, #128	@ 0x80
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 ffba 	bl	8003b26 <I2C_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e04d      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2bff      	cmp	r3, #255	@ 0xff
 8002bc4:	d90e      	bls.n	8002be4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	22ff      	movs	r2, #255	@ 0xff
 8002bca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	8979      	ldrh	r1, [r7, #10]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f001 f9f1 	bl	8003fc4 <I2C_TransferConfig>
 8002be2:	e00f      	b.n	8002c04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	8979      	ldrh	r1, [r7, #10]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f001 f9e0 	bl	8003fc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d19e      	bne.n	8002b4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f001 f827 	bl	8003c66 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e01a      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2220      	movs	r2, #32
 8002c28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <HAL_I2C_Mem_Write+0x224>)
 8002c36:	400b      	ands	r3, r1
 8002c38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c56:	2302      	movs	r3, #2
  }
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	fe00e800 	.word	0xfe00e800

08002c64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	817b      	strh	r3, [r7, #10]
 8002c76:	460b      	mov	r3, r1
 8002c78:	813b      	strh	r3, [r7, #8]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	f040 80fd 	bne.w	8002e86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_I2C_Mem_Read+0x34>
 8002c92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c9e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0f1      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2C_Mem_Read+0x4e>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e0ea      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cba:	f7ff f905 	bl	8001ec8 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2319      	movs	r3, #25
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 ff2a 	bl	8003b26 <I2C_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0d5      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2222      	movs	r2, #34	@ 0x22
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2240      	movs	r2, #64	@ 0x40
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a3a      	ldr	r2, [r7, #32]
 8002cf6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d04:	88f8      	ldrh	r0, [r7, #6]
 8002d06:	893a      	ldrh	r2, [r7, #8]
 8002d08:	8979      	ldrh	r1, [r7, #10]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	4603      	mov	r3, r0
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 fac1 	bl	800329c <I2C_RequestMemoryRead>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0ad      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2bff      	cmp	r3, #255	@ 0xff
 8002d34:	d90e      	bls.n	8002d54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	8979      	ldrh	r1, [r7, #10]
 8002d44:	4b52      	ldr	r3, [pc, #328]	@ (8002e90 <HAL_I2C_Mem_Read+0x22c>)
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f001 f939 	bl	8003fc4 <I2C_TransferConfig>
 8002d52:	e00f      	b.n	8002d74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	4b4a      	ldr	r3, [pc, #296]	@ (8002e90 <HAL_I2C_Mem_Read+0x22c>)
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f001 f928 	bl	8003fc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2104      	movs	r1, #4
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fed1 	bl	8003b26 <I2C_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e07c      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d034      	beq.n	8002e34 <HAL_I2C_Mem_Read+0x1d0>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d130      	bne.n	8002e34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2180      	movs	r1, #128	@ 0x80
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fea2 	bl	8003b26 <I2C_WaitOnFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e04d      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2bff      	cmp	r3, #255	@ 0xff
 8002df4:	d90e      	bls.n	8002e14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	8979      	ldrh	r1, [r7, #10]
 8002e04:	2300      	movs	r3, #0
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f001 f8d9 	bl	8003fc4 <I2C_TransferConfig>
 8002e12:	e00f      	b.n	8002e34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	8979      	ldrh	r1, [r7, #10]
 8002e26:	2300      	movs	r3, #0
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f001 f8c8 	bl	8003fc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d19a      	bne.n	8002d74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 ff0f 	bl	8003c66 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e01a      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2220      	movs	r2, #32
 8002e58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <HAL_I2C_Mem_Read+0x230>)
 8002e66:	400b      	ands	r3, r1
 8002e68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
  }
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	80002400 	.word	0x80002400
 8002e94:	fe00e800 	.word	0xfe00e800

08002e98 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	68f9      	ldr	r1, [r7, #12]
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4798      	blx	r3
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00f      	beq.n	8002f0e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efc:	f043 0201 	orr.w	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f0c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00f      	beq.n	8002f38 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f26:	f043 0208 	orr.w	r2, r3, #8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f36:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00f      	beq.n	8002f62 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f50:	f043 0202 	orr.w	r2, r3, #2
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f60:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 030b 	and.w	r3, r3, #11
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002f72:	68f9      	ldr	r1, [r7, #12]
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fc7d 	bl	8003874 <I2C_ITError>
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	70fb      	strb	r3, [r7, #3]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003012:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <I2C_Slave_ISR_IT+0x24>
 8003022:	2302      	movs	r3, #2
 8003024:	e0e2      	b.n	80031ec <I2C_Slave_ISR_IT+0x1ea>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d009      	beq.n	800304c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800303e:	2b00      	cmp	r3, #0
 8003040:	d004      	beq.n	800304c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003042:	6939      	ldr	r1, [r7, #16]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fa5d 	bl	8003504 <I2C_ITSlaveCplt>
 800304a:	e0ca      	b.n	80031e2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	d04b      	beq.n	80030ee <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800305c:	2b00      	cmp	r3, #0
 800305e:	d046      	beq.n	80030ee <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d128      	bne.n	80030bc <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b28      	cmp	r3, #40	@ 0x28
 8003074:	d108      	bne.n	8003088 <I2C_Slave_ISR_IT+0x86>
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800307c:	d104      	bne.n	8003088 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800307e:	6939      	ldr	r1, [r7, #16]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 fba3 	bl	80037cc <I2C_ITListenCplt>
 8003086:	e031      	b.n	80030ec <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b29      	cmp	r3, #41	@ 0x29
 8003092:	d10e      	bne.n	80030b2 <I2C_Slave_ISR_IT+0xb0>
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800309a:	d00a      	beq.n	80030b2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2210      	movs	r2, #16
 80030a2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 fcfc 	bl	8003aa2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f9ce 	bl	800344c <I2C_ITSlaveSeqCplt>
 80030b0:	e01c      	b.n	80030ec <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2210      	movs	r2, #16
 80030b8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80030ba:	e08f      	b.n	80031dc <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2210      	movs	r2, #16
 80030c2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c8:	f043 0204 	orr.w	r2, r3, #4
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <I2C_Slave_ISR_IT+0xdc>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030dc:	d17e      	bne.n	80031dc <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	4619      	mov	r1, r3
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fbc5 	bl	8003874 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80030ea:	e077      	b.n	80031dc <I2C_Slave_ISR_IT+0x1da>
 80030ec:	e076      	b.n	80031dc <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d02f      	beq.n	8003158 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d02a      	beq.n	8003158 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d018      	beq.n	800313e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d14b      	bne.n	80031e0 <I2C_Slave_ISR_IT+0x1de>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800314e:	d047      	beq.n	80031e0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f97b 	bl	800344c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003156:	e043      	b.n	80031e0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003168:	2b00      	cmp	r3, #0
 800316a:	d004      	beq.n	8003176 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800316c:	6939      	ldr	r1, [r7, #16]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f8e8 	bl	8003344 <I2C_ITAddrCplt>
 8003174:	e035      	b.n	80031e2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d030      	beq.n	80031e2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003186:	2b00      	cmp	r3, #0
 8003188:	d02b      	beq.n	80031e2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d018      	beq.n	80031c6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80031c4:	e00d      	b.n	80031e2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031cc:	d002      	beq.n	80031d4 <I2C_Slave_ISR_IT+0x1d2>
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d106      	bne.n	80031e2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f939 	bl	800344c <I2C_ITSlaveSeqCplt>
 80031da:	e002      	b.n	80031e2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80031dc:	bf00      	nop
 80031de:	e000      	b.n	80031e2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80031e0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	4608      	mov	r0, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	461a      	mov	r2, r3
 8003202:	4603      	mov	r3, r0
 8003204:	817b      	strh	r3, [r7, #10]
 8003206:	460b      	mov	r3, r1
 8003208:	813b      	strh	r3, [r7, #8]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	8979      	ldrh	r1, [r7, #10]
 8003214:	4b20      	ldr	r3, [pc, #128]	@ (8003298 <I2C_RequestMemoryWrite+0xa4>)
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fed1 	bl	8003fc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	69b9      	ldr	r1, [r7, #24]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fcd6 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e02c      	b.n	8003290 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d105      	bne.n	8003248 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800323c:	893b      	ldrh	r3, [r7, #8]
 800323e:	b2da      	uxtb	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	629a      	str	r2, [r3, #40]	@ 0x28
 8003246:	e015      	b.n	8003274 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003248:	893b      	ldrh	r3, [r7, #8]
 800324a:	0a1b      	lsrs	r3, r3, #8
 800324c:	b29b      	uxth	r3, r3
 800324e:	b2da      	uxtb	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	69b9      	ldr	r1, [r7, #24]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fcbc 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e012      	b.n	8003290 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800326a:	893b      	ldrh	r3, [r7, #8]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2200      	movs	r2, #0
 800327c:	2180      	movs	r1, #128	@ 0x80
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fc51 	bl	8003b26 <I2C_WaitOnFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	80002000 	.word	0x80002000

0800329c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	4608      	mov	r0, r1
 80032a6:	4611      	mov	r1, r2
 80032a8:	461a      	mov	r2, r3
 80032aa:	4603      	mov	r3, r0
 80032ac:	817b      	strh	r3, [r7, #10]
 80032ae:	460b      	mov	r3, r1
 80032b0:	813b      	strh	r3, [r7, #8]
 80032b2:	4613      	mov	r3, r2
 80032b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	8979      	ldrh	r1, [r7, #10]
 80032bc:	4b20      	ldr	r3, [pc, #128]	@ (8003340 <I2C_RequestMemoryRead+0xa4>)
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	2300      	movs	r3, #0
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fe7e 	bl	8003fc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	69b9      	ldr	r1, [r7, #24]
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fc83 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e02c      	b.n	8003336 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d105      	bne.n	80032ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032e2:	893b      	ldrh	r3, [r7, #8]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80032ec:	e015      	b.n	800331a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032ee:	893b      	ldrh	r3, [r7, #8]
 80032f0:	0a1b      	lsrs	r3, r3, #8
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	69b9      	ldr	r1, [r7, #24]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 fc69 	bl	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e012      	b.n	8003336 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003310:	893b      	ldrh	r3, [r7, #8]
 8003312:	b2da      	uxtb	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2200      	movs	r2, #0
 8003322:	2140      	movs	r1, #64	@ 0x40
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fbfe 	bl	8003b26 <I2C_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	80002000 	.word	0x80002000

08003344 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003354:	b2db      	uxtb	r3, r3
 8003356:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800335a:	2b28      	cmp	r3, #40	@ 0x28
 800335c:	d16a      	bne.n	8003434 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	0c1b      	lsrs	r3, r3, #16
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	b29b      	uxth	r3, r3
 8003378:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800337c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	b29b      	uxth	r3, r3
 8003386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800338a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	b29b      	uxth	r3, r3
 8003394:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003398:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d138      	bne.n	8003414 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80033a2:	897b      	ldrh	r3, [r7, #10]
 80033a4:	09db      	lsrs	r3, r3, #7
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	89bb      	ldrh	r3, [r7, #12]
 80033aa:	4053      	eors	r3, r2
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f003 0306 	and.w	r3, r3, #6
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d11c      	bne.n	80033f0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80033b6:	897b      	ldrh	r3, [r7, #10]
 80033b8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d13b      	bne.n	8003444 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2208      	movs	r2, #8
 80033d8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80033e2:	89ba      	ldrh	r2, [r7, #12]
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	4619      	mov	r1, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff fdde 	bl	8002faa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80033ee:	e029      	b.n	8003444 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80033f0:	893b      	ldrh	r3, [r7, #8]
 80033f2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80033f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fe15 	bl	8004028 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003406:	89ba      	ldrh	r2, [r7, #12]
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	4619      	mov	r1, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff fdcc 	bl	8002faa <HAL_I2C_AddrCallback>
}
 8003412:	e017      	b.n	8003444 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003414:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fe05 	bl	8004028 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003426:	89ba      	ldrh	r2, [r7, #12]
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	4619      	mov	r1, r3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff fdbc 	bl	8002faa <HAL_I2C_AddrCallback>
}
 8003432:	e007      	b.n	8003444 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2208      	movs	r2, #8
 800343a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e00c      	b.n	800349a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003498:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b29      	cmp	r3, #41	@ 0x29
 80034a4:	d112      	bne.n	80034cc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2228      	movs	r2, #40	@ 0x28
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2221      	movs	r2, #33	@ 0x21
 80034b2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80034b4:	2101      	movs	r1, #1
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fdb6 	bl	8004028 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff fd5c 	bl	8002f82 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80034ca:	e017      	b.n	80034fc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80034d6:	d111      	bne.n	80034fc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2228      	movs	r2, #40	@ 0x28
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2222      	movs	r2, #34	@ 0x22
 80034e4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80034e6:	2102      	movs	r1, #2
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fd9d 	bl	8004028 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff fd4d 	bl	8002f96 <HAL_I2C_SlaveRxCpltCallback>
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003526:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2220      	movs	r2, #32
 800352e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003530:	7afb      	ldrb	r3, [r7, #11]
 8003532:	2b21      	cmp	r3, #33	@ 0x21
 8003534:	d002      	beq.n	800353c <I2C_ITSlaveCplt+0x38>
 8003536:	7afb      	ldrb	r3, [r7, #11]
 8003538:	2b29      	cmp	r3, #41	@ 0x29
 800353a:	d108      	bne.n	800354e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800353c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fd71 	bl	8004028 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2221      	movs	r2, #33	@ 0x21
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30
 800354c:	e019      	b.n	8003582 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800354e:	7afb      	ldrb	r3, [r7, #11]
 8003550:	2b22      	cmp	r3, #34	@ 0x22
 8003552:	d002      	beq.n	800355a <I2C_ITSlaveCplt+0x56>
 8003554:	7afb      	ldrb	r3, [r7, #11]
 8003556:	2b2a      	cmp	r3, #42	@ 0x2a
 8003558:	d108      	bne.n	800356c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800355a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fd62 	bl	8004028 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2222      	movs	r2, #34	@ 0x22
 8003568:	631a      	str	r2, [r3, #48]	@ 0x30
 800356a:	e00a      	b.n	8003582 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800356c:	7afb      	ldrb	r3, [r7, #11]
 800356e:	2b28      	cmp	r3, #40	@ 0x28
 8003570:	d107      	bne.n	8003582 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003572:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fd56 	bl	8004028 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003590:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4b89      	ldr	r3, [pc, #548]	@ (80037c4 <I2C_ITSlaveCplt+0x2c0>)
 800359e:	400b      	ands	r3, r1
 80035a0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fa7d 	bl	8003aa2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d013      	beq.n	80035da <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035c0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01f      	beq.n	800360a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035d8:	e017      	b.n	800360a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d012      	beq.n	800360a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035f2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d006      	beq.n	800360a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	b29a      	uxth	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d020      	beq.n	8003656 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f023 0304 	bic.w	r3, r3, #4
 800361a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00c      	beq.n	8003656 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003664:	f043 0204 	orr.w	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0310 	and.w	r3, r3, #16
 8003672:	2b00      	cmp	r3, #0
 8003674:	d049      	beq.n	800370a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800367c:	2b00      	cmp	r3, #0
 800367e:	d044      	beq.n	800370a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d128      	bne.n	80036dc <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b28      	cmp	r3, #40	@ 0x28
 8003694:	d108      	bne.n	80036a8 <I2C_ITSlaveCplt+0x1a4>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800369c:	d104      	bne.n	80036a8 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800369e:	6979      	ldr	r1, [r7, #20]
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f893 	bl	80037cc <I2C_ITListenCplt>
 80036a6:	e030      	b.n	800370a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b29      	cmp	r3, #41	@ 0x29
 80036b2:	d10e      	bne.n	80036d2 <I2C_ITSlaveCplt+0x1ce>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036ba:	d00a      	beq.n	80036d2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2210      	movs	r2, #16
 80036c2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f9ec 	bl	8003aa2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff febe 	bl	800344c <I2C_ITSlaveSeqCplt>
 80036d0:	e01b      	b.n	800370a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2210      	movs	r2, #16
 80036d8:	61da      	str	r2, [r3, #28]
 80036da:	e016      	b.n	800370a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2210      	movs	r2, #16
 80036e2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e8:	f043 0204 	orr.w	r2, r3, #4
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <I2C_ITSlaveCplt+0x1fa>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036fc:	d105      	bne.n	800370a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	4619      	mov	r1, r3
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f8b5 	bl	8003874 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371c:	2b00      	cmp	r3, #0
 800371e:	d010      	beq.n	8003742 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003724:	4619      	mov	r1, r3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8a4 	bl	8003874 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b28      	cmp	r3, #40	@ 0x28
 8003736:	d141      	bne.n	80037bc <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003738:	6979      	ldr	r1, [r7, #20]
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f846 	bl	80037cc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003740:	e03c      	b.n	80037bc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003746:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800374a:	d014      	beq.n	8003776 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff fe7d 	bl	800344c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a1c      	ldr	r2, [pc, #112]	@ (80037c8 <I2C_ITSlaveCplt+0x2c4>)
 8003756:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff fc29 	bl	8002fc6 <HAL_I2C_ListenCpltCallback>
}
 8003774:	e022      	b.n	80037bc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b22      	cmp	r3, #34	@ 0x22
 8003780:	d10e      	bne.n	80037a0 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff fbfc 	bl	8002f96 <HAL_I2C_SlaveRxCpltCallback>
}
 800379e:	e00d      	b.n	80037bc <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fbe3 	bl	8002f82 <HAL_I2C_SlaveTxCpltCallback>
}
 80037bc:	bf00      	nop
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	fe00e800 	.word	0xfe00e800
 80037c8:	ffff0000 	.word	0xffff0000

080037cc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a25      	ldr	r2, [pc, #148]	@ (8003870 <I2C_ITListenCplt+0xa4>)
 80037da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d022      	beq.n	8003848 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381e:	2b00      	cmp	r3, #0
 8003820:	d012      	beq.n	8003848 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003840:	f043 0204 	orr.w	r2, r3, #4
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003848:	f248 0103 	movw	r1, #32771	@ 0x8003
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fbeb 	bl	8004028 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2210      	movs	r2, #16
 8003858:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff fbaf 	bl	8002fc6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	ffff0000 	.word	0xffff0000

08003874 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003884:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a6d      	ldr	r2, [pc, #436]	@ (8003a48 <I2C_ITError+0x1d4>)
 8003892:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b28      	cmp	r3, #40	@ 0x28
 80038aa:	d005      	beq.n	80038b8 <I2C_ITError+0x44>
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	2b29      	cmp	r3, #41	@ 0x29
 80038b0:	d002      	beq.n	80038b8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80038b6:	d10b      	bne.n	80038d0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80038b8:	2103      	movs	r1, #3
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fbb4 	bl	8004028 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2228      	movs	r2, #40	@ 0x28
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a60      	ldr	r2, [pc, #384]	@ (8003a4c <I2C_ITError+0x1d8>)
 80038cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80038ce:	e030      	b.n	8003932 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80038d0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fba7 	bl	8004028 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f8e1 	bl	8003aa2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b60      	cmp	r3, #96	@ 0x60
 80038ea:	d01f      	beq.n	800392c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d114      	bne.n	800392c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b10      	cmp	r3, #16
 800390e:	d109      	bne.n	8003924 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2210      	movs	r2, #16
 8003916:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391c:	f043 0204 	orr.w	r2, r3, #4
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2220      	movs	r2, #32
 800392a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003936:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393c:	2b00      	cmp	r3, #0
 800393e:	d039      	beq.n	80039b4 <I2C_ITError+0x140>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b11      	cmp	r3, #17
 8003944:	d002      	beq.n	800394c <I2C_ITError+0xd8>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b21      	cmp	r3, #33	@ 0x21
 800394a:	d133      	bne.n	80039b4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003956:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800395a:	d107      	bne.n	800396c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800396a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe fbdd 	bl	8002130 <HAL_DMA_GetState>
 8003976:	4603      	mov	r3, r0
 8003978:	2b01      	cmp	r3, #1
 800397a:	d017      	beq.n	80039ac <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003980:	4a33      	ldr	r2, [pc, #204]	@ (8003a50 <I2C_ITError+0x1dc>)
 8003982:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe fbab 	bl	80020ec <HAL_DMA_Abort_IT>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d04d      	beq.n	8003a38 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039a6:	4610      	mov	r0, r2
 80039a8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039aa:	e045      	b.n	8003a38 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f851 	bl	8003a54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039b2:	e041      	b.n	8003a38 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d039      	beq.n	8003a30 <I2C_ITError+0x1bc>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2b12      	cmp	r3, #18
 80039c0:	d002      	beq.n	80039c8 <I2C_ITError+0x154>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b22      	cmp	r3, #34	@ 0x22
 80039c6:	d133      	bne.n	8003a30 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039d6:	d107      	bne.n	80039e8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fb9f 	bl	8002130 <HAL_DMA_GetState>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d017      	beq.n	8003a28 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fc:	4a14      	ldr	r2, [pc, #80]	@ (8003a50 <I2C_ITError+0x1dc>)
 80039fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe fb6d 	bl	80020ec <HAL_DMA_Abort_IT>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d011      	beq.n	8003a3c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a22:	4610      	mov	r0, r2
 8003a24:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a26:	e009      	b.n	8003a3c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f813 	bl	8003a54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a2e:	e005      	b.n	8003a3c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f80f 	bl	8003a54 <I2C_TreatErrorCallback>
  }
}
 8003a36:	e002      	b.n	8003a3e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a38:	bf00      	nop
 8003a3a:	e000      	b.n	8003a3e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a3c:	bf00      	nop
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	ffff0000 	.word	0xffff0000
 8003a4c:	08003003 	.word	0x08003003
 8003a50:	08003aeb 	.word	0x08003aeb

08003a54 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b60      	cmp	r3, #96	@ 0x60
 8003a66:	d10e      	bne.n	8003a86 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fab5 	bl	8002fee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a84:	e009      	b.n	8003a9a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff faa0 	bl	8002fda <HAL_I2C_ErrorCallback>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d103      	bne.n	8003ac0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2200      	movs	r2, #0
 8003abe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d007      	beq.n	8003ade <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	619a      	str	r2, [r3, #24]
  }
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b04:	2200      	movs	r2, #0
 8003b06:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b14:	2200      	movs	r2, #0
 8003b16:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f7ff ff9b 	bl	8003a54 <I2C_TreatErrorCallback>
}
 8003b1e:	bf00      	nop
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	4613      	mov	r3, r2
 8003b34:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b36:	e03b      	b.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	6839      	ldr	r1, [r7, #0]
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f961 	bl	8003e04 <I2C_IsErrorOccurred>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e041      	b.n	8003bd0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b52:	d02d      	beq.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b54:	f7fe f9b8 	bl	8001ec8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d302      	bcc.n	8003b6a <I2C_WaitOnFlagUntilTimeout+0x44>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d122      	bne.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4013      	ands	r3, r2
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	bf0c      	ite	eq
 8003b7a:	2301      	moveq	r3, #1
 8003b7c:	2300      	movne	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d113      	bne.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8c:	f043 0220 	orr.w	r2, r3, #32
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e00f      	b.n	8003bd0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d0b4      	beq.n	8003b38 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003be4:	e033      	b.n	8003c4e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f90a 	bl	8003e04 <I2C_IsErrorOccurred>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e031      	b.n	8003c5e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c00:	d025      	beq.n	8003c4e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c02:	f7fe f961 	bl	8001ec8 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d302      	bcc.n	8003c18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d11a      	bne.n	8003c4e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d013      	beq.n	8003c4e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	f043 0220 	orr.w	r2, r3, #32
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e007      	b.n	8003c5e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d1c4      	bne.n	8003be6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c72:	e02f      	b.n	8003cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f8c3 	bl	8003e04 <I2C_IsErrorOccurred>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e02d      	b.n	8003ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c88:	f7fe f91e 	bl	8001ec8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d302      	bcc.n	8003c9e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d11a      	bne.n	8003cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d013      	beq.n	8003cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb0:	f043 0220 	orr.w	r2, r3, #32
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e007      	b.n	8003ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d1c8      	bne.n	8003c74 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003cfc:	e071      	b.n	8003de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f87e 	bl	8003e04 <I2C_IsErrorOccurred>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d13b      	bne.n	8003d98 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d138      	bne.n	8003d98 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d105      	bne.n	8003d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b10      	cmp	r3, #16
 8003d4c:	d121      	bne.n	8003d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2210      	movs	r2, #16
 8003d54:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2204      	movs	r2, #4
 8003d5a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2220      	movs	r2, #32
 8003d62:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6859      	ldr	r1, [r3, #4]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4b24      	ldr	r3, [pc, #144]	@ (8003e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003d70:	400b      	ands	r3, r1
 8003d72:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	75fb      	strb	r3, [r7, #23]
 8003d90:	e002      	b.n	8003d98 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003d98:	f7fe f896 	bl	8001ec8 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d302      	bcc.n	8003dae <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d119      	bne.n	8003de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d116      	bne.n	8003de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d00f      	beq.n	8003de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc6:	f043 0220 	orr.w	r2, r3, #32
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d002      	beq.n	8003df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d083      	beq.n	8003cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	fe00e800 	.word	0xfe00e800

08003e04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	@ 0x28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d068      	beq.n	8003f02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2210      	movs	r2, #16
 8003e36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e38:	e049      	b.n	8003ece <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e40:	d045      	beq.n	8003ece <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e42:	f7fe f841 	bl	8001ec8 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <I2C_IsErrorOccurred+0x54>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d13a      	bne.n	8003ece <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e7a:	d121      	bne.n	8003ec0 <I2C_IsErrorOccurred+0xbc>
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e82:	d01d      	beq.n	8003ec0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003e84:	7cfb      	ldrb	r3, [r7, #19]
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d01a      	beq.n	8003ec0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e9a:	f7fe f815 	bl	8001ec8 <HAL_GetTick>
 8003e9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ea0:	e00e      	b.n	8003ec0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ea2:	f7fe f811 	bl	8001ec8 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b19      	cmp	r3, #25
 8003eae:	d907      	bls.n	8003ec0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	f043 0320 	orr.w	r3, r3, #32
 8003eb6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003ebe:	e006      	b.n	8003ece <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d1e9      	bne.n	8003ea2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d003      	beq.n	8003ee4 <I2C_IsErrorOccurred+0xe0>
 8003edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0aa      	beq.n	8003e3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d103      	bne.n	8003ef4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f043 0304 	orr.w	r3, r3, #4
 8003efa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00b      	beq.n	8003f4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	f043 0308 	orr.w	r3, r3, #8
 8003f3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	f043 0302 	orr.w	r3, r3, #2
 8003f5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01c      	beq.n	8003fb2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f7ff fd92 	bl	8003aa2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc0 <I2C_IsErrorOccurred+0x1bc>)
 8003f8a:	400b      	ands	r3, r1
 8003f8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	431a      	orrs	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3728      	adds	r7, #40	@ 0x28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	fe00e800 	.word	0xfe00e800

08003fc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	607b      	str	r3, [r7, #4]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	817b      	strh	r3, [r7, #10]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fd6:	897b      	ldrh	r3, [r7, #10]
 8003fd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fdc:	7a7b      	ldrb	r3, [r7, #9]
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fe4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ff2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	0d5b      	lsrs	r3, r3, #21
 8003ffe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004002:	4b08      	ldr	r3, [pc, #32]	@ (8004024 <I2C_TransferConfig+0x60>)
 8004004:	430b      	orrs	r3, r1
 8004006:	43db      	mvns	r3, r3
 8004008:	ea02 0103 	and.w	r1, r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004016:	bf00      	nop
 8004018:	371c      	adds	r7, #28
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	03ff63ff 	.word	0x03ff63ff

08004028 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004038:	887b      	ldrh	r3, [r7, #2]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00f      	beq.n	8004062 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004048:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004050:	b2db      	uxtb	r3, r3
 8004052:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004056:	2b28      	cmp	r3, #40	@ 0x28
 8004058:	d003      	beq.n	8004062 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004060:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004062:	887b      	ldrh	r3, [r7, #2]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00f      	beq.n	800408c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004072:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004080:	2b28      	cmp	r3, #40	@ 0x28
 8004082:	d003      	beq.n	800408c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800408a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800408c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004090:	2b00      	cmp	r3, #0
 8004092:	da03      	bge.n	800409c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800409a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800409c:	887b      	ldrh	r3, [r7, #2]
 800409e:	2b10      	cmp	r3, #16
 80040a0:	d103      	bne.n	80040aa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80040a8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d103      	bne.n	80040b8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f043 0320 	orr.w	r3, r3, #32
 80040b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80040b8:	887b      	ldrh	r3, [r7, #2]
 80040ba:	2b40      	cmp	r3, #64	@ 0x40
 80040bc:	d103      	bne.n	80040c6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040c4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6819      	ldr	r1, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	43da      	mvns	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	400a      	ands	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]
}
 80040d8:	bf00      	nop
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d138      	bne.n	800416c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004104:	2302      	movs	r3, #2
 8004106:	e032      	b.n	800416e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2224      	movs	r2, #36	@ 0x24
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004136:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6819      	ldr	r1, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	e000      	b.n	800416e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800416c:	2302      	movs	r3, #2
  }
}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b20      	cmp	r3, #32
 800418e:	d139      	bne.n	8004204 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800419a:	2302      	movs	r3, #2
 800419c:	e033      	b.n	8004206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2224      	movs	r2, #36	@ 0x24
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e000      	b.n	8004206 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004204:	2302      	movs	r3, #2
  }
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004218:	4b05      	ldr	r3, [pc, #20]	@ (8004230 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a04      	ldr	r2, [pc, #16]	@ (8004230 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800421e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004222:	6013      	str	r3, [r2, #0]
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40007000 	.word	0x40007000

08004234 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800423c:	2300      	movs	r3, #0
 800423e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e291      	b.n	800476e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8087 	beq.w	8004366 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004258:	4b96      	ldr	r3, [pc, #600]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 030c 	and.w	r3, r3, #12
 8004260:	2b04      	cmp	r3, #4
 8004262:	d00c      	beq.n	800427e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004264:	4b93      	ldr	r3, [pc, #588]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d112      	bne.n	8004296 <HAL_RCC_OscConfig+0x62>
 8004270:	4b90      	ldr	r3, [pc, #576]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004278:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800427c:	d10b      	bne.n	8004296 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427e:	4b8d      	ldr	r3, [pc, #564]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d06c      	beq.n	8004364 <HAL_RCC_OscConfig+0x130>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d168      	bne.n	8004364 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e26b      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800429e:	d106      	bne.n	80042ae <HAL_RCC_OscConfig+0x7a>
 80042a0:	4b84      	ldr	r3, [pc, #528]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a83      	ldr	r2, [pc, #524]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e02e      	b.n	800430c <HAL_RCC_OscConfig+0xd8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x9c>
 80042b6:	4b7f      	ldr	r3, [pc, #508]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a7e      	ldr	r2, [pc, #504]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b7c      	ldr	r3, [pc, #496]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7b      	ldr	r2, [pc, #492]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e01d      	b.n	800430c <HAL_RCC_OscConfig+0xd8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0xc0>
 80042da:	4b76      	ldr	r3, [pc, #472]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a75      	ldr	r2, [pc, #468]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b73      	ldr	r3, [pc, #460]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a72      	ldr	r2, [pc, #456]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0xd8>
 80042f4:	4b6f      	ldr	r3, [pc, #444]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a6e      	ldr	r2, [pc, #440]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b6c      	ldr	r3, [pc, #432]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a6b      	ldr	r2, [pc, #428]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800430a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fd fdd8 	bl	8001ec8 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431c:	f7fd fdd4 	bl	8001ec8 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	@ 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e21f      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b61      	ldr	r3, [pc, #388]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0xe8>
 800433a:	e014      	b.n	8004366 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fd fdc4 	bl	8001ec8 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004344:	f7fd fdc0 	bl	8001ec8 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	@ 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e20b      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	4b57      	ldr	r3, [pc, #348]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x110>
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d069      	beq.n	8004446 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004372:	4b50      	ldr	r3, [pc, #320]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437e:	4b4d      	ldr	r3, [pc, #308]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b08      	cmp	r3, #8
 8004388:	d11c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x190>
 800438a:	4b4a      	ldr	r3, [pc, #296]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d116      	bne.n	80043c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004396:	4b47      	ldr	r3, [pc, #284]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_RCC_OscConfig+0x17a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d001      	beq.n	80043ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e1df      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ae:	4b41      	ldr	r3, [pc, #260]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	493d      	ldr	r1, [pc, #244]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	e040      	b.n	8004446 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d023      	beq.n	8004414 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043cc:	4b39      	ldr	r3, [pc, #228]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a38      	ldr	r2, [pc, #224]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fd fd76 	bl	8001ec8 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e0:	f7fd fd72 	bl	8001ec8 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e1bd      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f2:	4b30      	ldr	r3, [pc, #192]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fe:	4b2d      	ldr	r3, [pc, #180]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4929      	ldr	r1, [pc, #164]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]
 8004412:	e018      	b.n	8004446 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004414:	4b27      	ldr	r3, [pc, #156]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a26      	ldr	r2, [pc, #152]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fd fd52 	bl	8001ec8 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004428:	f7fd fd4e 	bl	8001ec8 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e199      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443a:	4b1e      	ldr	r3, [pc, #120]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d038      	beq.n	80044c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d019      	beq.n	800448e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800445a:	4b16      	ldr	r3, [pc, #88]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 800445c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445e:	4a15      	ldr	r2, [pc, #84]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fd fd2f 	bl	8001ec8 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446e:	f7fd fd2b 	bl	8001ec8 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e176      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004480:	4b0c      	ldr	r3, [pc, #48]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x23a>
 800448c:	e01a      	b.n	80044c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800448e:	4b09      	ldr	r3, [pc, #36]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004492:	4a08      	ldr	r2, [pc, #32]	@ (80044b4 <HAL_RCC_OscConfig+0x280>)
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fd fd15 	bl	8001ec8 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a2:	f7fd fd11 	bl	8001ec8 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d903      	bls.n	80044b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e15c      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
 80044b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b8:	4b91      	ldr	r3, [pc, #580]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80044ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1ee      	bne.n	80044a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80a4 	beq.w	800461a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d2:	4b8b      	ldr	r3, [pc, #556]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	4b88      	ldr	r3, [pc, #544]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	4a87      	ldr	r2, [pc, #540]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ea:	4b85      	ldr	r3, [pc, #532]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fa:	4b82      	ldr	r3, [pc, #520]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d118      	bne.n	8004538 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004506:	4b7f      	ldr	r3, [pc, #508]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a7e      	ldr	r2, [pc, #504]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800450c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004512:	f7fd fcd9 	bl	8001ec8 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451a:	f7fd fcd5 	bl	8001ec8 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b64      	cmp	r3, #100	@ 0x64
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e120      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800452c:	4b75      	ldr	r3, [pc, #468]	@ (8004704 <HAL_RCC_OscConfig+0x4d0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d106      	bne.n	800454e <HAL_RCC_OscConfig+0x31a>
 8004540:	4b6f      	ldr	r3, [pc, #444]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004544:	4a6e      	ldr	r2, [pc, #440]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6713      	str	r3, [r2, #112]	@ 0x70
 800454c:	e02d      	b.n	80045aa <HAL_RCC_OscConfig+0x376>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x33c>
 8004556:	4b6a      	ldr	r3, [pc, #424]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455a:	4a69      	ldr	r2, [pc, #420]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800455c:	f023 0301 	bic.w	r3, r3, #1
 8004560:	6713      	str	r3, [r2, #112]	@ 0x70
 8004562:	4b67      	ldr	r3, [pc, #412]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004566:	4a66      	ldr	r2, [pc, #408]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004568:	f023 0304 	bic.w	r3, r3, #4
 800456c:	6713      	str	r3, [r2, #112]	@ 0x70
 800456e:	e01c      	b.n	80045aa <HAL_RCC_OscConfig+0x376>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b05      	cmp	r3, #5
 8004576:	d10c      	bne.n	8004592 <HAL_RCC_OscConfig+0x35e>
 8004578:	4b61      	ldr	r3, [pc, #388]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457c:	4a60      	ldr	r2, [pc, #384]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800457e:	f043 0304 	orr.w	r3, r3, #4
 8004582:	6713      	str	r3, [r2, #112]	@ 0x70
 8004584:	4b5e      	ldr	r3, [pc, #376]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004588:	4a5d      	ldr	r2, [pc, #372]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004590:	e00b      	b.n	80045aa <HAL_RCC_OscConfig+0x376>
 8004592:	4b5b      	ldr	r3, [pc, #364]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004596:	4a5a      	ldr	r2, [pc, #360]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6713      	str	r3, [r2, #112]	@ 0x70
 800459e:	4b58      	ldr	r3, [pc, #352]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a2:	4a57      	ldr	r2, [pc, #348]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d015      	beq.n	80045de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b2:	f7fd fc89 	bl	8001ec8 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fd fc85 	bl	8001ec8 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0ce      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ee      	beq.n	80045ba <HAL_RCC_OscConfig+0x386>
 80045dc:	e014      	b.n	8004608 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045de:	f7fd fc73 	bl	8001ec8 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fd fc6f 	bl	8001ec8 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0b8      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	4b40      	ldr	r3, [pc, #256]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ee      	bne.n	80045e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460e:	4b3c      	ldr	r3, [pc, #240]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004612:	4a3b      	ldr	r2, [pc, #236]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004618:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80a4 	beq.w	800476c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004624:	4b36      	ldr	r3, [pc, #216]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b08      	cmp	r3, #8
 800462e:	d06b      	beq.n	8004708 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d149      	bne.n	80046cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004638:	4b31      	ldr	r3, [pc, #196]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a30      	ldr	r2, [pc, #192]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800463e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fd fc40 	bl	8001ec8 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464c:	f7fd fc3c 	bl	8001ec8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e087      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	4b28      	ldr	r3, [pc, #160]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69da      	ldr	r2, [r3, #28]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004678:	019b      	lsls	r3, r3, #6
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004680:	085b      	lsrs	r3, r3, #1
 8004682:	3b01      	subs	r3, #1
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468c:	061b      	lsls	r3, r3, #24
 800468e:	4313      	orrs	r3, r2
 8004690:	4a1b      	ldr	r2, [pc, #108]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 8004692:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004696:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004698:	4b19      	ldr	r3, [pc, #100]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a18      	ldr	r2, [pc, #96]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 800469e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd fc10 	bl	8001ec8 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fd fc0c 	bl	8001ec8 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e057      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046be:	4b10      	ldr	r3, [pc, #64]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x478>
 80046ca:	e04f      	b.n	800476c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80046d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fd fbf6 	bl	8001ec8 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fd fbf2 	bl	8001ec8 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e03d      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	4b03      	ldr	r3, [pc, #12]	@ (8004700 <HAL_RCC_OscConfig+0x4cc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x4ac>
 80046fe:	e035      	b.n	800476c <HAL_RCC_OscConfig+0x538>
 8004700:	40023800 	.word	0x40023800
 8004704:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004708:	4b1b      	ldr	r3, [pc, #108]	@ (8004778 <HAL_RCC_OscConfig+0x544>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d028      	beq.n	8004768 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d121      	bne.n	8004768 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472e:	429a      	cmp	r2, r3
 8004730:	d11a      	bne.n	8004768 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004738:	4013      	ands	r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800473e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004740:	4293      	cmp	r3, r2
 8004742:	d111      	bne.n	8004768 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474e:	085b      	lsrs	r3, r3, #1
 8004750:	3b01      	subs	r3, #1
 8004752:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d107      	bne.n	8004768 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004762:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800

0800477c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0d0      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004794:	4b6a      	ldr	r3, [pc, #424]	@ (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d910      	bls.n	80047c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a2:	4b67      	ldr	r3, [pc, #412]	@ (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 020f 	bic.w	r2, r3, #15
 80047aa:	4965      	ldr	r1, [pc, #404]	@ (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b2:	4b63      	ldr	r3, [pc, #396]	@ (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d001      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0b8      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d020      	beq.n	8004812 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047dc:	4b59      	ldr	r3, [pc, #356]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a58      	ldr	r2, [pc, #352]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 80047e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047f4:	4b53      	ldr	r3, [pc, #332]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a52      	ldr	r2, [pc, #328]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 80047fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004800:	4b50      	ldr	r3, [pc, #320]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	494d      	ldr	r1, [pc, #308]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d040      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004826:	4b47      	ldr	r3, [pc, #284]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d115      	bne.n	800485e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e07f      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d107      	bne.n	800484e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800483e:	4b41      	ldr	r3, [pc, #260]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d109      	bne.n	800485e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e073      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484e:	4b3d      	ldr	r3, [pc, #244]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e06b      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800485e:	4b39      	ldr	r3, [pc, #228]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f023 0203 	bic.w	r2, r3, #3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4936      	ldr	r1, [pc, #216]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 800486c:	4313      	orrs	r3, r2
 800486e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004870:	f7fd fb2a 	bl	8001ec8 <HAL_GetTick>
 8004874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004876:	e00a      	b.n	800488e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004878:	f7fd fb26 	bl	8001ec8 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e053      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	4b2d      	ldr	r3, [pc, #180]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 020c 	and.w	r2, r3, #12
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	429a      	cmp	r2, r3
 800489e:	d1eb      	bne.n	8004878 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048a0:	4b27      	ldr	r3, [pc, #156]	@ (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d210      	bcs.n	80048d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ae:	4b24      	ldr	r3, [pc, #144]	@ (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f023 020f 	bic.w	r2, r3, #15
 80048b6:	4922      	ldr	r1, [pc, #136]	@ (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b20      	ldr	r3, [pc, #128]	@ (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e032      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048dc:	4b19      	ldr	r3, [pc, #100]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4916      	ldr	r1, [pc, #88]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048fa:	4b12      	ldr	r3, [pc, #72]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	490e      	ldr	r1, [pc, #56]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 800490a:	4313      	orrs	r3, r2
 800490c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800490e:	f000 f821 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8004912:	4602      	mov	r2, r0
 8004914:	4b0b      	ldr	r3, [pc, #44]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	490a      	ldr	r1, [pc, #40]	@ (8004948 <HAL_RCC_ClockConfig+0x1cc>)
 8004920:	5ccb      	ldrb	r3, [r1, r3]
 8004922:	fa22 f303 	lsr.w	r3, r2, r3
 8004926:	4a09      	ldr	r2, [pc, #36]	@ (800494c <HAL_RCC_ClockConfig+0x1d0>)
 8004928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800492a:	4b09      	ldr	r3, [pc, #36]	@ (8004950 <HAL_RCC_ClockConfig+0x1d4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fd f8ec 	bl	8001b0c <HAL_InitTick>

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40023c00 	.word	0x40023c00
 8004944:	40023800 	.word	0x40023800
 8004948:	08010b88 	.word	0x08010b88
 800494c:	20000000 	.word	0x20000000
 8004950:	20000004 	.word	0x20000004

08004954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004958:	b094      	sub	sp, #80	@ 0x50
 800495a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004960:	2300      	movs	r3, #0
 8004962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004964:	2300      	movs	r3, #0
 8004966:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800496c:	4b79      	ldr	r3, [pc, #484]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x200>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 030c 	and.w	r3, r3, #12
 8004974:	2b08      	cmp	r3, #8
 8004976:	d00d      	beq.n	8004994 <HAL_RCC_GetSysClockFreq+0x40>
 8004978:	2b08      	cmp	r3, #8
 800497a:	f200 80e1 	bhi.w	8004b40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0x34>
 8004982:	2b04      	cmp	r3, #4
 8004984:	d003      	beq.n	800498e <HAL_RCC_GetSysClockFreq+0x3a>
 8004986:	e0db      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004988:	4b73      	ldr	r3, [pc, #460]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x204>)
 800498a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800498c:	e0db      	b.n	8004b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800498e:	4b72      	ldr	r3, [pc, #456]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004990:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004992:	e0d8      	b.n	8004b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004994:	4b6f      	ldr	r3, [pc, #444]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800499c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800499e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d063      	beq.n	8004a72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	099b      	lsrs	r3, r3, #6
 80049b0:	2200      	movs	r2, #0
 80049b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80049be:	2300      	movs	r3, #0
 80049c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049c6:	4622      	mov	r2, r4
 80049c8:	462b      	mov	r3, r5
 80049ca:	f04f 0000 	mov.w	r0, #0
 80049ce:	f04f 0100 	mov.w	r1, #0
 80049d2:	0159      	lsls	r1, r3, #5
 80049d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049d8:	0150      	lsls	r0, r2, #5
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4621      	mov	r1, r4
 80049e0:	1a51      	subs	r1, r2, r1
 80049e2:	6139      	str	r1, [r7, #16]
 80049e4:	4629      	mov	r1, r5
 80049e6:	eb63 0301 	sbc.w	r3, r3, r1
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049f8:	4659      	mov	r1, fp
 80049fa:	018b      	lsls	r3, r1, #6
 80049fc:	4651      	mov	r1, sl
 80049fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a02:	4651      	mov	r1, sl
 8004a04:	018a      	lsls	r2, r1, #6
 8004a06:	4651      	mov	r1, sl
 8004a08:	ebb2 0801 	subs.w	r8, r2, r1
 8004a0c:	4659      	mov	r1, fp
 8004a0e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a26:	4690      	mov	r8, r2
 8004a28:	4699      	mov	r9, r3
 8004a2a:	4623      	mov	r3, r4
 8004a2c:	eb18 0303 	adds.w	r3, r8, r3
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	462b      	mov	r3, r5
 8004a34:	eb49 0303 	adc.w	r3, r9, r3
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a46:	4629      	mov	r1, r5
 8004a48:	028b      	lsls	r3, r1, #10
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a50:	4621      	mov	r1, r4
 8004a52:	028a      	lsls	r2, r1, #10
 8004a54:	4610      	mov	r0, r2
 8004a56:	4619      	mov	r1, r3
 8004a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a64:	f7fc f918 	bl	8000c98 <__aeabi_uldivmod>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a70:	e058      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a72:	4b38      	ldr	r3, [pc, #224]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	2200      	movs	r2, #0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a82:	623b      	str	r3, [r7, #32]
 8004a84:	2300      	movs	r3, #0
 8004a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	f04f 0000 	mov.w	r0, #0
 8004a94:	f04f 0100 	mov.w	r1, #0
 8004a98:	0159      	lsls	r1, r3, #5
 8004a9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a9e:	0150      	lsls	r0, r2, #5
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004aaa:	4649      	mov	r1, r9
 8004aac:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004abc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ac0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ac4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ac8:	eb63 050b 	sbc.w	r5, r3, fp
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	00eb      	lsls	r3, r5, #3
 8004ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ada:	00e2      	lsls	r2, r4, #3
 8004adc:	4614      	mov	r4, r2
 8004ade:	461d      	mov	r5, r3
 8004ae0:	4643      	mov	r3, r8
 8004ae2:	18e3      	adds	r3, r4, r3
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	eb45 0303 	adc.w	r3, r5, r3
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004afa:	4629      	mov	r1, r5
 8004afc:	028b      	lsls	r3, r1, #10
 8004afe:	4621      	mov	r1, r4
 8004b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b04:	4621      	mov	r1, r4
 8004b06:	028a      	lsls	r2, r1, #10
 8004b08:	4610      	mov	r0, r2
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b0e:	2200      	movs	r2, #0
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	61fa      	str	r2, [r7, #28]
 8004b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b18:	f7fc f8be 	bl	8000c98 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4613      	mov	r3, r2
 8004b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b24:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	3301      	adds	r3, #1
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b3e:	e002      	b.n	8004b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b40:	4b05      	ldr	r3, [pc, #20]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3750      	adds	r7, #80	@ 0x50
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b52:	bf00      	nop
 8004b54:	40023800 	.word	0x40023800
 8004b58:	00f42400 	.word	0x00f42400

08004b5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b60:	4b03      	ldr	r3, [pc, #12]	@ (8004b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b62:	681b      	ldr	r3, [r3, #0]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	20000000 	.word	0x20000000

08004b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b78:	f7ff fff0 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	0a9b      	lsrs	r3, r3, #10
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	4903      	ldr	r1, [pc, #12]	@ (8004b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b8a:	5ccb      	ldrb	r3, [r1, r3]
 8004b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40023800 	.word	0x40023800
 8004b98:	08010b98 	.word	0x08010b98

08004b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ba0:	f7ff ffdc 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b05      	ldr	r3, [pc, #20]	@ (8004bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	0b5b      	lsrs	r3, r3, #13
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	4903      	ldr	r1, [pc, #12]	@ (8004bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bb2:	5ccb      	ldrb	r3, [r1, r3]
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	08010b98 	.word	0x08010b98

08004bc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	220f      	movs	r2, #15
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bd4:	4b12      	ldr	r3, [pc, #72]	@ (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0203 	and.w	r2, r3, #3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004be0:	4b0f      	ldr	r3, [pc, #60]	@ (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bec:	4b0c      	ldr	r3, [pc, #48]	@ (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004bf8:	4b09      	ldr	r3, [pc, #36]	@ (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	08db      	lsrs	r3, r3, #3
 8004bfe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c06:	4b07      	ldr	r3, [pc, #28]	@ (8004c24 <HAL_RCC_GetClockConfig+0x60>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 020f 	and.w	r2, r3, #15
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	601a      	str	r2, [r3, #0]
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40023800 	.word	0x40023800
 8004c24:	40023c00 	.word	0x40023c00

08004c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d012      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c4c:	4b65      	ldr	r3, [pc, #404]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	4a64      	ldr	r2, [pc, #400]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c52:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004c56:	6093      	str	r3, [r2, #8]
 8004c58:	4b62      	ldr	r3, [pc, #392]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c60:	4960      	ldr	r1, [pc, #384]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d017      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c7e:	4b59      	ldr	r3, [pc, #356]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c84:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c8c:	4955      	ldr	r1, [pc, #340]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8004caa:	2301      	movs	r3, #1
 8004cac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d017      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cba:	4b4a      	ldr	r3, [pc, #296]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cc0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc8:	4946      	ldr	r1, [pc, #280]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cd8:	d101      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 808b 	beq.w	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfc:	4a39      	ldr	r2, [pc, #228]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d02:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d04:	4b37      	ldr	r3, [pc, #220]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d10:	4b35      	ldr	r3, [pc, #212]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a34      	ldr	r2, [pc, #208]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d1c:	f7fd f8d4 	bl	8001ec8 <HAL_GetTick>
 8004d20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d24:	f7fd f8d0 	bl	8001ec8 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	@ 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e2bc      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d36:	4b2c      	ldr	r3, [pc, #176]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d42:	4b28      	ldr	r3, [pc, #160]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d035      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d02e      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d60:	4b20      	ldr	r3, [pc, #128]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d74:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d76:	4b1b      	ldr	r3, [pc, #108]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d82:	4a18      	ldr	r2, [pc, #96]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d88:	4b16      	ldr	r3, [pc, #88]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d114      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fd f898 	bl	8001ec8 <HAL_GetTick>
 8004d98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d9c:	f7fd f894 	bl	8001ec8 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e27e      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db2:	4b0c      	ldr	r3, [pc, #48]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0ee      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dca:	d111      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004dcc:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004dd8:	4b04      	ldr	r3, [pc, #16]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004dda:	400b      	ands	r3, r1
 8004ddc:	4901      	ldr	r1, [pc, #4]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	608b      	str	r3, [r1, #8]
 8004de2:	e00b      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40007000 	.word	0x40007000
 8004dec:	0ffffcff 	.word	0x0ffffcff
 8004df0:	4ba4      	ldr	r3, [pc, #656]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	4aa3      	ldr	r2, [pc, #652]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004df6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004dfa:	6093      	str	r3, [r2, #8]
 8004dfc:	4ba1      	ldr	r3, [pc, #644]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004dfe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e08:	499e      	ldr	r1, [pc, #632]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d010      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e1a:	4b9a      	ldr	r3, [pc, #616]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e20:	4a98      	ldr	r2, [pc, #608]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004e2a:	4b96      	ldr	r3, [pc, #600]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e34:	4993      	ldr	r1, [pc, #588]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e48:	4b8e      	ldr	r3, [pc, #568]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e56:	498b      	ldr	r1, [pc, #556]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e6a:	4b86      	ldr	r3, [pc, #536]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e78:	4982      	ldr	r1, [pc, #520]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e8c:	4b7d      	ldr	r3, [pc, #500]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e9a:	497a      	ldr	r1, [pc, #488]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eae:	4b75      	ldr	r3, [pc, #468]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb4:	f023 0203 	bic.w	r2, r3, #3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ebc:	4971      	ldr	r1, [pc, #452]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ed0:	4b6c      	ldr	r3, [pc, #432]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed6:	f023 020c 	bic.w	r2, r3, #12
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ede:	4969      	ldr	r1, [pc, #420]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ef2:	4b64      	ldr	r3, [pc, #400]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f00:	4960      	ldr	r1, [pc, #384]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f14:	4b5b      	ldr	r3, [pc, #364]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f22:	4958      	ldr	r1, [pc, #352]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f36:	4b53      	ldr	r3, [pc, #332]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f44:	494f      	ldr	r1, [pc, #316]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f58:	4b4a      	ldr	r3, [pc, #296]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f66:	4947      	ldr	r1, [pc, #284]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f7a:	4b42      	ldr	r3, [pc, #264]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f80:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f88:	493e      	ldr	r1, [pc, #248]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f9c:	4b39      	ldr	r3, [pc, #228]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004faa:	4936      	ldr	r1, [pc, #216]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d011      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fbe:	4b31      	ldr	r3, [pc, #196]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fc4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fcc:	492d      	ldr	r1, [pc, #180]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fee:	4b25      	ldr	r3, [pc, #148]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ffc:	4921      	ldr	r1, [pc, #132]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005010:	4b1c      	ldr	r3, [pc, #112]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005016:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800501e:	4919      	ldr	r1, [pc, #100]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005032:	4b14      	ldr	r3, [pc, #80]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005038:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005040:	4910      	ldr	r1, [pc, #64]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d006      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 809d 	beq.w	8005196 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800505c:	4b09      	ldr	r3, [pc, #36]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a08      	ldr	r2, [pc, #32]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005062:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005068:	f7fc ff2e 	bl	8001ec8 <HAL_GetTick>
 800506c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800506e:	e00b      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005070:	f7fc ff2a 	bl	8001ec8 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	@ 0x64
 800507c:	d904      	bls.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e116      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005082:	bf00      	nop
 8005084:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005088:	4b8b      	ldr	r3, [pc, #556]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1ed      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d017      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d113      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050a8:	4b83      	ldr	r3, [pc, #524]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ae:	0e1b      	lsrs	r3, r3, #24
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	019a      	lsls	r2, r3, #6
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	061b      	lsls	r3, r3, #24
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	071b      	lsls	r3, r3, #28
 80050c8:	497b      	ldr	r1, [pc, #492]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d004      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050e4:	d00a      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d024      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050fa:	d11f      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050fc:	4b6e      	ldr	r3, [pc, #440]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005102:	0f1b      	lsrs	r3, r3, #28
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	019a      	lsls	r2, r3, #6
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	061b      	lsls	r3, r3, #24
 8005116:	431a      	orrs	r2, r3
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	071b      	lsls	r3, r3, #28
 800511c:	4966      	ldr	r1, [pc, #408]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005124:	4b64      	ldr	r3, [pc, #400]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800512a:	f023 021f 	bic.w	r2, r3, #31
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	3b01      	subs	r3, #1
 8005134:	4960      	ldr	r1, [pc, #384]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00d      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	019a      	lsls	r2, r3, #6
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	061b      	lsls	r3, r3, #24
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	071b      	lsls	r3, r3, #28
 800515c:	4956      	ldr	r1, [pc, #344]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005164:	4b54      	ldr	r3, [pc, #336]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a53      	ldr	r2, [pc, #332]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800516a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800516e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005170:	f7fc feaa 	bl	8001ec8 <HAL_GetTick>
 8005174:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005176:	e008      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005178:	f7fc fea6 	bl	8001ec8 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b64      	cmp	r3, #100	@ 0x64
 8005184:	d901      	bls.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e092      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800518a:	4b4b      	ldr	r3, [pc, #300]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	2b01      	cmp	r3, #1
 800519a:	f040 8088 	bne.w	80052ae <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800519e:	4b46      	ldr	r3, [pc, #280]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a45      	ldr	r2, [pc, #276]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80051a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051aa:	f7fc fe8d 	bl	8001ec8 <HAL_GetTick>
 80051ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051b0:	e008      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051b2:	f7fc fe89 	bl	8001ec8 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b64      	cmp	r3, #100	@ 0x64
 80051be:	d901      	bls.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e075      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051c4:	4b3c      	ldr	r3, [pc, #240]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051d0:	d0ef      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d024      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d120      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051fa:	4b2f      	ldr	r3, [pc, #188]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005200:	0c1b      	lsrs	r3, r3, #16
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	019a      	lsls	r2, r3, #6
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	041b      	lsls	r3, r3, #16
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	061b      	lsls	r3, r3, #24
 800521a:	4927      	ldr	r1, [pc, #156]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005222:	4b25      	ldr	r3, [pc, #148]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005228:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	3b01      	subs	r3, #1
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	4920      	ldr	r1, [pc, #128]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d018      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800524c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005250:	d113      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005252:	4b19      	ldr	r3, [pc, #100]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005258:	0e1b      	lsrs	r3, r3, #24
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	019a      	lsls	r2, r3, #6
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	041b      	lsls	r3, r3, #16
 800526c:	431a      	orrs	r2, r3
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	061b      	lsls	r3, r3, #24
 8005272:	4911      	ldr	r1, [pc, #68]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800527a:	4b0f      	ldr	r3, [pc, #60]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a0e      	ldr	r2, [pc, #56]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005286:	f7fc fe1f 	bl	8001ec8 <HAL_GetTick>
 800528a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800528c:	e008      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800528e:	f7fc fe1b 	bl	8001ec8 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b64      	cmp	r3, #100	@ 0x64
 800529a:	d901      	bls.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e007      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052a0:	4b05      	ldr	r3, [pc, #20]	@ (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052ac:	d1ef      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3720      	adds	r7, #32
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40023800 	.word	0x40023800

080052bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e09d      	b.n	800540a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d108      	bne.n	80052e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052de:	d009      	beq.n	80052f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	61da      	str	r2, [r3, #28]
 80052e6:	e005      	b.n	80052f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fc fb58 	bl	80019c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800532a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005334:	d902      	bls.n	800533c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	e002      	b.n	8005342 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800533c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005340:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800534a:	d007      	beq.n	800535c <HAL_SPI_Init+0xa0>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005354:	d002      	beq.n	800535c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539e:	ea42 0103 	orr.w	r1, r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	0c1b      	lsrs	r3, r3, #16
 80053b8:	f003 0204 	and.w	r2, r3, #4
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80053d8:	ea42 0103 	orr.w	r1, r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b088      	sub	sp, #32
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	603b      	str	r3, [r7, #0]
 800541e:	4613      	mov	r3, r2
 8005420:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_SPI_Transmit+0x22>
 8005430:	2302      	movs	r3, #2
 8005432:	e15f      	b.n	80056f4 <HAL_SPI_Transmit+0x2e2>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800543c:	f7fc fd44 	bl	8001ec8 <HAL_GetTick>
 8005440:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005442:	88fb      	ldrh	r3, [r7, #6]
 8005444:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b01      	cmp	r3, #1
 8005450:	d002      	beq.n	8005458 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005452:	2302      	movs	r3, #2
 8005454:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005456:	e148      	b.n	80056ea <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <HAL_SPI_Transmit+0x52>
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d102      	bne.n	800546a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005468:	e13f      	b.n	80056ea <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2203      	movs	r2, #3
 800546e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	88fa      	ldrh	r2, [r7, #6]
 8005482:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	88fa      	ldrh	r2, [r7, #6]
 8005488:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054b4:	d10f      	bne.n	80054d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e0:	2b40      	cmp	r3, #64	@ 0x40
 80054e2:	d007      	beq.n	80054f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054fc:	d94f      	bls.n	800559e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_SPI_Transmit+0xfa>
 8005506:	8afb      	ldrh	r3, [r7, #22]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d142      	bne.n	8005592 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	881a      	ldrh	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551c:	1c9a      	adds	r2, r3, #2
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005530:	e02f      	b.n	8005592 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b02      	cmp	r3, #2
 800553e:	d112      	bne.n	8005566 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005544:	881a      	ldrh	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005550:	1c9a      	adds	r2, r3, #2
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005564:	e015      	b.n	8005592 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005566:	f7fc fcaf 	bl	8001ec8 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d803      	bhi.n	800557e <HAL_SPI_Transmit+0x16c>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800557c:	d102      	bne.n	8005584 <HAL_SPI_Transmit+0x172>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d106      	bne.n	8005592 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005590:	e0ab      	b.n	80056ea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005596:	b29b      	uxth	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1ca      	bne.n	8005532 <HAL_SPI_Transmit+0x120>
 800559c:	e080      	b.n	80056a0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_SPI_Transmit+0x19a>
 80055a6:	8afb      	ldrh	r3, [r7, #22]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d174      	bne.n	8005696 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d912      	bls.n	80055dc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ba:	881a      	ldrh	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c6:	1c9a      	adds	r2, r3, #2
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b02      	subs	r3, #2
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055da:	e05c      	b.n	8005696 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	330c      	adds	r3, #12
 80055e6:	7812      	ldrb	r2, [r2, #0]
 80055e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005602:	e048      	b.n	8005696 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b02      	cmp	r3, #2
 8005610:	d12b      	bne.n	800566a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b01      	cmp	r3, #1
 800561a:	d912      	bls.n	8005642 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005620:	881a      	ldrh	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562c:	1c9a      	adds	r2, r3, #2
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b02      	subs	r3, #2
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005640:	e029      	b.n	8005696 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	330c      	adds	r3, #12
 800564c:	7812      	ldrb	r2, [r2, #0]
 800564e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005668:	e015      	b.n	8005696 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800566a:	f7fc fc2d 	bl	8001ec8 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d803      	bhi.n	8005682 <HAL_SPI_Transmit+0x270>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005680:	d102      	bne.n	8005688 <HAL_SPI_Transmit+0x276>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d106      	bne.n	8005696 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005694:	e029      	b.n	80056ea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800569a:	b29b      	uxth	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1b1      	bne.n	8005604 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fb69 	bl	8005d7c <SPI_EndRxTxTransaction>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	613b      	str	r3, [r7, #16]
 80056d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	77fb      	strb	r3, [r7, #31]
 80056e0:	e003      	b.n	80056ea <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80056f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	@ 0x28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800570a:	2301      	movs	r3, #1
 800570c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_SPI_TransmitReceive+0x26>
 800571e:	2302      	movs	r3, #2
 8005720:	e20a      	b.n	8005b38 <HAL_SPI_TransmitReceive+0x43c>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800572a:	f7fc fbcd 	bl	8001ec8 <HAL_GetTick>
 800572e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005736:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800573e:	887b      	ldrh	r3, [r7, #2]
 8005740:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005742:	887b      	ldrh	r3, [r7, #2]
 8005744:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005746:	7efb      	ldrb	r3, [r7, #27]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d00e      	beq.n	800576a <HAL_SPI_TransmitReceive+0x6e>
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005752:	d106      	bne.n	8005762 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <HAL_SPI_TransmitReceive+0x66>
 800575c:	7efb      	ldrb	r3, [r7, #27]
 800575e:	2b04      	cmp	r3, #4
 8005760:	d003      	beq.n	800576a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005762:	2302      	movs	r3, #2
 8005764:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005768:	e1e0      	b.n	8005b2c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <HAL_SPI_TransmitReceive+0x80>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_SPI_TransmitReceive+0x80>
 8005776:	887b      	ldrh	r3, [r7, #2]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d103      	bne.n	8005784 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005782:	e1d3      	b.n	8005b2c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b04      	cmp	r3, #4
 800578e:	d003      	beq.n	8005798 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2205      	movs	r2, #5
 8005794:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	887a      	ldrh	r2, [r7, #2]
 80057a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	887a      	ldrh	r2, [r7, #2]
 80057b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	887a      	ldrh	r2, [r7, #2]
 80057be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	887a      	ldrh	r2, [r7, #2]
 80057c4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057da:	d802      	bhi.n	80057e2 <HAL_SPI_TransmitReceive+0xe6>
 80057dc:	8a3b      	ldrh	r3, [r7, #16]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d908      	bls.n	80057f4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80057f0:	605a      	str	r2, [r3, #4]
 80057f2:	e007      	b.n	8005804 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005802:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580e:	2b40      	cmp	r3, #64	@ 0x40
 8005810:	d007      	beq.n	8005822 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005820:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800582a:	f240 8081 	bls.w	8005930 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <HAL_SPI_TransmitReceive+0x140>
 8005836:	8a7b      	ldrh	r3, [r7, #18]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d16d      	bne.n	8005918 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005840:	881a      	ldrh	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584c:	1c9a      	adds	r2, r3, #2
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005856:	b29b      	uxth	r3, r3
 8005858:	3b01      	subs	r3, #1
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005860:	e05a      	b.n	8005918 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b02      	cmp	r3, #2
 800586e:	d11b      	bne.n	80058a8 <HAL_SPI_TransmitReceive+0x1ac>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d016      	beq.n	80058a8 <HAL_SPI_TransmitReceive+0x1ac>
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	2b01      	cmp	r3, #1
 800587e:	d113      	bne.n	80058a8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005884:	881a      	ldrh	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005890:	1c9a      	adds	r2, r3, #2
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d11c      	bne.n	80058f0 <HAL_SPI_TransmitReceive+0x1f4>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d016      	beq.n	80058f0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058cc:	b292      	uxth	r2, r2
 80058ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d4:	1c9a      	adds	r2, r3, #2
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058ec:	2301      	movs	r3, #1
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058f0:	f7fc faea 	bl	8001ec8 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d80b      	bhi.n	8005918 <HAL_SPI_TransmitReceive+0x21c>
 8005900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005906:	d007      	beq.n	8005918 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005916:	e109      	b.n	8005b2c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d19f      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x166>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d199      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x166>
 800592e:	e0e3      	b.n	8005af8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_SPI_TransmitReceive+0x244>
 8005938:	8a7b      	ldrh	r3, [r7, #18]
 800593a:	2b01      	cmp	r3, #1
 800593c:	f040 80cf 	bne.w	8005ade <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b01      	cmp	r3, #1
 8005948:	d912      	bls.n	8005970 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594e:	881a      	ldrh	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595a:	1c9a      	adds	r2, r3, #2
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b02      	subs	r3, #2
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800596e:	e0b6      	b.n	8005ade <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	330c      	adds	r3, #12
 800597a:	7812      	ldrb	r2, [r2, #0]
 800597c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005996:	e0a2      	b.n	8005ade <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d134      	bne.n	8005a10 <HAL_SPI_TransmitReceive+0x314>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d02f      	beq.n	8005a10 <HAL_SPI_TransmitReceive+0x314>
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d12c      	bne.n	8005a10 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d912      	bls.n	80059e6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c4:	881a      	ldrh	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d0:	1c9a      	adds	r2, r3, #2
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b02      	subs	r3, #2
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059e4:	e012      	b.n	8005a0c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	330c      	adds	r3, #12
 80059f0:	7812      	ldrb	r2, [r2, #0]
 80059f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d148      	bne.n	8005ab0 <HAL_SPI_TransmitReceive+0x3b4>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d042      	beq.n	8005ab0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d923      	bls.n	8005a7e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a40:	b292      	uxth	r2, r2
 8005a42:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a48:	1c9a      	adds	r2, r3, #2
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b02      	subs	r3, #2
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d81f      	bhi.n	8005aac <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a7a:	605a      	str	r2, [r3, #4]
 8005a7c:	e016      	b.n	8005aac <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f103 020c 	add.w	r2, r3, #12
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8a:	7812      	ldrb	r2, [r2, #0]
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005aac:	2301      	movs	r3, #1
 8005aae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ab0:	f7fc fa0a 	bl	8001ec8 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d803      	bhi.n	8005ac8 <HAL_SPI_TransmitReceive+0x3cc>
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ac6:	d102      	bne.n	8005ace <HAL_SPI_TransmitReceive+0x3d2>
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d107      	bne.n	8005ade <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005adc:	e026      	b.n	8005b2c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f47f af57 	bne.w	8005998 <HAL_SPI_TransmitReceive+0x29c>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f47f af50 	bne.w	8005998 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 f93d 	bl	8005d7c <SPI_EndRxTxTransaction>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2220      	movs	r2, #32
 8005b12:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b22:	e003      	b.n	8005b2c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005b34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3728      	adds	r7, #40	@ 0x28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b50:	f7fc f9ba 	bl	8001ec8 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b58:	1a9b      	subs	r3, r3, r2
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b60:	f7fc f9b2 	bl	8001ec8 <HAL_GetTick>
 8005b64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b66:	4b39      	ldr	r3, [pc, #228]	@ (8005c4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	015b      	lsls	r3, r3, #5
 8005b6c:	0d1b      	lsrs	r3, r3, #20
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	fb02 f303 	mul.w	r3, r2, r3
 8005b74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b76:	e054      	b.n	8005c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b7e:	d050      	beq.n	8005c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b80:	f7fc f9a2 	bl	8001ec8 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d902      	bls.n	8005b96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d13d      	bne.n	8005c12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ba4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bae:	d111      	bne.n	8005bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb8:	d004      	beq.n	8005bc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc2:	d107      	bne.n	8005bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bdc:	d10f      	bne.n	8005bfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e017      	b.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	bf0c      	ite	eq
 8005c32:	2301      	moveq	r3, #1
 8005c34:	2300      	movne	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d19b      	bne.n	8005b78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000000 	.word	0x20000000

08005c50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08a      	sub	sp, #40	@ 0x28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c62:	f7fc f931 	bl	8001ec8 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6a:	1a9b      	subs	r3, r3, r2
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	4413      	add	r3, r2
 8005c70:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005c72:	f7fc f929 	bl	8001ec8 <HAL_GetTick>
 8005c76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c80:	4b3d      	ldr	r3, [pc, #244]	@ (8005d78 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	4613      	mov	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	00da      	lsls	r2, r3, #3
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	0d1b      	lsrs	r3, r3, #20
 8005c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c92:	fb02 f303 	mul.w	r3, r2, r3
 8005c96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c98:	e060      	b.n	8005d5c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ca0:	d107      	bne.n	8005cb2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d104      	bne.n	8005cb2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cb8:	d050      	beq.n	8005d5c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cba:	f7fc f905 	bl	8001ec8 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d902      	bls.n	8005cd0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d13d      	bne.n	8005d4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005cde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ce8:	d111      	bne.n	8005d0e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cf2:	d004      	beq.n	8005cfe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cfc:	d107      	bne.n	8005d0e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d16:	d10f      	bne.n	8005d38 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e010      	b.n	8005d6e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	4013      	ands	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d196      	bne.n	8005c9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3728      	adds	r7, #40	@ 0x28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000000 	.word	0x20000000

08005d7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f7ff ff5b 	bl	8005c50 <SPI_WaitFifoStateUntilTimeout>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da4:	f043 0220 	orr.w	r2, r3, #32
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e046      	b.n	8005e3e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005db0:	4b25      	ldr	r3, [pc, #148]	@ (8005e48 <SPI_EndRxTxTransaction+0xcc>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a25      	ldr	r2, [pc, #148]	@ (8005e4c <SPI_EndRxTxTransaction+0xd0>)
 8005db6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dba:	0d5b      	lsrs	r3, r3, #21
 8005dbc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dce:	d112      	bne.n	8005df6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	2180      	movs	r1, #128	@ 0x80
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7ff feb0 	bl	8005b40 <SPI_WaitFlagStateUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d016      	beq.n	8005e14 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e023      	b.n	8005e3e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e0c:	2b80      	cmp	r3, #128	@ 0x80
 8005e0e:	d0f2      	beq.n	8005df6 <SPI_EndRxTxTransaction+0x7a>
 8005e10:	e000      	b.n	8005e14 <SPI_EndRxTxTransaction+0x98>
        break;
 8005e12:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f7ff ff15 	bl	8005c50 <SPI_WaitFifoStateUntilTimeout>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e30:	f043 0220 	orr.w	r2, r3, #32
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e000      	b.n	8005e3e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20000000 	.word	0x20000000
 8005e4c:	165e9f81 	.word	0x165e9f81

08005e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e049      	b.n	8005ef6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d106      	bne.n	8005e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f841 	bl	8005efe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	f000 f9e8 	bl	8006264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d001      	beq.n	8005f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e054      	b.n	8005fd6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a26      	ldr	r2, [pc, #152]	@ (8005fe4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d022      	beq.n	8005f94 <HAL_TIM_Base_Start_IT+0x80>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f56:	d01d      	beq.n	8005f94 <HAL_TIM_Base_Start_IT+0x80>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a22      	ldr	r2, [pc, #136]	@ (8005fe8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d018      	beq.n	8005f94 <HAL_TIM_Base_Start_IT+0x80>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a21      	ldr	r2, [pc, #132]	@ (8005fec <HAL_TIM_Base_Start_IT+0xd8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d013      	beq.n	8005f94 <HAL_TIM_Base_Start_IT+0x80>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a1f      	ldr	r2, [pc, #124]	@ (8005ff0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d00e      	beq.n	8005f94 <HAL_TIM_Base_Start_IT+0x80>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ff4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d009      	beq.n	8005f94 <HAL_TIM_Base_Start_IT+0x80>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a1c      	ldr	r2, [pc, #112]	@ (8005ff8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d004      	beq.n	8005f94 <HAL_TIM_Base_Start_IT+0x80>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8005ffc <HAL_TIM_Base_Start_IT+0xe8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d115      	bne.n	8005fc0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	4b19      	ldr	r3, [pc, #100]	@ (8006000 <HAL_TIM_Base_Start_IT+0xec>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2b06      	cmp	r3, #6
 8005fa4:	d015      	beq.n	8005fd2 <HAL_TIM_Base_Start_IT+0xbe>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fac:	d011      	beq.n	8005fd2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0201 	orr.w	r2, r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fbe:	e008      	b.n	8005fd2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0201 	orr.w	r2, r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	e000      	b.n	8005fd4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40010000 	.word	0x40010000
 8005fe8:	40000400 	.word	0x40000400
 8005fec:	40000800 	.word	0x40000800
 8005ff0:	40000c00 	.word	0x40000c00
 8005ff4:	40010400 	.word	0x40010400
 8005ff8:	40014000 	.word	0x40014000
 8005ffc:	40001800 	.word	0x40001800
 8006000:	00010007 	.word	0x00010007

08006004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d020      	beq.n	8006068 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01b      	beq.n	8006068 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0202 	mvn.w	r2, #2
 8006038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f8e9 	bl	8006226 <HAL_TIM_IC_CaptureCallback>
 8006054:	e005      	b.n	8006062 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f8db 	bl	8006212 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f8ec 	bl	800623a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b00      	cmp	r3, #0
 8006070:	d020      	beq.n	80060b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01b      	beq.n	80060b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0204 	mvn.w	r2, #4
 8006084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8c3 	bl	8006226 <HAL_TIM_IC_CaptureCallback>
 80060a0:	e005      	b.n	80060ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f8b5 	bl	8006212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f8c6 	bl	800623a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d020      	beq.n	8006100 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01b      	beq.n	8006100 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0208 	mvn.w	r2, #8
 80060d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2204      	movs	r2, #4
 80060d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	f003 0303 	and.w	r3, r3, #3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f89d 	bl	8006226 <HAL_TIM_IC_CaptureCallback>
 80060ec:	e005      	b.n	80060fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f88f 	bl	8006212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f8a0 	bl	800623a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f003 0310 	and.w	r3, r3, #16
 8006106:	2b00      	cmp	r3, #0
 8006108:	d020      	beq.n	800614c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b00      	cmp	r3, #0
 8006112:	d01b      	beq.n	800614c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0210 	mvn.w	r2, #16
 800611c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2208      	movs	r2, #8
 8006122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f877 	bl	8006226 <HAL_TIM_IC_CaptureCallback>
 8006138:	e005      	b.n	8006146 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f869 	bl	8006212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f87a 	bl	800623a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00c      	beq.n	8006170 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f06f 0201 	mvn.w	r2, #1
 8006168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fb fb7c 	bl	8001868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006176:	2b00      	cmp	r3, #0
 8006178:	d104      	bne.n	8006184 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00c      	beq.n	800619e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f919 	bl	80063d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00c      	beq.n	80061c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d007      	beq.n	80061c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80061ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f911 	bl	80063e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00c      	beq.n	80061e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d007      	beq.n	80061e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f834 	bl	800624e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f003 0320 	and.w	r3, r3, #32
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00c      	beq.n	800620a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f003 0320 	and.w	r3, r3, #32
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d007      	beq.n	800620a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f06f 0220 	mvn.w	r2, #32
 8006202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f8d9 	bl	80063bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800620a:	bf00      	nop
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800622e:	bf00      	nop
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
	...

08006264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a46      	ldr	r2, [pc, #280]	@ (8006390 <TIM_Base_SetConfig+0x12c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d013      	beq.n	80062a4 <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006282:	d00f      	beq.n	80062a4 <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a43      	ldr	r2, [pc, #268]	@ (8006394 <TIM_Base_SetConfig+0x130>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00b      	beq.n	80062a4 <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a42      	ldr	r2, [pc, #264]	@ (8006398 <TIM_Base_SetConfig+0x134>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d007      	beq.n	80062a4 <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a41      	ldr	r2, [pc, #260]	@ (800639c <TIM_Base_SetConfig+0x138>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d003      	beq.n	80062a4 <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a40      	ldr	r2, [pc, #256]	@ (80063a0 <TIM_Base_SetConfig+0x13c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d108      	bne.n	80062b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a35      	ldr	r2, [pc, #212]	@ (8006390 <TIM_Base_SetConfig+0x12c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d02b      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c4:	d027      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a32      	ldr	r2, [pc, #200]	@ (8006394 <TIM_Base_SetConfig+0x130>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d023      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a31      	ldr	r2, [pc, #196]	@ (8006398 <TIM_Base_SetConfig+0x134>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d01f      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a30      	ldr	r2, [pc, #192]	@ (800639c <TIM_Base_SetConfig+0x138>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d01b      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2f      	ldr	r2, [pc, #188]	@ (80063a0 <TIM_Base_SetConfig+0x13c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d017      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2e      	ldr	r2, [pc, #184]	@ (80063a4 <TIM_Base_SetConfig+0x140>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d013      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2d      	ldr	r2, [pc, #180]	@ (80063a8 <TIM_Base_SetConfig+0x144>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00f      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a2c      	ldr	r2, [pc, #176]	@ (80063ac <TIM_Base_SetConfig+0x148>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d00b      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a2b      	ldr	r2, [pc, #172]	@ (80063b0 <TIM_Base_SetConfig+0x14c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d007      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a2a      	ldr	r2, [pc, #168]	@ (80063b4 <TIM_Base_SetConfig+0x150>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d003      	beq.n	8006316 <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a29      	ldr	r2, [pc, #164]	@ (80063b8 <TIM_Base_SetConfig+0x154>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d108      	bne.n	8006328 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800631c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a10      	ldr	r2, [pc, #64]	@ (8006390 <TIM_Base_SetConfig+0x12c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d003      	beq.n	800635c <TIM_Base_SetConfig+0xf8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a12      	ldr	r2, [pc, #72]	@ (80063a0 <TIM_Base_SetConfig+0x13c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d103      	bne.n	8006364 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b01      	cmp	r3, #1
 8006374:	d105      	bne.n	8006382 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f023 0201 	bic.w	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	611a      	str	r2, [r3, #16]
  }
}
 8006382:	bf00      	nop
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40010000 	.word	0x40010000
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40010400 	.word	0x40010400
 80063a4:	40014000 	.word	0x40014000
 80063a8:	40014400 	.word	0x40014400
 80063ac:	40014800 	.word	0x40014800
 80063b0:	40001800 	.word	0x40001800
 80063b4:	40001c00 	.word	0x40001c00
 80063b8:	40002000 	.word	0x40002000

080063bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e040      	b.n	800648c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d106      	bne.n	8006420 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7fb fb16 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2224      	movs	r2, #36	@ 0x24
 8006424:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0201 	bic.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fb16 	bl	8006a70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f8af 	bl	80065a8 <UART_SetConfig>
 800644a:	4603      	mov	r3, r0
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e01b      	b.n	800648c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fb95 	bl	8006bb4 <UART_CheckIdleState>
 800648a:	4603      	mov	r3, r0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08a      	sub	sp, #40	@ 0x28
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	4613      	mov	r3, r2
 80064a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d177      	bne.n	800659c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <HAL_UART_Transmit+0x24>
 80064b2:	88fb      	ldrh	r3, [r7, #6]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e070      	b.n	800659e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2221      	movs	r2, #33	@ 0x21
 80064c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ca:	f7fb fcfd 	bl	8001ec8 <HAL_GetTick>
 80064ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	88fa      	ldrh	r2, [r7, #6]
 80064d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064e8:	d108      	bne.n	80064fc <HAL_UART_Transmit+0x68>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d104      	bne.n	80064fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	61bb      	str	r3, [r7, #24]
 80064fa:	e003      	b.n	8006504 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006504:	e02f      	b.n	8006566 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2200      	movs	r2, #0
 800650e:	2180      	movs	r1, #128	@ 0x80
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 fba6 	bl	8006c62 <UART_WaitOnFlagUntilTimeout>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2220      	movs	r2, #32
 8006520:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e03b      	b.n	800659e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10b      	bne.n	8006544 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800653a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	3302      	adds	r3, #2
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	e007      	b.n	8006554 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	781a      	ldrb	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	3301      	adds	r3, #1
 8006552:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800655a:	b29b      	uxth	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1c9      	bne.n	8006506 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2200      	movs	r2, #0
 800657a:	2140      	movs	r1, #64	@ 0x40
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 fb70 	bl	8006c62 <UART_WaitOnFlagUntilTimeout>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d004      	beq.n	8006592 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2220      	movs	r2, #32
 800658c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e005      	b.n	800659e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2220      	movs	r2, #32
 8006596:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	e000      	b.n	800659e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800659c:	2302      	movs	r3, #2
  }
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
	...

080065a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	4ba6      	ldr	r3, [pc, #664]	@ (800686c <UART_SetConfig+0x2c4>)
 80065d4:	4013      	ands	r3, r2
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6812      	ldr	r2, [r2, #0]
 80065da:	6979      	ldr	r1, [r7, #20]
 80065dc:	430b      	orrs	r3, r1
 80065de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	430a      	orrs	r2, r1
 8006618:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a94      	ldr	r2, [pc, #592]	@ (8006870 <UART_SetConfig+0x2c8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d120      	bne.n	8006666 <UART_SetConfig+0xbe>
 8006624:	4b93      	ldr	r3, [pc, #588]	@ (8006874 <UART_SetConfig+0x2cc>)
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	2b03      	cmp	r3, #3
 8006630:	d816      	bhi.n	8006660 <UART_SetConfig+0xb8>
 8006632:	a201      	add	r2, pc, #4	@ (adr r2, 8006638 <UART_SetConfig+0x90>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	08006649 	.word	0x08006649
 800663c:	08006655 	.word	0x08006655
 8006640:	0800664f 	.word	0x0800664f
 8006644:	0800665b 	.word	0x0800665b
 8006648:	2301      	movs	r3, #1
 800664a:	77fb      	strb	r3, [r7, #31]
 800664c:	e150      	b.n	80068f0 <UART_SetConfig+0x348>
 800664e:	2302      	movs	r3, #2
 8006650:	77fb      	strb	r3, [r7, #31]
 8006652:	e14d      	b.n	80068f0 <UART_SetConfig+0x348>
 8006654:	2304      	movs	r3, #4
 8006656:	77fb      	strb	r3, [r7, #31]
 8006658:	e14a      	b.n	80068f0 <UART_SetConfig+0x348>
 800665a:	2308      	movs	r3, #8
 800665c:	77fb      	strb	r3, [r7, #31]
 800665e:	e147      	b.n	80068f0 <UART_SetConfig+0x348>
 8006660:	2310      	movs	r3, #16
 8006662:	77fb      	strb	r3, [r7, #31]
 8006664:	e144      	b.n	80068f0 <UART_SetConfig+0x348>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a83      	ldr	r2, [pc, #524]	@ (8006878 <UART_SetConfig+0x2d0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d132      	bne.n	80066d6 <UART_SetConfig+0x12e>
 8006670:	4b80      	ldr	r3, [pc, #512]	@ (8006874 <UART_SetConfig+0x2cc>)
 8006672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006676:	f003 030c 	and.w	r3, r3, #12
 800667a:	2b0c      	cmp	r3, #12
 800667c:	d828      	bhi.n	80066d0 <UART_SetConfig+0x128>
 800667e:	a201      	add	r2, pc, #4	@ (adr r2, 8006684 <UART_SetConfig+0xdc>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	080066b9 	.word	0x080066b9
 8006688:	080066d1 	.word	0x080066d1
 800668c:	080066d1 	.word	0x080066d1
 8006690:	080066d1 	.word	0x080066d1
 8006694:	080066c5 	.word	0x080066c5
 8006698:	080066d1 	.word	0x080066d1
 800669c:	080066d1 	.word	0x080066d1
 80066a0:	080066d1 	.word	0x080066d1
 80066a4:	080066bf 	.word	0x080066bf
 80066a8:	080066d1 	.word	0x080066d1
 80066ac:	080066d1 	.word	0x080066d1
 80066b0:	080066d1 	.word	0x080066d1
 80066b4:	080066cb 	.word	0x080066cb
 80066b8:	2300      	movs	r3, #0
 80066ba:	77fb      	strb	r3, [r7, #31]
 80066bc:	e118      	b.n	80068f0 <UART_SetConfig+0x348>
 80066be:	2302      	movs	r3, #2
 80066c0:	77fb      	strb	r3, [r7, #31]
 80066c2:	e115      	b.n	80068f0 <UART_SetConfig+0x348>
 80066c4:	2304      	movs	r3, #4
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	e112      	b.n	80068f0 <UART_SetConfig+0x348>
 80066ca:	2308      	movs	r3, #8
 80066cc:	77fb      	strb	r3, [r7, #31]
 80066ce:	e10f      	b.n	80068f0 <UART_SetConfig+0x348>
 80066d0:	2310      	movs	r3, #16
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	e10c      	b.n	80068f0 <UART_SetConfig+0x348>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a68      	ldr	r2, [pc, #416]	@ (800687c <UART_SetConfig+0x2d4>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d120      	bne.n	8006722 <UART_SetConfig+0x17a>
 80066e0:	4b64      	ldr	r3, [pc, #400]	@ (8006874 <UART_SetConfig+0x2cc>)
 80066e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80066ea:	2b30      	cmp	r3, #48	@ 0x30
 80066ec:	d013      	beq.n	8006716 <UART_SetConfig+0x16e>
 80066ee:	2b30      	cmp	r3, #48	@ 0x30
 80066f0:	d814      	bhi.n	800671c <UART_SetConfig+0x174>
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d009      	beq.n	800670a <UART_SetConfig+0x162>
 80066f6:	2b20      	cmp	r3, #32
 80066f8:	d810      	bhi.n	800671c <UART_SetConfig+0x174>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <UART_SetConfig+0x15c>
 80066fe:	2b10      	cmp	r3, #16
 8006700:	d006      	beq.n	8006710 <UART_SetConfig+0x168>
 8006702:	e00b      	b.n	800671c <UART_SetConfig+0x174>
 8006704:	2300      	movs	r3, #0
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	e0f2      	b.n	80068f0 <UART_SetConfig+0x348>
 800670a:	2302      	movs	r3, #2
 800670c:	77fb      	strb	r3, [r7, #31]
 800670e:	e0ef      	b.n	80068f0 <UART_SetConfig+0x348>
 8006710:	2304      	movs	r3, #4
 8006712:	77fb      	strb	r3, [r7, #31]
 8006714:	e0ec      	b.n	80068f0 <UART_SetConfig+0x348>
 8006716:	2308      	movs	r3, #8
 8006718:	77fb      	strb	r3, [r7, #31]
 800671a:	e0e9      	b.n	80068f0 <UART_SetConfig+0x348>
 800671c:	2310      	movs	r3, #16
 800671e:	77fb      	strb	r3, [r7, #31]
 8006720:	e0e6      	b.n	80068f0 <UART_SetConfig+0x348>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a56      	ldr	r2, [pc, #344]	@ (8006880 <UART_SetConfig+0x2d8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d120      	bne.n	800676e <UART_SetConfig+0x1c6>
 800672c:	4b51      	ldr	r3, [pc, #324]	@ (8006874 <UART_SetConfig+0x2cc>)
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006732:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006736:	2bc0      	cmp	r3, #192	@ 0xc0
 8006738:	d013      	beq.n	8006762 <UART_SetConfig+0x1ba>
 800673a:	2bc0      	cmp	r3, #192	@ 0xc0
 800673c:	d814      	bhi.n	8006768 <UART_SetConfig+0x1c0>
 800673e:	2b80      	cmp	r3, #128	@ 0x80
 8006740:	d009      	beq.n	8006756 <UART_SetConfig+0x1ae>
 8006742:	2b80      	cmp	r3, #128	@ 0x80
 8006744:	d810      	bhi.n	8006768 <UART_SetConfig+0x1c0>
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <UART_SetConfig+0x1a8>
 800674a:	2b40      	cmp	r3, #64	@ 0x40
 800674c:	d006      	beq.n	800675c <UART_SetConfig+0x1b4>
 800674e:	e00b      	b.n	8006768 <UART_SetConfig+0x1c0>
 8006750:	2300      	movs	r3, #0
 8006752:	77fb      	strb	r3, [r7, #31]
 8006754:	e0cc      	b.n	80068f0 <UART_SetConfig+0x348>
 8006756:	2302      	movs	r3, #2
 8006758:	77fb      	strb	r3, [r7, #31]
 800675a:	e0c9      	b.n	80068f0 <UART_SetConfig+0x348>
 800675c:	2304      	movs	r3, #4
 800675e:	77fb      	strb	r3, [r7, #31]
 8006760:	e0c6      	b.n	80068f0 <UART_SetConfig+0x348>
 8006762:	2308      	movs	r3, #8
 8006764:	77fb      	strb	r3, [r7, #31]
 8006766:	e0c3      	b.n	80068f0 <UART_SetConfig+0x348>
 8006768:	2310      	movs	r3, #16
 800676a:	77fb      	strb	r3, [r7, #31]
 800676c:	e0c0      	b.n	80068f0 <UART_SetConfig+0x348>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a44      	ldr	r2, [pc, #272]	@ (8006884 <UART_SetConfig+0x2dc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d125      	bne.n	80067c4 <UART_SetConfig+0x21c>
 8006778:	4b3e      	ldr	r3, [pc, #248]	@ (8006874 <UART_SetConfig+0x2cc>)
 800677a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800677e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006782:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006786:	d017      	beq.n	80067b8 <UART_SetConfig+0x210>
 8006788:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800678c:	d817      	bhi.n	80067be <UART_SetConfig+0x216>
 800678e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006792:	d00b      	beq.n	80067ac <UART_SetConfig+0x204>
 8006794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006798:	d811      	bhi.n	80067be <UART_SetConfig+0x216>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <UART_SetConfig+0x1fe>
 800679e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067a2:	d006      	beq.n	80067b2 <UART_SetConfig+0x20a>
 80067a4:	e00b      	b.n	80067be <UART_SetConfig+0x216>
 80067a6:	2300      	movs	r3, #0
 80067a8:	77fb      	strb	r3, [r7, #31]
 80067aa:	e0a1      	b.n	80068f0 <UART_SetConfig+0x348>
 80067ac:	2302      	movs	r3, #2
 80067ae:	77fb      	strb	r3, [r7, #31]
 80067b0:	e09e      	b.n	80068f0 <UART_SetConfig+0x348>
 80067b2:	2304      	movs	r3, #4
 80067b4:	77fb      	strb	r3, [r7, #31]
 80067b6:	e09b      	b.n	80068f0 <UART_SetConfig+0x348>
 80067b8:	2308      	movs	r3, #8
 80067ba:	77fb      	strb	r3, [r7, #31]
 80067bc:	e098      	b.n	80068f0 <UART_SetConfig+0x348>
 80067be:	2310      	movs	r3, #16
 80067c0:	77fb      	strb	r3, [r7, #31]
 80067c2:	e095      	b.n	80068f0 <UART_SetConfig+0x348>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a2f      	ldr	r2, [pc, #188]	@ (8006888 <UART_SetConfig+0x2e0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d125      	bne.n	800681a <UART_SetConfig+0x272>
 80067ce:	4b29      	ldr	r3, [pc, #164]	@ (8006874 <UART_SetConfig+0x2cc>)
 80067d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067dc:	d017      	beq.n	800680e <UART_SetConfig+0x266>
 80067de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067e2:	d817      	bhi.n	8006814 <UART_SetConfig+0x26c>
 80067e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067e8:	d00b      	beq.n	8006802 <UART_SetConfig+0x25a>
 80067ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067ee:	d811      	bhi.n	8006814 <UART_SetConfig+0x26c>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <UART_SetConfig+0x254>
 80067f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067f8:	d006      	beq.n	8006808 <UART_SetConfig+0x260>
 80067fa:	e00b      	b.n	8006814 <UART_SetConfig+0x26c>
 80067fc:	2301      	movs	r3, #1
 80067fe:	77fb      	strb	r3, [r7, #31]
 8006800:	e076      	b.n	80068f0 <UART_SetConfig+0x348>
 8006802:	2302      	movs	r3, #2
 8006804:	77fb      	strb	r3, [r7, #31]
 8006806:	e073      	b.n	80068f0 <UART_SetConfig+0x348>
 8006808:	2304      	movs	r3, #4
 800680a:	77fb      	strb	r3, [r7, #31]
 800680c:	e070      	b.n	80068f0 <UART_SetConfig+0x348>
 800680e:	2308      	movs	r3, #8
 8006810:	77fb      	strb	r3, [r7, #31]
 8006812:	e06d      	b.n	80068f0 <UART_SetConfig+0x348>
 8006814:	2310      	movs	r3, #16
 8006816:	77fb      	strb	r3, [r7, #31]
 8006818:	e06a      	b.n	80068f0 <UART_SetConfig+0x348>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a1b      	ldr	r2, [pc, #108]	@ (800688c <UART_SetConfig+0x2e4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d138      	bne.n	8006896 <UART_SetConfig+0x2ee>
 8006824:	4b13      	ldr	r3, [pc, #76]	@ (8006874 <UART_SetConfig+0x2cc>)
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800682a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800682e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006832:	d017      	beq.n	8006864 <UART_SetConfig+0x2bc>
 8006834:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006838:	d82a      	bhi.n	8006890 <UART_SetConfig+0x2e8>
 800683a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800683e:	d00b      	beq.n	8006858 <UART_SetConfig+0x2b0>
 8006840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006844:	d824      	bhi.n	8006890 <UART_SetConfig+0x2e8>
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <UART_SetConfig+0x2aa>
 800684a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800684e:	d006      	beq.n	800685e <UART_SetConfig+0x2b6>
 8006850:	e01e      	b.n	8006890 <UART_SetConfig+0x2e8>
 8006852:	2300      	movs	r3, #0
 8006854:	77fb      	strb	r3, [r7, #31]
 8006856:	e04b      	b.n	80068f0 <UART_SetConfig+0x348>
 8006858:	2302      	movs	r3, #2
 800685a:	77fb      	strb	r3, [r7, #31]
 800685c:	e048      	b.n	80068f0 <UART_SetConfig+0x348>
 800685e:	2304      	movs	r3, #4
 8006860:	77fb      	strb	r3, [r7, #31]
 8006862:	e045      	b.n	80068f0 <UART_SetConfig+0x348>
 8006864:	2308      	movs	r3, #8
 8006866:	77fb      	strb	r3, [r7, #31]
 8006868:	e042      	b.n	80068f0 <UART_SetConfig+0x348>
 800686a:	bf00      	nop
 800686c:	efff69f3 	.word	0xefff69f3
 8006870:	40011000 	.word	0x40011000
 8006874:	40023800 	.word	0x40023800
 8006878:	40004400 	.word	0x40004400
 800687c:	40004800 	.word	0x40004800
 8006880:	40004c00 	.word	0x40004c00
 8006884:	40005000 	.word	0x40005000
 8006888:	40011400 	.word	0x40011400
 800688c:	40007800 	.word	0x40007800
 8006890:	2310      	movs	r3, #16
 8006892:	77fb      	strb	r3, [r7, #31]
 8006894:	e02c      	b.n	80068f0 <UART_SetConfig+0x348>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a72      	ldr	r2, [pc, #456]	@ (8006a64 <UART_SetConfig+0x4bc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d125      	bne.n	80068ec <UART_SetConfig+0x344>
 80068a0:	4b71      	ldr	r3, [pc, #452]	@ (8006a68 <UART_SetConfig+0x4c0>)
 80068a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80068aa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80068ae:	d017      	beq.n	80068e0 <UART_SetConfig+0x338>
 80068b0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80068b4:	d817      	bhi.n	80068e6 <UART_SetConfig+0x33e>
 80068b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068ba:	d00b      	beq.n	80068d4 <UART_SetConfig+0x32c>
 80068bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068c0:	d811      	bhi.n	80068e6 <UART_SetConfig+0x33e>
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <UART_SetConfig+0x326>
 80068c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068ca:	d006      	beq.n	80068da <UART_SetConfig+0x332>
 80068cc:	e00b      	b.n	80068e6 <UART_SetConfig+0x33e>
 80068ce:	2300      	movs	r3, #0
 80068d0:	77fb      	strb	r3, [r7, #31]
 80068d2:	e00d      	b.n	80068f0 <UART_SetConfig+0x348>
 80068d4:	2302      	movs	r3, #2
 80068d6:	77fb      	strb	r3, [r7, #31]
 80068d8:	e00a      	b.n	80068f0 <UART_SetConfig+0x348>
 80068da:	2304      	movs	r3, #4
 80068dc:	77fb      	strb	r3, [r7, #31]
 80068de:	e007      	b.n	80068f0 <UART_SetConfig+0x348>
 80068e0:	2308      	movs	r3, #8
 80068e2:	77fb      	strb	r3, [r7, #31]
 80068e4:	e004      	b.n	80068f0 <UART_SetConfig+0x348>
 80068e6:	2310      	movs	r3, #16
 80068e8:	77fb      	strb	r3, [r7, #31]
 80068ea:	e001      	b.n	80068f0 <UART_SetConfig+0x348>
 80068ec:	2310      	movs	r3, #16
 80068ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068f8:	d15b      	bne.n	80069b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80068fa:	7ffb      	ldrb	r3, [r7, #31]
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d828      	bhi.n	8006952 <UART_SetConfig+0x3aa>
 8006900:	a201      	add	r2, pc, #4	@ (adr r2, 8006908 <UART_SetConfig+0x360>)
 8006902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006906:	bf00      	nop
 8006908:	0800692d 	.word	0x0800692d
 800690c:	08006935 	.word	0x08006935
 8006910:	0800693d 	.word	0x0800693d
 8006914:	08006953 	.word	0x08006953
 8006918:	08006943 	.word	0x08006943
 800691c:	08006953 	.word	0x08006953
 8006920:	08006953 	.word	0x08006953
 8006924:	08006953 	.word	0x08006953
 8006928:	0800694b 	.word	0x0800694b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800692c:	f7fe f922 	bl	8004b74 <HAL_RCC_GetPCLK1Freq>
 8006930:	61b8      	str	r0, [r7, #24]
        break;
 8006932:	e013      	b.n	800695c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006934:	f7fe f932 	bl	8004b9c <HAL_RCC_GetPCLK2Freq>
 8006938:	61b8      	str	r0, [r7, #24]
        break;
 800693a:	e00f      	b.n	800695c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800693c:	4b4b      	ldr	r3, [pc, #300]	@ (8006a6c <UART_SetConfig+0x4c4>)
 800693e:	61bb      	str	r3, [r7, #24]
        break;
 8006940:	e00c      	b.n	800695c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006942:	f7fe f807 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8006946:	61b8      	str	r0, [r7, #24]
        break;
 8006948:	e008      	b.n	800695c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800694a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800694e:	61bb      	str	r3, [r7, #24]
        break;
 8006950:	e004      	b.n	800695c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	77bb      	strb	r3, [r7, #30]
        break;
 800695a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d074      	beq.n	8006a4c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	005a      	lsls	r2, r3, #1
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	085b      	lsrs	r3, r3, #1
 800696c:	441a      	add	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	fbb2 f3f3 	udiv	r3, r2, r3
 8006976:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	2b0f      	cmp	r3, #15
 800697c:	d916      	bls.n	80069ac <UART_SetConfig+0x404>
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006984:	d212      	bcs.n	80069ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	b29b      	uxth	r3, r3
 800698a:	f023 030f 	bic.w	r3, r3, #15
 800698e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	085b      	lsrs	r3, r3, #1
 8006994:	b29b      	uxth	r3, r3
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	b29a      	uxth	r2, r3
 800699c:	89fb      	ldrh	r3, [r7, #14]
 800699e:	4313      	orrs	r3, r2
 80069a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	89fa      	ldrh	r2, [r7, #14]
 80069a8:	60da      	str	r2, [r3, #12]
 80069aa:	e04f      	b.n	8006a4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	77bb      	strb	r3, [r7, #30]
 80069b0:	e04c      	b.n	8006a4c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069b2:	7ffb      	ldrb	r3, [r7, #31]
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	d828      	bhi.n	8006a0a <UART_SetConfig+0x462>
 80069b8:	a201      	add	r2, pc, #4	@ (adr r2, 80069c0 <UART_SetConfig+0x418>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	080069e5 	.word	0x080069e5
 80069c4:	080069ed 	.word	0x080069ed
 80069c8:	080069f5 	.word	0x080069f5
 80069cc:	08006a0b 	.word	0x08006a0b
 80069d0:	080069fb 	.word	0x080069fb
 80069d4:	08006a0b 	.word	0x08006a0b
 80069d8:	08006a0b 	.word	0x08006a0b
 80069dc:	08006a0b 	.word	0x08006a0b
 80069e0:	08006a03 	.word	0x08006a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069e4:	f7fe f8c6 	bl	8004b74 <HAL_RCC_GetPCLK1Freq>
 80069e8:	61b8      	str	r0, [r7, #24]
        break;
 80069ea:	e013      	b.n	8006a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069ec:	f7fe f8d6 	bl	8004b9c <HAL_RCC_GetPCLK2Freq>
 80069f0:	61b8      	str	r0, [r7, #24]
        break;
 80069f2:	e00f      	b.n	8006a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069f4:	4b1d      	ldr	r3, [pc, #116]	@ (8006a6c <UART_SetConfig+0x4c4>)
 80069f6:	61bb      	str	r3, [r7, #24]
        break;
 80069f8:	e00c      	b.n	8006a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069fa:	f7fd ffab 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 80069fe:	61b8      	str	r0, [r7, #24]
        break;
 8006a00:	e008      	b.n	8006a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a06:	61bb      	str	r3, [r7, #24]
        break;
 8006a08:	e004      	b.n	8006a14 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	77bb      	strb	r3, [r7, #30]
        break;
 8006a12:	bf00      	nop
    }

    if (pclk != 0U)
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d018      	beq.n	8006a4c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	085a      	lsrs	r2, r3, #1
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	441a      	add	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	2b0f      	cmp	r3, #15
 8006a32:	d909      	bls.n	8006a48 <UART_SetConfig+0x4a0>
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a3a:	d205      	bcs.n	8006a48 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60da      	str	r2, [r3, #12]
 8006a46:	e001      	b.n	8006a4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006a58:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3720      	adds	r7, #32
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	40007c00 	.word	0x40007c00
 8006a68:	40023800 	.word	0x40023800
 8006a6c:	00f42400 	.word	0x00f42400

08006a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00a      	beq.n	8006a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00a      	beq.n	8006ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae2:	f003 0304 	and.w	r3, r3, #4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00a      	beq.n	8006b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01a      	beq.n	8006b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b6e:	d10a      	bne.n	8006b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	605a      	str	r2, [r3, #4]
  }
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08c      	sub	sp, #48	@ 0x30
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bc4:	f7fb f980 	bl	8001ec8 <HAL_GetTick>
 8006bc8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d12e      	bne.n	8006c36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be0:	2200      	movs	r2, #0
 8006be2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f83b 	bl	8006c62 <UART_WaitOnFlagUntilTimeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d021      	beq.n	8006c36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	e853 3f00 	ldrex	r3, [r3]
 8006bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c06:	623b      	str	r3, [r7, #32]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	61fb      	str	r3, [r7, #28]
 8006c12:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c14:	69b9      	ldr	r1, [r7, #24]
 8006c16:	69fa      	ldr	r2, [r7, #28]
 8006c18:	e841 2300 	strex	r3, r2, [r1]
 8006c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1e6      	bne.n	8006bf2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2220      	movs	r2, #32
 8006c28:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e011      	b.n	8006c5a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3728      	adds	r7, #40	@ 0x28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	603b      	str	r3, [r7, #0]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c72:	e04f      	b.n	8006d14 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c7a:	d04b      	beq.n	8006d14 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7c:	f7fb f924 	bl	8001ec8 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d302      	bcc.n	8006c92 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e04e      	b.n	8006d34 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d037      	beq.n	8006d14 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b80      	cmp	r3, #128	@ 0x80
 8006ca8:	d034      	beq.n	8006d14 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b40      	cmp	r3, #64	@ 0x40
 8006cae:	d031      	beq.n	8006d14 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d110      	bne.n	8006ce0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2208      	movs	r2, #8
 8006cc4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 f838 	bl	8006d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2208      	movs	r2, #8
 8006cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e029      	b.n	8006d34 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cee:	d111      	bne.n	8006d14 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cf8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 f81e 	bl	8006d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e00f      	b.n	8006d34 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69da      	ldr	r2, [r3, #28]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	bf0c      	ite	eq
 8006d24:	2301      	moveq	r3, #1
 8006d26:	2300      	movne	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d0a0      	beq.n	8006c74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b095      	sub	sp, #84	@ 0x54
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d62:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d64:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e6      	bne.n	8006d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e5      	bne.n	8006d76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d118      	bne.n	8006de4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f023 0310 	bic.w	r3, r3, #16
 8006dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	6979      	ldr	r1, [r7, #20]
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	e841 2300 	strex	r3, r2, [r1]
 8006ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e6      	bne.n	8006db2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006df8:	bf00      	nop
 8006dfa:	3754      	adds	r7, #84	@ 0x54
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006e08:	4904      	ldr	r1, [pc, #16]	@ (8006e1c <MX_FATFS_Init+0x18>)
 8006e0a:	4805      	ldr	r0, [pc, #20]	@ (8006e20 <MX_FATFS_Init+0x1c>)
 8006e0c:	f004 f834 	bl	800ae78 <FATFS_LinkDriver>
 8006e10:	4603      	mov	r3, r0
 8006e12:	461a      	mov	r2, r3
 8006e14:	4b03      	ldr	r3, [pc, #12]	@ (8006e24 <MX_FATFS_Init+0x20>)
 8006e16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006e18:	bf00      	nop
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20000e78 	.word	0x20000e78
 8006e20:	2000000c 	.word	0x2000000c
 8006e24:	20000e74 	.word	0x20000e74

08006e28 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006e2c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8006e42:	79fb      	ldrb	r3, [r7, #7]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 f9d7 	bl	80071f8 <USER_SPI_initialize>
 8006e4a:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fab5 	bl	80073d0 <USER_SPI_status>
 8006e66:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	607a      	str	r2, [r7, #4]
 8006e7a:	603b      	str	r3, [r7, #0]
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8006e80:	7bf8      	ldrb	r0, [r7, #15]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	f000 fab8 	bl	80073fc <USER_SPI_read>
 8006e8c:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b084      	sub	sp, #16
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8006ea6:	7bf8      	ldrb	r0, [r7, #15]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	68b9      	ldr	r1, [r7, #8]
 8006eae:	f000 fb0b 	bl	80074c8 <USER_SPI_write>
 8006eb2:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	603a      	str	r2, [r7, #0]
 8006ec6:	71fb      	strb	r3, [r7, #7]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8006ecc:	79b9      	ldrb	r1, [r7, #6]
 8006ece:	79fb      	ldrb	r3, [r7, #7]
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fb74 	bl	80075c0 <USER_SPI_ioctl>
 8006ed8:	4603      	mov	r3, r0
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006eec:	f7fa ffec 	bl	8001ec8 <HAL_GetTick>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	4a04      	ldr	r2, [pc, #16]	@ (8006f04 <SPI_Timer_On+0x20>)
 8006ef4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006ef6:	4a04      	ldr	r2, [pc, #16]	@ (8006f08 <SPI_Timer_On+0x24>)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6013      	str	r3, [r2, #0]
}
 8006efc:	bf00      	nop
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	20000e80 	.word	0x20000e80
 8006f08:	20000e84 	.word	0x20000e84

08006f0c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006f10:	f7fa ffda 	bl	8001ec8 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	4b06      	ldr	r3, [pc, #24]	@ (8006f30 <SPI_Timer_Status+0x24>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	1ad2      	subs	r2, r2, r3
 8006f1c:	4b05      	ldr	r3, [pc, #20]	@ (8006f34 <SPI_Timer_Status+0x28>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	bf34      	ite	cc
 8006f24:	2301      	movcc	r3, #1
 8006f26:	2300      	movcs	r3, #0
 8006f28:	b2db      	uxtb	r3, r3
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20000e80 	.word	0x20000e80
 8006f34:	20000e84 	.word	0x20000e84

08006f38 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af02      	add	r7, sp, #8
 8006f3e:	4603      	mov	r3, r0
 8006f40:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006f42:	f107 020f 	add.w	r2, r7, #15
 8006f46:	1df9      	adds	r1, r7, #7
 8006f48:	2332      	movs	r3, #50	@ 0x32
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	4804      	ldr	r0, [pc, #16]	@ (8006f60 <xchg_spi+0x28>)
 8006f50:	f7fe fbd4 	bl	80056fc <HAL_SPI_TransmitReceive>
    return rxDat;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20000834 	.word	0x20000834

08006f64 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	e00a      	b.n	8006f8a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	18d4      	adds	r4, r2, r3
 8006f7a:	20ff      	movs	r0, #255	@ 0xff
 8006f7c:	f7ff ffdc 	bl	8006f38 <xchg_spi>
 8006f80:	4603      	mov	r3, r0
 8006f82:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3301      	adds	r3, #1
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d3f0      	bcc.n	8006f74 <rcvr_spi_multi+0x10>
	}
}
 8006f92:	bf00      	nop
 8006f94:	bf00      	nop
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd90      	pop	{r4, r7, pc}

08006f9c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006fae:	6879      	ldr	r1, [r7, #4]
 8006fb0:	4803      	ldr	r0, [pc, #12]	@ (8006fc0 <xmit_spi_multi+0x24>)
 8006fb2:	f7fe fa2e 	bl	8005412 <HAL_SPI_Transmit>
}
 8006fb6:	bf00      	nop
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000834 	.word	0x20000834

08006fc4 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006fcc:	f7fa ff7c 	bl	8001ec8 <HAL_GetTick>
 8006fd0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006fd6:	20ff      	movs	r0, #255	@ 0xff
 8006fd8:	f7ff ffae 	bl	8006f38 <xchg_spi>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	2bff      	cmp	r3, #255	@ 0xff
 8006fe4:	d007      	beq.n	8006ff6 <wait_ready+0x32>
 8006fe6:	f7fa ff6f 	bl	8001ec8 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d8ef      	bhi.n	8006fd6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
 8006ff8:	2bff      	cmp	r3, #255	@ 0xff
 8006ffa:	bf0c      	ite	eq
 8006ffc:	2301      	moveq	r3, #1
 8006ffe:	2300      	movne	r3, #0
 8007000:	b2db      	uxtb	r3, r3
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007010:	2201      	movs	r2, #1
 8007012:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007016:	4804      	ldr	r0, [pc, #16]	@ (8007028 <despiselect+0x1c>)
 8007018:	f7fb fa34 	bl	8002484 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800701c:	20ff      	movs	r0, #255	@ 0xff
 800701e:	f7ff ff8b 	bl	8006f38 <xchg_spi>

}
 8007022:	bf00      	nop
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	40020c00 	.word	0x40020c00

0800702c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007030:	2200      	movs	r2, #0
 8007032:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007036:	480a      	ldr	r0, [pc, #40]	@ (8007060 <spiselect+0x34>)
 8007038:	f7fb fa24 	bl	8002484 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800703c:	20ff      	movs	r0, #255	@ 0xff
 800703e:	f7ff ff7b 	bl	8006f38 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007042:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007046:	f7ff ffbd 	bl	8006fc4 <wait_ready>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <spiselect+0x28>
 8007050:	2301      	movs	r3, #1
 8007052:	e002      	b.n	800705a <spiselect+0x2e>

	despiselect();
 8007054:	f7ff ffda 	bl	800700c <despiselect>
	return 0;	/* Timeout */
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40020c00 	.word	0x40020c00

08007064 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800706e:	20c8      	movs	r0, #200	@ 0xc8
 8007070:	f7ff ff38 	bl	8006ee4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007074:	20ff      	movs	r0, #255	@ 0xff
 8007076:	f7ff ff5f 	bl	8006f38 <xchg_spi>
 800707a:	4603      	mov	r3, r0
 800707c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	2bff      	cmp	r3, #255	@ 0xff
 8007082:	d104      	bne.n	800708e <rcvr_datablock+0x2a>
 8007084:	f7ff ff42 	bl	8006f0c <SPI_Timer_Status>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f2      	bne.n	8007074 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800708e:	7bfb      	ldrb	r3, [r7, #15]
 8007090:	2bfe      	cmp	r3, #254	@ 0xfe
 8007092:	d001      	beq.n	8007098 <rcvr_datablock+0x34>
 8007094:	2300      	movs	r3, #0
 8007096:	e00a      	b.n	80070ae <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7ff ff62 	bl	8006f64 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80070a0:	20ff      	movs	r0, #255	@ 0xff
 80070a2:	f7ff ff49 	bl	8006f38 <xchg_spi>
 80070a6:	20ff      	movs	r0, #255	@ 0xff
 80070a8:	f7ff ff46 	bl	8006f38 <xchg_spi>

	return 1;						/* Function succeeded */
 80070ac:	2301      	movs	r3, #1
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	460b      	mov	r3, r1
 80070c0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80070c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80070c6:	f7ff ff7d 	bl	8006fc4 <wait_ready>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <xmit_datablock+0x1e>
 80070d0:	2300      	movs	r3, #0
 80070d2:	e01e      	b.n	8007112 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff ff2e 	bl	8006f38 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80070dc:	78fb      	ldrb	r3, [r7, #3]
 80070de:	2bfd      	cmp	r3, #253	@ 0xfd
 80070e0:	d016      	beq.n	8007110 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80070e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff ff58 	bl	8006f9c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80070ec:	20ff      	movs	r0, #255	@ 0xff
 80070ee:	f7ff ff23 	bl	8006f38 <xchg_spi>
 80070f2:	20ff      	movs	r0, #255	@ 0xff
 80070f4:	f7ff ff20 	bl	8006f38 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80070f8:	20ff      	movs	r0, #255	@ 0xff
 80070fa:	f7ff ff1d 	bl	8006f38 <xchg_spi>
 80070fe:	4603      	mov	r3, r0
 8007100:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007102:	7bfb      	ldrb	r3, [r7, #15]
 8007104:	f003 031f 	and.w	r3, r3, #31
 8007108:	2b05      	cmp	r3, #5
 800710a:	d001      	beq.n	8007110 <xmit_datablock+0x5a>
 800710c:	2300      	movs	r3, #0
 800710e:	e000      	b.n	8007112 <xmit_datablock+0x5c>
	}
	return 1;
 8007110:	2301      	movs	r3, #1
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	4603      	mov	r3, r0
 8007122:	6039      	str	r1, [r7, #0]
 8007124:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800712a:	2b00      	cmp	r3, #0
 800712c:	da0e      	bge.n	800714c <send_cmd+0x32>
		cmd &= 0x7F;
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007134:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007136:	2100      	movs	r1, #0
 8007138:	2037      	movs	r0, #55	@ 0x37
 800713a:	f7ff ffee 	bl	800711a <send_cmd>
 800713e:	4603      	mov	r3, r0
 8007140:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007142:	7bbb      	ldrb	r3, [r7, #14]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d901      	bls.n	800714c <send_cmd+0x32>
 8007148:	7bbb      	ldrb	r3, [r7, #14]
 800714a:	e051      	b.n	80071f0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800714c:	79fb      	ldrb	r3, [r7, #7]
 800714e:	2b0c      	cmp	r3, #12
 8007150:	d008      	beq.n	8007164 <send_cmd+0x4a>
		despiselect();
 8007152:	f7ff ff5b 	bl	800700c <despiselect>
		if (!spiselect()) return 0xFF;
 8007156:	f7ff ff69 	bl	800702c <spiselect>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <send_cmd+0x4a>
 8007160:	23ff      	movs	r3, #255	@ 0xff
 8007162:	e045      	b.n	80071f0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800716a:	b2db      	uxtb	r3, r3
 800716c:	4618      	mov	r0, r3
 800716e:	f7ff fee3 	bl	8006f38 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	0e1b      	lsrs	r3, r3, #24
 8007176:	b2db      	uxtb	r3, r3
 8007178:	4618      	mov	r0, r3
 800717a:	f7ff fedd 	bl	8006f38 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	0c1b      	lsrs	r3, r3, #16
 8007182:	b2db      	uxtb	r3, r3
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff fed7 	bl	8006f38 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	0a1b      	lsrs	r3, r3, #8
 800718e:	b2db      	uxtb	r3, r3
 8007190:	4618      	mov	r0, r3
 8007192:	f7ff fed1 	bl	8006f38 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fecc 	bl	8006f38 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80071a0:	2301      	movs	r3, #1
 80071a2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <send_cmd+0x94>
 80071aa:	2395      	movs	r3, #149	@ 0x95
 80071ac:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d101      	bne.n	80071b8 <send_cmd+0x9e>
 80071b4:	2387      	movs	r3, #135	@ 0x87
 80071b6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff febc 	bl	8006f38 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	2b0c      	cmp	r3, #12
 80071c4:	d102      	bne.n	80071cc <send_cmd+0xb2>
 80071c6:	20ff      	movs	r0, #255	@ 0xff
 80071c8:	f7ff feb6 	bl	8006f38 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80071cc:	230a      	movs	r3, #10
 80071ce:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80071d0:	20ff      	movs	r0, #255	@ 0xff
 80071d2:	f7ff feb1 	bl	8006f38 <xchg_spi>
 80071d6:	4603      	mov	r3, r0
 80071d8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80071da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	da05      	bge.n	80071ee <send_cmd+0xd4>
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	73fb      	strb	r3, [r7, #15]
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1f0      	bne.n	80071d0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80071ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80071f8:	b590      	push	{r4, r7, lr}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	4603      	mov	r3, r0
 8007200:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d001      	beq.n	800720c <USER_SPI_initialize+0x14>
 8007208:	2301      	movs	r3, #1
 800720a:	e0d6      	b.n	80073ba <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800720c:	4b6d      	ldr	r3, [pc, #436]	@ (80073c4 <USER_SPI_initialize+0x1cc>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <USER_SPI_initialize+0x2a>
 800721a:	4b6a      	ldr	r3, [pc, #424]	@ (80073c4 <USER_SPI_initialize+0x1cc>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	b2db      	uxtb	r3, r3
 8007220:	e0cb      	b.n	80073ba <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007222:	4b69      	ldr	r3, [pc, #420]	@ (80073c8 <USER_SPI_initialize+0x1d0>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800722c:	4b66      	ldr	r3, [pc, #408]	@ (80073c8 <USER_SPI_initialize+0x1d0>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8007234:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007236:	230a      	movs	r3, #10
 8007238:	73fb      	strb	r3, [r7, #15]
 800723a:	e005      	b.n	8007248 <USER_SPI_initialize+0x50>
 800723c:	20ff      	movs	r0, #255	@ 0xff
 800723e:	f7ff fe7b 	bl	8006f38 <xchg_spi>
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	3b01      	subs	r3, #1
 8007246:	73fb      	strb	r3, [r7, #15]
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1f6      	bne.n	800723c <USER_SPI_initialize+0x44>

	ty = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007252:	2100      	movs	r1, #0
 8007254:	2000      	movs	r0, #0
 8007256:	f7ff ff60 	bl	800711a <send_cmd>
 800725a:	4603      	mov	r3, r0
 800725c:	2b01      	cmp	r3, #1
 800725e:	f040 808b 	bne.w	8007378 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007262:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007266:	f7ff fe3d 	bl	8006ee4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800726a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800726e:	2008      	movs	r0, #8
 8007270:	f7ff ff53 	bl	800711a <send_cmd>
 8007274:	4603      	mov	r3, r0
 8007276:	2b01      	cmp	r3, #1
 8007278:	d151      	bne.n	800731e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800727a:	2300      	movs	r3, #0
 800727c:	73fb      	strb	r3, [r7, #15]
 800727e:	e00d      	b.n	800729c <USER_SPI_initialize+0xa4>
 8007280:	7bfc      	ldrb	r4, [r7, #15]
 8007282:	20ff      	movs	r0, #255	@ 0xff
 8007284:	f7ff fe58 	bl	8006f38 <xchg_spi>
 8007288:	4603      	mov	r3, r0
 800728a:	461a      	mov	r2, r3
 800728c:	f104 0310 	add.w	r3, r4, #16
 8007290:	443b      	add	r3, r7
 8007292:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007296:	7bfb      	ldrb	r3, [r7, #15]
 8007298:	3301      	adds	r3, #1
 800729a:	73fb      	strb	r3, [r7, #15]
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d9ee      	bls.n	8007280 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80072a2:	7abb      	ldrb	r3, [r7, #10]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d167      	bne.n	8007378 <USER_SPI_initialize+0x180>
 80072a8:	7afb      	ldrb	r3, [r7, #11]
 80072aa:	2baa      	cmp	r3, #170	@ 0xaa
 80072ac:	d164      	bne.n	8007378 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80072ae:	bf00      	nop
 80072b0:	f7ff fe2c 	bl	8006f0c <SPI_Timer_Status>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d007      	beq.n	80072ca <USER_SPI_initialize+0xd2>
 80072ba:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80072be:	20a9      	movs	r0, #169	@ 0xa9
 80072c0:	f7ff ff2b 	bl	800711a <send_cmd>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1f2      	bne.n	80072b0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80072ca:	f7ff fe1f 	bl	8006f0c <SPI_Timer_Status>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d051      	beq.n	8007378 <USER_SPI_initialize+0x180>
 80072d4:	2100      	movs	r1, #0
 80072d6:	203a      	movs	r0, #58	@ 0x3a
 80072d8:	f7ff ff1f 	bl	800711a <send_cmd>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d14a      	bne.n	8007378 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]
 80072e6:	e00d      	b.n	8007304 <USER_SPI_initialize+0x10c>
 80072e8:	7bfc      	ldrb	r4, [r7, #15]
 80072ea:	20ff      	movs	r0, #255	@ 0xff
 80072ec:	f7ff fe24 	bl	8006f38 <xchg_spi>
 80072f0:	4603      	mov	r3, r0
 80072f2:	461a      	mov	r2, r3
 80072f4:	f104 0310 	add.w	r3, r4, #16
 80072f8:	443b      	add	r3, r7
 80072fa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	3301      	adds	r3, #1
 8007302:	73fb      	strb	r3, [r7, #15]
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	2b03      	cmp	r3, #3
 8007308:	d9ee      	bls.n	80072e8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800730a:	7a3b      	ldrb	r3, [r7, #8]
 800730c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <USER_SPI_initialize+0x120>
 8007314:	230c      	movs	r3, #12
 8007316:	e000      	b.n	800731a <USER_SPI_initialize+0x122>
 8007318:	2304      	movs	r3, #4
 800731a:	737b      	strb	r3, [r7, #13]
 800731c:	e02c      	b.n	8007378 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800731e:	2100      	movs	r1, #0
 8007320:	20a9      	movs	r0, #169	@ 0xa9
 8007322:	f7ff fefa 	bl	800711a <send_cmd>
 8007326:	4603      	mov	r3, r0
 8007328:	2b01      	cmp	r3, #1
 800732a:	d804      	bhi.n	8007336 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800732c:	2302      	movs	r3, #2
 800732e:	737b      	strb	r3, [r7, #13]
 8007330:	23a9      	movs	r3, #169	@ 0xa9
 8007332:	73bb      	strb	r3, [r7, #14]
 8007334:	e003      	b.n	800733e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007336:	2301      	movs	r3, #1
 8007338:	737b      	strb	r3, [r7, #13]
 800733a:	2301      	movs	r3, #1
 800733c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800733e:	bf00      	nop
 8007340:	f7ff fde4 	bl	8006f0c <SPI_Timer_Status>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d007      	beq.n	800735a <USER_SPI_initialize+0x162>
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	2100      	movs	r1, #0
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff fee3 	bl	800711a <send_cmd>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1f2      	bne.n	8007340 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800735a:	f7ff fdd7 	bl	8006f0c <SPI_Timer_Status>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d007      	beq.n	8007374 <USER_SPI_initialize+0x17c>
 8007364:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007368:	2010      	movs	r0, #16
 800736a:	f7ff fed6 	bl	800711a <send_cmd>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <USER_SPI_initialize+0x180>
				ty = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007378:	4a14      	ldr	r2, [pc, #80]	@ (80073cc <USER_SPI_initialize+0x1d4>)
 800737a:	7b7b      	ldrb	r3, [r7, #13]
 800737c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800737e:	f7ff fe45 	bl	800700c <despiselect>

	if (ty) {			/* OK */
 8007382:	7b7b      	ldrb	r3, [r7, #13]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d012      	beq.n	80073ae <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007388:	4b0f      	ldr	r3, [pc, #60]	@ (80073c8 <USER_SPI_initialize+0x1d0>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007392:	4b0d      	ldr	r3, [pc, #52]	@ (80073c8 <USER_SPI_initialize+0x1d0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f042 0210 	orr.w	r2, r2, #16
 800739a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800739c:	4b09      	ldr	r3, [pc, #36]	@ (80073c4 <USER_SPI_initialize+0x1cc>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	f023 0301 	bic.w	r3, r3, #1
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	4b06      	ldr	r3, [pc, #24]	@ (80073c4 <USER_SPI_initialize+0x1cc>)
 80073aa:	701a      	strb	r2, [r3, #0]
 80073ac:	e002      	b.n	80073b4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80073ae:	4b05      	ldr	r3, [pc, #20]	@ (80073c4 <USER_SPI_initialize+0x1cc>)
 80073b0:	2201      	movs	r2, #1
 80073b2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80073b4:	4b03      	ldr	r3, [pc, #12]	@ (80073c4 <USER_SPI_initialize+0x1cc>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	b2db      	uxtb	r3, r3
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd90      	pop	{r4, r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20000020 	.word	0x20000020
 80073c8:	20000834 	.word	0x20000834
 80073cc:	20000e7c 	.word	0x20000e7c

080073d0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <USER_SPI_status+0x14>
 80073e0:	2301      	movs	r3, #1
 80073e2:	e002      	b.n	80073ea <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80073e4:	4b04      	ldr	r3, [pc, #16]	@ (80073f8 <USER_SPI_status+0x28>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	b2db      	uxtb	r3, r3
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	20000020 	.word	0x20000020

080073fc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60b9      	str	r1, [r7, #8]
 8007404:	607a      	str	r2, [r7, #4]
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d102      	bne.n	8007418 <USER_SPI_read+0x1c>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <USER_SPI_read+0x20>
 8007418:	2304      	movs	r3, #4
 800741a:	e04d      	b.n	80074b8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800741c:	4b28      	ldr	r3, [pc, #160]	@ (80074c0 <USER_SPI_read+0xc4>)
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <USER_SPI_read+0x32>
 800742a:	2303      	movs	r3, #3
 800742c:	e044      	b.n	80074b8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800742e:	4b25      	ldr	r3, [pc, #148]	@ (80074c4 <USER_SPI_read+0xc8>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <USER_SPI_read+0x44>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	025b      	lsls	r3, r3, #9
 800743e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d111      	bne.n	800746a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	2011      	movs	r0, #17
 800744a:	f7ff fe66 	bl	800711a <send_cmd>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d129      	bne.n	80074a8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007454:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007458:	68b8      	ldr	r0, [r7, #8]
 800745a:	f7ff fe03 	bl	8007064 <rcvr_datablock>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d021      	beq.n	80074a8 <USER_SPI_read+0xac>
			count = 0;
 8007464:	2300      	movs	r3, #0
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	e01e      	b.n	80074a8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800746a:	6879      	ldr	r1, [r7, #4]
 800746c:	2012      	movs	r0, #18
 800746e:	f7ff fe54 	bl	800711a <send_cmd>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d117      	bne.n	80074a8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007478:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800747c:	68b8      	ldr	r0, [r7, #8]
 800747e:	f7ff fdf1 	bl	8007064 <rcvr_datablock>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00a      	beq.n	800749e <USER_SPI_read+0xa2>
				buff += 512;
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800748e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	3b01      	subs	r3, #1
 8007494:	603b      	str	r3, [r7, #0]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1ed      	bne.n	8007478 <USER_SPI_read+0x7c>
 800749c:	e000      	b.n	80074a0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800749e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80074a0:	2100      	movs	r1, #0
 80074a2:	200c      	movs	r0, #12
 80074a4:	f7ff fe39 	bl	800711a <send_cmd>
		}
	}
	despiselect();
 80074a8:	f7ff fdb0 	bl	800700c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bf14      	ite	ne
 80074b2:	2301      	movne	r3, #1
 80074b4:	2300      	moveq	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20000020 	.word	0x20000020
 80074c4:	20000e7c 	.word	0x20000e7c

080074c8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60b9      	str	r1, [r7, #8]
 80074d0:	607a      	str	r2, [r7, #4]
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	4603      	mov	r3, r0
 80074d6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d102      	bne.n	80074e4 <USER_SPI_write+0x1c>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <USER_SPI_write+0x20>
 80074e4:	2304      	movs	r3, #4
 80074e6:	e063      	b.n	80075b0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80074e8:	4b33      	ldr	r3, [pc, #204]	@ (80075b8 <USER_SPI_write+0xf0>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <USER_SPI_write+0x32>
 80074f6:	2303      	movs	r3, #3
 80074f8:	e05a      	b.n	80075b0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80074fa:	4b2f      	ldr	r3, [pc, #188]	@ (80075b8 <USER_SPI_write+0xf0>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <USER_SPI_write+0x44>
 8007508:	2302      	movs	r3, #2
 800750a:	e051      	b.n	80075b0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800750c:	4b2b      	ldr	r3, [pc, #172]	@ (80075bc <USER_SPI_write+0xf4>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <USER_SPI_write+0x56>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	025b      	lsls	r3, r3, #9
 800751c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d110      	bne.n	8007546 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	2018      	movs	r0, #24
 8007528:	f7ff fdf7 	bl	800711a <send_cmd>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d136      	bne.n	80075a0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007532:	21fe      	movs	r1, #254	@ 0xfe
 8007534:	68b8      	ldr	r0, [r7, #8]
 8007536:	f7ff fdbe 	bl	80070b6 <xmit_datablock>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d02f      	beq.n	80075a0 <USER_SPI_write+0xd8>
			count = 0;
 8007540:	2300      	movs	r3, #0
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	e02c      	b.n	80075a0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007546:	4b1d      	ldr	r3, [pc, #116]	@ (80075bc <USER_SPI_write+0xf4>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	f003 0306 	and.w	r3, r3, #6
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <USER_SPI_write+0x92>
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	2097      	movs	r0, #151	@ 0x97
 8007556:	f7ff fde0 	bl	800711a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	2019      	movs	r0, #25
 800755e:	f7ff fddc 	bl	800711a <send_cmd>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d11b      	bne.n	80075a0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007568:	21fc      	movs	r1, #252	@ 0xfc
 800756a:	68b8      	ldr	r0, [r7, #8]
 800756c:	f7ff fda3 	bl	80070b6 <xmit_datablock>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <USER_SPI_write+0xc4>
				buff += 512;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800757c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	3b01      	subs	r3, #1
 8007582:	603b      	str	r3, [r7, #0]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1ee      	bne.n	8007568 <USER_SPI_write+0xa0>
 800758a:	e000      	b.n	800758e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800758c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800758e:	21fd      	movs	r1, #253	@ 0xfd
 8007590:	2000      	movs	r0, #0
 8007592:	f7ff fd90 	bl	80070b6 <xmit_datablock>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <USER_SPI_write+0xd8>
 800759c:	2301      	movs	r3, #1
 800759e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80075a0:	f7ff fd34 	bl	800700c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	bf14      	ite	ne
 80075aa:	2301      	movne	r3, #1
 80075ac:	2300      	moveq	r3, #0
 80075ae:	b2db      	uxtb	r3, r3
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	20000020 	.word	0x20000020
 80075bc:	20000e7c 	.word	0x20000e7c

080075c0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08c      	sub	sp, #48	@ 0x30
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	603a      	str	r2, [r7, #0]
 80075ca:	71fb      	strb	r3, [r7, #7]
 80075cc:	460b      	mov	r3, r1
 80075ce:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80075d0:	79fb      	ldrb	r3, [r7, #7]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <USER_SPI_ioctl+0x1a>
 80075d6:	2304      	movs	r3, #4
 80075d8:	e15a      	b.n	8007890 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80075da:	4baf      	ldr	r3, [pc, #700]	@ (8007898 <USER_SPI_ioctl+0x2d8>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <USER_SPI_ioctl+0x2c>
 80075e8:	2303      	movs	r3, #3
 80075ea:	e151      	b.n	8007890 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80075f2:	79bb      	ldrb	r3, [r7, #6]
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	f200 8136 	bhi.w	8007866 <USER_SPI_ioctl+0x2a6>
 80075fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007600 <USER_SPI_ioctl+0x40>)
 80075fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007600:	08007615 	.word	0x08007615
 8007604:	08007629 	.word	0x08007629
 8007608:	08007867 	.word	0x08007867
 800760c:	080076d5 	.word	0x080076d5
 8007610:	080077cb 	.word	0x080077cb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007614:	f7ff fd0a 	bl	800702c <spiselect>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 8127 	beq.w	800786e <USER_SPI_ioctl+0x2ae>
 8007620:	2300      	movs	r3, #0
 8007622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007626:	e122      	b.n	800786e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007628:	2100      	movs	r1, #0
 800762a:	2009      	movs	r0, #9
 800762c:	f7ff fd75 	bl	800711a <send_cmd>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	f040 811d 	bne.w	8007872 <USER_SPI_ioctl+0x2b2>
 8007638:	f107 030c 	add.w	r3, r7, #12
 800763c:	2110      	movs	r1, #16
 800763e:	4618      	mov	r0, r3
 8007640:	f7ff fd10 	bl	8007064 <rcvr_datablock>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 8113 	beq.w	8007872 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800764c:	7b3b      	ldrb	r3, [r7, #12]
 800764e:	099b      	lsrs	r3, r3, #6
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b01      	cmp	r3, #1
 8007654:	d111      	bne.n	800767a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007656:	7d7b      	ldrb	r3, [r7, #21]
 8007658:	461a      	mov	r2, r3
 800765a:	7d3b      	ldrb	r3, [r7, #20]
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	4413      	add	r3, r2
 8007660:	461a      	mov	r2, r3
 8007662:	7cfb      	ldrb	r3, [r7, #19]
 8007664:	041b      	lsls	r3, r3, #16
 8007666:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800766a:	4413      	add	r3, r2
 800766c:	3301      	adds	r3, #1
 800766e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	029a      	lsls	r2, r3, #10
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	e028      	b.n	80076cc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800767a:	7c7b      	ldrb	r3, [r7, #17]
 800767c:	f003 030f 	and.w	r3, r3, #15
 8007680:	b2da      	uxtb	r2, r3
 8007682:	7dbb      	ldrb	r3, [r7, #22]
 8007684:	09db      	lsrs	r3, r3, #7
 8007686:	b2db      	uxtb	r3, r3
 8007688:	4413      	add	r3, r2
 800768a:	b2da      	uxtb	r2, r3
 800768c:	7d7b      	ldrb	r3, [r7, #21]
 800768e:	005b      	lsls	r3, r3, #1
 8007690:	b2db      	uxtb	r3, r3
 8007692:	f003 0306 	and.w	r3, r3, #6
 8007696:	b2db      	uxtb	r3, r3
 8007698:	4413      	add	r3, r2
 800769a:	b2db      	uxtb	r3, r3
 800769c:	3302      	adds	r3, #2
 800769e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80076a2:	7d3b      	ldrb	r3, [r7, #20]
 80076a4:	099b      	lsrs	r3, r3, #6
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	7cfb      	ldrb	r3, [r7, #19]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	441a      	add	r2, r3
 80076b0:	7cbb      	ldrb	r3, [r7, #18]
 80076b2:	029b      	lsls	r3, r3, #10
 80076b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80076b8:	4413      	add	r3, r2
 80076ba:	3301      	adds	r3, #1
 80076bc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80076be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80076c2:	3b09      	subs	r3, #9
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	409a      	lsls	r2, r3
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80076d2:	e0ce      	b.n	8007872 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80076d4:	4b71      	ldr	r3, [pc, #452]	@ (800789c <USER_SPI_ioctl+0x2dc>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d031      	beq.n	8007744 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80076e0:	2100      	movs	r1, #0
 80076e2:	208d      	movs	r0, #141	@ 0x8d
 80076e4:	f7ff fd19 	bl	800711a <send_cmd>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f040 80c3 	bne.w	8007876 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80076f0:	20ff      	movs	r0, #255	@ 0xff
 80076f2:	f7ff fc21 	bl	8006f38 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80076f6:	f107 030c 	add.w	r3, r7, #12
 80076fa:	2110      	movs	r1, #16
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7ff fcb1 	bl	8007064 <rcvr_datablock>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 80b6 	beq.w	8007876 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800770a:	2330      	movs	r3, #48	@ 0x30
 800770c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007710:	e007      	b.n	8007722 <USER_SPI_ioctl+0x162>
 8007712:	20ff      	movs	r0, #255	@ 0xff
 8007714:	f7ff fc10 	bl	8006f38 <xchg_spi>
 8007718:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800771c:	3b01      	subs	r3, #1
 800771e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007722:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1f3      	bne.n	8007712 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800772a:	7dbb      	ldrb	r3, [r7, #22]
 800772c:	091b      	lsrs	r3, r3, #4
 800772e:	b2db      	uxtb	r3, r3
 8007730:	461a      	mov	r2, r3
 8007732:	2310      	movs	r3, #16
 8007734:	fa03 f202 	lsl.w	r2, r3, r2
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007742:	e098      	b.n	8007876 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007744:	2100      	movs	r1, #0
 8007746:	2009      	movs	r0, #9
 8007748:	f7ff fce7 	bl	800711a <send_cmd>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	f040 8091 	bne.w	8007876 <USER_SPI_ioctl+0x2b6>
 8007754:	f107 030c 	add.w	r3, r7, #12
 8007758:	2110      	movs	r1, #16
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff fc82 	bl	8007064 <rcvr_datablock>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 8087 	beq.w	8007876 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007768:	4b4c      	ldr	r3, [pc, #304]	@ (800789c <USER_SPI_ioctl+0x2dc>)
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d012      	beq.n	800779a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007774:	7dbb      	ldrb	r3, [r7, #22]
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800777c:	7dfa      	ldrb	r2, [r7, #23]
 800777e:	09d2      	lsrs	r2, r2, #7
 8007780:	b2d2      	uxtb	r2, r2
 8007782:	4413      	add	r3, r2
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	7e7b      	ldrb	r3, [r7, #25]
 8007788:	099b      	lsrs	r3, r3, #6
 800778a:	b2db      	uxtb	r3, r3
 800778c:	3b01      	subs	r3, #1
 800778e:	fa02 f303 	lsl.w	r3, r2, r3
 8007792:	461a      	mov	r2, r3
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	e013      	b.n	80077c2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800779a:	7dbb      	ldrb	r3, [r7, #22]
 800779c:	109b      	asrs	r3, r3, #2
 800779e:	b29b      	uxth	r3, r3
 80077a0:	f003 031f 	and.w	r3, r3, #31
 80077a4:	3301      	adds	r3, #1
 80077a6:	7dfa      	ldrb	r2, [r7, #23]
 80077a8:	00d2      	lsls	r2, r2, #3
 80077aa:	f002 0218 	and.w	r2, r2, #24
 80077ae:	7df9      	ldrb	r1, [r7, #23]
 80077b0:	0949      	lsrs	r1, r1, #5
 80077b2:	b2c9      	uxtb	r1, r1
 80077b4:	440a      	add	r2, r1
 80077b6:	3201      	adds	r2, #1
 80077b8:	fb02 f303 	mul.w	r3, r2, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80077c8:	e055      	b.n	8007876 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80077ca:	4b34      	ldr	r3, [pc, #208]	@ (800789c <USER_SPI_ioctl+0x2dc>)
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	f003 0306 	and.w	r3, r3, #6
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d051      	beq.n	800787a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80077d6:	f107 020c 	add.w	r2, r7, #12
 80077da:	79fb      	ldrb	r3, [r7, #7]
 80077dc:	210b      	movs	r1, #11
 80077de:	4618      	mov	r0, r3
 80077e0:	f7ff feee 	bl	80075c0 <USER_SPI_ioctl>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d149      	bne.n	800787e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80077ea:	7b3b      	ldrb	r3, [r7, #12]
 80077ec:	099b      	lsrs	r3, r3, #6
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d104      	bne.n	80077fe <USER_SPI_ioctl+0x23e>
 80077f4:	7dbb      	ldrb	r3, [r7, #22]
 80077f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d041      	beq.n	8007882 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	623b      	str	r3, [r7, #32]
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800780e:	4b23      	ldr	r3, [pc, #140]	@ (800789c <USER_SPI_ioctl+0x2dc>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	f003 0308 	and.w	r3, r3, #8
 8007816:	2b00      	cmp	r3, #0
 8007818:	d105      	bne.n	8007826 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800781a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800781c:	025b      	lsls	r3, r3, #9
 800781e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007822:	025b      	lsls	r3, r3, #9
 8007824:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007828:	2020      	movs	r0, #32
 800782a:	f7ff fc76 	bl	800711a <send_cmd>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d128      	bne.n	8007886 <USER_SPI_ioctl+0x2c6>
 8007834:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007836:	2021      	movs	r0, #33	@ 0x21
 8007838:	f7ff fc6f 	bl	800711a <send_cmd>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d121      	bne.n	8007886 <USER_SPI_ioctl+0x2c6>
 8007842:	2100      	movs	r1, #0
 8007844:	2026      	movs	r0, #38	@ 0x26
 8007846:	f7ff fc68 	bl	800711a <send_cmd>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d11a      	bne.n	8007886 <USER_SPI_ioctl+0x2c6>
 8007850:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007854:	f7ff fbb6 	bl	8006fc4 <wait_ready>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d013      	beq.n	8007886 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800785e:	2300      	movs	r3, #0
 8007860:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007864:	e00f      	b.n	8007886 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007866:	2304      	movs	r3, #4
 8007868:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800786c:	e00c      	b.n	8007888 <USER_SPI_ioctl+0x2c8>
		break;
 800786e:	bf00      	nop
 8007870:	e00a      	b.n	8007888 <USER_SPI_ioctl+0x2c8>
		break;
 8007872:	bf00      	nop
 8007874:	e008      	b.n	8007888 <USER_SPI_ioctl+0x2c8>
		break;
 8007876:	bf00      	nop
 8007878:	e006      	b.n	8007888 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800787a:	bf00      	nop
 800787c:	e004      	b.n	8007888 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800787e:	bf00      	nop
 8007880:	e002      	b.n	8007888 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007882:	bf00      	nop
 8007884:	e000      	b.n	8007888 <USER_SPI_ioctl+0x2c8>
		break;
 8007886:	bf00      	nop
	}

	despiselect();
 8007888:	f7ff fbc0 	bl	800700c <despiselect>

	return res;
 800788c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007890:	4618      	mov	r0, r3
 8007892:	3730      	adds	r7, #48	@ 0x30
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	20000020 	.word	0x20000020
 800789c:	20000e7c 	.word	0x20000e7c

080078a0 <uart_error_handler>:


#include "erlog.h"

static void uart_error_handler()
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80078a4:	b672      	cpsid	i
}
 80078a6:	bf00      	nop
	 __disable_irq();
	  while (1)
 80078a8:	bf00      	nop
 80078aa:	e7fd      	b.n	80078a8 <uart_error_handler+0x8>

080078ac <uart_init>:
	  {
	  }
}
static void uart_init(UART_HandleTypeDef *huart3)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3->Instance = USART3;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a15      	ldr	r2, [pc, #84]	@ (800790c <uart_init+0x60>)
 80078b8:	601a      	str	r2, [r3, #0]
  huart3->Init.BaudRate = 115200;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80078c0:	605a      	str	r2, [r3, #4]
  huart3->Init.WordLength = UART_WORDLENGTH_8B;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	609a      	str	r2, [r3, #8]
  huart3->Init.StopBits = UART_STOPBITS_1;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	60da      	str	r2, [r3, #12]
  huart3->Init.Parity = UART_PARITY_NONE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	611a      	str	r2, [r3, #16]
  huart3->Init.Mode = UART_MODE_TX_RX;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	220c      	movs	r2, #12
 80078d8:	615a      	str	r2, [r3, #20]
  huart3->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	619a      	str	r2, [r3, #24]
  huart3->Init.OverSampling = UART_OVERSAMPLING_16;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	61da      	str	r2, [r3, #28]
  huart3->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	621a      	str	r2, [r3, #32]
  huart3->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart3) != HAL_OK)
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7fe fd80 	bl	80063f8 <HAL_UART_Init>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <uart_init+0x56>
  {
	  uart_error_handler();
 80078fe:	f7ff ffcf 	bl	80078a0 <uart_error_handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007902:	bf00      	nop
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	40004800 	.word	0x40004800

08007910 <erlog_init>:

void erlog_init(log_t *log_console, UART_HandleTypeDef *huart3)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
	log_console->uhart = huart3;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	601a      	str	r2, [r3, #0]
	log_console->msg_len = 0;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	809a      	strh	r2, [r3, #4]
	memset(log_console->msg, 0 , sizeof(log_console->msg_len));
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	3306      	adds	r3, #6
 800792a:	2202      	movs	r2, #2
 800792c:	2100      	movs	r1, #0
 800792e:	4618      	mov	r0, r3
 8007930:	f006 fd20 	bl	800e374 <memset>
	uart_init(log_console->uhart);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4618      	mov	r0, r3
 800793a:	f7ff ffb7 	bl	80078ac <uart_init>
}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <erlog_write>:

void erlog_write(log_t *log_console)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(log_console->uhart, (uint8_t *)log_console->msg, log_console->msg_len, HAL_MAX_DELAY);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	1d99      	adds	r1, r3, #6
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	889a      	ldrh	r2, [r3, #4]
 800795a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800795e:	f7fe fd99 	bl	8006494 <HAL_UART_Transmit>
}
 8007962:	bf00      	nop
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <erlog_clear>:
void erlog_clear(log_t *log_console)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
	memset(log_console->msg , 0, sizeof(log_console->msg_len));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3306      	adds	r3, #6
 8007976:	2202      	movs	r2, #2
 8007978:	2100      	movs	r1, #0
 800797a:	4618      	mov	r0, r3
 800797c:	f006 fcfa 	bl	800e374 <memset>
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HighPassFilter_init>:
LowPassFilter low_pass_filter;
HighPassFilter high_pass_filter;
Differentiator differentiator;

/* High Pass Filter Functions */
void HighPassFilter_init(HighPassFilter* filter, float samples) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	ed87 0a00 	vstr	s0, [r7]
    filter->kX = expf(-1.0f / samples);
 8007994:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8007998:	edd7 7a00 	vldr	s15, [r7]
 800799c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a0:	eeb0 0a47 	vmov.f32	s0, s14
 80079a4:	f008 fe48 	bl	8010638 <expf>
 80079a8:	eef0 7a40 	vmov.f32	s15, s0
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	edc3 7a00 	vstr	s15, [r3]
    filter->kA0 = (1.0f + filter->kX) / 2.0f;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	edd3 7a00 	vldr	s15, [r3]
 80079b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079c0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80079c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->kA1 = -filter->kA0;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80079d4:	eef1 7a67 	vneg.f32	s15, s15
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->kB1 = filter->kX;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	60da      	str	r2, [r3, #12]
    filter->last_filter_value = 0.0;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f04f 0200 	mov.w	r2, #0
 80079ec:	611a      	str	r2, [r3, #16]
    filter->last_raw_value = 0.0;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	615a      	str	r2, [r3, #20]
}
 80079f6:	bf00      	nop
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <HighPassFilter_init_with_cutoff>:

void HighPassFilter_init_with_cutoff(HighPassFilter* filter, float cutoff, float sampling_frequency) {
 8007a00:	b5b0      	push	{r4, r5, r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	ed87 0a02 	vstr	s0, [r7, #8]
 8007a0c:	edc7 0a01 	vstr	s1, [r7, #4]
    HighPassFilter_init(filter, sampling_frequency / (cutoff * 2.0 * M_PI));
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7f8 fdc1 	bl	8000598 <__aeabi_f2d>
 8007a16:	4604      	mov	r4, r0
 8007a18:	460d      	mov	r5, r1
 8007a1a:	68b8      	ldr	r0, [r7, #8]
 8007a1c:	f7f8 fdbc 	bl	8000598 <__aeabi_f2d>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	f7f8 fc5a 	bl	80002dc <__adddf3>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4619      	mov	r1, r3
 8007a30:	a30d      	add	r3, pc, #52	@ (adr r3, 8007a68 <HighPassFilter_init_with_cutoff+0x68>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f7f8 fe07 	bl	8000648 <__aeabi_dmul>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4620      	mov	r0, r4
 8007a40:	4629      	mov	r1, r5
 8007a42:	f7f8 ff2b 	bl	800089c <__aeabi_ddiv>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	f7f9 f8d3 	bl	8000bf8 <__aeabi_d2f>
 8007a52:	4603      	mov	r3, r0
 8007a54:	ee00 3a10 	vmov	s0, r3
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7ff ff95 	bl	8007988 <HighPassFilter_init>
}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bdb0      	pop	{r4, r5, r7, pc}
 8007a66:	bf00      	nop
 8007a68:	54442d18 	.word	0x54442d18
 8007a6c:	400921fb 	.word	0x400921fb

08007a70 <HighPassFilter_process>:

float HighPassFilter_process(HighPassFilter* filter, float value)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	ed87 0a00 	vstr	s0, [r7]
//    if (isnanf(filter->last_filter_value) || isnanf(filter->last_raw_value)) {
//        filter->last_filter_value = 0.0f;
//    } else {
        filter->last_filter_value = filter->kA0 * value + filter->kA1 * filter->last_raw_value + filter->kB1 * filter->last_filter_value;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007a82:	edd7 7a00 	vldr	s15, [r7]
 8007a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	edd3 6a02 	vldr	s13, [r3, #8]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	edd3 7a05 	vldr	s15, [r3, #20]
 8007a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	edd3 6a03 	vldr	s13, [r3, #12]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	edd3 7a04 	vldr	s15, [r3, #16]
 8007aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	edc3 7a04 	vstr	s15, [r3, #16]
    //}
    filter->last_raw_value = value;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	615a      	str	r2, [r3, #20]
    return filter->last_filter_value;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	ee07 3a90 	vmov	s15, r3
}
 8007ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HighPassFilter_reset>:

void HighPassFilter_reset(HighPassFilter* filter) {
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
    filter->last_raw_value = 0.0;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f04f 0200 	mov.w	r2, #0
 8007ae2:	615a      	str	r2, [r3, #20]
    filter->last_filter_value = 0.0;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f04f 0200 	mov.w	r2, #0
 8007aea:	611a      	str	r2, [r3, #16]
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <LowPassFilter_init>:

/* Low Pass Filter Functions */
void LowPassFilter_init(LowPassFilter* filter, float samples) {
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	ed87 0a00 	vstr	s0, [r7]
    filter->kX = expf(-1.0f / samples);
 8007b04:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8007b08:	edd7 7a00 	vldr	s15, [r7]
 8007b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b10:	eeb0 0a47 	vmov.f32	s0, s14
 8007b14:	f008 fd90 	bl	8010638 <expf>
 8007b18:	eef0 7a40 	vmov.f32	s15, s0
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	edc3 7a00 	vstr	s15, [r3]
    filter->kA0 = 1.0f - filter->kX;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	edd3 7a00 	vldr	s15, [r3]
 8007b28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->kB1 = filter->kX;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	609a      	str	r2, [r3, #8]
    filter->last_value = 0.0;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f04f 0200 	mov.w	r2, #0
 8007b44:	60da      	str	r2, [r3, #12]
}
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <LowPassFilter_init_with_cutoff>:

void LowPassFilter_init_with_cutoff(LowPassFilter* filter, float cutoff, float sampling_frequency) {
 8007b50:	b5b0      	push	{r4, r5, r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	ed87 0a02 	vstr	s0, [r7, #8]
 8007b5c:	edc7 0a01 	vstr	s1, [r7, #4]
    LowPassFilter_init(filter, sampling_frequency / (cutoff * 2.0f * M_PI));
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7f8 fd19 	bl	8000598 <__aeabi_f2d>
 8007b66:	4604      	mov	r4, r0
 8007b68:	460d      	mov	r5, r1
 8007b6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007b72:	ee17 0a90 	vmov	r0, s15
 8007b76:	f7f8 fd0f 	bl	8000598 <__aeabi_f2d>
 8007b7a:	a30d      	add	r3, pc, #52	@ (adr r3, 8007bb0 <LowPassFilter_init_with_cutoff+0x60>)
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f7f8 fd62 	bl	8000648 <__aeabi_dmul>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4620      	mov	r0, r4
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	f7f8 fe86 	bl	800089c <__aeabi_ddiv>
 8007b90:	4602      	mov	r2, r0
 8007b92:	460b      	mov	r3, r1
 8007b94:	4610      	mov	r0, r2
 8007b96:	4619      	mov	r1, r3
 8007b98:	f7f9 f82e 	bl	8000bf8 <__aeabi_d2f>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	ee00 3a10 	vmov	s0, r3
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f7ff ffa8 	bl	8007af8 <LowPassFilter_init>
}
 8007ba8:	bf00      	nop
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bdb0      	pop	{r4, r5, r7, pc}
 8007bb0:	54442d18 	.word	0x54442d18
 8007bb4:	400921fb 	.word	0x400921fb

08007bb8 <LowPassFilter_process>:

float LowPassFilter_process(LowPassFilter* filter, float value) {
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	ed87 0a00 	vstr	s0, [r7]
    if (isnanf(filter->last_value)) {
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8007bca:	eef4 7a67 	vcmp.f32	s15, s15
 8007bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd2:	d703      	bvc.n	8007bdc <LowPassFilter_process+0x24>
        filter->last_value = value;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	60da      	str	r2, [r3, #12]
 8007bda:	e013      	b.n	8007c04 <LowPassFilter_process+0x4c>
    } else {
        filter->last_value = filter->kA0 * value + filter->kB1 * filter->last_value;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	ed93 7a01 	vldr	s14, [r3, #4]
 8007be2:	edd7 7a00 	vldr	s15, [r7]
 8007be6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	edd3 6a02 	vldr	s13, [r3, #8]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	edd3 7a03 	vldr	s15, [r3, #12]
 8007bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    return filter->last_value;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	ee07 3a90 	vmov	s15, r3
}
 8007c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <LowPassFilter_reset>:

void LowPassFilter_reset(LowPassFilter* filter) {
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
    filter->last_value = 0.0;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f04f 0200 	mov.w	r2, #0
 8007c28:	60da      	str	r2, [r3, #12]
}
 8007c2a:	bf00      	nop
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <Differentiator_init>:

/* Differentiator Functions */
void Differentiator_init(Differentiator* differentiator, float sampling_frequency) {
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	ed87 0a00 	vstr	s0, [r7]
    differentiator->kSamplingFrequency = sampling_frequency;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	601a      	str	r2, [r3, #0]
    differentiator->last_value = 0.0;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f04f 0200 	mov.w	r2, #0
 8007c4e:	605a      	str	r2, [r3, #4]
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <Differentiator_process>:

float Differentiator_process(Differentiator* differentiator, float value) {
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	ed87 0a00 	vstr	s0, [r7]
    float diff = (value - differentiator->last_value) * differentiator->kSamplingFrequency;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8007c6e:	ed97 7a00 	vldr	s14, [r7]
 8007c72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	edd3 7a00 	vldr	s15, [r3]
 8007c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c80:	edc7 7a03 	vstr	s15, [r7, #12]
    differentiator->last_value = value;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	605a      	str	r2, [r3, #4]
    return diff;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	ee07 3a90 	vmov	s15, r3
}
 8007c90:	eeb0 0a67 	vmov.f32	s0, s15
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
	...

08007ca0 <processHeartBeat>:
uint8_t rateSpot = 0;   // Index for storing BPM readings
uint8_t rates[RATE_SIZE];  // Array to store BPM values


void processHeartBeat(float current_diff)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	ed87 0a01 	vstr	s0, [r7, #4]
	const float kEdgeThreshold = -1000.0;
 8007caa:	4b4a      	ldr	r3, [pc, #296]	@ (8007dd4 <processHeartBeat+0x134>)
 8007cac:	613b      	str	r3, [r7, #16]
    uint32_t currentMillis = HAL_GetTick();  // Get current time in milliseconds
 8007cae:	f7fa f90b 	bl	8001ec8 <HAL_GetTick>
 8007cb2:	60f8      	str	r0, [r7, #12]
    delta = currentMillis - lastBeat;  // Calculate the time difference between current and last beat
 8007cb4:	4b48      	ldr	r3, [pc, #288]	@ (8007dd8 <processHeartBeat+0x138>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	4a47      	ldr	r2, [pc, #284]	@ (8007ddc <processHeartBeat+0x13c>)
 8007cbe:	6013      	str	r3, [r2, #0]
    lastBeat = currentMillis;          // Update the time of the last beat
 8007cc0:	4a45      	ldr	r2, [pc, #276]	@ (8007dd8 <processHeartBeat+0x138>)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6013      	str	r3, [r2, #0]

    beatsPerMinute = (60.0 / (delta / 1000.0)) + 25.0;  // Calculate beats per minute
 8007cc6:	4b45      	ldr	r3, [pc, #276]	@ (8007ddc <processHeartBeat+0x13c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7f8 fc42 	bl	8000554 <__aeabi_ui2d>
 8007cd0:	f04f 0200 	mov.w	r2, #0
 8007cd4:	4b42      	ldr	r3, [pc, #264]	@ (8007de0 <processHeartBeat+0x140>)
 8007cd6:	f7f8 fde1 	bl	800089c <__aeabi_ddiv>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	f04f 0000 	mov.w	r0, #0
 8007ce2:	4940      	ldr	r1, [pc, #256]	@ (8007de4 <processHeartBeat+0x144>)
 8007ce4:	f7f8 fdda 	bl	800089c <__aeabi_ddiv>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	4610      	mov	r0, r2
 8007cee:	4619      	mov	r1, r3
 8007cf0:	f04f 0200 	mov.w	r2, #0
 8007cf4:	4b3c      	ldr	r3, [pc, #240]	@ (8007de8 <processHeartBeat+0x148>)
 8007cf6:	f7f8 faf1 	bl	80002dc <__adddf3>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4610      	mov	r0, r2
 8007d00:	4619      	mov	r1, r3
 8007d02:	f7f8 ff79 	bl	8000bf8 <__aeabi_d2f>
 8007d06:	4603      	mov	r3, r0
 8007d08:	4a38      	ldr	r2, [pc, #224]	@ (8007dec <processHeartBeat+0x14c>)
 8007d0a:	6013      	str	r3, [r2, #0]

    // Filter valid BPM values
    if (beatsPerMinute < 255 && beatsPerMinute > 20 && current_diff < kEdgeThreshold)
 8007d0c:	4b37      	ldr	r3, [pc, #220]	@ (8007dec <processHeartBeat+0x14c>)
 8007d0e:	edd3 7a00 	vldr	s15, [r3]
 8007d12:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8007df0 <processHeartBeat+0x150>
 8007d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d1e:	d400      	bmi.n	8007d22 <processHeartBeat+0x82>
        {
            beatAvg += rates[x];
        }
        beatAvg /= RATE_SIZE;  // Compute the average BPM
    }
}
 8007d20:	e053      	b.n	8007dca <processHeartBeat+0x12a>
    if (beatsPerMinute < 255 && beatsPerMinute > 20 && current_diff < kEdgeThreshold)
 8007d22:	4b32      	ldr	r3, [pc, #200]	@ (8007dec <processHeartBeat+0x14c>)
 8007d24:	edd3 7a00 	vldr	s15, [r3]
 8007d28:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8007d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d34:	dc00      	bgt.n	8007d38 <processHeartBeat+0x98>
}
 8007d36:	e048      	b.n	8007dca <processHeartBeat+0x12a>
    if (beatsPerMinute < 255 && beatsPerMinute > 20 && current_diff < kEdgeThreshold)
 8007d38:	ed97 7a01 	vldr	s14, [r7, #4]
 8007d3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d48:	d400      	bmi.n	8007d4c <processHeartBeat+0xac>
}
 8007d4a:	e03e      	b.n	8007dca <processHeartBeat+0x12a>
        rates[rateSpot++] = (uint8_t)beatsPerMinute;  // Store BPM in the array
 8007d4c:	4b27      	ldr	r3, [pc, #156]	@ (8007dec <processHeartBeat+0x14c>)
 8007d4e:	edd3 7a00 	vldr	s15, [r3]
 8007d52:	4b28      	ldr	r3, [pc, #160]	@ (8007df4 <processHeartBeat+0x154>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	b2d1      	uxtb	r1, r2
 8007d5a:	4a26      	ldr	r2, [pc, #152]	@ (8007df4 <processHeartBeat+0x154>)
 8007d5c:	7011      	strb	r1, [r2, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d64:	edc7 7a00 	vstr	s15, [r7]
 8007d68:	783b      	ldrb	r3, [r7, #0]
 8007d6a:	b2d9      	uxtb	r1, r3
 8007d6c:	4b22      	ldr	r3, [pc, #136]	@ (8007df8 <processHeartBeat+0x158>)
 8007d6e:	5499      	strb	r1, [r3, r2]
        rateSpot %= RATE_SIZE;  // Wrap the array index if it exceeds RATE_SIZE
 8007d70:	4b20      	ldr	r3, [pc, #128]	@ (8007df4 <processHeartBeat+0x154>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	f003 0303 	and.w	r3, r3, #3
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8007df4 <processHeartBeat+0x154>)
 8007d7c:	701a      	strb	r2, [r3, #0]
        beatAvg = 0;
 8007d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8007dfc <processHeartBeat+0x15c>)
 8007d80:	f04f 0200 	mov.w	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
        for (uint8_t x = 0; x < RATE_SIZE; x++)
 8007d86:	2300      	movs	r3, #0
 8007d88:	75fb      	strb	r3, [r7, #23]
 8007d8a:	e011      	b.n	8007db0 <processHeartBeat+0x110>
            beatAvg += rates[x];
 8007d8c:	7dfb      	ldrb	r3, [r7, #23]
 8007d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8007df8 <processHeartBeat+0x158>)
 8007d90:	5cd3      	ldrb	r3, [r2, r3]
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d9a:	4b18      	ldr	r3, [pc, #96]	@ (8007dfc <processHeartBeat+0x15c>)
 8007d9c:	edd3 7a00 	vldr	s15, [r3]
 8007da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007da4:	4b15      	ldr	r3, [pc, #84]	@ (8007dfc <processHeartBeat+0x15c>)
 8007da6:	edc3 7a00 	vstr	s15, [r3]
        for (uint8_t x = 0; x < RATE_SIZE; x++)
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	3301      	adds	r3, #1
 8007dae:	75fb      	strb	r3, [r7, #23]
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d9ea      	bls.n	8007d8c <processHeartBeat+0xec>
        beatAvg /= RATE_SIZE;  // Compute the average BPM
 8007db6:	4b11      	ldr	r3, [pc, #68]	@ (8007dfc <processHeartBeat+0x15c>)
 8007db8:	ed93 7a00 	vldr	s14, [r3]
 8007dbc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8007dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8007dfc <processHeartBeat+0x15c>)
 8007dc6:	edc3 7a00 	vstr	s15, [r3]
}
 8007dca:	bf00      	nop
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	c47a0000 	.word	0xc47a0000
 8007dd8:	20000eb8 	.word	0x20000eb8
 8007ddc:	20000ebc 	.word	0x20000ebc
 8007de0:	408f4000 	.word	0x408f4000
 8007de4:	404e0000 	.word	0x404e0000
 8007de8:	40390000 	.word	0x40390000
 8007dec:	200008a0 	.word	0x200008a0
 8007df0:	437f0000 	.word	0x437f0000
 8007df4:	20000ec0 	.word	0x20000ec0
 8007df8:	20000ec4 	.word	0x20000ec4
 8007dfc:	200008a4 	.word	0x200008a4

08007e00 <checkbeat>:

bool checkbeat(int32_t sample)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b088      	sub	sp, #32
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
	// Averaging
	const float kSamplingFrequency = 400.0;
 8007e08:	4b23      	ldr	r3, [pc, #140]	@ (8007e98 <checkbeat+0x98>)
 8007e0a:	61fb      	str	r3, [r7, #28]

	// Filters
	float current_value = sample;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	ee07 3a90 	vmov	s15, r3
 8007e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e16:	edc7 7a06 	vstr	s15, [r7, #24]
	const float kLowPassCutoff = 5.0;
 8007e1a:	4b20      	ldr	r3, [pc, #128]	@ (8007e9c <checkbeat+0x9c>)
 8007e1c:	617b      	str	r3, [r7, #20]
	const float kHighPassCutoff = 0.5;
 8007e1e:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8007e22:	613b      	str	r3, [r7, #16]

	LowPassFilter_init_with_cutoff(&low_pass_filter, kLowPassCutoff, kSamplingFrequency);
 8007e24:	edd7 0a07 	vldr	s1, [r7, #28]
 8007e28:	ed97 0a05 	vldr	s0, [r7, #20]
 8007e2c:	481c      	ldr	r0, [pc, #112]	@ (8007ea0 <checkbeat+0xa0>)
 8007e2e:	f7ff fe8f 	bl	8007b50 <LowPassFilter_init_with_cutoff>
	HighPassFilter_init_with_cutoff(&high_pass_filter, kHighPassCutoff, kSamplingFrequency);
 8007e32:	edd7 0a07 	vldr	s1, [r7, #28]
 8007e36:	ed97 0a04 	vldr	s0, [r7, #16]
 8007e3a:	481a      	ldr	r0, [pc, #104]	@ (8007ea4 <checkbeat+0xa4>)
 8007e3c:	f7ff fde0 	bl	8007a00 <HighPassFilter_init_with_cutoff>
	Differentiator_init(&differentiator, kSamplingFrequency);  // Pass sampling frequency
 8007e40:	ed97 0a07 	vldr	s0, [r7, #28]
 8007e44:	4818      	ldr	r0, [pc, #96]	@ (8007ea8 <checkbeat+0xa8>)
 8007e46:	f7ff fef6 	bl	8007c36 <Differentiator_init>
	current_value = LowPassFilter_process(&low_pass_filter, current_value);
 8007e4a:	ed97 0a06 	vldr	s0, [r7, #24]
 8007e4e:	4814      	ldr	r0, [pc, #80]	@ (8007ea0 <checkbeat+0xa0>)
 8007e50:	f7ff feb2 	bl	8007bb8 <LowPassFilter_process>
 8007e54:	ed87 0a06 	vstr	s0, [r7, #24]
	current_value = HighPassFilter_process(&high_pass_filter, current_value);
 8007e58:	ed97 0a06 	vldr	s0, [r7, #24]
 8007e5c:	4811      	ldr	r0, [pc, #68]	@ (8007ea4 <checkbeat+0xa4>)
 8007e5e:	f7ff fe07 	bl	8007a70 <HighPassFilter_process>
 8007e62:	ed87 0a06 	vstr	s0, [r7, #24]
	float current_diff = Differentiator_process(&differentiator, current_value);
 8007e66:	ed97 0a06 	vldr	s0, [r7, #24]
 8007e6a:	480f      	ldr	r0, [pc, #60]	@ (8007ea8 <checkbeat+0xa8>)
 8007e6c:	f7ff fef6 	bl	8007c5c <Differentiator_process>
 8007e70:	ed87 0a03 	vstr	s0, [r7, #12]

	if (current_diff > 0.0)
 8007e74:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e80:	dd05      	ble.n	8007e8e <checkbeat+0x8e>
	{
	    	processHeartBeat(current_diff);
 8007e82:	ed97 0a03 	vldr	s0, [r7, #12]
 8007e86:	f7ff ff0b 	bl	8007ca0 <processHeartBeat>
	    	return true;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e000      	b.n	8007e90 <checkbeat+0x90>
	 }
   else
   {
	    	return false;
 8007e8e:	2300      	movs	r3, #0
	}


}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3720      	adds	r7, #32
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	43c80000 	.word	0x43c80000
 8007e9c:	40a00000 	.word	0x40a00000
 8007ea0:	20000e88 	.word	0x20000e88
 8007ea4:	20000e98 	.word	0x20000e98
 8007ea8:	20000eb0 	.word	0x20000eb0

08007eac <i2c_error_Handler>:
uint8_t writePointer = 0;

extern float temp;

static void i2c_error_Handler(void)
{
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007eb0:	b672      	cpsid	i
}
 8007eb2:	bf00      	nop
  __disable_irq();
  while (1)
 8007eb4:	bf00      	nop
 8007eb6:	e7fd      	b.n	8007eb4 <i2c_error_Handler+0x8>

08007eb8 <i2c_init>:
  {
  }
}
static void i2c_init(I2C_HandleTypeDef *hi2c1)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]

  /*PF0 & PF1 pins configured*/

  /* USER CODE BEGIN I2C1_Init 1 */
  hi2c1->Instance = I2C2;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8007f34 <i2c_init+0x7c>)
 8007ec4:	601a      	str	r2, [r3, #0]
  hi2c1->Init.Timing = 400000;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8007f38 <i2c_init+0x80>)
 8007eca:	605a      	str	r2, [r3, #4]
  hi2c1->Init.OwnAddress1 = 0;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	609a      	str	r2, [r3, #8]
  hi2c1->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	60da      	str	r2, [r3, #12]
  hi2c1->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	611a      	str	r2, [r3, #16]
  hi2c1->Init.OwnAddress2 = 0;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	615a      	str	r2, [r3, #20]
  hi2c1->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	619a      	str	r2, [r3, #24]
  hi2c1->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	61da      	str	r2, [r3, #28]
  hi2c1->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c1) != HAL_OK)
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7fa faf6 	bl	80024e8 <HAL_I2C_Init>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <i2c_init+0x4e>
  {
	  i2c_error_Handler();
 8007f02:	f7ff ffd3 	bl	8007eac <i2c_error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007f06:	2100      	movs	r1, #0
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7fc f8eb 	bl	80040e4 <HAL_I2CEx_ConfigAnalogFilter>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <i2c_init+0x60>
  {
	  i2c_error_Handler();
 8007f14:	f7ff ffca 	bl	8007eac <i2c_error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c1, 0) != HAL_OK)
 8007f18:	2100      	movs	r1, #0
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7fc f92d 	bl	800417a <HAL_I2CEx_ConfigDigitalFilter>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <i2c_init+0x72>
  {
	  i2c_error_Handler();
 8007f26:	f7ff ffc1 	bl	8007eac <i2c_error_Handler>
  }
  /* USER CODE END I2C1_Init 1 */

}
 8007f2a:	bf00      	nop
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	40005800 	.word	0x40005800
 8007f38:	00061a80 	.word	0x00061a80

08007f3c <max30102_init>:
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *i2chandler)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
	 obj->ui2c = i2chandler;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	601a      	str	r2, [r3, #0]
	 obj->intr_flag = 0;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
	 memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3304      	adds	r3, #4
 8007f58:	2280      	movs	r2, #128	@ 0x80
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f006 fa09 	bl	800e374 <memset>
	 memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	3384      	adds	r3, #132	@ 0x84
 8007f66:	2280      	movs	r2, #128	@ 0x80
 8007f68:	2100      	movs	r1, #0
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f006 fa02 	bl	800e374 <memset>
	 i2c_init(obj->ui2c);  /*initialise the i2c peripheral for MAX3212*/
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7ff ff9f 	bl	8007eb8 <i2c_init>

}
 8007f7a:	bf00      	nop
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <read_register>:
bool read_register(max30102_t *obj, uint8_t addr, uint8_t *value)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b08a      	sub	sp, #40	@ 0x28
 8007f86:	af04      	add	r7, sp, #16
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	607a      	str	r2, [r7, #4]
 8007f8e:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_buff;
	uint8_t rx_address;
	rx_address = (MAX30102_I2C_ADDR << 1);
 8007f90:	23ae      	movs	r3, #174	@ 0xae
 8007f92:	75fb      	strb	r3, [r7, #23]
	if (HAL_I2C_Mem_Read(obj->ui2c, rx_address , addr, 1, &rx_buff, 1, 5000) == HAL_OK)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6818      	ldr	r0, [r3, #0]
 8007f98:	7dfb      	ldrb	r3, [r7, #23]
 8007f9a:	b299      	uxth	r1, r3
 8007f9c:	7afb      	ldrb	r3, [r7, #11]
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007fa4:	9302      	str	r3, [sp, #8]
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	f107 0316 	add.w	r3, r7, #22
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f7fa fe57 	bl	8002c64 <HAL_I2C_Mem_Read>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d104      	bne.n	8007fc6 <read_register+0x44>
	{
		*value = rx_buff;
 8007fbc:	7dba      	ldrb	r2, [r7, #22]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	701a      	strb	r2, [r3, #0]
		return true;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e000      	b.n	8007fc8 <read_register+0x46>
	}
	else
		return false;
 8007fc6:	2300      	movs	r3, #0

}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <write_register>:
bool write_register(max30102_t *obj, uint8_t addr, uint8_t value)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af04      	add	r7, sp, #16
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70fb      	strb	r3, [r7, #3]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_address;
	tx_address = (MAX30102_I2C_ADDR << 1);
 8007fe0:	23ae      	movs	r3, #174	@ 0xae
 8007fe2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(obj->ui2c, tx_address, addr, 1, &value, 1, 10000) == HAL_OK)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	b299      	uxth	r1, r3
 8007fec:	78fb      	ldrb	r3, [r7, #3]
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8007ff4:	9302      	str	r3, [sp, #8]
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	1cbb      	adds	r3, r7, #2
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	2301      	movs	r3, #1
 8008000:	f7fa fd1c 	bl	8002a3c <HAL_I2C_Mem_Write>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <write_register+0x3e>
		return false;
 800800a:	2300      	movs	r3, #0
 800800c:	e000      	b.n	8008010 <write_register+0x40>
	else
		return true;
 800800e:	2301      	movs	r3, #1
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <bitMask>:
static void bitMask(max30102_t *obj, uint8_t reg, uint8_t mask, uint8_t thing)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	4608      	mov	r0, r1
 8008022:	4611      	mov	r1, r2
 8008024:	461a      	mov	r2, r3
 8008026:	4603      	mov	r3, r0
 8008028:	70fb      	strb	r3, [r7, #3]
 800802a:	460b      	mov	r3, r1
 800802c:	70bb      	strb	r3, [r7, #2]
 800802e:	4613      	mov	r3, r2
 8008030:	707b      	strb	r3, [r7, #1]
  // Grab current register context
  uint8_t originalContents = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	73fb      	strb	r3, [r7, #15]

  read_register(obj, reg, &originalContents);
 8008036:	f107 020f 	add.w	r2, r7, #15
 800803a:	78fb      	ldrb	r3, [r7, #3]
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff ff9f 	bl	8007f82 <read_register>

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;
 8008044:	7bfa      	ldrb	r2, [r7, #15]
 8008046:	78bb      	ldrb	r3, [r7, #2]
 8008048:	4013      	ands	r3, r2
 800804a:	b2db      	uxtb	r3, r3
 800804c:	73fb      	strb	r3, [r7, #15]

  // Change contents
  write_register(obj, reg, originalContents | thing);
 800804e:	7bfa      	ldrb	r2, [r7, #15]
 8008050:	787b      	ldrb	r3, [r7, #1]
 8008052:	4313      	orrs	r3, r2
 8008054:	b2da      	uxtb	r2, r3
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff ffb8 	bl	8007fd0 <write_register>
}
 8008060:	bf00      	nop
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <max30102_enableDIETEMPRDY>:

void max30102_enableDIETEMPRDY(max30102_t *obj)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  bitMask(obj, MAX30102_INTENABLE2, MAX30102_INT_DIE_TEMP_RDY_MASK, MAX30102_INT_DIE_TEMP_RDY_ENABLE);
 8008070:	22fd      	movs	r2, #253	@ 0xfd
 8008072:	2302      	movs	r3, #2
 8008074:	2103      	movs	r1, #3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7ff ffce 	bl	8008018 <bitMask>
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <max30102_clear_fifo>:
void max30102_disablePROXINT(max30102_t *obj) {
  bitMask(obj, MAX30102_INTENABLE1, MAX30102_INT_PROX_INT_MASK, MAX30102_INT_PROX_INT_DISABLE);
}

void max30102_clear_fifo(max30102_t *obj)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
    write_register(obj, MAX30102_FIFOWRITEPTR, 0);
 800808c:	2200      	movs	r2, #0
 800808e:	2104      	movs	r1, #4
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7ff ff9d 	bl	8007fd0 <write_register>
    write_register(obj, MAX30102_FIFOREADPTR, 0);
 8008096:	2200      	movs	r2, #0
 8008098:	2106      	movs	r1, #6
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7ff ff98 	bl	8007fd0 <write_register>
    write_register(obj, MAX30102_FIFOOVERFLOW, 0);
 80080a0:	2200      	movs	r2, #0
 80080a2:	2105      	movs	r1, #5
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff ff93 	bl	8007fd0 <write_register>
}
 80080aa:	bf00      	nop
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <max30102_set_fifoaverage>:

void max30102_set_fifoaverage(max30102_t *obj, uint8_t numberOfSamples)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	460b      	mov	r3, r1
 80080bc:	70fb      	strb	r3, [r7, #3]
	bitMask(obj, MAX30102_FIFOCONFIG, MAX30102_SAMPLEAVG_MASK, numberOfSamples);
 80080be:	221f      	movs	r2, #31
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	2108      	movs	r1, #8
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff ffa7 	bl	8008018 <bitMask>
}
 80080ca:	bf00      	nop
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
	...

080080d4 <max30102_readtemp>:

float max30102_readtemp(max30102_t *obj)
{
 80080d4:	b5b0      	push	{r4, r5, r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]

  uint8_t response = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
  uint8_t tempInt = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73bb      	strb	r3, [r7, #14]
  uint8_t tempFrac = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	737b      	strb	r3, [r7, #13]

  write_register(obj, MAX30102_DIETEMPCONFIG, 0x01);
 80080e8:	2201      	movs	r2, #1
 80080ea:	2121      	movs	r1, #33	@ 0x21
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff ff6f 	bl	8007fd0 <write_register>

  do
  {
	  read_register(obj, MAX30102_INTSTAT2, &response);
 80080f2:	f107 030f 	add.w	r3, r7, #15
 80080f6:	461a      	mov	r2, r3
 80080f8:	2101      	movs	r1, #1
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff ff41 	bl	8007f82 <read_register>
	  HAL_Delay(1);
 8008100:	2001      	movs	r0, #1
 8008102:	f7f9 feed 	bl	8001ee0 <HAL_Delay>
  }while((response & MAX30102_INTENABLE1) == 0);
 8008106:	7bfb      	ldrb	r3, [r7, #15]
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d0f0      	beq.n	80080f2 <max30102_readtemp+0x1e>

  read_register(obj, MAX30102_DIETEMPINT, &tempInt);
 8008110:	f107 030e 	add.w	r3, r7, #14
 8008114:	461a      	mov	r2, r3
 8008116:	211f      	movs	r1, #31
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7ff ff32 	bl	8007f82 <read_register>
  read_register(obj, MAX30102_DIETEMPFRAC, &tempFrac);
 800811e:	f107 030d 	add.w	r3, r7, #13
 8008122:	461a      	mov	r2, r3
 8008124:	2120      	movs	r1, #32
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff ff2b 	bl	8007f82 <read_register>

  return (float)tempInt + ((float)tempFrac * 0.0625); // Step 3: Calculate temperature (datasheet pg. 23)
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	ee07 3a90 	vmov	s15, r3
 8008132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008136:	ee17 0a90 	vmov	r0, s15
 800813a:	f7f8 fa2d 	bl	8000598 <__aeabi_f2d>
 800813e:	4604      	mov	r4, r0
 8008140:	460d      	mov	r5, r1
 8008142:	7b7b      	ldrb	r3, [r7, #13]
 8008144:	ee07 3a90 	vmov	s15, r3
 8008148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814c:	ee17 0a90 	vmov	r0, s15
 8008150:	f7f8 fa22 	bl	8000598 <__aeabi_f2d>
 8008154:	f04f 0200 	mov.w	r2, #0
 8008158:	4b0b      	ldr	r3, [pc, #44]	@ (8008188 <max30102_readtemp+0xb4>)
 800815a:	f7f8 fa75 	bl	8000648 <__aeabi_dmul>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4620      	mov	r0, r4
 8008164:	4629      	mov	r1, r5
 8008166:	f7f8 f8b9 	bl	80002dc <__adddf3>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4610      	mov	r0, r2
 8008170:	4619      	mov	r1, r3
 8008172:	f7f8 fd41 	bl	8000bf8 <__aeabi_d2f>
 8008176:	4603      	mov	r3, r0
 8008178:	ee07 3a90 	vmov	s15, r3
}
 800817c:	eeb0 0a67 	vmov.f32	s0, s15
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bdb0      	pop	{r4, r5, r7, pc}
 8008186:	bf00      	nop
 8008188:	3fb00000 	.word	0x3fb00000

0800818c <max30102_setledmode>:

void max30102_setledmode(max30102_t *obj, uint8_t mode)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	70fb      	strb	r3, [r7, #3]
  bitMask(obj, MAX30102_MODECONFIG, MAX30102_MODE_MASK, mode); // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	22f8      	movs	r2, #248	@ 0xf8
 800819c:	2109      	movs	r1, #9
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7ff ff3a 	bl	8008018 <bitMask>
  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  // See datasheet, page 19
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <max30102_setadcrange>:

void max30102_setadcrange(max30102_t *obj, uint8_t adcRange)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	70fb      	strb	r3, [r7, #3]
  bitMask(obj ,MAX30102_PARTICLECONFIG, MAX30102_ADCRANGE_MASK, adcRange); // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
 80081b8:	78fb      	ldrb	r3, [r7, #3]
 80081ba:	229f      	movs	r2, #159	@ 0x9f
 80081bc:	210a      	movs	r1, #10
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff ff2a 	bl	8008018 <bitMask>
}
 80081c4:	bf00      	nop
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <max30102_setsamplerate>:

void max30102_setsamplerate(max30102_t *obj, uint8_t sampleRate)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	70fb      	strb	r3, [r7, #3]
  bitMask(obj, MAX30102_PARTICLECONFIG, MAX30102_SAMPLERATE_MASK, sampleRate); // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	22e3      	movs	r2, #227	@ 0xe3
 80081dc:	210a      	movs	r1, #10
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7ff ff1a 	bl	8008018 <bitMask>
}
 80081e4:	bf00      	nop
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <max30102_setpulsewidth>:

void max30102_setpulsewidth(max30102_t *obj, uint8_t pulseWidth)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  bitMask(obj, MAX30102_PARTICLECONFIG, MAX30102_PULSEWIDTH_MASK, pulseWidth); // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
 80081f8:	78fb      	ldrb	r3, [r7, #3]
 80081fa:	22fc      	movs	r2, #252	@ 0xfc
 80081fc:	210a      	movs	r1, #10
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7ff ff0a 	bl	8008018 <bitMask>
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <max30102_enableFIFORollover>:
void max30102_enableFIFORollover(max30102_t *obj)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  bitMask(obj, MAX30102_FIFOCONFIG, MAX30102_ROLLOVER_MASK, MAX30102_ROLLOVER_ENABLE);
 8008214:	22ef      	movs	r2, #239	@ 0xef
 8008216:	2310      	movs	r3, #16
 8008218:	2108      	movs	r1, #8
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff fefc 	bl	8008018 <bitMask>
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <max30102_enableSlot>:

void max30102_enableSlot(max30102_t *obj , uint8_t slotNumber, uint8_t device)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
 8008234:	4613      	mov	r3, r2
 8008236:	70bb      	strb	r3, [r7, #2]

  switch (slotNumber)
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	3b01      	subs	r3, #1
 800823c:	2b03      	cmp	r3, #3
 800823e:	d82b      	bhi.n	8008298 <max30102_enableSlot+0x70>
 8008240:	a201      	add	r2, pc, #4	@ (adr r2, 8008248 <max30102_enableSlot+0x20>)
 8008242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008246:	bf00      	nop
 8008248:	08008259 	.word	0x08008259
 800824c:	08008267 	.word	0x08008267
 8008250:	08008279 	.word	0x08008279
 8008254:	08008287 	.word	0x08008287
  {
    case (1):
      bitMask(obj, MAX30102_MULTILEDCONFIG1, MAX30102_SLOT1_MASK, device);
 8008258:	22f8      	movs	r2, #248	@ 0xf8
 800825a:	78bb      	ldrb	r3, [r7, #2]
 800825c:	2111      	movs	r1, #17
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7ff feda 	bl	8008018 <bitMask>
      break;
 8008264:	e019      	b.n	800829a <max30102_enableSlot+0x72>
    case (2):
      bitMask(obj, MAX30102_MULTILEDCONFIG1, MAX30102_SLOT2_MASK, device << 4);
 8008266:	228f      	movs	r2, #143	@ 0x8f
 8008268:	78bb      	ldrb	r3, [r7, #2]
 800826a:	011b      	lsls	r3, r3, #4
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2111      	movs	r1, #17
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7ff fed1 	bl	8008018 <bitMask>
      break;
 8008276:	e010      	b.n	800829a <max30102_enableSlot+0x72>
    case (3):
      bitMask(obj, MAX30102_MULTILEDCONFIG2, MAX30102_SLOT3_MASK, device);
 8008278:	22f8      	movs	r2, #248	@ 0xf8
 800827a:	78bb      	ldrb	r3, [r7, #2]
 800827c:	2112      	movs	r1, #18
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7ff feca 	bl	8008018 <bitMask>
      break;
 8008284:	e009      	b.n	800829a <max30102_enableSlot+0x72>
    case (4):
      bitMask(obj, MAX30102_MULTILEDCONFIG2, MAX30102_SLOT4_MASK, device << 4);
 8008286:	228f      	movs	r2, #143	@ 0x8f
 8008288:	78bb      	ldrb	r3, [r7, #2]
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2112      	movs	r1, #18
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff fec1 	bl	8008018 <bitMask>
      break;
 8008296:	e000      	b.n	800829a <max30102_enableSlot+0x72>
    default:
      //Shouldn't be here!
      break;
 8008298:	bf00      	nop
  }
}
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop

080082a4 <max30102_set_pulseamplitude>:

void max30102_set_pulseamplitude(max30102_t *obj, uint8_t amplitude, max30102_colour_t colour_mode)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70fb      	strb	r3, [r7, #3]
 80082b0:	4613      	mov	r3, r2
 80082b2:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_val = 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73fb      	strb	r3, [r7, #15]
	switch(colour_mode)
 80082b8:	78bb      	ldrb	r3, [r7, #2]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d817      	bhi.n	80082f0 <max30102_set_pulseamplitude+0x4c>
 80082c0:	a201      	add	r2, pc, #4	@ (adr r2, 80082c8 <max30102_set_pulseamplitude+0x24>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080082d9 	.word	0x080082d9
 80082cc:	080082df 	.word	0x080082df
 80082d0:	080082e5 	.word	0x080082e5
 80082d4:	080082eb 	.word	0x080082eb
	{
		case RED_COLOUR:
		{
			reg_val = MAX30102_LED1_PULSEAMP;
 80082d8:	230c      	movs	r3, #12
 80082da:	73fb      	strb	r3, [r7, #15]
			break;
 80082dc:	e008      	b.n	80082f0 <max30102_set_pulseamplitude+0x4c>
		}
		case GREEN_COLOUR:
		{
			reg_val = MAX30102_LED3_PULSEAMP;
 80082de:	230e      	movs	r3, #14
 80082e0:	73fb      	strb	r3, [r7, #15]
			break;
 80082e2:	e005      	b.n	80082f0 <max30102_set_pulseamplitude+0x4c>
		}
		case IR:
		{
			reg_val = MAX30102_LED2_PULSEAMP;
 80082e4:	230d      	movs	r3, #13
 80082e6:	73fb      	strb	r3, [r7, #15]
			break;
 80082e8:	e002      	b.n	80082f0 <max30102_set_pulseamplitude+0x4c>
		}
		case PROXIMITY:
		{
			reg_val = MAX30102_LED_PROX_AMP;
 80082ea:	2310      	movs	r3, #16
 80082ec:	73fb      	strb	r3, [r7, #15]
			break;
 80082ee:	bf00      	nop
		}
	}
	write_register(obj , reg_val , amplitude);
 80082f0:	78fa      	ldrb	r2, [r7, #3]
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7ff fe6a 	bl	8007fd0 <write_register>
}
 80082fc:	bf00      	nop
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <max30102_softReset>:

void max30102_softReset(max30102_t *obj)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
	uint8_t response = 0;
 800830c:	2300      	movs	r3, #0
 800830e:	73fb      	strb	r3, [r7, #15]
	bitMask(obj, MAX30102_MODECONFIG, MAX30102_RESET_MASK, MAX30102_RESET);
 8008310:	22bf      	movs	r2, #191	@ 0xbf
 8008312:	2340      	movs	r3, #64	@ 0x40
 8008314:	2109      	movs	r1, #9
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f7ff fe7e 	bl	8008018 <bitMask>
	do
	  {
		  read_register(obj, MAX30102_MODECONFIG, &response);
 800831c:	f107 030f 	add.w	r3, r7, #15
 8008320:	461a      	mov	r2, r3
 8008322:	2109      	movs	r1, #9
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7ff fe2c 	bl	8007f82 <read_register>
		  //HAL_Delay(1);
	  }while((response & MAX30102_RESET) != 0);
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	2240      	movs	r2, #64	@ 0x40
 800832e:	4013      	ands	r3, r2
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1f2      	bne.n	800831c <max30102_softReset+0x18>

}
 8008336:	bf00      	nop
 8008338:	bf00      	nop
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <max30102_checksamples>:




uint32_t max30102_checksamples(max30102_t *obj)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08c      	sub	sp, #48	@ 0x30
 8008344:	af02      	add	r7, sp, #8
 8008346:	6078      	str	r0, [r7, #4]
	uint8_t command;
	int bytesLeftToRead = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	627b      	str	r3, [r7, #36]	@ 0x24
	int toGet = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	623b      	str	r3, [r7, #32]
	int numberOfSamples = 0;
 8008350:	2300      	movs	r3, #0
 8008352:	61fb      	str	r3, [r7, #28]

    read_register(obj, MAX30102_FIFOREADPTR , &readPointer);
 8008354:	4a6b      	ldr	r2, [pc, #428]	@ (8008504 <max30102_checksamples+0x1c4>)
 8008356:	2106      	movs	r1, #6
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff fe12 	bl	8007f82 <read_register>
    read_register(obj, MAX30102_FIFOWRITEPTR , &writePointer);
 800835e:	4a6a      	ldr	r2, [pc, #424]	@ (8008508 <max30102_checksamples+0x1c8>)
 8008360:	2104      	movs	r1, #4
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff fe0d 	bl	8007f82 <read_register>

  // Check if there is new data
  if (readPointer != writePointer)
 8008368:	4b66      	ldr	r3, [pc, #408]	@ (8008504 <max30102_checksamples+0x1c4>)
 800836a:	781a      	ldrb	r2, [r3, #0]
 800836c:	4b66      	ldr	r3, [pc, #408]	@ (8008508 <max30102_checksamples+0x1c8>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	429a      	cmp	r2, r3
 8008372:	f000 80c1 	beq.w	80084f8 <max30102_checksamples+0x1b8>
  {
    numberOfSamples = writePointer - readPointer;
 8008376:	4b64      	ldr	r3, [pc, #400]	@ (8008508 <max30102_checksamples+0x1c8>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	4b61      	ldr	r3, [pc, #388]	@ (8008504 <max30102_checksamples+0x1c4>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	61fb      	str	r3, [r7, #28]
    if (numberOfSamples < 0) numberOfSamples += 32; // Wrap around condition
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	2b00      	cmp	r3, #0
 8008388:	da02      	bge.n	8008390 <max30102_checksamples+0x50>
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	3320      	adds	r3, #32
 800838e:	61fb      	str	r3, [r7, #28]

    bytesLeftToRead = numberOfSamples * max30102_led_irg * 3;
 8008390:	69fa      	ldr	r2, [r7, #28]
 8008392:	4613      	mov	r3, r2
 8008394:	00db      	lsls	r3, r3, #3
 8008396:	4413      	add	r3, r2
 8008398:	627b      	str	r3, [r7, #36]	@ 0x24
    command = MAX30102_FIFODATA;
 800839a:	2307      	movs	r3, #7
 800839c:	75fb      	strb	r3, [r7, #23]

    // Send the register address (FIFODATA) to read from
    HAL_I2C_Master_Transmit(obj->ui2c, MAX30102_I2C_ADDR << 1, &command, 1, HAL_MAX_DELAY);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6818      	ldr	r0, [r3, #0]
 80083a2:	f107 0217 	add.w	r2, r7, #23
 80083a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	2301      	movs	r3, #1
 80083ae:	21ae      	movs	r1, #174	@ 0xae
 80083b0:	f7fa f936 	bl	8002620 <HAL_I2C_Master_Transmit>

    while (bytesLeftToRead > 0)
 80083b4:	e09c      	b.n	80084f0 <max30102_checksamples+0x1b0>
    {
      toGet = bytesLeftToRead;
 80083b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b8:	623b      	str	r3, [r7, #32]
      if (toGet > I2C_BUFFER_LENGTH)
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	2b20      	cmp	r3, #32
 80083be:	dd01      	ble.n	80083c4 <max30102_checksamples+0x84>
      {
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (max30102_led_irg * 3)); // Trim to multiple of samples
 80083c0:	231b      	movs	r3, #27
 80083c2:	623b      	str	r3, [r7, #32]
      }

      bytesLeftToRead -= toGet;
 80083c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	627b      	str	r3, [r7, #36]	@ 0x24
      HAL_I2C_Master_Receive(obj->ui2c, MAX30102_I2C_ADDR << 1, dataBuffer, toGet, HAL_MAX_DELAY);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6818      	ldr	r0, [r3, #0]
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083d8:	9200      	str	r2, [sp, #0]
 80083da:	4a4c      	ldr	r2, [pc, #304]	@ (800850c <max30102_checksamples+0x1cc>)
 80083dc:	21ae      	movs	r1, #174	@ 0xae
 80083de:	f7fa fa37 	bl	8002850 <HAL_I2C_Master_Receive>

      int index = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	61bb      	str	r3, [r7, #24]
      while (toGet > 0)
 80083e6:	e07f      	b.n	80084e8 <max30102_checksamples+0x1a8>
      {
        obj->_head++;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 80083ee:	3301      	adds	r3, #1
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184
        obj->_head = (obj->_head + 1) % STORAGE_SIZE;  // Wrap condition
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 80083fe:	3301      	adds	r3, #1
 8008400:	425a      	negs	r2, r3
 8008402:	f003 0303 	and.w	r3, r3, #3
 8008406:	f002 0203 	and.w	r2, r2, #3
 800840a:	bf58      	it	pl
 800840c:	4253      	negpl	r3, r2
 800840e:	b29a      	uxth	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

        uint8_t temp[sizeof(uint32_t)] = {0};
 8008416:	2300      	movs	r3, #0
 8008418:	613b      	str	r3, [r7, #16]
        uint32_t tempLong = 0;
 800841a:	2300      	movs	r3, #0
 800841c:	60fb      	str	r3, [r7, #12]

        // Burst read three bytes for RED
        temp[2] = dataBuffer[index++];
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	1c5a      	adds	r2, r3, #1
 8008422:	61ba      	str	r2, [r7, #24]
 8008424:	4a39      	ldr	r2, [pc, #228]	@ (800850c <max30102_checksamples+0x1cc>)
 8008426:	5cd3      	ldrb	r3, [r2, r3]
 8008428:	74bb      	strb	r3, [r7, #18]
        temp[1] = dataBuffer[index++];
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	61ba      	str	r2, [r7, #24]
 8008430:	4a36      	ldr	r2, [pc, #216]	@ (800850c <max30102_checksamples+0x1cc>)
 8008432:	5cd3      	ldrb	r3, [r2, r3]
 8008434:	747b      	strb	r3, [r7, #17]
        temp[0] = dataBuffer[index++];
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	61ba      	str	r2, [r7, #24]
 800843c:	4a33      	ldr	r2, [pc, #204]	@ (800850c <max30102_checksamples+0x1cc>)
 800843e:	5cd3      	ldrb	r3, [r2, r3]
 8008440:	743b      	strb	r3, [r7, #16]

        memcpy(&tempLong, temp, sizeof(tempLong));
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	60fb      	str	r3, [r7, #12]
        tempLong &= 0x3FFFF; // Zero out all but 18 bits
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800844c:	60fb      	str	r3, [r7, #12]
        obj->_red_samples[obj->_head] = tempLong;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	6879      	ldr	r1, [r7, #4]
 8008458:	3320      	adds	r3, #32
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	440b      	add	r3, r1
 800845e:	605a      	str	r2, [r3, #4]

        if (max30102_led_irg > 1)
        {
          // Burst read three bytes for IR
          temp[2] = dataBuffer[index++];
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	61ba      	str	r2, [r7, #24]
 8008466:	4a29      	ldr	r2, [pc, #164]	@ (800850c <max30102_checksamples+0x1cc>)
 8008468:	5cd3      	ldrb	r3, [r2, r3]
 800846a:	74bb      	strb	r3, [r7, #18]
          temp[1] = dataBuffer[index++];
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	1c5a      	adds	r2, r3, #1
 8008470:	61ba      	str	r2, [r7, #24]
 8008472:	4a26      	ldr	r2, [pc, #152]	@ (800850c <max30102_checksamples+0x1cc>)
 8008474:	5cd3      	ldrb	r3, [r2, r3]
 8008476:	747b      	strb	r3, [r7, #17]
          temp[0] = dataBuffer[index++];
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	61ba      	str	r2, [r7, #24]
 800847e:	4a23      	ldr	r2, [pc, #140]	@ (800850c <max30102_checksamples+0x1cc>)
 8008480:	5cd3      	ldrb	r3, [r2, r3]
 8008482:	743b      	strb	r3, [r7, #16]
          memcpy(&tempLong, temp, sizeof(tempLong));
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	60fb      	str	r3, [r7, #12]
          tempLong &= 0x3FFFF;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800848e:	60fb      	str	r3, [r7, #12]
          obj->_ir_samples[obj->_head] = tempLong;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	6879      	ldr	r1, [r7, #4]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	440b      	add	r3, r1
 800849e:	605a      	str	r2, [r3, #4]
        }

        if (max30102_led_irg > 2)
        {
          // Burst read three bytes for Green
          temp[2] = dataBuffer[index++];
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	61ba      	str	r2, [r7, #24]
 80084a6:	4a19      	ldr	r2, [pc, #100]	@ (800850c <max30102_checksamples+0x1cc>)
 80084a8:	5cd3      	ldrb	r3, [r2, r3]
 80084aa:	74bb      	strb	r3, [r7, #18]
          temp[1] = dataBuffer[index++];
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	1c5a      	adds	r2, r3, #1
 80084b0:	61ba      	str	r2, [r7, #24]
 80084b2:	4a16      	ldr	r2, [pc, #88]	@ (800850c <max30102_checksamples+0x1cc>)
 80084b4:	5cd3      	ldrb	r3, [r2, r3]
 80084b6:	747b      	strb	r3, [r7, #17]
          temp[0] = dataBuffer[index++];
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	61ba      	str	r2, [r7, #24]
 80084be:	4a13      	ldr	r2, [pc, #76]	@ (800850c <max30102_checksamples+0x1cc>)
 80084c0:	5cd3      	ldrb	r3, [r2, r3]
 80084c2:	743b      	strb	r3, [r7, #16]
          memcpy(&tempLong, temp, sizeof(tempLong));
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	60fb      	str	r3, [r7, #12]
          tempLong &= 0x3FFFF;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80084ce:	60fb      	str	r3, [r7, #12]
          obj->_green[obj->_head] = tempLong;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	6879      	ldr	r1, [r7, #4]
 80084da:	3340      	adds	r3, #64	@ 0x40
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	440b      	add	r3, r1
 80084e0:	605a      	str	r2, [r3, #4]
        }

        toGet -=max30102_led_irg * 3;
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	3b09      	subs	r3, #9
 80084e6:	623b      	str	r3, [r7, #32]
      while (toGet > 0)
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f73f af7c 	bgt.w	80083e8 <max30102_checksamples+0xa8>
    while (bytesLeftToRead > 0)
 80084f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f73f af5f 	bgt.w	80083b6 <max30102_checksamples+0x76>
      }
    }
  }
  return numberOfSamples;
 80084f8:	69fb      	ldr	r3, [r7, #28]

}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3728      	adds	r7, #40	@ 0x28
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	20000ee8 	.word	0x20000ee8
 8008508:	20000ee9 	.word	0x20000ee9
 800850c:	20000ec8 	.word	0x20000ec8

08008510 <max30102_safeCheck>:

uint32_t max30102_safeCheck(max30102_t *obj)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
	const uint8_t maxTimeToCheck = 250;
 8008518:	23fa      	movs	r3, #250	@ 0xfa
 800851a:	73fb      	strb	r3, [r7, #15]
    uint32_t markTime = HAL_GetTick();  // Get the current system tick (in ms)
 800851c:	f7f9 fcd4 	bl	8001ec8 <HAL_GetTick>
 8008520:	60b8      	str	r0, [r7, #8]

    while (1)
    {
        if (HAL_GetTick() - markTime > maxTimeToCheck)
 8008522:	f7f9 fcd1 	bl	8001ec8 <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	1ad2      	subs	r2, r2, r3
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	429a      	cmp	r2, r3
 8008530:	d901      	bls.n	8008536 <max30102_safeCheck+0x26>
        {
            return false;  // Timeout occurred
 8008532:	2300      	movs	r3, #0
 8008534:	e011      	b.n	800855a <max30102_safeCheck+0x4a>
        }

        if (max30102_checksamples(obj) == true)  // Check if new data is available (assuming `check()` is implemented elsewhere)
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff ff02 	bl	8008340 <max30102_checksamples>
 800853c:	4603      	mov	r3, r0
 800853e:	2b01      	cmp	r3, #1
 8008540:	d107      	bne.n	8008552 <max30102_safeCheck+0x42>
        {
        	return obj->_ir_samples[obj->_head];  // New data found
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	e003      	b.n	800855a <max30102_safeCheck+0x4a>
        }
        HAL_Delay(1);  // Delay for 1 millisecond
 8008552:	2001      	movs	r0, #1
 8008554:	f7f9 fcc4 	bl	8001ee0 <HAL_Delay>
        if (HAL_GetTick() - markTime > maxTimeToCheck)
 8008558:	e7e3      	b.n	8008522 <max30102_safeCheck+0x12>
    }
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <EXTI_Init>:

/*
 * Temperature Interrupts
 */
void EXTI_Init(max30102_t *obj)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]

    HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 1);  // Set priority (lower number means higher priority)
 800856a:	2201      	movs	r2, #1
 800856c:	2102      	movs	r1, #2
 800856e:	2006      	movs	r0, #6
 8008570:	f7f9 fd92 	bl	8002098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);          // Enable EXTI line 0 interrupt
 8008574:	2006      	movs	r0, #6
 8008576:	f7f9 fdab 	bl	80020d0 <HAL_NVIC_EnableIRQ>
}
 800857a:	bf00      	nop
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <Spo2AvgProcess>:
    stat->sum = 0.0;
    stat->count = 0;
}

void Spo2AvgProcess(MinMaxAvgStatistic *stat, float value)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b082      	sub	sp, #8
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	ed87 0a00 	vstr	s0, [r7]
    if (isnan(stat->min))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	edd3 7a00 	vldr	s15, [r3]
 8008594:	eef4 7a67 	vcmp.f32	s15, s15
 8008598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859c:	d706      	bvc.n	80085ac <Spo2AvgProcess+0x2a>
    {
        stat->min = value;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	601a      	str	r2, [r3, #0]
        stat->max = value;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	605a      	str	r2, [r3, #4]
 80085aa:	e01b      	b.n	80085e4 <Spo2AvgProcess+0x62>
    }
    else
    {
        stat->min = fminf(stat->min, value);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	edd3 7a00 	vldr	s15, [r3]
 80085b2:	eef0 0a67 	vmov.f32	s1, s15
 80085b6:	ed97 0a00 	vldr	s0, [r7]
 80085ba:	f008 f968 	bl	801088e <fminf>
 80085be:	eef0 7a40 	vmov.f32	s15, s0
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	edc3 7a00 	vstr	s15, [r3]
        stat->max = fmaxf(stat->max, value);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80085ce:	eef0 0a67 	vmov.f32	s1, s15
 80085d2:	ed97 0a00 	vldr	s0, [r7]
 80085d6:	f008 f93d 	bl	8010854 <fmaxf>
 80085da:	eef0 7a40 	vmov.f32	s15, s0
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	edc3 7a01 	vstr	s15, [r3, #4]
    }
    stat->sum += value;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80085ea:	edd7 7a00 	vldr	s15, [r7]
 80085ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	edc3 7a02 	vstr	s15, [r3, #8]
    stat->count++;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	60da      	str	r2, [r3, #12]
}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
	...

0800860c <average>:


float average(MinMaxAvgStatistic *stat)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
    return (stat->count > 0) ? stat->sum / stat->count : 0.0;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	dd0b      	ble.n	8008634 <average+0x28>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800862e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008632:	e001      	b.n	8008638 <average+0x2c>
 8008634:	eddf 6a05 	vldr	s13, [pc, #20]	@ 800864c <average+0x40>
 8008638:	eef0 7a66 	vmov.f32	s15, s13
}
 800863c:	eeb0 0a67 	vmov.f32	s0, s15
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	00000000 	.word	0x00000000

08008650 <minimum>:


float minimum(MinMaxAvgStatistic *stat)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
    return stat->min;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	ee07 3a90 	vmov	s15, r3
}
 8008660:	eeb0 0a67 	vmov.f32	s0, s15
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <maximum>:

float maximum(MinMaxAvgStatistic *stat)
{
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
    return stat->max;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	ee07 3a90 	vmov	s15, r3
}
 800867e:	eeb0 0a67 	vmov.f32	s0, s15
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <initMinMaxAvgStatistic>:


void initMinMaxAvgStatistic(MinMaxAvgStatistic *stat) {
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
    stat->min = 0.0;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f04f 0200 	mov.w	r2, #0
 800869a:	601a      	str	r2, [r3, #0]
    stat->max = 0.0;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f04f 0200 	mov.w	r2, #0
 80086a2:	605a      	str	r2, [r3, #4]
    stat->sum = 0.0;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f04f 0200 	mov.w	r2, #0
 80086aa:	609a      	str	r2, [r3, #8]
    stat->count = 0;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	60da      	str	r2, [r3, #12]
}
 80086b2:	bf00      	nop
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
	...

080086c0 <Spo2AvgInit>:

void Spo2AvgInit(max30102_t *obj)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	ed2d 8b02 	vpush	{d8}
 80086c6:	b08a      	sub	sp, #40	@ 0x28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
	float rred , rir, r = 0;
 80086cc:	f04f 0300 	mov.w	r3, #0
 80086d0:	627b      	str	r3, [r7, #36]	@ 0x24
	float sample[4];
	initMinMaxAvgStatistic(&stat_red);
 80086d2:	485a      	ldr	r0, [pc, #360]	@ (800883c <Spo2AvgInit+0x17c>)
 80086d4:	f7ff ffda 	bl	800868c <initMinMaxAvgStatistic>
	initMinMaxAvgStatistic(&stat_ir);
 80086d8:	4859      	ldr	r0, [pc, #356]	@ (8008840 <Spo2AvgInit+0x180>)
 80086da:	f7ff ffd7 	bl	800868c <initMinMaxAvgStatistic>

	sample[0] = LowPassFilter_process(&low_pass_filter, obj->_red_samples[0]);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086e4:	ee07 3a90 	vmov	s15, r3
 80086e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ec:	eeb0 0a67 	vmov.f32	s0, s15
 80086f0:	4854      	ldr	r0, [pc, #336]	@ (8008844 <Spo2AvgInit+0x184>)
 80086f2:	f7ff fa61 	bl	8007bb8 <LowPassFilter_process>
 80086f6:	eef0 7a40 	vmov.f32	s15, s0
 80086fa:	edc7 7a03 	vstr	s15, [r7, #12]
	sample[1] = LowPassFilter_process(&low_pass_filter, obj->_red_samples[2]);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008704:	ee07 3a90 	vmov	s15, r3
 8008708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870c:	eeb0 0a67 	vmov.f32	s0, s15
 8008710:	484c      	ldr	r0, [pc, #304]	@ (8008844 <Spo2AvgInit+0x184>)
 8008712:	f7ff fa51 	bl	8007bb8 <LowPassFilter_process>
 8008716:	eef0 7a40 	vmov.f32	s15, s0
 800871a:	edc7 7a04 	vstr	s15, [r7, #16]
	sample[2] = LowPassFilter_process(&low_pass_filter, obj->_ir_samples[0]);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872a:	eeb0 0a67 	vmov.f32	s0, s15
 800872e:	4845      	ldr	r0, [pc, #276]	@ (8008844 <Spo2AvgInit+0x184>)
 8008730:	f7ff fa42 	bl	8007bb8 <LowPassFilter_process>
 8008734:	eef0 7a40 	vmov.f32	s15, s0
 8008738:	edc7 7a05 	vstr	s15, [r7, #20]
	sample[3] = LowPassFilter_process(&low_pass_filter, obj->_ir_samples[2]);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	ee07 3a90 	vmov	s15, r3
 8008744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008748:	eeb0 0a67 	vmov.f32	s0, s15
 800874c:	483d      	ldr	r0, [pc, #244]	@ (8008844 <Spo2AvgInit+0x184>)
 800874e:	f7ff fa33 	bl	8007bb8 <LowPassFilter_process>
 8008752:	eef0 7a40 	vmov.f32	s15, s0
 8008756:	edc7 7a06 	vstr	s15, [r7, #24]


	Spo2AvgProcess(&stat_red, sample[0]);
 800875a:	edd7 7a03 	vldr	s15, [r7, #12]
 800875e:	eeb0 0a67 	vmov.f32	s0, s15
 8008762:	4836      	ldr	r0, [pc, #216]	@ (800883c <Spo2AvgInit+0x17c>)
 8008764:	f7ff ff0d 	bl	8008582 <Spo2AvgProcess>
	Spo2AvgProcess(&stat_red, sample[1]);
 8008768:	edd7 7a04 	vldr	s15, [r7, #16]
 800876c:	eeb0 0a67 	vmov.f32	s0, s15
 8008770:	4832      	ldr	r0, [pc, #200]	@ (800883c <Spo2AvgInit+0x17c>)
 8008772:	f7ff ff06 	bl	8008582 <Spo2AvgProcess>
	Spo2AvgProcess(&stat_ir, sample[3]);
 8008776:	edd7 7a06 	vldr	s15, [r7, #24]
 800877a:	eeb0 0a67 	vmov.f32	s0, s15
 800877e:	4830      	ldr	r0, [pc, #192]	@ (8008840 <Spo2AvgInit+0x180>)
 8008780:	f7ff feff 	bl	8008582 <Spo2AvgProcess>
	Spo2AvgProcess(&stat_ir, sample[4]);
 8008784:	edd7 7a07 	vldr	s15, [r7, #28]
 8008788:	eeb0 0a67 	vmov.f32	s0, s15
 800878c:	482c      	ldr	r0, [pc, #176]	@ (8008840 <Spo2AvgInit+0x180>)
 800878e:	f7ff fef8 	bl	8008582 <Spo2AvgProcess>

	rred = (maximum(&stat_red) - minimum(&stat_red)) / average(&stat_red);
 8008792:	482a      	ldr	r0, [pc, #168]	@ (800883c <Spo2AvgInit+0x17c>)
 8008794:	f7ff ff6b 	bl	800866e <maximum>
 8008798:	eeb0 8a40 	vmov.f32	s16, s0
 800879c:	4827      	ldr	r0, [pc, #156]	@ (800883c <Spo2AvgInit+0x17c>)
 800879e:	f7ff ff57 	bl	8008650 <minimum>
 80087a2:	eef0 7a40 	vmov.f32	s15, s0
 80087a6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80087aa:	4824      	ldr	r0, [pc, #144]	@ (800883c <Spo2AvgInit+0x17c>)
 80087ac:	f7ff ff2e 	bl	800860c <average>
 80087b0:	eeb0 7a40 	vmov.f32	s14, s0
 80087b4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80087b8:	edc7 7a08 	vstr	s15, [r7, #32]
	rir = (maximum(&stat_ir) - minimum(&stat_ir)) / average(&stat_ir);
 80087bc:	4820      	ldr	r0, [pc, #128]	@ (8008840 <Spo2AvgInit+0x180>)
 80087be:	f7ff ff56 	bl	800866e <maximum>
 80087c2:	eeb0 8a40 	vmov.f32	s16, s0
 80087c6:	481e      	ldr	r0, [pc, #120]	@ (8008840 <Spo2AvgInit+0x180>)
 80087c8:	f7ff ff42 	bl	8008650 <minimum>
 80087cc:	eef0 7a40 	vmov.f32	s15, s0
 80087d0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80087d4:	481a      	ldr	r0, [pc, #104]	@ (8008840 <Spo2AvgInit+0x180>)
 80087d6:	f7ff ff19 	bl	800860c <average>
 80087da:	eeb0 7a40 	vmov.f32	s14, s0
 80087de:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80087e2:	edc7 7a07 	vstr	s15, [r7, #28]
	r = rred / rir;
 80087e6:	edd7 6a08 	vldr	s13, [r7, #32]
 80087ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80087ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087f2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	spo2 = kSpO2_A * r * r + kSpO2_B * r + kSpO2_C;
 80087f6:	4b14      	ldr	r3, [pc, #80]	@ (8008848 <Spo2AvgInit+0x188>)
 80087f8:	ed93 7a00 	vldr	s14, [r3]
 80087fc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008800:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008804:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800880c:	4b0f      	ldr	r3, [pc, #60]	@ (800884c <Spo2AvgInit+0x18c>)
 800880e:	edd3 6a00 	vldr	s13, [r3]
 8008812:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800881a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800881e:	4b0c      	ldr	r3, [pc, #48]	@ (8008850 <Spo2AvgInit+0x190>)
 8008820:	edd3 7a00 	vldr	s15, [r3]
 8008824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008828:	4b0a      	ldr	r3, [pc, #40]	@ (8008854 <Spo2AvgInit+0x194>)
 800882a:	edc3 7a00 	vstr	s15, [r3]
}
 800882e:	bf00      	nop
 8008830:	3728      	adds	r7, #40	@ 0x28
 8008832:	46bd      	mov	sp, r7
 8008834:	ecbd 8b02 	vpop	{d8}
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	20000eec 	.word	0x20000eec
 8008840:	20000efc 	.word	0x20000efc
 8008844:	20000e88 	.word	0x20000e88
 8008848:	20000024 	.word	0x20000024
 800884c:	20000028 	.word	0x20000028
 8008850:	2000002c 	.word	0x2000002c
 8008854:	2000089c 	.word	0x2000089c

08008858 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	4a08      	ldr	r2, [pc, #32]	@ (8008888 <disk_status+0x30>)
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	79fa      	ldrb	r2, [r7, #7]
 8008870:	4905      	ldr	r1, [pc, #20]	@ (8008888 <disk_status+0x30>)
 8008872:	440a      	add	r2, r1
 8008874:	7a12      	ldrb	r2, [r2, #8]
 8008876:	4610      	mov	r0, r2
 8008878:	4798      	blx	r3
 800887a:	4603      	mov	r3, r0
 800887c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800887e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	20000f34 	.word	0x20000f34

0800888c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	4603      	mov	r3, r0
 8008894:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	4a0d      	ldr	r2, [pc, #52]	@ (80088d4 <disk_initialize+0x48>)
 800889e:	5cd3      	ldrb	r3, [r2, r3]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d111      	bne.n	80088c8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80088a4:	79fb      	ldrb	r3, [r7, #7]
 80088a6:	4a0b      	ldr	r2, [pc, #44]	@ (80088d4 <disk_initialize+0x48>)
 80088a8:	2101      	movs	r1, #1
 80088aa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	4a09      	ldr	r2, [pc, #36]	@ (80088d4 <disk_initialize+0x48>)
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	79fa      	ldrb	r2, [r7, #7]
 80088ba:	4906      	ldr	r1, [pc, #24]	@ (80088d4 <disk_initialize+0x48>)
 80088bc:	440a      	add	r2, r1
 80088be:	7a12      	ldrb	r2, [r2, #8]
 80088c0:	4610      	mov	r0, r2
 80088c2:	4798      	blx	r3
 80088c4:	4603      	mov	r3, r0
 80088c6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20000f34 	.word	0x20000f34

080088d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80088d8:	b590      	push	{r4, r7, lr}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	607a      	str	r2, [r7, #4]
 80088e2:	603b      	str	r3, [r7, #0]
 80088e4:	4603      	mov	r3, r0
 80088e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008914 <disk_read+0x3c>)
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	689c      	ldr	r4, [r3, #8]
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	4a07      	ldr	r2, [pc, #28]	@ (8008914 <disk_read+0x3c>)
 80088f8:	4413      	add	r3, r2
 80088fa:	7a18      	ldrb	r0, [r3, #8]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	68b9      	ldr	r1, [r7, #8]
 8008902:	47a0      	blx	r4
 8008904:	4603      	mov	r3, r0
 8008906:	75fb      	strb	r3, [r7, #23]
  return res;
 8008908:	7dfb      	ldrb	r3, [r7, #23]
}
 800890a:	4618      	mov	r0, r3
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	bd90      	pop	{r4, r7, pc}
 8008912:	bf00      	nop
 8008914:	20000f34 	.word	0x20000f34

08008918 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008918:	b590      	push	{r4, r7, lr}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	4603      	mov	r3, r0
 8008926:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008928:	7bfb      	ldrb	r3, [r7, #15]
 800892a:	4a0a      	ldr	r2, [pc, #40]	@ (8008954 <disk_write+0x3c>)
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	68dc      	ldr	r4, [r3, #12]
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	4a07      	ldr	r2, [pc, #28]	@ (8008954 <disk_write+0x3c>)
 8008938:	4413      	add	r3, r2
 800893a:	7a18      	ldrb	r0, [r3, #8]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	68b9      	ldr	r1, [r7, #8]
 8008942:	47a0      	blx	r4
 8008944:	4603      	mov	r3, r0
 8008946:	75fb      	strb	r3, [r7, #23]
  return res;
 8008948:	7dfb      	ldrb	r3, [r7, #23]
}
 800894a:	4618      	mov	r0, r3
 800894c:	371c      	adds	r7, #28
 800894e:	46bd      	mov	sp, r7
 8008950:	bd90      	pop	{r4, r7, pc}
 8008952:	bf00      	nop
 8008954:	20000f34 	.word	0x20000f34

08008958 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	603a      	str	r2, [r7, #0]
 8008962:	71fb      	strb	r3, [r7, #7]
 8008964:	460b      	mov	r3, r1
 8008966:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	4a09      	ldr	r2, [pc, #36]	@ (8008990 <disk_ioctl+0x38>)
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4413      	add	r3, r2
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	79fa      	ldrb	r2, [r7, #7]
 8008976:	4906      	ldr	r1, [pc, #24]	@ (8008990 <disk_ioctl+0x38>)
 8008978:	440a      	add	r2, r1
 800897a:	7a10      	ldrb	r0, [r2, #8]
 800897c:	79b9      	ldrb	r1, [r7, #6]
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	4798      	blx	r3
 8008982:	4603      	mov	r3, r0
 8008984:	73fb      	strb	r3, [r7, #15]
  return res;
 8008986:	7bfb      	ldrb	r3, [r7, #15]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20000f34 	.word	0x20000f34

08008994 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3301      	adds	r3, #1
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80089a4:	89fb      	ldrh	r3, [r7, #14]
 80089a6:	021b      	lsls	r3, r3, #8
 80089a8:	b21a      	sxth	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	b21b      	sxth	r3, r3
 80089b0:	4313      	orrs	r3, r2
 80089b2:	b21b      	sxth	r3, r3
 80089b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80089b6:	89fb      	ldrh	r3, [r7, #14]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3303      	adds	r3, #3
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	021b      	lsls	r3, r3, #8
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	3202      	adds	r2, #2
 80089dc:	7812      	ldrb	r2, [r2, #0]
 80089de:	4313      	orrs	r3, r2
 80089e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	021b      	lsls	r3, r3, #8
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	3201      	adds	r2, #1
 80089ea:	7812      	ldrb	r2, [r2, #0]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	021b      	lsls	r3, r3, #8
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	7812      	ldrb	r2, [r2, #0]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80089fc:	68fb      	ldr	r3, [r7, #12]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008a0a:	b480      	push	{r7}
 8008a0c:	b083      	sub	sp, #12
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	460b      	mov	r3, r1
 8008a14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	1c5a      	adds	r2, r3, #1
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	887a      	ldrh	r2, [r7, #2]
 8008a1e:	b2d2      	uxtb	r2, r2
 8008a20:	701a      	strb	r2, [r3, #0]
 8008a22:	887b      	ldrh	r3, [r7, #2]
 8008a24:	0a1b      	lsrs	r3, r3, #8
 8008a26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	607a      	str	r2, [r7, #4]
 8008a2e:	887a      	ldrh	r2, [r7, #2]
 8008a30:	b2d2      	uxtb	r2, r2
 8008a32:	701a      	strb	r2, [r3, #0]
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	b2d2      	uxtb	r2, r2
 8008a54:	701a      	strb	r2, [r3, #0]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	0a1b      	lsrs	r3, r3, #8
 8008a5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	1c5a      	adds	r2, r3, #1
 8008a60:	607a      	str	r2, [r7, #4]
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	b2d2      	uxtb	r2, r2
 8008a66:	701a      	strb	r2, [r3, #0]
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	1c5a      	adds	r2, r3, #1
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	b2d2      	uxtb	r2, r2
 8008a78:	701a      	strb	r2, [r3, #0]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	0a1b      	lsrs	r3, r3, #8
 8008a7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	607a      	str	r2, [r7, #4]
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	b2d2      	uxtb	r2, r2
 8008a8a:	701a      	strb	r2, [r3, #0]
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00d      	beq.n	8008ace <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	1c53      	adds	r3, r2, #1
 8008ab6:	613b      	str	r3, [r7, #16]
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	1c59      	adds	r1, r3, #1
 8008abc:	6179      	str	r1, [r7, #20]
 8008abe:	7812      	ldrb	r2, [r2, #0]
 8008ac0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	607b      	str	r3, [r7, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1f1      	bne.n	8008ab2 <mem_cpy+0x1a>
	}
}
 8008ace:	bf00      	nop
 8008ad0:	371c      	adds	r7, #28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008ada:	b480      	push	{r7}
 8008adc:	b087      	sub	sp, #28
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	617a      	str	r2, [r7, #20]
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	b2d2      	uxtb	r2, r2
 8008af4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	607b      	str	r3, [r7, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1f3      	bne.n	8008aea <mem_set+0x10>
}
 8008b02:	bf00      	nop
 8008b04:	bf00      	nop
 8008b06:	371c      	adds	r7, #28
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008b10:	b480      	push	{r7}
 8008b12:	b089      	sub	sp, #36	@ 0x24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	61fb      	str	r3, [r7, #28]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	61fa      	str	r2, [r7, #28]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	4619      	mov	r1, r3
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	1c5a      	adds	r2, r3, #1
 8008b36:	61ba      	str	r2, [r7, #24]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	1acb      	subs	r3, r1, r3
 8008b3c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	607b      	str	r3, [r7, #4]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <mem_cmp+0x40>
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0eb      	beq.n	8008b28 <mem_cmp+0x18>

	return r;
 8008b50:	697b      	ldr	r3, [r7, #20]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3724      	adds	r7, #36	@ 0x24
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008b68:	e002      	b.n	8008b70 <chk_chr+0x12>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	607b      	str	r3, [r7, #4]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <chk_chr+0x26>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d1f2      	bne.n	8008b6a <chk_chr+0xc>
	return *str;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	781b      	ldrb	r3, [r3, #0]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d009      	beq.n	8008bb6 <lock_fs+0x22>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f002 f9a1 	bl	800aeee <ff_req_grant>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <lock_fs+0x22>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e000      	b.n	8008bb8 <lock_fs+0x24>
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00d      	beq.n	8008bee <unlock_fs+0x2e>
 8008bd2:	78fb      	ldrb	r3, [r7, #3]
 8008bd4:	2b0c      	cmp	r3, #12
 8008bd6:	d00a      	beq.n	8008bee <unlock_fs+0x2e>
 8008bd8:	78fb      	ldrb	r3, [r7, #3]
 8008bda:	2b0b      	cmp	r3, #11
 8008bdc:	d007      	beq.n	8008bee <unlock_fs+0x2e>
 8008bde:	78fb      	ldrb	r3, [r7, #3]
 8008be0:	2b0f      	cmp	r3, #15
 8008be2:	d004      	beq.n	8008bee <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f002 f995 	bl	800af18 <ff_rel_grant>
	}
}
 8008bee:	bf00      	nop
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
	...

08008bf8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008c02:	2300      	movs	r3, #0
 8008c04:	60bb      	str	r3, [r7, #8]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	60fb      	str	r3, [r7, #12]
 8008c0a:	e029      	b.n	8008c60 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008c0c:	4a27      	ldr	r2, [pc, #156]	@ (8008cac <chk_lock+0xb4>)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	011b      	lsls	r3, r3, #4
 8008c12:	4413      	add	r3, r2
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d01d      	beq.n	8008c56 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008c1a:	4a24      	ldr	r2, [pc, #144]	@ (8008cac <chk_lock+0xb4>)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	4413      	add	r3, r2
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d116      	bne.n	8008c5a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008cac <chk_lock+0xb4>)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	011b      	lsls	r3, r3, #4
 8008c32:	4413      	add	r3, r2
 8008c34:	3304      	adds	r3, #4
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d10c      	bne.n	8008c5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008c40:	4a1a      	ldr	r2, [pc, #104]	@ (8008cac <chk_lock+0xb4>)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	4413      	add	r3, r2
 8008c48:	3308      	adds	r3, #8
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d102      	bne.n	8008c5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008c54:	e007      	b.n	8008c66 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008c56:	2301      	movs	r3, #1
 8008c58:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	60fb      	str	r3, [r7, #12]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d9d2      	bls.n	8008c0c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d109      	bne.n	8008c80 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d102      	bne.n	8008c78 <chk_lock+0x80>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d101      	bne.n	8008c7c <chk_lock+0x84>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e010      	b.n	8008c9e <chk_lock+0xa6>
 8008c7c:	2312      	movs	r3, #18
 8008c7e:	e00e      	b.n	8008c9e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d108      	bne.n	8008c98 <chk_lock+0xa0>
 8008c86:	4a09      	ldr	r2, [pc, #36]	@ (8008cac <chk_lock+0xb4>)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	011b      	lsls	r3, r3, #4
 8008c8c:	4413      	add	r3, r2
 8008c8e:	330c      	adds	r3, #12
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c96:	d101      	bne.n	8008c9c <chk_lock+0xa4>
 8008c98:	2310      	movs	r3, #16
 8008c9a:	e000      	b.n	8008c9e <chk_lock+0xa6>
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	20000f14 	.word	0x20000f14

08008cb0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	607b      	str	r3, [r7, #4]
 8008cba:	e002      	b.n	8008cc2 <enq_lock+0x12>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	607b      	str	r3, [r7, #4]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d806      	bhi.n	8008cd6 <enq_lock+0x26>
 8008cc8:	4a09      	ldr	r2, [pc, #36]	@ (8008cf0 <enq_lock+0x40>)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	4413      	add	r3, r2
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1f2      	bne.n	8008cbc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	bf14      	ite	ne
 8008cdc:	2301      	movne	r3, #1
 8008cde:	2300      	moveq	r3, #0
 8008ce0:	b2db      	uxtb	r3, r3
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	20000f14 	.word	0x20000f14

08008cf4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008cfe:	2300      	movs	r3, #0
 8008d00:	60fb      	str	r3, [r7, #12]
 8008d02:	e01f      	b.n	8008d44 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008d04:	4a41      	ldr	r2, [pc, #260]	@ (8008e0c <inc_lock+0x118>)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	011b      	lsls	r3, r3, #4
 8008d0a:	4413      	add	r3, r2
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d113      	bne.n	8008d3e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008d16:	4a3d      	ldr	r2, [pc, #244]	@ (8008e0c <inc_lock+0x118>)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	011b      	lsls	r3, r3, #4
 8008d1c:	4413      	add	r3, r2
 8008d1e:	3304      	adds	r3, #4
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d109      	bne.n	8008d3e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008d2a:	4a38      	ldr	r2, [pc, #224]	@ (8008e0c <inc_lock+0x118>)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	011b      	lsls	r3, r3, #4
 8008d30:	4413      	add	r3, r2
 8008d32:	3308      	adds	r3, #8
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d006      	beq.n	8008d4c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3301      	adds	r3, #1
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d9dc      	bls.n	8008d04 <inc_lock+0x10>
 8008d4a:	e000      	b.n	8008d4e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008d4c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d132      	bne.n	8008dba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d54:	2300      	movs	r3, #0
 8008d56:	60fb      	str	r3, [r7, #12]
 8008d58:	e002      	b.n	8008d60 <inc_lock+0x6c>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d806      	bhi.n	8008d74 <inc_lock+0x80>
 8008d66:	4a29      	ldr	r2, [pc, #164]	@ (8008e0c <inc_lock+0x118>)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	011b      	lsls	r3, r3, #4
 8008d6c:	4413      	add	r3, r2
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1f2      	bne.n	8008d5a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d101      	bne.n	8008d7e <inc_lock+0x8a>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	e040      	b.n	8008e00 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	4922      	ldr	r1, [pc, #136]	@ (8008e0c <inc_lock+0x118>)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	011b      	lsls	r3, r3, #4
 8008d88:	440b      	add	r3, r1
 8008d8a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689a      	ldr	r2, [r3, #8]
 8008d90:	491e      	ldr	r1, [pc, #120]	@ (8008e0c <inc_lock+0x118>)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	011b      	lsls	r3, r3, #4
 8008d96:	440b      	add	r3, r1
 8008d98:	3304      	adds	r3, #4
 8008d9a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	695a      	ldr	r2, [r3, #20]
 8008da0:	491a      	ldr	r1, [pc, #104]	@ (8008e0c <inc_lock+0x118>)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	011b      	lsls	r3, r3, #4
 8008da6:	440b      	add	r3, r1
 8008da8:	3308      	adds	r3, #8
 8008daa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008dac:	4a17      	ldr	r2, [pc, #92]	@ (8008e0c <inc_lock+0x118>)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	011b      	lsls	r3, r3, #4
 8008db2:	4413      	add	r3, r2
 8008db4:	330c      	adds	r3, #12
 8008db6:	2200      	movs	r2, #0
 8008db8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d009      	beq.n	8008dd4 <inc_lock+0xe0>
 8008dc0:	4a12      	ldr	r2, [pc, #72]	@ (8008e0c <inc_lock+0x118>)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	011b      	lsls	r3, r3, #4
 8008dc6:	4413      	add	r3, r2
 8008dc8:	330c      	adds	r3, #12
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <inc_lock+0xe0>
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	e015      	b.n	8008e00 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d108      	bne.n	8008dec <inc_lock+0xf8>
 8008dda:	4a0c      	ldr	r2, [pc, #48]	@ (8008e0c <inc_lock+0x118>)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	011b      	lsls	r3, r3, #4
 8008de0:	4413      	add	r3, r2
 8008de2:	330c      	adds	r3, #12
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	3301      	adds	r3, #1
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	e001      	b.n	8008df0 <inc_lock+0xfc>
 8008dec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008df0:	4906      	ldr	r1, [pc, #24]	@ (8008e0c <inc_lock+0x118>)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	011b      	lsls	r3, r3, #4
 8008df6:	440b      	add	r3, r1
 8008df8:	330c      	adds	r3, #12
 8008dfa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3301      	adds	r3, #1
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	20000f14 	.word	0x20000f14

08008e10 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	607b      	str	r3, [r7, #4]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d825      	bhi.n	8008e70 <dec_lock+0x60>
		n = Files[i].ctr;
 8008e24:	4a17      	ldr	r2, [pc, #92]	@ (8008e84 <dec_lock+0x74>)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	011b      	lsls	r3, r3, #4
 8008e2a:	4413      	add	r3, r2
 8008e2c:	330c      	adds	r3, #12
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008e32:	89fb      	ldrh	r3, [r7, #14]
 8008e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e38:	d101      	bne.n	8008e3e <dec_lock+0x2e>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008e3e:	89fb      	ldrh	r3, [r7, #14]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <dec_lock+0x3a>
 8008e44:	89fb      	ldrh	r3, [r7, #14]
 8008e46:	3b01      	subs	r3, #1
 8008e48:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8008e84 <dec_lock+0x74>)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	011b      	lsls	r3, r3, #4
 8008e50:	4413      	add	r3, r2
 8008e52:	330c      	adds	r3, #12
 8008e54:	89fa      	ldrh	r2, [r7, #14]
 8008e56:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008e58:	89fb      	ldrh	r3, [r7, #14]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d105      	bne.n	8008e6a <dec_lock+0x5a>
 8008e5e:	4a09      	ldr	r2, [pc, #36]	@ (8008e84 <dec_lock+0x74>)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	011b      	lsls	r3, r3, #4
 8008e64:	4413      	add	r3, r2
 8008e66:	2200      	movs	r2, #0
 8008e68:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	737b      	strb	r3, [r7, #13]
 8008e6e:	e001      	b.n	8008e74 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008e70:	2302      	movs	r3, #2
 8008e72:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008e74:	7b7b      	ldrb	r3, [r7, #13]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20000f14 	.word	0x20000f14

08008e88 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	e010      	b.n	8008eb8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008e96:	4a0d      	ldr	r2, [pc, #52]	@ (8008ecc <clear_lock+0x44>)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	011b      	lsls	r3, r3, #4
 8008e9c:	4413      	add	r3, r2
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d105      	bne.n	8008eb2 <clear_lock+0x2a>
 8008ea6:	4a09      	ldr	r2, [pc, #36]	@ (8008ecc <clear_lock+0x44>)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	011b      	lsls	r3, r3, #4
 8008eac:	4413      	add	r3, r2
 8008eae:	2200      	movs	r2, #0
 8008eb0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d9eb      	bls.n	8008e96 <clear_lock+0xe>
	}
}
 8008ebe:	bf00      	nop
 8008ec0:	bf00      	nop
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	20000f14 	.word	0x20000f14

08008ed0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	78db      	ldrb	r3, [r3, #3]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d034      	beq.n	8008f4e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ee8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	7858      	ldrb	r0, [r3, #1]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	f7ff fd0e 	bl	8008918 <disk_write>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d002      	beq.n	8008f08 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	73fb      	strb	r3, [r7, #15]
 8008f06:	e022      	b.n	8008f4e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	1ad2      	subs	r2, r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d217      	bcs.n	8008f4e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	789b      	ldrb	r3, [r3, #2]
 8008f22:	613b      	str	r3, [r7, #16]
 8008f24:	e010      	b.n	8008f48 <sync_window+0x78>
					wsect += fs->fsize;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	7858      	ldrb	r0, [r3, #1]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	f7ff fceb 	bl	8008918 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	613b      	str	r3, [r7, #16]
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d8eb      	bhi.n	8008f26 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d01b      	beq.n	8008fa8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7ff ffad 	bl	8008ed0 <sync_window>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d113      	bne.n	8008fa8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	7858      	ldrb	r0, [r3, #1]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	f7ff fca3 	bl	80088d8 <disk_read>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d004      	beq.n	8008fa2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008f98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f9c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
	...

08008fb4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f7ff ff87 	bl	8008ed0 <sync_window>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d158      	bne.n	800907e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b03      	cmp	r3, #3
 8008fd2:	d148      	bne.n	8009066 <sync_fs+0xb2>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	791b      	ldrb	r3, [r3, #4]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d144      	bne.n	8009066 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3334      	adds	r3, #52	@ 0x34
 8008fe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7ff fd77 	bl	8008ada <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	3334      	adds	r3, #52	@ 0x34
 8008ff0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008ff4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff fd06 	bl	8008a0a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3334      	adds	r3, #52	@ 0x34
 8009002:	4921      	ldr	r1, [pc, #132]	@ (8009088 <sync_fs+0xd4>)
 8009004:	4618      	mov	r0, r3
 8009006:	f7ff fd1b 	bl	8008a40 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3334      	adds	r3, #52	@ 0x34
 800900e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009012:	491e      	ldr	r1, [pc, #120]	@ (800908c <sync_fs+0xd8>)
 8009014:	4618      	mov	r0, r3
 8009016:	f7ff fd13 	bl	8008a40 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3334      	adds	r3, #52	@ 0x34
 800901e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	4619      	mov	r1, r3
 8009028:	4610      	mov	r0, r2
 800902a:	f7ff fd09 	bl	8008a40 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3334      	adds	r3, #52	@ 0x34
 8009032:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	4619      	mov	r1, r3
 800903c:	4610      	mov	r0, r2
 800903e:	f7ff fcff 	bl	8008a40 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	7858      	ldrb	r0, [r3, #1]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800905a:	2301      	movs	r3, #1
 800905c:	f7ff fc5c 	bl	8008918 <disk_write>
			fs->fsi_flag = 0;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	785b      	ldrb	r3, [r3, #1]
 800906a:	2200      	movs	r2, #0
 800906c:	2100      	movs	r1, #0
 800906e:	4618      	mov	r0, r3
 8009070:	f7ff fc72 	bl	8008958 <disk_ioctl>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <sync_fs+0xca>
 800907a:	2301      	movs	r3, #1
 800907c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800907e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	41615252 	.word	0x41615252
 800908c:	61417272 	.word	0x61417272

08009090 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	3b02      	subs	r3, #2
 800909e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	3b02      	subs	r3, #2
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d301      	bcc.n	80090b0 <clust2sect+0x20>
 80090ac:	2300      	movs	r3, #0
 80090ae:	e008      	b.n	80090c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	895b      	ldrh	r3, [r3, #10]
 80090b4:	461a      	mov	r2, r3
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	fb03 f202 	mul.w	r2, r3, r2
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c0:	4413      	add	r3, r2
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b086      	sub	sp, #24
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d904      	bls.n	80090ee <get_fat+0x20>
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d302      	bcc.n	80090f4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80090ee:	2301      	movs	r3, #1
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	e08e      	b.n	8009212 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80090f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d061      	beq.n	80091c6 <get_fat+0xf8>
 8009102:	2b03      	cmp	r3, #3
 8009104:	dc7b      	bgt.n	80091fe <get_fat+0x130>
 8009106:	2b01      	cmp	r3, #1
 8009108:	d002      	beq.n	8009110 <get_fat+0x42>
 800910a:	2b02      	cmp	r3, #2
 800910c:	d041      	beq.n	8009192 <get_fat+0xc4>
 800910e:	e076      	b.n	80091fe <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	60fb      	str	r3, [r7, #12]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	085b      	lsrs	r3, r3, #1
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	4413      	add	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	0a5b      	lsrs	r3, r3, #9
 8009126:	4413      	add	r3, r2
 8009128:	4619      	mov	r1, r3
 800912a:	6938      	ldr	r0, [r7, #16]
 800912c:	f7ff ff14 	bl	8008f58 <move_window>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d166      	bne.n	8009204 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	1c5a      	adds	r2, r3, #1
 800913a:	60fa      	str	r2, [r7, #12]
 800913c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	4413      	add	r3, r2
 8009144:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009148:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	0a5b      	lsrs	r3, r3, #9
 8009152:	4413      	add	r3, r2
 8009154:	4619      	mov	r1, r3
 8009156:	6938      	ldr	r0, [r7, #16]
 8009158:	f7ff fefe 	bl	8008f58 <move_window>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d152      	bne.n	8009208 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	4413      	add	r3, r2
 800916c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009170:	021b      	lsls	r3, r3, #8
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	4313      	orrs	r3, r2
 8009176:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	f003 0301 	and.w	r3, r3, #1
 800917e:	2b00      	cmp	r3, #0
 8009180:	d002      	beq.n	8009188 <get_fat+0xba>
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	091b      	lsrs	r3, r3, #4
 8009186:	e002      	b.n	800918e <get_fat+0xc0>
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800918e:	617b      	str	r3, [r7, #20]
			break;
 8009190:	e03f      	b.n	8009212 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	0a1b      	lsrs	r3, r3, #8
 800919a:	4413      	add	r3, r2
 800919c:	4619      	mov	r1, r3
 800919e:	6938      	ldr	r0, [r7, #16]
 80091a0:	f7ff feda 	bl	8008f58 <move_window>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d130      	bne.n	800920c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	005b      	lsls	r3, r3, #1
 80091b4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80091b8:	4413      	add	r3, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7ff fbea 	bl	8008994 <ld_word>
 80091c0:	4603      	mov	r3, r0
 80091c2:	617b      	str	r3, [r7, #20]
			break;
 80091c4:	e025      	b.n	8009212 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	09db      	lsrs	r3, r3, #7
 80091ce:	4413      	add	r3, r2
 80091d0:	4619      	mov	r1, r3
 80091d2:	6938      	ldr	r0, [r7, #16]
 80091d4:	f7ff fec0 	bl	8008f58 <move_window>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d118      	bne.n	8009210 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80091ec:	4413      	add	r3, r2
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7ff fbe8 	bl	80089c4 <ld_dword>
 80091f4:	4603      	mov	r3, r0
 80091f6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80091fa:	617b      	str	r3, [r7, #20]
			break;
 80091fc:	e009      	b.n	8009212 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80091fe:	2301      	movs	r3, #1
 8009200:	617b      	str	r3, [r7, #20]
 8009202:	e006      	b.n	8009212 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009204:	bf00      	nop
 8009206:	e004      	b.n	8009212 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009208:	bf00      	nop
 800920a:	e002      	b.n	8009212 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800920c:	bf00      	nop
 800920e:	e000      	b.n	8009212 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009210:	bf00      	nop
		}
	}

	return val;
 8009212:	697b      	ldr	r3, [r7, #20]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800921c:	b590      	push	{r4, r7, lr}
 800921e:	b089      	sub	sp, #36	@ 0x24
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009228:	2302      	movs	r3, #2
 800922a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2b01      	cmp	r3, #1
 8009230:	f240 80d9 	bls.w	80093e6 <put_fat+0x1ca>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	429a      	cmp	r2, r3
 800923c:	f080 80d3 	bcs.w	80093e6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2b03      	cmp	r3, #3
 8009246:	f000 8096 	beq.w	8009376 <put_fat+0x15a>
 800924a:	2b03      	cmp	r3, #3
 800924c:	f300 80cb 	bgt.w	80093e6 <put_fat+0x1ca>
 8009250:	2b01      	cmp	r3, #1
 8009252:	d002      	beq.n	800925a <put_fat+0x3e>
 8009254:	2b02      	cmp	r3, #2
 8009256:	d06e      	beq.n	8009336 <put_fat+0x11a>
 8009258:	e0c5      	b.n	80093e6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	61bb      	str	r3, [r7, #24]
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	085b      	lsrs	r3, r3, #1
 8009262:	69ba      	ldr	r2, [r7, #24]
 8009264:	4413      	add	r3, r2
 8009266:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	0a5b      	lsrs	r3, r3, #9
 8009270:	4413      	add	r3, r2
 8009272:	4619      	mov	r1, r3
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f7ff fe6f 	bl	8008f58 <move_window>
 800927a:	4603      	mov	r3, r0
 800927c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800927e:	7ffb      	ldrb	r3, [r7, #31]
 8009280:	2b00      	cmp	r3, #0
 8009282:	f040 80a9 	bne.w	80093d8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	1c59      	adds	r1, r3, #1
 8009290:	61b9      	str	r1, [r7, #24]
 8009292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009296:	4413      	add	r3, r2
 8009298:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	f003 0301 	and.w	r3, r3, #1
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00d      	beq.n	80092c0 <put_fat+0xa4>
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	b25b      	sxtb	r3, r3
 80092aa:	f003 030f 	and.w	r3, r3, #15
 80092ae:	b25a      	sxtb	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	011b      	lsls	r3, r3, #4
 80092b6:	b25b      	sxtb	r3, r3
 80092b8:	4313      	orrs	r3, r2
 80092ba:	b25b      	sxtb	r3, r3
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	e001      	b.n	80092c4 <put_fat+0xa8>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2201      	movs	r2, #1
 80092cc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	0a5b      	lsrs	r3, r3, #9
 80092d6:	4413      	add	r3, r2
 80092d8:	4619      	mov	r1, r3
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f7ff fe3c 	bl	8008f58 <move_window>
 80092e0:	4603      	mov	r3, r0
 80092e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80092e4:	7ffb      	ldrb	r3, [r7, #31]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d178      	bne.n	80093dc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092f6:	4413      	add	r3, r2
 80092f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	f003 0301 	and.w	r3, r3, #1
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <put_fat+0xf0>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	091b      	lsrs	r3, r3, #4
 8009308:	b2db      	uxtb	r3, r3
 800930a:	e00e      	b.n	800932a <put_fat+0x10e>
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	b25b      	sxtb	r3, r3
 8009312:	f023 030f 	bic.w	r3, r3, #15
 8009316:	b25a      	sxtb	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	0a1b      	lsrs	r3, r3, #8
 800931c:	b25b      	sxtb	r3, r3
 800931e:	f003 030f 	and.w	r3, r3, #15
 8009322:	b25b      	sxtb	r3, r3
 8009324:	4313      	orrs	r3, r2
 8009326:	b25b      	sxtb	r3, r3
 8009328:	b2db      	uxtb	r3, r3
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2201      	movs	r2, #1
 8009332:	70da      	strb	r2, [r3, #3]
			break;
 8009334:	e057      	b.n	80093e6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	0a1b      	lsrs	r3, r3, #8
 800933e:	4413      	add	r3, r2
 8009340:	4619      	mov	r1, r3
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f7ff fe08 	bl	8008f58 <move_window>
 8009348:	4603      	mov	r3, r0
 800934a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800934c:	7ffb      	ldrb	r3, [r7, #31]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d146      	bne.n	80093e0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	005b      	lsls	r3, r3, #1
 800935c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009360:	4413      	add	r3, r2
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	b292      	uxth	r2, r2
 8009366:	4611      	mov	r1, r2
 8009368:	4618      	mov	r0, r3
 800936a:	f7ff fb4e 	bl	8008a0a <st_word>
			fs->wflag = 1;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2201      	movs	r2, #1
 8009372:	70da      	strb	r2, [r3, #3]
			break;
 8009374:	e037      	b.n	80093e6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	09db      	lsrs	r3, r3, #7
 800937e:	4413      	add	r3, r2
 8009380:	4619      	mov	r1, r3
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7ff fde8 	bl	8008f58 <move_window>
 8009388:	4603      	mov	r3, r0
 800938a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800938c:	7ffb      	ldrb	r3, [r7, #31]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d128      	bne.n	80093e4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80093a6:	4413      	add	r3, r2
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff fb0b 	bl	80089c4 <ld_dword>
 80093ae:	4603      	mov	r3, r0
 80093b0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80093b4:	4323      	orrs	r3, r4
 80093b6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80093c6:	4413      	add	r3, r2
 80093c8:	6879      	ldr	r1, [r7, #4]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7ff fb38 	bl	8008a40 <st_dword>
			fs->wflag = 1;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2201      	movs	r2, #1
 80093d4:	70da      	strb	r2, [r3, #3]
			break;
 80093d6:	e006      	b.n	80093e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80093d8:	bf00      	nop
 80093da:	e004      	b.n	80093e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80093dc:	bf00      	nop
 80093de:	e002      	b.n	80093e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80093e0:	bf00      	nop
 80093e2:	e000      	b.n	80093e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80093e4:	bf00      	nop
		}
	}
	return res;
 80093e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3724      	adds	r7, #36	@ 0x24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd90      	pop	{r4, r7, pc}

080093f0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b088      	sub	sp, #32
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d904      	bls.n	8009416 <remove_chain+0x26>
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	429a      	cmp	r2, r3
 8009414:	d301      	bcc.n	800941a <remove_chain+0x2a>
 8009416:	2302      	movs	r3, #2
 8009418:	e04b      	b.n	80094b2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00c      	beq.n	800943a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009420:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009424:	6879      	ldr	r1, [r7, #4]
 8009426:	69b8      	ldr	r0, [r7, #24]
 8009428:	f7ff fef8 	bl	800921c <put_fat>
 800942c:	4603      	mov	r3, r0
 800942e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009430:	7ffb      	ldrb	r3, [r7, #31]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <remove_chain+0x4a>
 8009436:	7ffb      	ldrb	r3, [r7, #31]
 8009438:	e03b      	b.n	80094b2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800943a:	68b9      	ldr	r1, [r7, #8]
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f7ff fe46 	bl	80090ce <get_fat>
 8009442:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d031      	beq.n	80094ae <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d101      	bne.n	8009454 <remove_chain+0x64>
 8009450:	2302      	movs	r3, #2
 8009452:	e02e      	b.n	80094b2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800945a:	d101      	bne.n	8009460 <remove_chain+0x70>
 800945c:	2301      	movs	r3, #1
 800945e:	e028      	b.n	80094b2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009460:	2200      	movs	r2, #0
 8009462:	68b9      	ldr	r1, [r7, #8]
 8009464:	69b8      	ldr	r0, [r7, #24]
 8009466:	f7ff fed9 	bl	800921c <put_fat>
 800946a:	4603      	mov	r3, r0
 800946c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800946e:	7ffb      	ldrb	r3, [r7, #31]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <remove_chain+0x88>
 8009474:	7ffb      	ldrb	r3, [r7, #31]
 8009476:	e01c      	b.n	80094b2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	695a      	ldr	r2, [r3, #20]
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	699b      	ldr	r3, [r3, #24]
 8009480:	3b02      	subs	r3, #2
 8009482:	429a      	cmp	r2, r3
 8009484:	d20b      	bcs.n	800949e <remove_chain+0xae>
			fs->free_clst++;
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	791b      	ldrb	r3, [r3, #4]
 8009494:	f043 0301 	orr.w	r3, r3, #1
 8009498:	b2da      	uxtb	r2, r3
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d3c6      	bcc.n	800943a <remove_chain+0x4a>
 80094ac:	e000      	b.n	80094b0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80094ae:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3720      	adds	r7, #32
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b088      	sub	sp, #32
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10d      	bne.n	80094ec <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d004      	beq.n	80094e6 <create_chain+0x2c>
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d31b      	bcc.n	800951e <create_chain+0x64>
 80094e6:	2301      	movs	r3, #1
 80094e8:	61bb      	str	r3, [r7, #24]
 80094ea:	e018      	b.n	800951e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7ff fded 	bl	80090ce <get_fat>
 80094f4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d801      	bhi.n	8009500 <create_chain+0x46>
 80094fc:	2301      	movs	r3, #1
 80094fe:	e070      	b.n	80095e2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009506:	d101      	bne.n	800950c <create_chain+0x52>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	e06a      	b.n	80095e2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	429a      	cmp	r2, r3
 8009514:	d201      	bcs.n	800951a <create_chain+0x60>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	e063      	b.n	80095e2 <create_chain+0x128>
		scl = clst;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	3301      	adds	r3, #1
 8009526:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	69fa      	ldr	r2, [r7, #28]
 800952e:	429a      	cmp	r2, r3
 8009530:	d307      	bcc.n	8009542 <create_chain+0x88>
				ncl = 2;
 8009532:	2302      	movs	r3, #2
 8009534:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009536:	69fa      	ldr	r2, [r7, #28]
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	429a      	cmp	r2, r3
 800953c:	d901      	bls.n	8009542 <create_chain+0x88>
 800953e:	2300      	movs	r3, #0
 8009540:	e04f      	b.n	80095e2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009542:	69f9      	ldr	r1, [r7, #28]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f7ff fdc2 	bl	80090ce <get_fat>
 800954a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00e      	beq.n	8009570 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d003      	beq.n	8009560 <create_chain+0xa6>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800955e:	d101      	bne.n	8009564 <create_chain+0xaa>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	e03e      	b.n	80095e2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009564:	69fa      	ldr	r2, [r7, #28]
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	429a      	cmp	r2, r3
 800956a:	d1da      	bne.n	8009522 <create_chain+0x68>
 800956c:	2300      	movs	r3, #0
 800956e:	e038      	b.n	80095e2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009570:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009572:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009576:	69f9      	ldr	r1, [r7, #28]
 8009578:	6938      	ldr	r0, [r7, #16]
 800957a:	f7ff fe4f 	bl	800921c <put_fat>
 800957e:	4603      	mov	r3, r0
 8009580:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009582:	7dfb      	ldrb	r3, [r7, #23]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d109      	bne.n	800959c <create_chain+0xe2>
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d006      	beq.n	800959c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800958e:	69fa      	ldr	r2, [r7, #28]
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	6938      	ldr	r0, [r7, #16]
 8009594:	f7ff fe42 	bl	800921c <put_fat>
 8009598:	4603      	mov	r3, r0
 800959a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d116      	bne.n	80095d0 <create_chain+0x116>
		fs->last_clst = ncl;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	69fa      	ldr	r2, [r7, #28]
 80095a6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	695a      	ldr	r2, [r3, #20]
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	3b02      	subs	r3, #2
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d804      	bhi.n	80095c0 <create_chain+0x106>
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	1e5a      	subs	r2, r3, #1
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	791b      	ldrb	r3, [r3, #4]
 80095c4:	f043 0301 	orr.w	r3, r3, #1
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	711a      	strb	r2, [r3, #4]
 80095ce:	e007      	b.n	80095e0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80095d0:	7dfb      	ldrb	r3, [r7, #23]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d102      	bne.n	80095dc <create_chain+0x122>
 80095d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80095da:	e000      	b.n	80095de <create_chain+0x124>
 80095dc:	2301      	movs	r3, #1
 80095de:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80095e0:	69fb      	ldr	r3, [r7, #28]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3720      	adds	r7, #32
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b087      	sub	sp, #28
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fe:	3304      	adds	r3, #4
 8009600:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	0a5b      	lsrs	r3, r3, #9
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	8952      	ldrh	r2, [r2, #10]
 800960a:	fbb3 f3f2 	udiv	r3, r3, r2
 800960e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	1d1a      	adds	r2, r3, #4
 8009614:	613a      	str	r2, [r7, #16]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <clmt_clust+0x3a>
 8009620:	2300      	movs	r3, #0
 8009622:	e010      	b.n	8009646 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	429a      	cmp	r2, r3
 800962a:	d307      	bcc.n	800963c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800962c:	697a      	ldr	r2, [r7, #20]
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	3304      	adds	r3, #4
 8009638:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800963a:	e7e9      	b.n	8009610 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800963c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	4413      	add	r3, r2
}
 8009646:	4618      	mov	r0, r3
 8009648:	371c      	adds	r7, #28
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b086      	sub	sp, #24
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009668:	d204      	bcs.n	8009674 <dir_sdi+0x22>
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	f003 031f 	and.w	r3, r3, #31
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009674:	2302      	movs	r3, #2
 8009676:	e063      	b.n	8009740 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d106      	bne.n	8009698 <dir_sdi+0x46>
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	2b02      	cmp	r3, #2
 8009690:	d902      	bls.n	8009698 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009696:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10c      	bne.n	80096b8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	095b      	lsrs	r3, r3, #5
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	8912      	ldrh	r2, [r2, #8]
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d301      	bcc.n	80096ae <dir_sdi+0x5c>
 80096aa:	2302      	movs	r3, #2
 80096ac:	e048      	b.n	8009740 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	61da      	str	r2, [r3, #28]
 80096b6:	e029      	b.n	800970c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	895b      	ldrh	r3, [r3, #10]
 80096bc:	025b      	lsls	r3, r3, #9
 80096be:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80096c0:	e019      	b.n	80096f6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6979      	ldr	r1, [r7, #20]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7ff fd01 	bl	80090ce <get_fat>
 80096cc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096d4:	d101      	bne.n	80096da <dir_sdi+0x88>
 80096d6:	2301      	movs	r3, #1
 80096d8:	e032      	b.n	8009740 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d904      	bls.n	80096ea <dir_sdi+0x98>
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	697a      	ldr	r2, [r7, #20]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d301      	bcc.n	80096ee <dir_sdi+0x9c>
 80096ea:	2302      	movs	r3, #2
 80096ec:	e028      	b.n	8009740 <dir_sdi+0xee>
			ofs -= csz;
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d2e1      	bcs.n	80096c2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80096fe:	6979      	ldr	r1, [r7, #20]
 8009700:	6938      	ldr	r0, [r7, #16]
 8009702:	f7ff fcc5 	bl	8009090 <clust2sect>
 8009706:	4602      	mov	r2, r0
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <dir_sdi+0xcc>
 800971a:	2302      	movs	r3, #2
 800971c:	e010      	b.n	8009740 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	69da      	ldr	r2, [r3, #28]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	0a5b      	lsrs	r3, r3, #9
 8009726:	441a      	add	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009738:	441a      	add	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3718      	adds	r7, #24
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	3320      	adds	r3, #32
 800975e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d003      	beq.n	8009770 <dir_next+0x28>
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800976e:	d301      	bcc.n	8009774 <dir_next+0x2c>
 8009770:	2304      	movs	r3, #4
 8009772:	e0aa      	b.n	80098ca <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800977a:	2b00      	cmp	r3, #0
 800977c:	f040 8098 	bne.w	80098b0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	69db      	ldr	r3, [r3, #28]
 8009784:	1c5a      	adds	r2, r3, #1
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10b      	bne.n	80097aa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	095b      	lsrs	r3, r3, #5
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	8912      	ldrh	r2, [r2, #8]
 800979a:	4293      	cmp	r3, r2
 800979c:	f0c0 8088 	bcc.w	80098b0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	61da      	str	r2, [r3, #28]
 80097a6:	2304      	movs	r3, #4
 80097a8:	e08f      	b.n	80098ca <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	0a5b      	lsrs	r3, r3, #9
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	8952      	ldrh	r2, [r2, #10]
 80097b2:	3a01      	subs	r2, #1
 80097b4:	4013      	ands	r3, r2
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d17a      	bne.n	80098b0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	4619      	mov	r1, r3
 80097c2:	4610      	mov	r0, r2
 80097c4:	f7ff fc83 	bl	80090ce <get_fat>
 80097c8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d801      	bhi.n	80097d4 <dir_next+0x8c>
 80097d0:	2302      	movs	r3, #2
 80097d2:	e07a      	b.n	80098ca <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097da:	d101      	bne.n	80097e0 <dir_next+0x98>
 80097dc:	2301      	movs	r3, #1
 80097de:	e074      	b.n	80098ca <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d358      	bcc.n	800989c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d104      	bne.n	80097fa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	61da      	str	r2, [r3, #28]
 80097f6:	2304      	movs	r3, #4
 80097f8:	e067      	b.n	80098ca <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	4619      	mov	r1, r3
 8009802:	4610      	mov	r0, r2
 8009804:	f7ff fe59 	bl	80094ba <create_chain>
 8009808:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <dir_next+0xcc>
 8009810:	2307      	movs	r3, #7
 8009812:	e05a      	b.n	80098ca <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d101      	bne.n	800981e <dir_next+0xd6>
 800981a:	2302      	movs	r3, #2
 800981c:	e055      	b.n	80098ca <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009824:	d101      	bne.n	800982a <dir_next+0xe2>
 8009826:	2301      	movs	r3, #1
 8009828:	e04f      	b.n	80098ca <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f7ff fb50 	bl	8008ed0 <sync_window>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <dir_next+0xf2>
 8009836:	2301      	movs	r3, #1
 8009838:	e047      	b.n	80098ca <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3334      	adds	r3, #52	@ 0x34
 800983e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009842:	2100      	movs	r1, #0
 8009844:	4618      	mov	r0, r3
 8009846:	f7ff f948 	bl	8008ada <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800984a:	2300      	movs	r3, #0
 800984c:	613b      	str	r3, [r7, #16]
 800984e:	6979      	ldr	r1, [r7, #20]
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f7ff fc1d 	bl	8009090 <clust2sect>
 8009856:	4602      	mov	r2, r0
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	631a      	str	r2, [r3, #48]	@ 0x30
 800985c:	e012      	b.n	8009884 <dir_next+0x13c>
						fs->wflag = 1;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2201      	movs	r2, #1
 8009862:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f7ff fb33 	bl	8008ed0 <sync_window>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <dir_next+0x12c>
 8009870:	2301      	movs	r3, #1
 8009872:	e02a      	b.n	80098ca <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	3301      	adds	r3, #1
 8009878:	613b      	str	r3, [r7, #16]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800987e:	1c5a      	adds	r2, r3, #1
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	631a      	str	r2, [r3, #48]	@ 0x30
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	895b      	ldrh	r3, [r3, #10]
 8009888:	461a      	mov	r2, r3
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	4293      	cmp	r3, r2
 800988e:	d3e6      	bcc.n	800985e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	1ad2      	subs	r2, r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80098a2:	6979      	ldr	r1, [r7, #20]
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f7ff fbf3 	bl	8009090 <clust2sect>
 80098aa:	4602      	mov	r2, r0
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098c2:	441a      	add	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b086      	sub	sp, #24
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80098e2:	2100      	movs	r1, #0
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7ff feb4 	bl	8009652 <dir_sdi>
 80098ea:	4603      	mov	r3, r0
 80098ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d12b      	bne.n	800994c <dir_alloc+0x7a>
		n = 0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	4619      	mov	r1, r3
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f7ff fb2a 	bl	8008f58 <move_window>
 8009904:	4603      	mov	r3, r0
 8009906:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009908:	7dfb      	ldrb	r3, [r7, #23]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d11d      	bne.n	800994a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	2be5      	cmp	r3, #229	@ 0xe5
 8009916:	d004      	beq.n	8009922 <dir_alloc+0x50>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a1b      	ldr	r3, [r3, #32]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d107      	bne.n	8009932 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	3301      	adds	r3, #1
 8009926:	613b      	str	r3, [r7, #16]
 8009928:	693a      	ldr	r2, [r7, #16]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	429a      	cmp	r2, r3
 800992e:	d102      	bne.n	8009936 <dir_alloc+0x64>
 8009930:	e00c      	b.n	800994c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009932:	2300      	movs	r3, #0
 8009934:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009936:	2101      	movs	r1, #1
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff ff05 	bl	8009748 <dir_next>
 800993e:	4603      	mov	r3, r0
 8009940:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009942:	7dfb      	ldrb	r3, [r7, #23]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d0d7      	beq.n	80098f8 <dir_alloc+0x26>
 8009948:	e000      	b.n	800994c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800994a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800994c:	7dfb      	ldrb	r3, [r7, #23]
 800994e:	2b04      	cmp	r3, #4
 8009950:	d101      	bne.n	8009956 <dir_alloc+0x84>
 8009952:	2307      	movs	r3, #7
 8009954:	75fb      	strb	r3, [r7, #23]
	return res;
 8009956:	7dfb      	ldrb	r3, [r7, #23]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3718      	adds	r7, #24
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	331a      	adds	r3, #26
 800996e:	4618      	mov	r0, r3
 8009970:	f7ff f810 	bl	8008994 <ld_word>
 8009974:	4603      	mov	r3, r0
 8009976:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	2b03      	cmp	r3, #3
 800997e:	d109      	bne.n	8009994 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	3314      	adds	r3, #20
 8009984:	4618      	mov	r0, r3
 8009986:	f7ff f805 	bl	8008994 <ld_word>
 800998a:	4603      	mov	r3, r0
 800998c:	041b      	lsls	r3, r3, #16
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	4313      	orrs	r3, r2
 8009992:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009994:	68fb      	ldr	r3, [r7, #12]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	331a      	adds	r3, #26
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	b292      	uxth	r2, r2
 80099b2:	4611      	mov	r1, r2
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7ff f828 	bl	8008a0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2b03      	cmp	r3, #3
 80099c0:	d109      	bne.n	80099d6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	f103 0214 	add.w	r2, r3, #20
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	0c1b      	lsrs	r3, r3, #16
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	4619      	mov	r1, r3
 80099d0:	4610      	mov	r0, r2
 80099d2:	f7ff f81a 	bl	8008a0a <st_word>
	}
}
 80099d6:	bf00      	nop
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b086      	sub	sp, #24
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80099ec:	2100      	movs	r1, #0
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f7ff fe2f 	bl	8009652 <dir_sdi>
 80099f4:	4603      	mov	r3, r0
 80099f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <dir_find+0x24>
 80099fe:	7dfb      	ldrb	r3, [r7, #23]
 8009a00:	e03e      	b.n	8009a80 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	4619      	mov	r1, r3
 8009a08:	6938      	ldr	r0, [r7, #16]
 8009a0a:	f7ff faa5 	bl	8008f58 <move_window>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d12f      	bne.n	8009a78 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <dir_find+0x4e>
 8009a26:	2304      	movs	r3, #4
 8009a28:	75fb      	strb	r3, [r7, #23]
 8009a2a:	e028      	b.n	8009a7e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a1b      	ldr	r3, [r3, #32]
 8009a30:	330b      	adds	r3, #11
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	330b      	adds	r3, #11
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	f003 0308 	and.w	r3, r3, #8
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10a      	bne.n	8009a64 <dir_find+0x86>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a18      	ldr	r0, [r3, #32]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	3324      	adds	r3, #36	@ 0x24
 8009a56:	220b      	movs	r2, #11
 8009a58:	4619      	mov	r1, r3
 8009a5a:	f7ff f859 	bl	8008b10 <mem_cmp>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00b      	beq.n	8009a7c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009a64:	2100      	movs	r1, #0
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f7ff fe6e 	bl	8009748 <dir_next>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009a70:	7dfb      	ldrb	r3, [r7, #23]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d0c5      	beq.n	8009a02 <dir_find+0x24>
 8009a76:	e002      	b.n	8009a7e <dir_find+0xa0>
		if (res != FR_OK) break;
 8009a78:	bf00      	nop
 8009a7a:	e000      	b.n	8009a7e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009a7c:	bf00      	nop

	return res;
 8009a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009a96:	2101      	movs	r1, #1
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f7ff ff1a 	bl	80098d2 <dir_alloc>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009aa2:	7bfb      	ldrb	r3, [r7, #15]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d11c      	bne.n	8009ae2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	69db      	ldr	r3, [r3, #28]
 8009aac:	4619      	mov	r1, r3
 8009aae:	68b8      	ldr	r0, [r7, #8]
 8009ab0:	f7ff fa52 	bl	8008f58 <move_window>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d111      	bne.n	8009ae2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7ff f807 	bl	8008ada <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a18      	ldr	r0, [r3, #32]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	3324      	adds	r3, #36	@ 0x24
 8009ad4:	220b      	movs	r2, #11
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	f7fe ffde 	bl	8008a98 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b088      	sub	sp, #32
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	3324      	adds	r3, #36	@ 0x24
 8009b00:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009b02:	220b      	movs	r2, #11
 8009b04:	2120      	movs	r1, #32
 8009b06:	68b8      	ldr	r0, [r7, #8]
 8009b08:	f7fe ffe7 	bl	8008ada <mem_set>
	si = i = 0; ni = 8;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	613b      	str	r3, [r7, #16]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	61fb      	str	r3, [r7, #28]
 8009b14:	2308      	movs	r3, #8
 8009b16:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	1c5a      	adds	r2, r3, #1
 8009b1c:	61fa      	str	r2, [r7, #28]
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	4413      	add	r3, r2
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009b26:	7efb      	ldrb	r3, [r7, #27]
 8009b28:	2b20      	cmp	r3, #32
 8009b2a:	d94e      	bls.n	8009bca <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009b2c:	7efb      	ldrb	r3, [r7, #27]
 8009b2e:	2b2f      	cmp	r3, #47	@ 0x2f
 8009b30:	d006      	beq.n	8009b40 <create_name+0x54>
 8009b32:	7efb      	ldrb	r3, [r7, #27]
 8009b34:	2b5c      	cmp	r3, #92	@ 0x5c
 8009b36:	d110      	bne.n	8009b5a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009b38:	e002      	b.n	8009b40 <create_name+0x54>
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	61fb      	str	r3, [r7, #28]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	4413      	add	r3, r2
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	2b2f      	cmp	r3, #47	@ 0x2f
 8009b4a:	d0f6      	beq.n	8009b3a <create_name+0x4e>
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	4413      	add	r3, r2
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2b5c      	cmp	r3, #92	@ 0x5c
 8009b56:	d0f0      	beq.n	8009b3a <create_name+0x4e>
			break;
 8009b58:	e038      	b.n	8009bcc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009b5a:	7efb      	ldrb	r3, [r7, #27]
 8009b5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b5e:	d003      	beq.n	8009b68 <create_name+0x7c>
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d30c      	bcc.n	8009b82 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	2b0b      	cmp	r3, #11
 8009b6c:	d002      	beq.n	8009b74 <create_name+0x88>
 8009b6e:	7efb      	ldrb	r3, [r7, #27]
 8009b70:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b72:	d001      	beq.n	8009b78 <create_name+0x8c>
 8009b74:	2306      	movs	r3, #6
 8009b76:	e044      	b.n	8009c02 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009b78:	2308      	movs	r3, #8
 8009b7a:	613b      	str	r3, [r7, #16]
 8009b7c:	230b      	movs	r3, #11
 8009b7e:	617b      	str	r3, [r7, #20]
			continue;
 8009b80:	e022      	b.n	8009bc8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009b82:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	da04      	bge.n	8009b94 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009b8a:	7efb      	ldrb	r3, [r7, #27]
 8009b8c:	3b80      	subs	r3, #128	@ 0x80
 8009b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8009c0c <create_name+0x120>)
 8009b90:	5cd3      	ldrb	r3, [r2, r3]
 8009b92:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009b94:	7efb      	ldrb	r3, [r7, #27]
 8009b96:	4619      	mov	r1, r3
 8009b98:	481d      	ldr	r0, [pc, #116]	@ (8009c10 <create_name+0x124>)
 8009b9a:	f7fe ffe0 	bl	8008b5e <chk_chr>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <create_name+0xbc>
 8009ba4:	2306      	movs	r3, #6
 8009ba6:	e02c      	b.n	8009c02 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009ba8:	7efb      	ldrb	r3, [r7, #27]
 8009baa:	2b60      	cmp	r3, #96	@ 0x60
 8009bac:	d905      	bls.n	8009bba <create_name+0xce>
 8009bae:	7efb      	ldrb	r3, [r7, #27]
 8009bb0:	2b7a      	cmp	r3, #122	@ 0x7a
 8009bb2:	d802      	bhi.n	8009bba <create_name+0xce>
 8009bb4:	7efb      	ldrb	r3, [r7, #27]
 8009bb6:	3b20      	subs	r3, #32
 8009bb8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	1c5a      	adds	r2, r3, #1
 8009bbe:	613a      	str	r2, [r7, #16]
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	7efa      	ldrb	r2, [r7, #27]
 8009bc6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009bc8:	e7a6      	b.n	8009b18 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009bca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	441a      	add	r2, r3
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <create_name+0xf4>
 8009bdc:	2306      	movs	r3, #6
 8009bde:	e010      	b.n	8009c02 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	2be5      	cmp	r3, #229	@ 0xe5
 8009be6:	d102      	bne.n	8009bee <create_name+0x102>
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2205      	movs	r2, #5
 8009bec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009bee:	7efb      	ldrb	r3, [r7, #27]
 8009bf0:	2b20      	cmp	r3, #32
 8009bf2:	d801      	bhi.n	8009bf8 <create_name+0x10c>
 8009bf4:	2204      	movs	r2, #4
 8009bf6:	e000      	b.n	8009bfa <create_name+0x10e>
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	330b      	adds	r3, #11
 8009bfe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009c00:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3720      	adds	r7, #32
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	08010ba0 	.word	0x08010ba0
 8009c10:	08010b3c 	.word	0x08010b3c

08009c14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009c28:	e002      	b.n	8009c30 <follow_path+0x1c>
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	603b      	str	r3, [r7, #0]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	2b2f      	cmp	r3, #47	@ 0x2f
 8009c36:	d0f8      	beq.n	8009c2a <follow_path+0x16>
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009c3e:	d0f4      	beq.n	8009c2a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	2200      	movs	r2, #0
 8009c44:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	2b1f      	cmp	r3, #31
 8009c4c:	d80a      	bhi.n	8009c64 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2280      	movs	r2, #128	@ 0x80
 8009c52:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009c56:	2100      	movs	r1, #0
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7ff fcfa 	bl	8009652 <dir_sdi>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	75fb      	strb	r3, [r7, #23]
 8009c62:	e043      	b.n	8009cec <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c64:	463b      	mov	r3, r7
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7ff ff3f 	bl	8009aec <create_name>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d134      	bne.n	8009ce2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f7ff feb0 	bl	80099de <dir_find>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009c88:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009c8a:	7dfb      	ldrb	r3, [r7, #23]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00a      	beq.n	8009ca6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009c90:	7dfb      	ldrb	r3, [r7, #23]
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	d127      	bne.n	8009ce6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009c96:	7afb      	ldrb	r3, [r7, #11]
 8009c98:	f003 0304 	and.w	r3, r3, #4
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d122      	bne.n	8009ce6 <follow_path+0xd2>
 8009ca0:	2305      	movs	r3, #5
 8009ca2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009ca4:	e01f      	b.n	8009ce6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009ca6:	7afb      	ldrb	r3, [r7, #11]
 8009ca8:	f003 0304 	and.w	r3, r3, #4
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d11c      	bne.n	8009cea <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	799b      	ldrb	r3, [r3, #6]
 8009cb4:	f003 0310 	and.w	r3, r3, #16
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d102      	bne.n	8009cc2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009cbc:	2305      	movs	r3, #5
 8009cbe:	75fb      	strb	r3, [r7, #23]
 8009cc0:	e014      	b.n	8009cec <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	695b      	ldr	r3, [r3, #20]
 8009ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd0:	4413      	add	r3, r2
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f7ff fe43 	bl	8009960 <ld_clust>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ce0:	e7c0      	b.n	8009c64 <follow_path+0x50>
			if (res != FR_OK) break;
 8009ce2:	bf00      	nop
 8009ce4:	e002      	b.n	8009cec <follow_path+0xd8>
				break;
 8009ce6:	bf00      	nop
 8009ce8:	e000      	b.n	8009cec <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009cea:	bf00      	nop
			}
		}
	}

	return res;
 8009cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3718      	adds	r7, #24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b087      	sub	sp, #28
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009cfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d02:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d031      	beq.n	8009d70 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	617b      	str	r3, [r7, #20]
 8009d12:	e002      	b.n	8009d1a <get_ldnumber+0x24>
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	3301      	adds	r3, #1
 8009d18:	617b      	str	r3, [r7, #20]
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	2b20      	cmp	r3, #32
 8009d20:	d903      	bls.n	8009d2a <get_ldnumber+0x34>
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2b3a      	cmp	r3, #58	@ 0x3a
 8009d28:	d1f4      	bne.n	8009d14 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2b3a      	cmp	r3, #58	@ 0x3a
 8009d30:	d11c      	bne.n	8009d6c <get_ldnumber+0x76>
			tp = *path;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	1c5a      	adds	r2, r3, #1
 8009d3c:	60fa      	str	r2, [r7, #12]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	3b30      	subs	r3, #48	@ 0x30
 8009d42:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2b09      	cmp	r3, #9
 8009d48:	d80e      	bhi.n	8009d68 <get_ldnumber+0x72>
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d10a      	bne.n	8009d68 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d107      	bne.n	8009d68 <get_ldnumber+0x72>
					vol = (int)i;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	617b      	str	r3, [r7, #20]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	e002      	b.n	8009d72 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009d70:	693b      	ldr	r3, [r7, #16]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	371c      	adds	r7, #28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
	...

08009d80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	70da      	strb	r2, [r3, #3]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d96:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff f8dc 	bl	8008f58 <move_window>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <check_fs+0x2a>
 8009da6:	2304      	movs	r3, #4
 8009da8:	e038      	b.n	8009e1c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	3334      	adds	r3, #52	@ 0x34
 8009dae:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe fdee 	bl	8008994 <ld_word>
 8009db8:	4603      	mov	r3, r0
 8009dba:	461a      	mov	r2, r3
 8009dbc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d001      	beq.n	8009dc8 <check_fs+0x48>
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e029      	b.n	8009e1c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009dce:	2be9      	cmp	r3, #233	@ 0xe9
 8009dd0:	d009      	beq.n	8009de6 <check_fs+0x66>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009dd8:	2beb      	cmp	r3, #235	@ 0xeb
 8009dda:	d11e      	bne.n	8009e1a <check_fs+0x9a>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009de2:	2b90      	cmp	r3, #144	@ 0x90
 8009de4:	d119      	bne.n	8009e1a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3334      	adds	r3, #52	@ 0x34
 8009dea:	3336      	adds	r3, #54	@ 0x36
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7fe fde9 	bl	80089c4 <ld_dword>
 8009df2:	4603      	mov	r3, r0
 8009df4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009df8:	4a0a      	ldr	r2, [pc, #40]	@ (8009e24 <check_fs+0xa4>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d101      	bne.n	8009e02 <check_fs+0x82>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	e00c      	b.n	8009e1c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	3334      	adds	r3, #52	@ 0x34
 8009e06:	3352      	adds	r3, #82	@ 0x52
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fe fddb 	bl	80089c4 <ld_dword>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	4a05      	ldr	r2, [pc, #20]	@ (8009e28 <check_fs+0xa8>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d101      	bne.n	8009e1a <check_fs+0x9a>
 8009e16:	2300      	movs	r3, #0
 8009e18:	e000      	b.n	8009e1c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009e1a:	2302      	movs	r3, #2
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	00544146 	.word	0x00544146
 8009e28:	33544146 	.word	0x33544146

08009e2c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b096      	sub	sp, #88	@ 0x58
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	4613      	mov	r3, r2
 8009e38:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f7ff ff58 	bl	8009cf6 <get_ldnumber>
 8009e46:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	da01      	bge.n	8009e52 <find_volume+0x26>
 8009e4e:	230b      	movs	r3, #11
 8009e50:	e235      	b.n	800a2be <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009e52:	4aa5      	ldr	r2, [pc, #660]	@ (800a0e8 <find_volume+0x2bc>)
 8009e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d101      	bne.n	8009e66 <find_volume+0x3a>
 8009e62:	230c      	movs	r3, #12
 8009e64:	e22b      	b.n	800a2be <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8009e66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009e68:	f7fe fe94 	bl	8008b94 <lock_fs>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d101      	bne.n	8009e76 <find_volume+0x4a>
 8009e72:	230f      	movs	r3, #15
 8009e74:	e223      	b.n	800a2be <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009e7c:	79fb      	ldrb	r3, [r7, #7]
 8009e7e:	f023 0301 	bic.w	r3, r3, #1
 8009e82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d01a      	beq.n	8009ec2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8e:	785b      	ldrb	r3, [r3, #1]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fe fce1 	bl	8008858 <disk_status>
 8009e96:	4603      	mov	r3, r0
 8009e98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009e9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ea0:	f003 0301 	and.w	r3, r3, #1
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10c      	bne.n	8009ec2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009ea8:	79fb      	ldrb	r3, [r7, #7]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d007      	beq.n	8009ebe <find_volume+0x92>
 8009eae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009eb2:	f003 0304 	and.w	r3, r3, #4
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d001      	beq.n	8009ebe <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009eba:	230a      	movs	r3, #10
 8009ebc:	e1ff      	b.n	800a2be <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	e1fd      	b.n	800a2be <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eca:	b2da      	uxtb	r2, r3
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ece:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed2:	785b      	ldrb	r3, [r3, #1]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fe fcd9 	bl	800888c <disk_initialize>
 8009eda:	4603      	mov	r3, r0
 8009edc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009ee0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009eec:	2303      	movs	r3, #3
 8009eee:	e1e6      	b.n	800a2be <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009ef0:	79fb      	ldrb	r3, [r7, #7]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d007      	beq.n	8009f06 <find_volume+0xda>
 8009ef6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009efa:	f003 0304 	and.w	r3, r3, #4
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009f02:	230a      	movs	r3, #10
 8009f04:	e1db      	b.n	800a2be <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009f0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009f0c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009f0e:	f7ff ff37 	bl	8009d80 <check_fs>
 8009f12:	4603      	mov	r3, r0
 8009f14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009f18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d149      	bne.n	8009fb4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009f20:	2300      	movs	r3, #0
 8009f22:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f24:	e01e      	b.n	8009f64 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f28:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f2e:	011b      	lsls	r3, r3, #4
 8009f30:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009f34:	4413      	add	r3, r2
 8009f36:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d006      	beq.n	8009f50 <find_volume+0x124>
 8009f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f44:	3308      	adds	r3, #8
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fe fd3c 	bl	80089c4 <ld_dword>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	e000      	b.n	8009f52 <find_volume+0x126>
 8009f50:	2200      	movs	r2, #0
 8009f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	3358      	adds	r3, #88	@ 0x58
 8009f58:	443b      	add	r3, r7
 8009f5a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f60:	3301      	adds	r3, #1
 8009f62:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f66:	2b03      	cmp	r3, #3
 8009f68:	d9dd      	bls.n	8009f26 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d002      	beq.n	8009f7a <find_volume+0x14e>
 8009f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f76:	3b01      	subs	r3, #1
 8009f78:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	3358      	adds	r3, #88	@ 0x58
 8009f80:	443b      	add	r3, r7
 8009f82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009f86:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009f88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d005      	beq.n	8009f9a <find_volume+0x16e>
 8009f8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009f90:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009f92:	f7ff fef5 	bl	8009d80 <check_fs>
 8009f96:	4603      	mov	r3, r0
 8009f98:	e000      	b.n	8009f9c <find_volume+0x170>
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009fa0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d905      	bls.n	8009fb4 <find_volume+0x188>
 8009fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009faa:	3301      	adds	r3, #1
 8009fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fb0:	2b03      	cmp	r3, #3
 8009fb2:	d9e2      	bls.n	8009f7a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009fb4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009fb8:	2b04      	cmp	r3, #4
 8009fba:	d101      	bne.n	8009fc0 <find_volume+0x194>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e17e      	b.n	800a2be <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d901      	bls.n	8009fcc <find_volume+0x1a0>
 8009fc8:	230d      	movs	r3, #13
 8009fca:	e178      	b.n	800a2be <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fce:	3334      	adds	r3, #52	@ 0x34
 8009fd0:	330b      	adds	r3, #11
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fe fcde 	bl	8008994 <ld_word>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fde:	d001      	beq.n	8009fe4 <find_volume+0x1b8>
 8009fe0:	230d      	movs	r3, #13
 8009fe2:	e16c      	b.n	800a2be <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe6:	3334      	adds	r3, #52	@ 0x34
 8009fe8:	3316      	adds	r3, #22
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fe fcd2 	bl	8008994 <ld_word>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d106      	bne.n	800a008 <find_volume+0x1dc>
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffc:	3334      	adds	r3, #52	@ 0x34
 8009ffe:	3324      	adds	r3, #36	@ 0x24
 800a000:	4618      	mov	r0, r3
 800a002:	f7fe fcdf 	bl	80089c4 <ld_dword>
 800a006:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a00c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a010:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a016:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01a:	789b      	ldrb	r3, [r3, #2]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d005      	beq.n	800a02c <find_volume+0x200>
 800a020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a022:	789b      	ldrb	r3, [r3, #2]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d001      	beq.n	800a02c <find_volume+0x200>
 800a028:	230d      	movs	r3, #13
 800a02a:	e148      	b.n	800a2be <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02e:	789b      	ldrb	r3, [r3, #2]
 800a030:	461a      	mov	r2, r3
 800a032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a034:	fb02 f303 	mul.w	r3, r2, r3
 800a038:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a040:	461a      	mov	r2, r3
 800a042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a044:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a048:	895b      	ldrh	r3, [r3, #10]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d008      	beq.n	800a060 <find_volume+0x234>
 800a04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a050:	895b      	ldrh	r3, [r3, #10]
 800a052:	461a      	mov	r2, r3
 800a054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a056:	895b      	ldrh	r3, [r3, #10]
 800a058:	3b01      	subs	r3, #1
 800a05a:	4013      	ands	r3, r2
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d001      	beq.n	800a064 <find_volume+0x238>
 800a060:	230d      	movs	r3, #13
 800a062:	e12c      	b.n	800a2be <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a066:	3334      	adds	r3, #52	@ 0x34
 800a068:	3311      	adds	r3, #17
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe fc92 	bl	8008994 <ld_word>
 800a070:	4603      	mov	r3, r0
 800a072:	461a      	mov	r2, r3
 800a074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a076:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07a:	891b      	ldrh	r3, [r3, #8]
 800a07c:	f003 030f 	and.w	r3, r3, #15
 800a080:	b29b      	uxth	r3, r3
 800a082:	2b00      	cmp	r3, #0
 800a084:	d001      	beq.n	800a08a <find_volume+0x25e>
 800a086:	230d      	movs	r3, #13
 800a088:	e119      	b.n	800a2be <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08c:	3334      	adds	r3, #52	@ 0x34
 800a08e:	3313      	adds	r3, #19
 800a090:	4618      	mov	r0, r3
 800a092:	f7fe fc7f 	bl	8008994 <ld_word>
 800a096:	4603      	mov	r3, r0
 800a098:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a09a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d106      	bne.n	800a0ae <find_volume+0x282>
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a2:	3334      	adds	r3, #52	@ 0x34
 800a0a4:	3320      	adds	r3, #32
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fe fc8c 	bl	80089c4 <ld_dword>
 800a0ac:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b0:	3334      	adds	r3, #52	@ 0x34
 800a0b2:	330e      	adds	r3, #14
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fe fc6d 	bl	8008994 <ld_word>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a0be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <find_volume+0x29c>
 800a0c4:	230d      	movs	r3, #13
 800a0c6:	e0fa      	b.n	800a2be <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a0c8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a0ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0cc:	4413      	add	r3, r2
 800a0ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0d0:	8912      	ldrh	r2, [r2, #8]
 800a0d2:	0912      	lsrs	r2, r2, #4
 800a0d4:	b292      	uxth	r2, r2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a0da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d204      	bcs.n	800a0ec <find_volume+0x2c0>
 800a0e2:	230d      	movs	r3, #13
 800a0e4:	e0eb      	b.n	800a2be <find_volume+0x492>
 800a0e6:	bf00      	nop
 800a0e8:	20000f0c 	.word	0x20000f0c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a0ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0f4:	8952      	ldrh	r2, [r2, #10]
 800a0f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0fa:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <find_volume+0x2da>
 800a102:	230d      	movs	r3, #13
 800a104:	e0db      	b.n	800a2be <find_volume+0x492>
		fmt = FS_FAT32;
 800a106:	2303      	movs	r3, #3
 800a108:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a112:	4293      	cmp	r3, r2
 800a114:	d802      	bhi.n	800a11c <find_volume+0x2f0>
 800a116:	2302      	movs	r3, #2
 800a118:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a122:	4293      	cmp	r3, r2
 800a124:	d802      	bhi.n	800a12c <find_volume+0x300>
 800a126:	2301      	movs	r3, #1
 800a128:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12e:	1c9a      	adds	r2, r3, #2
 800a130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a132:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a136:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a138:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a13a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a13c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a13e:	441a      	add	r2, r3
 800a140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a142:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a144:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a148:	441a      	add	r2, r3
 800a14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a14c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800a14e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a152:	2b03      	cmp	r3, #3
 800a154:	d11e      	bne.n	800a194 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a158:	3334      	adds	r3, #52	@ 0x34
 800a15a:	332a      	adds	r3, #42	@ 0x2a
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7fe fc19 	bl	8008994 <ld_word>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d001      	beq.n	800a16c <find_volume+0x340>
 800a168:	230d      	movs	r3, #13
 800a16a:	e0a8      	b.n	800a2be <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16e:	891b      	ldrh	r3, [r3, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d001      	beq.n	800a178 <find_volume+0x34c>
 800a174:	230d      	movs	r3, #13
 800a176:	e0a2      	b.n	800a2be <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17a:	3334      	adds	r3, #52	@ 0x34
 800a17c:	332c      	adds	r3, #44	@ 0x2c
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe fc20 	bl	80089c4 <ld_dword>
 800a184:	4602      	mov	r2, r0
 800a186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a188:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	647b      	str	r3, [r7, #68]	@ 0x44
 800a192:	e01f      	b.n	800a1d4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a196:	891b      	ldrh	r3, [r3, #8]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <find_volume+0x374>
 800a19c:	230d      	movs	r3, #13
 800a19e:	e08e      	b.n	800a2be <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1a6:	441a      	add	r2, r3
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1aa:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a1ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d103      	bne.n	800a1bc <find_volume+0x390>
 800a1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	005b      	lsls	r3, r3, #1
 800a1ba:	e00a      	b.n	800a1d2 <find_volume+0x3a6>
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1be:	699a      	ldr	r2, [r3, #24]
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	005b      	lsls	r3, r3, #1
 800a1c4:	4413      	add	r3, r2
 800a1c6:	085a      	lsrs	r2, r3, #1
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	f003 0301 	and.w	r3, r3, #1
 800a1d0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a1d2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d6:	69da      	ldr	r2, [r3, #28]
 800a1d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1da:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800a1de:	0a5b      	lsrs	r3, r3, #9
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d201      	bcs.n	800a1e8 <find_volume+0x3bc>
 800a1e4:	230d      	movs	r3, #13
 800a1e6:	e06a      	b.n	800a2be <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a1ee:	615a      	str	r2, [r3, #20]
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f2:	695a      	ldr	r2, [r3, #20]
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1fa:	2280      	movs	r2, #128	@ 0x80
 800a1fc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a1fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a202:	2b03      	cmp	r3, #3
 800a204:	d149      	bne.n	800a29a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a208:	3334      	adds	r3, #52	@ 0x34
 800a20a:	3330      	adds	r3, #48	@ 0x30
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fe fbc1 	bl	8008994 <ld_word>
 800a212:	4603      	mov	r3, r0
 800a214:	2b01      	cmp	r3, #1
 800a216:	d140      	bne.n	800a29a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a21a:	3301      	adds	r3, #1
 800a21c:	4619      	mov	r1, r3
 800a21e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a220:	f7fe fe9a 	bl	8008f58 <move_window>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d137      	bne.n	800a29a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800a22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22c:	2200      	movs	r2, #0
 800a22e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a232:	3334      	adds	r3, #52	@ 0x34
 800a234:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fe fbab 	bl	8008994 <ld_word>
 800a23e:	4603      	mov	r3, r0
 800a240:	461a      	mov	r2, r3
 800a242:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a246:	429a      	cmp	r2, r3
 800a248:	d127      	bne.n	800a29a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a24c:	3334      	adds	r3, #52	@ 0x34
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fe fbb8 	bl	80089c4 <ld_dword>
 800a254:	4603      	mov	r3, r0
 800a256:	4a1c      	ldr	r2, [pc, #112]	@ (800a2c8 <find_volume+0x49c>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d11e      	bne.n	800a29a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25e:	3334      	adds	r3, #52	@ 0x34
 800a260:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a264:	4618      	mov	r0, r3
 800a266:	f7fe fbad 	bl	80089c4 <ld_dword>
 800a26a:	4603      	mov	r3, r0
 800a26c:	4a17      	ldr	r2, [pc, #92]	@ (800a2cc <find_volume+0x4a0>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d113      	bne.n	800a29a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a274:	3334      	adds	r3, #52	@ 0x34
 800a276:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fe fba2 	bl	80089c4 <ld_dword>
 800a280:	4602      	mov	r2, r0
 800a282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a284:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a288:	3334      	adds	r3, #52	@ 0x34
 800a28a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fe fb98 	bl	80089c4 <ld_dword>
 800a294:	4602      	mov	r2, r0
 800a296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a298:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a29c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a2a0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a2a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a2d0 <find_volume+0x4a4>)
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	4b09      	ldr	r3, [pc, #36]	@ (800a2d0 <find_volume+0x4a4>)
 800a2ac:	801a      	strh	r2, [r3, #0]
 800a2ae:	4b08      	ldr	r3, [pc, #32]	@ (800a2d0 <find_volume+0x4a4>)
 800a2b0:	881a      	ldrh	r2, [r3, #0]
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a2b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a2b8:	f7fe fde6 	bl	8008e88 <clear_lock>
#endif
	return FR_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3758      	adds	r7, #88	@ 0x58
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	41615252 	.word	0x41615252
 800a2cc:	61417272 	.word	0x61417272
 800a2d0:	20000f10 	.word	0x20000f10

0800a2d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a2de:	2309      	movs	r3, #9
 800a2e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d02e      	beq.n	800a346 <validate+0x72>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d02a      	beq.n	800a346 <validate+0x72>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d025      	beq.n	800a346 <validate+0x72>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	889a      	ldrh	r2, [r3, #4]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	88db      	ldrh	r3, [r3, #6]
 800a304:	429a      	cmp	r2, r3
 800a306:	d11e      	bne.n	800a346 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fe fc41 	bl	8008b94 <lock_fs>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d014      	beq.n	800a342 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	785b      	ldrb	r3, [r3, #1]
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fe fa9a 	bl	8008858 <disk_status>
 800a324:	4603      	mov	r3, r0
 800a326:	f003 0301 	and.w	r3, r3, #1
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d102      	bne.n	800a334 <validate+0x60>
				res = FR_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	73fb      	strb	r3, [r7, #15]
 800a332:	e008      	b.n	800a346 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2100      	movs	r1, #0
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fe fc40 	bl	8008bc0 <unlock_fs>
 800a340:	e001      	b.n	800a346 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a342:	230f      	movs	r3, #15
 800a344:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d102      	bne.n	800a352 <validate+0x7e>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	e000      	b.n	800a354 <validate+0x80>
 800a352:	2300      	movs	r3, #0
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	6013      	str	r3, [r2, #0]
	return res;
 800a358:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b088      	sub	sp, #32
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	4613      	mov	r3, r2
 800a370:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a376:	f107 0310 	add.w	r3, r7, #16
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff fcbb 	bl	8009cf6 <get_ldnumber>
 800a380:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	2b00      	cmp	r3, #0
 800a386:	da01      	bge.n	800a38c <f_mount+0x28>
 800a388:	230b      	movs	r3, #11
 800a38a:	e048      	b.n	800a41e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a38c:	4a26      	ldr	r2, [pc, #152]	@ (800a428 <f_mount+0xc4>)
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a394:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00f      	beq.n	800a3bc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a39c:	69b8      	ldr	r0, [r7, #24]
 800a39e:	f7fe fd73 	bl	8008e88 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 fd95 	bl	800aed6 <ff_del_syncobj>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d101      	bne.n	800a3b6 <f_mount+0x52>
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	e033      	b.n	800a41e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00f      	beq.n	800a3e2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	b2da      	uxtb	r2, r3
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	330c      	adds	r3, #12
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	f000 fd5f 	bl	800ae96 <ff_cre_syncobj>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d101      	bne.n	800a3e2 <f_mount+0x7e>
 800a3de:	2302      	movs	r3, #2
 800a3e0:	e01d      	b.n	800a41e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	4910      	ldr	r1, [pc, #64]	@ (800a428 <f_mount+0xc4>)
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <f_mount+0x94>
 800a3f2:	79fb      	ldrb	r3, [r7, #7]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d001      	beq.n	800a3fc <f_mount+0x98>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e010      	b.n	800a41e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a3fc:	f107 010c 	add.w	r1, r7, #12
 800a400:	f107 0308 	add.w	r3, r7, #8
 800a404:	2200      	movs	r2, #0
 800a406:	4618      	mov	r0, r3
 800a408:	f7ff fd10 	bl	8009e2c <find_volume>
 800a40c:	4603      	mov	r3, r0
 800a40e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	7dfa      	ldrb	r2, [r7, #23]
 800a414:	4611      	mov	r1, r2
 800a416:	4618      	mov	r0, r3
 800a418:	f7fe fbd2 	bl	8008bc0 <unlock_fs>
 800a41c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3720      	adds	r7, #32
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	20000f0c 	.word	0x20000f0c

0800a42c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b098      	sub	sp, #96	@ 0x60
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	4613      	mov	r3, r2
 800a438:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d101      	bne.n	800a444 <f_open+0x18>
 800a440:	2309      	movs	r3, #9
 800a442:	e1b0      	b.n	800a7a6 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a444:	79fb      	ldrb	r3, [r7, #7]
 800a446:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a44a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a44c:	79fa      	ldrb	r2, [r7, #7]
 800a44e:	f107 0110 	add.w	r1, r7, #16
 800a452:	f107 0308 	add.w	r3, r7, #8
 800a456:	4618      	mov	r0, r3
 800a458:	f7ff fce8 	bl	8009e2c <find_volume>
 800a45c:	4603      	mov	r3, r0
 800a45e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a462:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a466:	2b00      	cmp	r3, #0
 800a468:	f040 818d 	bne.w	800a786 <f_open+0x35a>
		dj.obj.fs = fs;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	f107 0314 	add.w	r3, r7, #20
 800a476:	4611      	mov	r1, r2
 800a478:	4618      	mov	r0, r3
 800a47a:	f7ff fbcb 	bl	8009c14 <follow_path>
 800a47e:	4603      	mov	r3, r0
 800a480:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a484:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d118      	bne.n	800a4be <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a48c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a490:	b25b      	sxtb	r3, r3
 800a492:	2b00      	cmp	r3, #0
 800a494:	da03      	bge.n	800a49e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a496:	2306      	movs	r3, #6
 800a498:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a49c:	e00f      	b.n	800a4be <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a49e:	79fb      	ldrb	r3, [r7, #7]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	bf8c      	ite	hi
 800a4a4:	2301      	movhi	r3, #1
 800a4a6:	2300      	movls	r3, #0
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	f107 0314 	add.w	r3, r7, #20
 800a4b0:	4611      	mov	r1, r2
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe fba0 	bl	8008bf8 <chk_lock>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a4be:	79fb      	ldrb	r3, [r7, #7]
 800a4c0:	f003 031c 	and.w	r3, r3, #28
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d07f      	beq.n	800a5c8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a4c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d017      	beq.n	800a500 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a4d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a4d4:	2b04      	cmp	r3, #4
 800a4d6:	d10e      	bne.n	800a4f6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a4d8:	f7fe fbea 	bl	8008cb0 <enq_lock>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d006      	beq.n	800a4f0 <f_open+0xc4>
 800a4e2:	f107 0314 	add.w	r3, r7, #20
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff face 	bl	8009a88 <dir_register>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	e000      	b.n	800a4f2 <f_open+0xc6>
 800a4f0:	2312      	movs	r3, #18
 800a4f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a4f6:	79fb      	ldrb	r3, [r7, #7]
 800a4f8:	f043 0308 	orr.w	r3, r3, #8
 800a4fc:	71fb      	strb	r3, [r7, #7]
 800a4fe:	e010      	b.n	800a522 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a500:	7ebb      	ldrb	r3, [r7, #26]
 800a502:	f003 0311 	and.w	r3, r3, #17
 800a506:	2b00      	cmp	r3, #0
 800a508:	d003      	beq.n	800a512 <f_open+0xe6>
					res = FR_DENIED;
 800a50a:	2307      	movs	r3, #7
 800a50c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a510:	e007      	b.n	800a522 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	f003 0304 	and.w	r3, r3, #4
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d002      	beq.n	800a522 <f_open+0xf6>
 800a51c:	2308      	movs	r3, #8
 800a51e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a522:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a526:	2b00      	cmp	r3, #0
 800a528:	d168      	bne.n	800a5fc <f_open+0x1d0>
 800a52a:	79fb      	ldrb	r3, [r7, #7]
 800a52c:	f003 0308 	and.w	r3, r3, #8
 800a530:	2b00      	cmp	r3, #0
 800a532:	d063      	beq.n	800a5fc <f_open+0x1d0>
				dw = GET_FATTIME();
 800a534:	f7fc fc78 	bl	8006e28 <get_fattime>
 800a538:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a53a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53c:	330e      	adds	r3, #14
 800a53e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a540:	4618      	mov	r0, r3
 800a542:	f7fe fa7d 	bl	8008a40 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a548:	3316      	adds	r3, #22
 800a54a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fe fa77 	bl	8008a40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a554:	330b      	adds	r3, #11
 800a556:	2220      	movs	r2, #32
 800a558:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a55e:	4611      	mov	r1, r2
 800a560:	4618      	mov	r0, r3
 800a562:	f7ff f9fd 	bl	8009960 <ld_clust>
 800a566:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a56c:	2200      	movs	r2, #0
 800a56e:	4618      	mov	r0, r3
 800a570:	f7ff fa15 	bl	800999e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a576:	331c      	adds	r3, #28
 800a578:	2100      	movs	r1, #0
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fe fa60 	bl	8008a40 <st_dword>
					fs->wflag = 1;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	2201      	movs	r2, #1
 800a584:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d037      	beq.n	800a5fc <f_open+0x1d0>
						dw = fs->winsect;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a590:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a592:	f107 0314 	add.w	r3, r7, #20
 800a596:	2200      	movs	r2, #0
 800a598:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fe ff28 	bl	80093f0 <remove_chain>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a5a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d126      	bne.n	800a5fc <f_open+0x1d0>
							res = move_window(fs, dw);
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fe fcd0 	bl	8008f58 <move_window>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a5c2:	3a01      	subs	r2, #1
 800a5c4:	611a      	str	r2, [r3, #16]
 800a5c6:	e019      	b.n	800a5fc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a5c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d115      	bne.n	800a5fc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a5d0:	7ebb      	ldrb	r3, [r7, #26]
 800a5d2:	f003 0310 	and.w	r3, r3, #16
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d003      	beq.n	800a5e2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800a5da:	2304      	movs	r3, #4
 800a5dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a5e0:	e00c      	b.n	800a5fc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a5e2:	79fb      	ldrb	r3, [r7, #7]
 800a5e4:	f003 0302 	and.w	r3, r3, #2
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d007      	beq.n	800a5fc <f_open+0x1d0>
 800a5ec:	7ebb      	ldrb	r3, [r7, #26]
 800a5ee:	f003 0301 	and.w	r3, r3, #1
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d002      	beq.n	800a5fc <f_open+0x1d0>
						res = FR_DENIED;
 800a5f6:	2307      	movs	r3, #7
 800a5f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a5fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a600:	2b00      	cmp	r3, #0
 800a602:	d126      	bne.n	800a652 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a604:	79fb      	ldrb	r3, [r7, #7]
 800a606:	f003 0308 	and.w	r3, r3, #8
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d003      	beq.n	800a616 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a60e:	79fb      	ldrb	r3, [r7, #7]
 800a610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a614:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a61e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a624:	79fb      	ldrb	r3, [r7, #7]
 800a626:	2b01      	cmp	r3, #1
 800a628:	bf8c      	ite	hi
 800a62a:	2301      	movhi	r3, #1
 800a62c:	2300      	movls	r3, #0
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	461a      	mov	r2, r3
 800a632:	f107 0314 	add.w	r3, r7, #20
 800a636:	4611      	mov	r1, r2
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fe fb5b 	bl	8008cf4 <inc_lock>
 800a63e:	4602      	mov	r2, r0
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d102      	bne.n	800a652 <f_open+0x226>
 800a64c:	2302      	movs	r3, #2
 800a64e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a652:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a656:	2b00      	cmp	r3, #0
 800a658:	f040 8095 	bne.w	800a786 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a660:	4611      	mov	r1, r2
 800a662:	4618      	mov	r0, r3
 800a664:	f7ff f97c 	bl	8009960 <ld_clust>
 800a668:	4602      	mov	r2, r0
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a66e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a670:	331c      	adds	r3, #28
 800a672:	4618      	mov	r0, r3
 800a674:	f7fe f9a6 	bl	80089c4 <ld_dword>
 800a678:	4602      	mov	r2, r0
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a684:	693a      	ldr	r2, [r7, #16]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	88da      	ldrh	r2, [r3, #6]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	79fa      	ldrb	r2, [r7, #7]
 800a696:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	3330      	adds	r3, #48	@ 0x30
 800a6ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fe fa10 	bl	8008ada <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a6ba:	79fb      	ldrb	r3, [r7, #7]
 800a6bc:	f003 0320 	and.w	r3, r3, #32
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d060      	beq.n	800a786 <f_open+0x35a>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d05c      	beq.n	800a786 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	68da      	ldr	r2, [r3, #12]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	895b      	ldrh	r3, [r3, #10]
 800a6d8:	025b      	lsls	r3, r3, #9
 800a6da:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6e8:	e016      	b.n	800a718 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fe fced 	bl	80090ce <get_fat>
 800a6f4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a6f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d802      	bhi.n	800a702 <f_open+0x2d6>
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a702:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a708:	d102      	bne.n	800a710 <f_open+0x2e4>
 800a70a:	2301      	movs	r3, #1
 800a70c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a710:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	657b      	str	r3, [r7, #84]	@ 0x54
 800a718:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d103      	bne.n	800a728 <f_open+0x2fc>
 800a720:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a724:	429a      	cmp	r2, r3
 800a726:	d8e0      	bhi.n	800a6ea <f_open+0x2be>
				}
				fp->clust = clst;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a72c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a72e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a732:	2b00      	cmp	r3, #0
 800a734:	d127      	bne.n	800a786 <f_open+0x35a>
 800a736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d022      	beq.n	800a786 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a744:	4618      	mov	r0, r3
 800a746:	f7fe fca3 	bl	8009090 <clust2sect>
 800a74a:	6478      	str	r0, [r7, #68]	@ 0x44
 800a74c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d103      	bne.n	800a75a <f_open+0x32e>
						res = FR_INT_ERR;
 800a752:	2302      	movs	r3, #2
 800a754:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a758:	e015      	b.n	800a786 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a75a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a75c:	0a5a      	lsrs	r2, r3, #9
 800a75e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a760:	441a      	add	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	7858      	ldrb	r0, [r3, #1]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6a1a      	ldr	r2, [r3, #32]
 800a774:	2301      	movs	r3, #1
 800a776:	f7fe f8af 	bl	80088d8 <disk_read>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d002      	beq.n	800a786 <f_open+0x35a>
 800a780:	2301      	movs	r3, #1
 800a782:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a786:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d002      	beq.n	800a794 <f_open+0x368>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800a79a:	4611      	mov	r1, r2
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fe fa0f 	bl	8008bc0 <unlock_fs>
 800a7a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3760      	adds	r7, #96	@ 0x60
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b08c      	sub	sp, #48	@ 0x30
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	60b9      	str	r1, [r7, #8]
 800a7b8:	607a      	str	r2, [r7, #4]
 800a7ba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f107 0210 	add.w	r2, r7, #16
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7ff fd80 	bl	800a2d4 <validate>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a7da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d107      	bne.n	800a7f2 <f_write+0x44>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	7d5b      	ldrb	r3, [r3, #21]
 800a7e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a7ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d009      	beq.n	800a806 <f_write+0x58>
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fe f9e0 	bl	8008bc0 <unlock_fs>
 800a800:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a804:	e173      	b.n	800aaee <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	7d1b      	ldrb	r3, [r3, #20]
 800a80a:	f003 0302 	and.w	r3, r3, #2
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d106      	bne.n	800a820 <f_write+0x72>
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	2107      	movs	r1, #7
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe f9d2 	bl	8008bc0 <unlock_fs>
 800a81c:	2307      	movs	r3, #7
 800a81e:	e166      	b.n	800aaee <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	699a      	ldr	r2, [r3, #24]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	441a      	add	r2, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	f080 814b 	bcs.w	800aac8 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	43db      	mvns	r3, r3
 800a838:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a83a:	e145      	b.n	800aac8 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	699b      	ldr	r3, [r3, #24]
 800a840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a844:	2b00      	cmp	r3, #0
 800a846:	f040 8101 	bne.w	800aa4c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	0a5b      	lsrs	r3, r3, #9
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	8952      	ldrh	r2, [r2, #10]
 800a854:	3a01      	subs	r2, #1
 800a856:	4013      	ands	r3, r2
 800a858:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d14d      	bne.n	800a8fc <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10c      	bne.n	800a882 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a870:	2b00      	cmp	r3, #0
 800a872:	d11a      	bne.n	800a8aa <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2100      	movs	r1, #0
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fe fe1e 	bl	80094ba <create_chain>
 800a87e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a880:	e013      	b.n	800a8aa <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a886:	2b00      	cmp	r3, #0
 800a888:	d007      	beq.n	800a89a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	4619      	mov	r1, r3
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f7fe feaa 	bl	80095ea <clmt_clust>
 800a896:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a898:	e007      	b.n	800a8aa <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	69db      	ldr	r3, [r3, #28]
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	4610      	mov	r0, r2
 800a8a4:	f7fe fe09 	bl	80094ba <create_chain>
 800a8a8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 8110 	beq.w	800aad2 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d109      	bne.n	800a8cc <f_write+0x11e>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	755a      	strb	r2, [r3, #21]
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	2102      	movs	r1, #2
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fe f97c 	bl	8008bc0 <unlock_fs>
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	e110      	b.n	800aaee <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8d2:	d109      	bne.n	800a8e8 <f_write+0x13a>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	755a      	strb	r2, [r3, #21]
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	2101      	movs	r1, #1
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fe f96e 	bl	8008bc0 <unlock_fs>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e102      	b.n	800aaee <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8ec:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d102      	bne.n	800a8fc <f_write+0x14e>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8fa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	7d1b      	ldrb	r3, [r3, #20]
 800a900:	b25b      	sxtb	r3, r3
 800a902:	2b00      	cmp	r3, #0
 800a904:	da1d      	bge.n	800a942 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	7858      	ldrb	r0, [r3, #1]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6a1a      	ldr	r2, [r3, #32]
 800a914:	2301      	movs	r3, #1
 800a916:	f7fd ffff 	bl	8008918 <disk_write>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d009      	beq.n	800a934 <f_write+0x186>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2201      	movs	r2, #1
 800a924:	755a      	strb	r2, [r3, #21]
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	2101      	movs	r1, #1
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fe f948 	bl	8008bc0 <unlock_fs>
 800a930:	2301      	movs	r3, #1
 800a932:	e0dc      	b.n	800aaee <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	7d1b      	ldrb	r3, [r3, #20]
 800a938:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a942:	693a      	ldr	r2, [r7, #16]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	69db      	ldr	r3, [r3, #28]
 800a948:	4619      	mov	r1, r3
 800a94a:	4610      	mov	r0, r2
 800a94c:	f7fe fba0 	bl	8009090 <clust2sect>
 800a950:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d109      	bne.n	800a96c <f_write+0x1be>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2202      	movs	r2, #2
 800a95c:	755a      	strb	r2, [r3, #21]
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	2102      	movs	r1, #2
 800a962:	4618      	mov	r0, r3
 800a964:	f7fe f92c 	bl	8008bc0 <unlock_fs>
 800a968:	2302      	movs	r3, #2
 800a96a:	e0c0      	b.n	800aaee <f_write+0x340>
			sect += csect;
 800a96c:	697a      	ldr	r2, [r7, #20]
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	4413      	add	r3, r2
 800a972:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	0a5b      	lsrs	r3, r3, #9
 800a978:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a97a:	6a3b      	ldr	r3, [r7, #32]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d041      	beq.n	800aa04 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a980:	69ba      	ldr	r2, [r7, #24]
 800a982:	6a3b      	ldr	r3, [r7, #32]
 800a984:	4413      	add	r3, r2
 800a986:	693a      	ldr	r2, [r7, #16]
 800a988:	8952      	ldrh	r2, [r2, #10]
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d905      	bls.n	800a99a <f_write+0x1ec>
					cc = fs->csize - csect;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	895b      	ldrh	r3, [r3, #10]
 800a992:	461a      	mov	r2, r3
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	7858      	ldrb	r0, [r3, #1]
 800a99e:	6a3b      	ldr	r3, [r7, #32]
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	69f9      	ldr	r1, [r7, #28]
 800a9a4:	f7fd ffb8 	bl	8008918 <disk_write>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d009      	beq.n	800a9c2 <f_write+0x214>
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	755a      	strb	r2, [r3, #21]
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	2101      	movs	r1, #1
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7fe f901 	bl	8008bc0 <unlock_fs>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e095      	b.n	800aaee <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6a1a      	ldr	r2, [r3, #32]
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	6a3a      	ldr	r2, [r7, #32]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d915      	bls.n	800a9fc <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6a1a      	ldr	r2, [r3, #32]
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	025b      	lsls	r3, r3, #9
 800a9e0:	69fa      	ldr	r2, [r7, #28]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	f7fe f855 	bl	8008a98 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	7d1b      	ldrb	r3, [r3, #20]
 800a9f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9f6:	b2da      	uxtb	r2, r3
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	025b      	lsls	r3, r3, #9
 800aa00:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800aa02:	e044      	b.n	800aa8e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6a1b      	ldr	r3, [r3, #32]
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d01b      	beq.n	800aa46 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	699a      	ldr	r2, [r3, #24]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d215      	bcs.n	800aa46 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	7858      	ldrb	r0, [r3, #1]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa24:	2301      	movs	r3, #1
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	f7fd ff56 	bl	80088d8 <disk_read>
 800aa2c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d009      	beq.n	800aa46 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2201      	movs	r2, #1
 800aa36:	755a      	strb	r2, [r3, #21]
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	2101      	movs	r1, #1
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fe f8bf 	bl	8008bc0 <unlock_fs>
 800aa42:	2301      	movs	r3, #1
 800aa44:	e053      	b.n	800aaee <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa54:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800aa58:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800aa5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d901      	bls.n	800aa66 <f_write+0x2b8>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa74:	4413      	add	r3, r2
 800aa76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa78:	69f9      	ldr	r1, [r7, #28]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fe f80c 	bl	8008a98 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	7d1b      	ldrb	r3, [r3, #20]
 800aa84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aa8e:	69fa      	ldr	r2, [r7, #28]
 800aa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa92:	4413      	add	r3, r2
 800aa94:	61fb      	str	r3, [r7, #28]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	699a      	ldr	r2, [r3, #24]
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9c:	441a      	add	r2, r3
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	619a      	str	r2, [r3, #24]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	68da      	ldr	r2, [r3, #12]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	bf38      	it	cc
 800aaae:	461a      	movcc	r2, r3
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	60da      	str	r2, [r3, #12]
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaba:	441a      	add	r2, r3
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	601a      	str	r2, [r3, #0]
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac4:	1ad3      	subs	r3, r2, r3
 800aac6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f47f aeb6 	bne.w	800a83c <f_write+0x8e>
 800aad0:	e000      	b.n	800aad4 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aad2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	7d1b      	ldrb	r3, [r3, #20]
 800aad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	2100      	movs	r1, #0
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fe f86a 	bl	8008bc0 <unlock_fs>
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3730      	adds	r7, #48	@ 0x30
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b086      	sub	sp, #24
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f107 0208 	add.w	r2, r7, #8
 800ab04:	4611      	mov	r1, r2
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7ff fbe4 	bl	800a2d4 <validate>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab10:	7dfb      	ldrb	r3, [r7, #23]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d16d      	bne.n	800abf2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	7d1b      	ldrb	r3, [r3, #20]
 800ab1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d067      	beq.n	800abf2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	7d1b      	ldrb	r3, [r3, #20]
 800ab26:	b25b      	sxtb	r3, r3
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	da1a      	bge.n	800ab62 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	7858      	ldrb	r0, [r3, #1]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a1a      	ldr	r2, [r3, #32]
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	f7fd feec 	bl	8008918 <disk_write>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d006      	beq.n	800ab54 <f_sync+0x5e>
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2101      	movs	r1, #1
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7fe f838 	bl	8008bc0 <unlock_fs>
 800ab50:	2301      	movs	r3, #1
 800ab52:	e055      	b.n	800ac00 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	7d1b      	ldrb	r3, [r3, #20]
 800ab58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ab62:	f7fc f961 	bl	8006e28 <get_fattime>
 800ab66:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6e:	4619      	mov	r1, r3
 800ab70:	4610      	mov	r0, r2
 800ab72:	f7fe f9f1 	bl	8008f58 <move_window>
 800ab76:	4603      	mov	r3, r0
 800ab78:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ab7a:	7dfb      	ldrb	r3, [r7, #23]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d138      	bne.n	800abf2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab84:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	330b      	adds	r3, #11
 800ab8a:	781a      	ldrb	r2, [r3, #0]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	330b      	adds	r3, #11
 800ab90:	f042 0220 	orr.w	r2, r2, #32
 800ab94:	b2d2      	uxtb	r2, r2
 800ab96:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6818      	ldr	r0, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	461a      	mov	r2, r3
 800aba2:	68f9      	ldr	r1, [r7, #12]
 800aba4:	f7fe fefb 	bl	800999e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f103 021c 	add.w	r2, r3, #28
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	4619      	mov	r1, r3
 800abb4:	4610      	mov	r0, r2
 800abb6:	f7fd ff43 	bl	8008a40 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3316      	adds	r3, #22
 800abbe:	6939      	ldr	r1, [r7, #16]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7fd ff3d 	bl	8008a40 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	3312      	adds	r3, #18
 800abca:	2100      	movs	r1, #0
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fd ff1c 	bl	8008a0a <st_word>
					fs->wflag = 1;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2201      	movs	r2, #1
 800abd6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe f9ea 	bl	8008fb4 <sync_fs>
 800abe0:	4603      	mov	r3, r0
 800abe2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	7d1b      	ldrb	r3, [r3, #20]
 800abe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abec:	b2da      	uxtb	r2, r3
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	7dfa      	ldrb	r2, [r7, #23]
 800abf6:	4611      	mov	r1, r2
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fd ffe1 	bl	8008bc0 <unlock_fs>
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3718      	adds	r7, #24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f7ff ff70 	bl	800aaf6 <f_sync>
 800ac16:	4603      	mov	r3, r0
 800ac18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ac1a:	7bfb      	ldrb	r3, [r7, #15]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d11d      	bne.n	800ac5c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f107 0208 	add.w	r2, r7, #8
 800ac26:	4611      	mov	r1, r2
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff fb53 	bl	800a2d4 <validate>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d111      	bne.n	800ac5c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fe f8e7 	bl	8008e10 <dec_lock>
 800ac42:	4603      	mov	r3, r0
 800ac44:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ac46:	7bfb      	ldrb	r3, [r7, #15]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d102      	bne.n	800ac52 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	2100      	movs	r1, #0
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fd ffb2 	bl	8008bc0 <unlock_fs>
#endif
		}
	}
	return res;
 800ac5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b092      	sub	sp, #72	@ 0x48
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	60f8      	str	r0, [r7, #12]
 800ac6e:	60b9      	str	r1, [r7, #8]
 800ac70:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800ac72:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ac76:	f107 030c 	add.w	r3, r7, #12
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7ff f8d5 	bl	8009e2c <find_volume>
 800ac82:	4603      	mov	r3, r0
 800ac84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800ac88:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f040 8099 	bne.w	800adc4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800ac92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800ac98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac9a:	695a      	ldr	r2, [r3, #20]
 800ac9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac9e:	699b      	ldr	r3, [r3, #24]
 800aca0:	3b02      	subs	r3, #2
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d804      	bhi.n	800acb0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800aca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca8:	695a      	ldr	r2, [r3, #20]
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	e089      	b.n	800adc4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800acb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d128      	bne.n	800ad0e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800acbc:	2302      	movs	r3, #2
 800acbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800acc4:	f107 0314 	add.w	r3, r7, #20
 800acc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800acca:	4618      	mov	r0, r3
 800accc:	f7fe f9ff 	bl	80090ce <get_fat>
 800acd0:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800acd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800acd8:	d103      	bne.n	800ace2 <f_getfree+0x7c>
 800acda:	2301      	movs	r3, #1
 800acdc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ace0:	e063      	b.n	800adaa <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ace2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d103      	bne.n	800acf0 <f_getfree+0x8a>
 800ace8:	2302      	movs	r3, #2
 800acea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800acee:	e05c      	b.n	800adaa <f_getfree+0x144>
					if (stat == 0) nfree++;
 800acf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d102      	bne.n	800acfc <f_getfree+0x96>
 800acf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acf8:	3301      	adds	r3, #1
 800acfa:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800acfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acfe:	3301      	adds	r3, #1
 800ad00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad04:	699b      	ldr	r3, [r3, #24]
 800ad06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d3db      	bcc.n	800acc4 <f_getfree+0x5e>
 800ad0c:	e04d      	b.n	800adaa <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ad0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad10:	699b      	ldr	r3, [r3, #24]
 800ad12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad18:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad1e:	2300      	movs	r3, #0
 800ad20:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800ad22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d113      	bne.n	800ad50 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800ad28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ad30:	4619      	mov	r1, r3
 800ad32:	f7fe f911 	bl	8008f58 <move_window>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800ad3c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d131      	bne.n	800ada8 <f_getfree+0x142>
							p = fs->win;
 800ad44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad46:	3334      	adds	r3, #52	@ 0x34
 800ad48:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800ad4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad4e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ad50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	d10f      	bne.n	800ad78 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ad58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad5a:	f7fd fe1b 	bl	8008994 <ld_word>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d102      	bne.n	800ad6a <f_getfree+0x104>
 800ad64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad66:	3301      	adds	r3, #1
 800ad68:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad6c:	3302      	adds	r3, #2
 800ad6e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad72:	3b02      	subs	r3, #2
 800ad74:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad76:	e010      	b.n	800ad9a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ad78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad7a:	f7fd fe23 	bl	80089c4 <ld_dword>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d102      	bne.n	800ad8e <f_getfree+0x128>
 800ad88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad90:	3304      	adds	r3, #4
 800ad92:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad96:	3b04      	subs	r3, #4
 800ad98:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800ad9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ada0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1bd      	bne.n	800ad22 <f_getfree+0xbc>
 800ada6:	e000      	b.n	800adaa <f_getfree+0x144>
							if (res != FR_OK) break;
 800ada8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800adae:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800adb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800adb4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800adb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb8:	791a      	ldrb	r2, [r3, #4]
 800adba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adbc:	f042 0201 	orr.w	r2, r2, #1
 800adc0:	b2d2      	uxtb	r2, r2
 800adc2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800adc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc6:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800adca:	4611      	mov	r1, r2
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fd fef7 	bl	8008bc0 <unlock_fs>
 800add2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800add6:	4618      	mov	r0, r3
 800add8:	3748      	adds	r7, #72	@ 0x48
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
	...

0800ade0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b087      	sub	sp, #28
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	4613      	mov	r3, r2
 800adec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800adee:	2301      	movs	r3, #1
 800adf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800adf2:	2300      	movs	r3, #0
 800adf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800adf6:	4b1f      	ldr	r3, [pc, #124]	@ (800ae74 <FATFS_LinkDriverEx+0x94>)
 800adf8:	7a5b      	ldrb	r3, [r3, #9]
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d131      	bne.n	800ae64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ae00:	4b1c      	ldr	r3, [pc, #112]	@ (800ae74 <FATFS_LinkDriverEx+0x94>)
 800ae02:	7a5b      	ldrb	r3, [r3, #9]
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	461a      	mov	r2, r3
 800ae08:	4b1a      	ldr	r3, [pc, #104]	@ (800ae74 <FATFS_LinkDriverEx+0x94>)
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ae0e:	4b19      	ldr	r3, [pc, #100]	@ (800ae74 <FATFS_LinkDriverEx+0x94>)
 800ae10:	7a5b      	ldrb	r3, [r3, #9]
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	4a17      	ldr	r2, [pc, #92]	@ (800ae74 <FATFS_LinkDriverEx+0x94>)
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4413      	add	r3, r2
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ae1e:	4b15      	ldr	r3, [pc, #84]	@ (800ae74 <FATFS_LinkDriverEx+0x94>)
 800ae20:	7a5b      	ldrb	r3, [r3, #9]
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	461a      	mov	r2, r3
 800ae26:	4b13      	ldr	r3, [pc, #76]	@ (800ae74 <FATFS_LinkDriverEx+0x94>)
 800ae28:	4413      	add	r3, r2
 800ae2a:	79fa      	ldrb	r2, [r7, #7]
 800ae2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ae2e:	4b11      	ldr	r3, [pc, #68]	@ (800ae74 <FATFS_LinkDriverEx+0x94>)
 800ae30:	7a5b      	ldrb	r3, [r3, #9]
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	1c5a      	adds	r2, r3, #1
 800ae36:	b2d1      	uxtb	r1, r2
 800ae38:	4a0e      	ldr	r2, [pc, #56]	@ (800ae74 <FATFS_LinkDriverEx+0x94>)
 800ae3a:	7251      	strb	r1, [r2, #9]
 800ae3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ae3e:	7dbb      	ldrb	r3, [r7, #22]
 800ae40:	3330      	adds	r3, #48	@ 0x30
 800ae42:	b2da      	uxtb	r2, r3
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	223a      	movs	r2, #58	@ 0x3a
 800ae4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	3302      	adds	r3, #2
 800ae54:	222f      	movs	r2, #47	@ 0x2f
 800ae56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	3303      	adds	r3, #3
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ae60:	2300      	movs	r3, #0
 800ae62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ae64:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	371c      	adds	r7, #28
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	20000f34 	.word	0x20000f34

0800ae78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ae82:	2200      	movs	r2, #0
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7ff ffaa 	bl	800ade0 <FATFS_LinkDriverEx>
 800ae8c:	4603      	mov	r3, r0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b086      	sub	sp, #24
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	6039      	str	r1, [r7, #0]
 800aea0:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800aea2:	2300      	movs	r3, #0
 800aea4:	60fb      	str	r3, [r7, #12]
 800aea6:	2300      	movs	r3, #0
 800aea8:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800aeaa:	f107 030c 	add.w	r3, r7, #12
 800aeae:	2101      	movs	r1, #1
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f000 f8cd 	bl	800b050 <osSemaphoreCreate>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	bf14      	ite	ne
 800aec4:	2301      	movne	r3, #1
 800aec6:	2300      	moveq	r3, #0
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	617b      	str	r3, [r7, #20]

    return ret;
 800aecc:	697b      	ldr	r3, [r7, #20]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3718      	adds	r7, #24
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b082      	sub	sp, #8
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f96c 	bl	800b1bc <osSemaphoreDelete>
#endif
    return 1;
 800aee4:	2301      	movs	r3, #1
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800aefa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f8d8 	bl	800b0b4 <osSemaphoreWait>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d101      	bne.n	800af0e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800af0a:	2301      	movs	r3, #1
 800af0c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800af0e:	68fb      	ldr	r3, [r7, #12]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 f915 	bl	800b150 <osSemaphoreRelease>
#endif
}
 800af26:	bf00      	nop
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800af2e:	b480      	push	{r7}
 800af30:	b085      	sub	sp, #20
 800af32:	af00      	add	r7, sp, #0
 800af34:	4603      	mov	r3, r0
 800af36:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800af38:	2300      	movs	r3, #0
 800af3a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800af3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af40:	2b84      	cmp	r3, #132	@ 0x84
 800af42:	d005      	beq.n	800af50 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800af44:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	4413      	add	r3, r2
 800af4c:	3303      	adds	r3, #3
 800af4e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800af50:	68fb      	ldr	r3, [r7, #12]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800af5e:	b480      	push	{r7}
 800af60:	b083      	sub	sp, #12
 800af62:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af64:	f3ef 8305 	mrs	r3, IPSR
 800af68:	607b      	str	r3, [r7, #4]
  return(result);
 800af6a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	bf14      	ite	ne
 800af70:	2301      	movne	r3, #1
 800af72:	2300      	moveq	r3, #0
 800af74:	b2db      	uxtb	r3, r3
}
 800af76:	4618      	mov	r0, r3
 800af78:	370c      	adds	r7, #12
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800af86:	f001 f9e1 	bl	800c34c <vTaskStartScheduler>
  
  return osOK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800af90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af92:	b089      	sub	sp, #36	@ 0x24
 800af94:	af04      	add	r7, sp, #16
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	695b      	ldr	r3, [r3, #20]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d020      	beq.n	800afe4 <osThreadCreate+0x54>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d01c      	beq.n	800afe4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	685c      	ldr	r4, [r3, #4]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	691e      	ldr	r6, [r3, #16]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff ffb6 	bl	800af2e <makeFreeRtosPriority>
 800afc2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	695b      	ldr	r3, [r3, #20]
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afcc:	9202      	str	r2, [sp, #8]
 800afce:	9301      	str	r3, [sp, #4]
 800afd0:	9100      	str	r1, [sp, #0]
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	4632      	mov	r2, r6
 800afd6:	4629      	mov	r1, r5
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 ffc7 	bl	800bf6c <xTaskCreateStatic>
 800afde:	4603      	mov	r3, r0
 800afe0:	60fb      	str	r3, [r7, #12]
 800afe2:	e01c      	b.n	800b01e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685c      	ldr	r4, [r3, #4]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aff0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aff8:	4618      	mov	r0, r3
 800affa:	f7ff ff98 	bl	800af2e <makeFreeRtosPriority>
 800affe:	4602      	mov	r2, r0
 800b000:	f107 030c 	add.w	r3, r7, #12
 800b004:	9301      	str	r3, [sp, #4]
 800b006:	9200      	str	r2, [sp, #0]
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	4632      	mov	r2, r6
 800b00c:	4629      	mov	r1, r5
 800b00e:	4620      	mov	r0, r4
 800b010:	f001 f812 	bl	800c038 <xTaskCreate>
 800b014:	4603      	mov	r3, r0
 800b016:	2b01      	cmp	r3, #1
 800b018:	d001      	beq.n	800b01e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b01a:	2300      	movs	r3, #0
 800b01c:	e000      	b.n	800b020 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b01e:	68fb      	ldr	r3, [r7, #12]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3714      	adds	r7, #20
 800b024:	46bd      	mov	sp, r7
 800b026:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b028 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d001      	beq.n	800b03e <osDelay+0x16>
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	e000      	b.n	800b040 <osDelay+0x18>
 800b03e:	2301      	movs	r3, #1
 800b040:	4618      	mov	r0, r3
 800b042:	f001 f94b 	bl	800c2dc <vTaskDelay>
  
  return osOK;
 800b046:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b050:	b580      	push	{r7, lr}
 800b052:	b086      	sub	sp, #24
 800b054:	af02      	add	r7, sp, #8
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00f      	beq.n	800b082 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d10a      	bne.n	800b07e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	2203      	movs	r2, #3
 800b06e:	9200      	str	r2, [sp, #0]
 800b070:	2200      	movs	r2, #0
 800b072:	2100      	movs	r1, #0
 800b074:	2001      	movs	r0, #1
 800b076:	f000 f9d5 	bl	800b424 <xQueueGenericCreateStatic>
 800b07a:	4603      	mov	r3, r0
 800b07c:	e016      	b.n	800b0ac <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b07e:	2300      	movs	r3, #0
 800b080:	e014      	b.n	800b0ac <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d110      	bne.n	800b0aa <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b088:	2203      	movs	r2, #3
 800b08a:	2100      	movs	r1, #0
 800b08c:	2001      	movs	r0, #1
 800b08e:	f000 fa50 	bl	800b532 <xQueueGenericCreate>
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d005      	beq.n	800b0a6 <osSemaphoreCreate+0x56>
 800b09a:	2300      	movs	r3, #0
 800b09c:	2200      	movs	r2, #0
 800b09e:	2100      	movs	r1, #0
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f000 faa9 	bl	800b5f8 <xQueueGenericSend>
      return sema;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	e000      	b.n	800b0ac <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b0aa:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b0be:	2300      	movs	r3, #0
 800b0c0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b0c8:	2380      	movs	r3, #128	@ 0x80
 800b0ca:	e03a      	b.n	800b142 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0d6:	d103      	bne.n	800b0e0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b0d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b0dc:	60fb      	str	r3, [r7, #12]
 800b0de:	e009      	b.n	800b0f4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d006      	beq.n	800b0f4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d101      	bne.n	800b0f4 <osSemaphoreWait+0x40>
      ticks = 1;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b0f4:	f7ff ff33 	bl	800af5e <inHandlerMode>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d017      	beq.n	800b12e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b0fe:	f107 0308 	add.w	r3, r7, #8
 800b102:	461a      	mov	r2, r3
 800b104:	2100      	movs	r1, #0
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fd30 	bl	800bb6c <xQueueReceiveFromISR>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d001      	beq.n	800b116 <osSemaphoreWait+0x62>
      return osErrorOS;
 800b112:	23ff      	movs	r3, #255	@ 0xff
 800b114:	e015      	b.n	800b142 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d011      	beq.n	800b140 <osSemaphoreWait+0x8c>
 800b11c:	4b0b      	ldr	r3, [pc, #44]	@ (800b14c <osSemaphoreWait+0x98>)
 800b11e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	e008      	b.n	800b140 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b12e:	68f9      	ldr	r1, [r7, #12]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 fc03 	bl	800b93c <xQueueSemaphoreTake>
 800b136:	4603      	mov	r3, r0
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d001      	beq.n	800b140 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b13c:	23ff      	movs	r3, #255	@ 0xff
 800b13e:	e000      	b.n	800b142 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	e000ed04 	.word	0xe000ed04

0800b150 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b158:	2300      	movs	r3, #0
 800b15a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b15c:	2300      	movs	r3, #0
 800b15e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b160:	f7ff fefd 	bl	800af5e <inHandlerMode>
 800b164:	4603      	mov	r3, r0
 800b166:	2b00      	cmp	r3, #0
 800b168:	d016      	beq.n	800b198 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b16a:	f107 0308 	add.w	r3, r7, #8
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fb4b 	bl	800b80c <xQueueGiveFromISR>
 800b176:	4603      	mov	r3, r0
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d001      	beq.n	800b180 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b17c:	23ff      	movs	r3, #255	@ 0xff
 800b17e:	e017      	b.n	800b1b0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d013      	beq.n	800b1ae <osSemaphoreRelease+0x5e>
 800b186:	4b0c      	ldr	r3, [pc, #48]	@ (800b1b8 <osSemaphoreRelease+0x68>)
 800b188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b18c:	601a      	str	r2, [r3, #0]
 800b18e:	f3bf 8f4f 	dsb	sy
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	e00a      	b.n	800b1ae <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b198:	2300      	movs	r3, #0
 800b19a:	2200      	movs	r2, #0
 800b19c:	2100      	movs	r1, #0
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fa2a 	bl	800b5f8 <xQueueGenericSend>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d001      	beq.n	800b1ae <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b1aa:	23ff      	movs	r3, #255	@ 0xff
 800b1ac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	e000ed04 	.word	0xe000ed04

0800b1bc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b1c4:	f7ff fecb 	bl	800af5e <inHandlerMode>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d001      	beq.n	800b1d2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b1ce:	2382      	movs	r3, #130	@ 0x82
 800b1d0:	e003      	b.n	800b1da <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fd52 	bl	800bc7c <vQueueDelete>

  return osOK; 
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b083      	sub	sp, #12
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f103 0208 	add.w	r2, r3, #8
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f103 0208 	add.w	r2, r3, #8
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f103 0208 	add.w	r2, r3, #8
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b216:	bf00      	nop
 800b218:	370c      	adds	r7, #12
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b222:	b480      	push	{r7}
 800b224:	b083      	sub	sp, #12
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	689a      	ldr	r2, [r3, #8]
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	683a      	ldr	r2, [r7, #0]
 800b260:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	683a      	ldr	r2, [r7, #0]
 800b266:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	1c5a      	adds	r2, r3, #1
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	601a      	str	r2, [r3, #0]
}
 800b278:	bf00      	nop
 800b27a:	3714      	adds	r7, #20
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b29a:	d103      	bne.n	800b2a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	60fb      	str	r3, [r7, #12]
 800b2a2:	e00c      	b.n	800b2be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	3308      	adds	r3, #8
 800b2a8:	60fb      	str	r3, [r7, #12]
 800b2aa:	e002      	b.n	800b2b2 <vListInsert+0x2e>
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	60fb      	str	r3, [r7, #12]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d2f6      	bcs.n	800b2ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	685a      	ldr	r2, [r3, #4]
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	683a      	ldr	r2, [r7, #0]
 800b2d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	1c5a      	adds	r2, r3, #1
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	601a      	str	r2, [r3, #0]
}
 800b2ea:	bf00      	nop
 800b2ec:	3714      	adds	r7, #20
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr

0800b2f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b2f6:	b480      	push	{r7}
 800b2f8:	b085      	sub	sp, #20
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	6892      	ldr	r2, [r2, #8]
 800b30c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	6852      	ldr	r2, [r2, #4]
 800b316:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d103      	bne.n	800b32a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	689a      	ldr	r2, [r3, #8]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	1e5a      	subs	r2, r3, #1
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3714      	adds	r7, #20
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
	...

0800b34c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10d      	bne.n	800b37c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b364:	b672      	cpsid	i
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	b662      	cpsie	i
 800b374:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b376:	bf00      	nop
 800b378:	bf00      	nop
 800b37a:	e7fd      	b.n	800b378 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b37c:	f001 ff6e 	bl	800d25c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b388:	68f9      	ldr	r1, [r7, #12]
 800b38a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b38c:	fb01 f303 	mul.w	r3, r1, r3
 800b390:	441a      	add	r2, r3
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	68f9      	ldr	r1, [r7, #12]
 800b3b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b3b2:	fb01 f303 	mul.w	r3, r1, r3
 800b3b6:	441a      	add	r2, r3
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	22ff      	movs	r2, #255	@ 0xff
 800b3c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	22ff      	movs	r2, #255	@ 0xff
 800b3c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d114      	bne.n	800b3fc <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d01a      	beq.n	800b410 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	3310      	adds	r3, #16
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f001 fa1a 	bl	800c818 <xTaskRemoveFromEventList>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d012      	beq.n	800b410 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b3ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b420 <xQueueGenericReset+0xd4>)
 800b3ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3f0:	601a      	str	r2, [r3, #0]
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	e009      	b.n	800b410 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3310      	adds	r3, #16
 800b400:	4618      	mov	r0, r3
 800b402:	f7ff feee 	bl	800b1e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3324      	adds	r3, #36	@ 0x24
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7ff fee9 	bl	800b1e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b410:	f001 ff5a 	bl	800d2c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b414:	2301      	movs	r3, #1
}
 800b416:	4618      	mov	r0, r3
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	e000ed04 	.word	0xe000ed04

0800b424 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b424:	b580      	push	{r7, lr}
 800b426:	b08e      	sub	sp, #56	@ 0x38
 800b428:	af02      	add	r7, sp, #8
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
 800b430:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10d      	bne.n	800b454 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b43c:	b672      	cpsid	i
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	b662      	cpsie	i
 800b44c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b44e:	bf00      	nop
 800b450:	bf00      	nop
 800b452:	e7fd      	b.n	800b450 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10d      	bne.n	800b476 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b45e:	b672      	cpsid	i
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	b662      	cpsie	i
 800b46e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b470:	bf00      	nop
 800b472:	bf00      	nop
 800b474:	e7fd      	b.n	800b472 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <xQueueGenericCreateStatic+0x5e>
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <xQueueGenericCreateStatic+0x62>
 800b482:	2301      	movs	r3, #1
 800b484:	e000      	b.n	800b488 <xQueueGenericCreateStatic+0x64>
 800b486:	2300      	movs	r3, #0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d10d      	bne.n	800b4a8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800b48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b490:	b672      	cpsid	i
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	b662      	cpsie	i
 800b4a0:	623b      	str	r3, [r7, #32]
}
 800b4a2:	bf00      	nop
 800b4a4:	bf00      	nop
 800b4a6:	e7fd      	b.n	800b4a4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d102      	bne.n	800b4b4 <xQueueGenericCreateStatic+0x90>
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <xQueueGenericCreateStatic+0x94>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e000      	b.n	800b4ba <xQueueGenericCreateStatic+0x96>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d10d      	bne.n	800b4da <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c2:	b672      	cpsid	i
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	b662      	cpsie	i
 800b4d2:	61fb      	str	r3, [r7, #28]
}
 800b4d4:	bf00      	nop
 800b4d6:	bf00      	nop
 800b4d8:	e7fd      	b.n	800b4d6 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b4da:	2348      	movs	r3, #72	@ 0x48
 800b4dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	2b48      	cmp	r3, #72	@ 0x48
 800b4e2:	d00d      	beq.n	800b500 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800b4e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e8:	b672      	cpsid	i
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	b662      	cpsie	i
 800b4f8:	61bb      	str	r3, [r7, #24]
}
 800b4fa:	bf00      	nop
 800b4fc:	bf00      	nop
 800b4fe:	e7fd      	b.n	800b4fc <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b500:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00d      	beq.n	800b528 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b514:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	4613      	mov	r3, r2
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	68b9      	ldr	r1, [r7, #8]
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f000 f848 	bl	800b5b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3730      	adds	r7, #48	@ 0x30
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b532:	b580      	push	{r7, lr}
 800b534:	b08a      	sub	sp, #40	@ 0x28
 800b536:	af02      	add	r7, sp, #8
 800b538:	60f8      	str	r0, [r7, #12]
 800b53a:	60b9      	str	r1, [r7, #8]
 800b53c:	4613      	mov	r3, r2
 800b53e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d10d      	bne.n	800b562 <xQueueGenericCreate+0x30>
	__asm volatile
 800b546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b54a:	b672      	cpsid	i
 800b54c:	f383 8811 	msr	BASEPRI, r3
 800b550:	f3bf 8f6f 	isb	sy
 800b554:	f3bf 8f4f 	dsb	sy
 800b558:	b662      	cpsie	i
 800b55a:	613b      	str	r3, [r7, #16]
}
 800b55c:	bf00      	nop
 800b55e:	bf00      	nop
 800b560:	e7fd      	b.n	800b55e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d102      	bne.n	800b56e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	61fb      	str	r3, [r7, #28]
 800b56c:	e004      	b.n	800b578 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	fb02 f303 	mul.w	r3, r2, r3
 800b576:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	3348      	adds	r3, #72	@ 0x48
 800b57c:	4618      	mov	r0, r3
 800b57e:	f001 ff9b 	bl	800d4b8 <pvPortMalloc>
 800b582:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d011      	beq.n	800b5ae <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	3348      	adds	r3, #72	@ 0x48
 800b592:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	2200      	movs	r2, #0
 800b598:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b59c:	79fa      	ldrb	r2, [r7, #7]
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	697a      	ldr	r2, [r7, #20]
 800b5a6:	68b9      	ldr	r1, [r7, #8]
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f000 f805 	bl	800b5b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b5ae:	69bb      	ldr	r3, [r7, #24]
	}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3720      	adds	r7, #32
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d103      	bne.n	800b5d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	69ba      	ldr	r2, [r7, #24]
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	e002      	b.n	800b5da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	69b8      	ldr	r0, [r7, #24]
 800b5ea:	f7ff feaf 	bl	800b34c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b5ee:	bf00      	nop
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
	...

0800b5f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b08e      	sub	sp, #56	@ 0x38
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]
 800b604:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b606:	2300      	movs	r3, #0
 800b608:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10d      	bne.n	800b630 <xQueueGenericSend+0x38>
	__asm volatile
 800b614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b618:	b672      	cpsid	i
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	b662      	cpsie	i
 800b628:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b62a:	bf00      	nop
 800b62c:	bf00      	nop
 800b62e:	e7fd      	b.n	800b62c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d103      	bne.n	800b63e <xQueueGenericSend+0x46>
 800b636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <xQueueGenericSend+0x4a>
 800b63e:	2301      	movs	r3, #1
 800b640:	e000      	b.n	800b644 <xQueueGenericSend+0x4c>
 800b642:	2300      	movs	r3, #0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10d      	bne.n	800b664 <xQueueGenericSend+0x6c>
	__asm volatile
 800b648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b64c:	b672      	cpsid	i
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	b662      	cpsie	i
 800b65c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b65e:	bf00      	nop
 800b660:	bf00      	nop
 800b662:	e7fd      	b.n	800b660 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	2b02      	cmp	r3, #2
 800b668:	d103      	bne.n	800b672 <xQueueGenericSend+0x7a>
 800b66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d101      	bne.n	800b676 <xQueueGenericSend+0x7e>
 800b672:	2301      	movs	r3, #1
 800b674:	e000      	b.n	800b678 <xQueueGenericSend+0x80>
 800b676:	2300      	movs	r3, #0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10d      	bne.n	800b698 <xQueueGenericSend+0xa0>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b680:	b672      	cpsid	i
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	b662      	cpsie	i
 800b690:	623b      	str	r3, [r7, #32]
}
 800b692:	bf00      	nop
 800b694:	bf00      	nop
 800b696:	e7fd      	b.n	800b694 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b698:	f001 fa8c 	bl	800cbb4 <xTaskGetSchedulerState>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d102      	bne.n	800b6a8 <xQueueGenericSend+0xb0>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <xQueueGenericSend+0xb4>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e000      	b.n	800b6ae <xQueueGenericSend+0xb6>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10d      	bne.n	800b6ce <xQueueGenericSend+0xd6>
	__asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b6:	b672      	cpsid	i
 800b6b8:	f383 8811 	msr	BASEPRI, r3
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	b662      	cpsie	i
 800b6c6:	61fb      	str	r3, [r7, #28]
}
 800b6c8:	bf00      	nop
 800b6ca:	bf00      	nop
 800b6cc:	e7fd      	b.n	800b6ca <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6ce:	f001 fdc5 	bl	800d25c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d302      	bcc.n	800b6e4 <xQueueGenericSend+0xec>
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d129      	bne.n	800b738 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6e4:	683a      	ldr	r2, [r7, #0]
 800b6e6:	68b9      	ldr	r1, [r7, #8]
 800b6e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b6ea:	f000 fb05 	bl	800bcf8 <prvCopyDataToQueue>
 800b6ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d010      	beq.n	800b71a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fa:	3324      	adds	r3, #36	@ 0x24
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f001 f88b 	bl	800c818 <xTaskRemoveFromEventList>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d013      	beq.n	800b730 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b708:	4b3f      	ldr	r3, [pc, #252]	@ (800b808 <xQueueGenericSend+0x210>)
 800b70a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	e00a      	b.n	800b730 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d007      	beq.n	800b730 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b720:	4b39      	ldr	r3, [pc, #228]	@ (800b808 <xQueueGenericSend+0x210>)
 800b722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b726:	601a      	str	r2, [r3, #0]
 800b728:	f3bf 8f4f 	dsb	sy
 800b72c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b730:	f001 fdca 	bl	800d2c8 <vPortExitCritical>
				return pdPASS;
 800b734:	2301      	movs	r3, #1
 800b736:	e063      	b.n	800b800 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d103      	bne.n	800b746 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b73e:	f001 fdc3 	bl	800d2c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b742:	2300      	movs	r3, #0
 800b744:	e05c      	b.n	800b800 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d106      	bne.n	800b75a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b74c:	f107 0314 	add.w	r3, r7, #20
 800b750:	4618      	mov	r0, r3
 800b752:	f001 f8c7 	bl	800c8e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b756:	2301      	movs	r3, #1
 800b758:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b75a:	f001 fdb5 	bl	800d2c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b75e:	f000 fe63 	bl	800c428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b762:	f001 fd7b 	bl	800d25c <vPortEnterCritical>
 800b766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b768:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b76c:	b25b      	sxtb	r3, r3
 800b76e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b772:	d103      	bne.n	800b77c <xQueueGenericSend+0x184>
 800b774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b776:	2200      	movs	r2, #0
 800b778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b77e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b782:	b25b      	sxtb	r3, r3
 800b784:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b788:	d103      	bne.n	800b792 <xQueueGenericSend+0x19a>
 800b78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b792:	f001 fd99 	bl	800d2c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b796:	1d3a      	adds	r2, r7, #4
 800b798:	f107 0314 	add.w	r3, r7, #20
 800b79c:	4611      	mov	r1, r2
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f001 f8b6 	bl	800c910 <xTaskCheckForTimeOut>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d124      	bne.n	800b7f4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b7aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b7ac:	f000 fb9c 	bl	800bee8 <prvIsQueueFull>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d018      	beq.n	800b7e8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b8:	3310      	adds	r3, #16
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	4611      	mov	r1, r2
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f001 f802 	bl	800c7c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b7c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b7c6:	f000 fb27 	bl	800be18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b7ca:	f000 fe3b 	bl	800c444 <xTaskResumeAll>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f47f af7c 	bne.w	800b6ce <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800b7d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b808 <xQueueGenericSend+0x210>)
 800b7d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7dc:	601a      	str	r2, [r3, #0]
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	e772      	b.n	800b6ce <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b7e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b7ea:	f000 fb15 	bl	800be18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7ee:	f000 fe29 	bl	800c444 <xTaskResumeAll>
 800b7f2:	e76c      	b.n	800b6ce <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b7f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b7f6:	f000 fb0f 	bl	800be18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7fa:	f000 fe23 	bl	800c444 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b7fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b800:	4618      	mov	r0, r3
 800b802:	3738      	adds	r7, #56	@ 0x38
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	e000ed04 	.word	0xe000ed04

0800b80c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08e      	sub	sp, #56	@ 0x38
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10d      	bne.n	800b83c <xQueueGiveFromISR+0x30>
	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b824:	b672      	cpsid	i
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	b662      	cpsie	i
 800b834:	623b      	str	r3, [r7, #32]
}
 800b836:	bf00      	nop
 800b838:	bf00      	nop
 800b83a:	e7fd      	b.n	800b838 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b83e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00d      	beq.n	800b860 <xQueueGiveFromISR+0x54>
	__asm volatile
 800b844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b848:	b672      	cpsid	i
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	b662      	cpsie	i
 800b858:	61fb      	str	r3, [r7, #28]
}
 800b85a:	bf00      	nop
 800b85c:	bf00      	nop
 800b85e:	e7fd      	b.n	800b85c <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d103      	bne.n	800b870 <xQueueGiveFromISR+0x64>
 800b868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d101      	bne.n	800b874 <xQueueGiveFromISR+0x68>
 800b870:	2301      	movs	r3, #1
 800b872:	e000      	b.n	800b876 <xQueueGiveFromISR+0x6a>
 800b874:	2300      	movs	r3, #0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d10d      	bne.n	800b896 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800b87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b87e:	b672      	cpsid	i
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	b662      	cpsie	i
 800b88e:	61bb      	str	r3, [r7, #24]
}
 800b890:	bf00      	nop
 800b892:	bf00      	nop
 800b894:	e7fd      	b.n	800b892 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b896:	f001 fdc9 	bl	800d42c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b89a:	f3ef 8211 	mrs	r2, BASEPRI
 800b89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a2:	b672      	cpsid	i
 800b8a4:	f383 8811 	msr	BASEPRI, r3
 800b8a8:	f3bf 8f6f 	isb	sy
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	b662      	cpsie	i
 800b8b2:	617a      	str	r2, [r7, #20]
 800b8b4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b8b6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b8b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8be:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d22b      	bcs.n	800b922 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d6:	1c5a      	adds	r2, r3, #1
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b8dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b8e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b8e4:	d112      	bne.n	800b90c <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d016      	beq.n	800b91c <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f0:	3324      	adds	r3, #36	@ 0x24
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f000 ff90 	bl	800c818 <xTaskRemoveFromEventList>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00e      	beq.n	800b91c <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00b      	beq.n	800b91c <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	2201      	movs	r2, #1
 800b908:	601a      	str	r2, [r3, #0]
 800b90a:	e007      	b.n	800b91c <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b90c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b910:	3301      	adds	r3, #1
 800b912:	b2db      	uxtb	r3, r3
 800b914:	b25a      	sxtb	r2, r3
 800b916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b91c:	2301      	movs	r3, #1
 800b91e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b920:	e001      	b.n	800b926 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b922:	2300      	movs	r3, #0
 800b924:	637b      	str	r3, [r7, #52]	@ 0x34
 800b926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b928:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b930:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b934:	4618      	mov	r0, r3
 800b936:	3738      	adds	r7, #56	@ 0x38
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b08e      	sub	sp, #56	@ 0x38
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b946:	2300      	movs	r3, #0
 800b948:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b94e:	2300      	movs	r3, #0
 800b950:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10d      	bne.n	800b974 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800b958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b95c:	b672      	cpsid	i
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	b662      	cpsie	i
 800b96c:	623b      	str	r3, [r7, #32]
}
 800b96e:	bf00      	nop
 800b970:	bf00      	nop
 800b972:	e7fd      	b.n	800b970 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00d      	beq.n	800b998 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800b97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b980:	b672      	cpsid	i
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	b662      	cpsie	i
 800b990:	61fb      	str	r3, [r7, #28]
}
 800b992:	bf00      	nop
 800b994:	bf00      	nop
 800b996:	e7fd      	b.n	800b994 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b998:	f001 f90c 	bl	800cbb4 <xTaskGetSchedulerState>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d102      	bne.n	800b9a8 <xQueueSemaphoreTake+0x6c>
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d101      	bne.n	800b9ac <xQueueSemaphoreTake+0x70>
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e000      	b.n	800b9ae <xQueueSemaphoreTake+0x72>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10d      	bne.n	800b9ce <xQueueSemaphoreTake+0x92>
	__asm volatile
 800b9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b6:	b672      	cpsid	i
 800b9b8:	f383 8811 	msr	BASEPRI, r3
 800b9bc:	f3bf 8f6f 	isb	sy
 800b9c0:	f3bf 8f4f 	dsb	sy
 800b9c4:	b662      	cpsie	i
 800b9c6:	61bb      	str	r3, [r7, #24]
}
 800b9c8:	bf00      	nop
 800b9ca:	bf00      	nop
 800b9cc:	e7fd      	b.n	800b9ca <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9ce:	f001 fc45 	bl	800d25c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9d6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d024      	beq.n	800ba28 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9e0:	1e5a      	subs	r2, r3, #1
 800b9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d104      	bne.n	800b9f8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b9ee:	f001 faab 	bl	800cf48 <pvTaskIncrementMutexHeldCount>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00f      	beq.n	800ba20 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba02:	3310      	adds	r3, #16
 800ba04:	4618      	mov	r0, r3
 800ba06:	f000 ff07 	bl	800c818 <xTaskRemoveFromEventList>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d007      	beq.n	800ba20 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba10:	4b55      	ldr	r3, [pc, #340]	@ (800bb68 <xQueueSemaphoreTake+0x22c>)
 800ba12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba16:	601a      	str	r2, [r3, #0]
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba20:	f001 fc52 	bl	800d2c8 <vPortExitCritical>
				return pdPASS;
 800ba24:	2301      	movs	r3, #1
 800ba26:	e09a      	b.n	800bb5e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d114      	bne.n	800ba58 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ba2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00d      	beq.n	800ba50 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800ba34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba38:	b672      	cpsid	i
 800ba3a:	f383 8811 	msr	BASEPRI, r3
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	b662      	cpsie	i
 800ba48:	617b      	str	r3, [r7, #20]
}
 800ba4a:	bf00      	nop
 800ba4c:	bf00      	nop
 800ba4e:	e7fd      	b.n	800ba4c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ba50:	f001 fc3a 	bl	800d2c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba54:	2300      	movs	r3, #0
 800ba56:	e082      	b.n	800bb5e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d106      	bne.n	800ba6c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba5e:	f107 030c 	add.w	r3, r7, #12
 800ba62:	4618      	mov	r0, r3
 800ba64:	f000 ff3e 	bl	800c8e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba6c:	f001 fc2c 	bl	800d2c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba70:	f000 fcda 	bl	800c428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba74:	f001 fbf2 	bl	800d25c <vPortEnterCritical>
 800ba78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba7e:	b25b      	sxtb	r3, r3
 800ba80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba84:	d103      	bne.n	800ba8e <xQueueSemaphoreTake+0x152>
 800ba86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba94:	b25b      	sxtb	r3, r3
 800ba96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba9a:	d103      	bne.n	800baa4 <xQueueSemaphoreTake+0x168>
 800ba9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800baa4:	f001 fc10 	bl	800d2c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800baa8:	463a      	mov	r2, r7
 800baaa:	f107 030c 	add.w	r3, r7, #12
 800baae:	4611      	mov	r1, r2
 800bab0:	4618      	mov	r0, r3
 800bab2:	f000 ff2d 	bl	800c910 <xTaskCheckForTimeOut>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d132      	bne.n	800bb22 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800babc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800babe:	f000 f9fd 	bl	800bebc <prvIsQueueEmpty>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d026      	beq.n	800bb16 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d109      	bne.n	800bae4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800bad0:	f001 fbc4 	bl	800d25c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	4618      	mov	r0, r3
 800bada:	f001 f889 	bl	800cbf0 <xTaskPriorityInherit>
 800bade:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800bae0:	f001 fbf2 	bl	800d2c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae6:	3324      	adds	r3, #36	@ 0x24
 800bae8:	683a      	ldr	r2, [r7, #0]
 800baea:	4611      	mov	r1, r2
 800baec:	4618      	mov	r0, r3
 800baee:	f000 fe6b 	bl	800c7c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800baf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800baf4:	f000 f990 	bl	800be18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800baf8:	f000 fca4 	bl	800c444 <xTaskResumeAll>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f47f af65 	bne.w	800b9ce <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800bb04:	4b18      	ldr	r3, [pc, #96]	@ (800bb68 <xQueueSemaphoreTake+0x22c>)
 800bb06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb0a:	601a      	str	r2, [r3, #0]
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	f3bf 8f6f 	isb	sy
 800bb14:	e75b      	b.n	800b9ce <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bb16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb18:	f000 f97e 	bl	800be18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb1c:	f000 fc92 	bl	800c444 <xTaskResumeAll>
 800bb20:	e755      	b.n	800b9ce <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bb22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb24:	f000 f978 	bl	800be18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb28:	f000 fc8c 	bl	800c444 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb2e:	f000 f9c5 	bl	800bebc <prvIsQueueEmpty>
 800bb32:	4603      	mov	r3, r0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f43f af4a 	beq.w	800b9ce <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00d      	beq.n	800bb5c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800bb40:	f001 fb8c 	bl	800d25c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bb44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb46:	f000 f8bf 	bl	800bcc8 <prvGetDisinheritPriorityAfterTimeout>
 800bb4a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bb4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb52:	4618      	mov	r0, r3
 800bb54:	f001 f958 	bl	800ce08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bb58:	f001 fbb6 	bl	800d2c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3738      	adds	r7, #56	@ 0x38
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	e000ed04 	.word	0xe000ed04

0800bb6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b08e      	sub	sp, #56	@ 0x38
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10d      	bne.n	800bb9e <xQueueReceiveFromISR+0x32>
	__asm volatile
 800bb82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb86:	b672      	cpsid	i
 800bb88:	f383 8811 	msr	BASEPRI, r3
 800bb8c:	f3bf 8f6f 	isb	sy
 800bb90:	f3bf 8f4f 	dsb	sy
 800bb94:	b662      	cpsie	i
 800bb96:	623b      	str	r3, [r7, #32]
}
 800bb98:	bf00      	nop
 800bb9a:	bf00      	nop
 800bb9c:	e7fd      	b.n	800bb9a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d103      	bne.n	800bbac <xQueueReceiveFromISR+0x40>
 800bba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d101      	bne.n	800bbb0 <xQueueReceiveFromISR+0x44>
 800bbac:	2301      	movs	r3, #1
 800bbae:	e000      	b.n	800bbb2 <xQueueReceiveFromISR+0x46>
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10d      	bne.n	800bbd2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800bbb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbba:	b672      	cpsid	i
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	b662      	cpsie	i
 800bbca:	61fb      	str	r3, [r7, #28]
}
 800bbcc:	bf00      	nop
 800bbce:	bf00      	nop
 800bbd0:	e7fd      	b.n	800bbce <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bbd2:	f001 fc2b 	bl	800d42c <vPortValidateInterruptPriority>
	__asm volatile
 800bbd6:	f3ef 8211 	mrs	r2, BASEPRI
 800bbda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbde:	b672      	cpsid	i
 800bbe0:	f383 8811 	msr	BASEPRI, r3
 800bbe4:	f3bf 8f6f 	isb	sy
 800bbe8:	f3bf 8f4f 	dsb	sy
 800bbec:	b662      	cpsie	i
 800bbee:	61ba      	str	r2, [r7, #24]
 800bbf0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bbf2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbfa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bbfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d02f      	beq.n	800bc62 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc0c:	68b9      	ldr	r1, [r7, #8]
 800bc0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc10:	f000 f8dc 	bl	800bdcc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc16:	1e5a      	subs	r2, r3, #1
 800bc18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc1a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bc1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bc20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc24:	d112      	bne.n	800bc4c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc28:	691b      	ldr	r3, [r3, #16]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d016      	beq.n	800bc5c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc30:	3310      	adds	r3, #16
 800bc32:	4618      	mov	r0, r3
 800bc34:	f000 fdf0 	bl	800c818 <xTaskRemoveFromEventList>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00e      	beq.n	800bc5c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00b      	beq.n	800bc5c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	601a      	str	r2, [r3, #0]
 800bc4a:	e007      	b.n	800bc5c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bc4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc50:	3301      	adds	r3, #1
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	b25a      	sxtb	r2, r3
 800bc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc60:	e001      	b.n	800bc66 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800bc62:	2300      	movs	r3, #0
 800bc64:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc68:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	f383 8811 	msr	BASEPRI, r3
}
 800bc70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3738      	adds	r7, #56	@ 0x38
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10d      	bne.n	800bcaa <vQueueDelete+0x2e>
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc92:	b672      	cpsid	i
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	b662      	cpsie	i
 800bca2:	60bb      	str	r3, [r7, #8]
}
 800bca4:	bf00      	nop
 800bca6:	bf00      	nop
 800bca8:	e7fd      	b.n	800bca6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f000 f934 	bl	800bf18 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d102      	bne.n	800bcc0 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f001 fcca 	bl	800d654 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bcc0:	bf00      	nop
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d006      	beq.n	800bce6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f1c3 0307 	rsb	r3, r3, #7
 800bce2:	60fb      	str	r3, [r7, #12]
 800bce4:	e001      	b.n	800bcea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bce6:	2300      	movs	r3, #0
 800bce8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bcea:	68fb      	ldr	r3, [r7, #12]
	}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3714      	adds	r7, #20
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bd04:	2300      	movs	r3, #0
 800bd06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d10d      	bne.n	800bd32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d14d      	bne.n	800bdba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f000 ffe4 	bl	800ccf0 <xTaskPriorityDisinherit>
 800bd28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	609a      	str	r2, [r3, #8]
 800bd30:	e043      	b.n	800bdba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d119      	bne.n	800bd6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	6858      	ldr	r0, [r3, #4]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd40:	461a      	mov	r2, r3
 800bd42:	68b9      	ldr	r1, [r7, #8]
 800bd44:	f002 fba5 	bl	800e492 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd50:	441a      	add	r2, r3
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	685a      	ldr	r2, [r3, #4]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d32b      	bcc.n	800bdba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	605a      	str	r2, [r3, #4]
 800bd6a:	e026      	b.n	800bdba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	68d8      	ldr	r0, [r3, #12]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd74:	461a      	mov	r2, r3
 800bd76:	68b9      	ldr	r1, [r7, #8]
 800bd78:	f002 fb8b 	bl	800e492 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	68da      	ldr	r2, [r3, #12]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd84:	425b      	negs	r3, r3
 800bd86:	441a      	add	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	68da      	ldr	r2, [r3, #12]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d207      	bcs.n	800bda8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	689a      	ldr	r2, [r3, #8]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bda0:	425b      	negs	r3, r3
 800bda2:	441a      	add	r2, r3
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b02      	cmp	r3, #2
 800bdac:	d105      	bne.n	800bdba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d002      	beq.n	800bdba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	1c5a      	adds	r2, r3, #1
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bdc2:	697b      	ldr	r3, [r7, #20]
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3718      	adds	r7, #24
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d018      	beq.n	800be10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	68da      	ldr	r2, [r3, #12]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bde6:	441a      	add	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	68da      	ldr	r2, [r3, #12]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d303      	bcc.n	800be00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	68d9      	ldr	r1, [r3, #12]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be08:	461a      	mov	r2, r3
 800be0a:	6838      	ldr	r0, [r7, #0]
 800be0c:	f002 fb41 	bl	800e492 <memcpy>
	}
}
 800be10:	bf00      	nop
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800be20:	f001 fa1c 	bl	800d25c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be2c:	e011      	b.n	800be52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be32:	2b00      	cmp	r3, #0
 800be34:	d012      	beq.n	800be5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	3324      	adds	r3, #36	@ 0x24
 800be3a:	4618      	mov	r0, r3
 800be3c:	f000 fcec 	bl	800c818 <xTaskRemoveFromEventList>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d001      	beq.n	800be4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800be46:	f000 fdcb 	bl	800c9e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
 800be4c:	3b01      	subs	r3, #1
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be56:	2b00      	cmp	r3, #0
 800be58:	dce9      	bgt.n	800be2e <prvUnlockQueue+0x16>
 800be5a:	e000      	b.n	800be5e <prvUnlockQueue+0x46>
					break;
 800be5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	22ff      	movs	r2, #255	@ 0xff
 800be62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800be66:	f001 fa2f 	bl	800d2c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800be6a:	f001 f9f7 	bl	800d25c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be76:	e011      	b.n	800be9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	691b      	ldr	r3, [r3, #16]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d012      	beq.n	800bea6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	3310      	adds	r3, #16
 800be84:	4618      	mov	r0, r3
 800be86:	f000 fcc7 	bl	800c818 <xTaskRemoveFromEventList>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800be90:	f000 fda6 	bl	800c9e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800be94:	7bbb      	ldrb	r3, [r7, #14]
 800be96:	3b01      	subs	r3, #1
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	dce9      	bgt.n	800be78 <prvUnlockQueue+0x60>
 800bea4:	e000      	b.n	800bea8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bea6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	22ff      	movs	r2, #255	@ 0xff
 800beac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800beb0:	f001 fa0a 	bl	800d2c8 <vPortExitCritical>
}
 800beb4:	bf00      	nop
 800beb6:	3710      	adds	r7, #16
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bec4:	f001 f9ca 	bl	800d25c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800becc:	2b00      	cmp	r3, #0
 800bece:	d102      	bne.n	800bed6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bed0:	2301      	movs	r3, #1
 800bed2:	60fb      	str	r3, [r7, #12]
 800bed4:	e001      	b.n	800beda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bed6:	2300      	movs	r3, #0
 800bed8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800beda:	f001 f9f5 	bl	800d2c8 <vPortExitCritical>

	return xReturn;
 800bede:	68fb      	ldr	r3, [r7, #12]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3710      	adds	r7, #16
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bef0:	f001 f9b4 	bl	800d25c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800befc:	429a      	cmp	r2, r3
 800befe:	d102      	bne.n	800bf06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bf00:	2301      	movs	r3, #1
 800bf02:	60fb      	str	r3, [r7, #12]
 800bf04:	e001      	b.n	800bf0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bf06:	2300      	movs	r3, #0
 800bf08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf0a:	f001 f9dd 	bl	800d2c8 <vPortExitCritical>

	return xReturn;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf20:	2300      	movs	r3, #0
 800bf22:	60fb      	str	r3, [r7, #12]
 800bf24:	e016      	b.n	800bf54 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bf26:	4a10      	ldr	r2, [pc, #64]	@ (800bf68 <vQueueUnregisterQueue+0x50>)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	00db      	lsls	r3, r3, #3
 800bf2c:	4413      	add	r3, r2
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d10b      	bne.n	800bf4e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bf36:	4a0c      	ldr	r2, [pc, #48]	@ (800bf68 <vQueueUnregisterQueue+0x50>)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2100      	movs	r1, #0
 800bf3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bf40:	4a09      	ldr	r2, [pc, #36]	@ (800bf68 <vQueueUnregisterQueue+0x50>)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	00db      	lsls	r3, r3, #3
 800bf46:	4413      	add	r3, r2
 800bf48:	2200      	movs	r2, #0
 800bf4a:	605a      	str	r2, [r3, #4]
				break;
 800bf4c:	e006      	b.n	800bf5c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	3301      	adds	r3, #1
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b07      	cmp	r3, #7
 800bf58:	d9e5      	bls.n	800bf26 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bf5a:	bf00      	nop
 800bf5c:	bf00      	nop
 800bf5e:	3714      	adds	r7, #20
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr
 800bf68:	20000f40 	.word	0x20000f40

0800bf6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b08e      	sub	sp, #56	@ 0x38
 800bf70:	af04      	add	r7, sp, #16
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
 800bf78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bf7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d10d      	bne.n	800bf9c <xTaskCreateStatic+0x30>
	__asm volatile
 800bf80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf84:	b672      	cpsid	i
 800bf86:	f383 8811 	msr	BASEPRI, r3
 800bf8a:	f3bf 8f6f 	isb	sy
 800bf8e:	f3bf 8f4f 	dsb	sy
 800bf92:	b662      	cpsie	i
 800bf94:	623b      	str	r3, [r7, #32]
}
 800bf96:	bf00      	nop
 800bf98:	bf00      	nop
 800bf9a:	e7fd      	b.n	800bf98 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bf9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d10d      	bne.n	800bfbe <xTaskCreateStatic+0x52>
	__asm volatile
 800bfa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa6:	b672      	cpsid	i
 800bfa8:	f383 8811 	msr	BASEPRI, r3
 800bfac:	f3bf 8f6f 	isb	sy
 800bfb0:	f3bf 8f4f 	dsb	sy
 800bfb4:	b662      	cpsie	i
 800bfb6:	61fb      	str	r3, [r7, #28]
}
 800bfb8:	bf00      	nop
 800bfba:	bf00      	nop
 800bfbc:	e7fd      	b.n	800bfba <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bfbe:	23a0      	movs	r3, #160	@ 0xa0
 800bfc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	2ba0      	cmp	r3, #160	@ 0xa0
 800bfc6:	d00d      	beq.n	800bfe4 <xTaskCreateStatic+0x78>
	__asm volatile
 800bfc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfcc:	b672      	cpsid	i
 800bfce:	f383 8811 	msr	BASEPRI, r3
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	b662      	cpsie	i
 800bfdc:	61bb      	str	r3, [r7, #24]
}
 800bfde:	bf00      	nop
 800bfe0:	bf00      	nop
 800bfe2:	e7fd      	b.n	800bfe0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bfe4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bfe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d01e      	beq.n	800c02a <xTaskCreateStatic+0xbe>
 800bfec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d01b      	beq.n	800c02a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bffa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffe:	2202      	movs	r2, #2
 800c000:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c004:	2300      	movs	r3, #0
 800c006:	9303      	str	r3, [sp, #12]
 800c008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c00a:	9302      	str	r3, [sp, #8]
 800c00c:	f107 0314 	add.w	r3, r7, #20
 800c010:	9301      	str	r3, [sp, #4]
 800c012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	68b9      	ldr	r1, [r7, #8]
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f000 f851 	bl	800c0c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c022:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c024:	f000 f8f0 	bl	800c208 <prvAddNewTaskToReadyList>
 800c028:	e001      	b.n	800c02e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800c02a:	2300      	movs	r3, #0
 800c02c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c02e:	697b      	ldr	r3, [r7, #20]
	}
 800c030:	4618      	mov	r0, r3
 800c032:	3728      	adds	r7, #40	@ 0x28
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b08c      	sub	sp, #48	@ 0x30
 800c03c:	af04      	add	r7, sp, #16
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	603b      	str	r3, [r7, #0]
 800c044:	4613      	mov	r3, r2
 800c046:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c048:	88fb      	ldrh	r3, [r7, #6]
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	4618      	mov	r0, r3
 800c04e:	f001 fa33 	bl	800d4b8 <pvPortMalloc>
 800c052:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00e      	beq.n	800c078 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c05a:	20a0      	movs	r0, #160	@ 0xa0
 800c05c:	f001 fa2c 	bl	800d4b8 <pvPortMalloc>
 800c060:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d003      	beq.n	800c070 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	697a      	ldr	r2, [r7, #20]
 800c06c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c06e:	e005      	b.n	800c07c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c070:	6978      	ldr	r0, [r7, #20]
 800c072:	f001 faef 	bl	800d654 <vPortFree>
 800c076:	e001      	b.n	800c07c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c078:	2300      	movs	r3, #0
 800c07a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d017      	beq.n	800c0b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	2200      	movs	r2, #0
 800c086:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c08a:	88fa      	ldrh	r2, [r7, #6]
 800c08c:	2300      	movs	r3, #0
 800c08e:	9303      	str	r3, [sp, #12]
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	9302      	str	r3, [sp, #8]
 800c094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c096:	9301      	str	r3, [sp, #4]
 800c098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09a:	9300      	str	r3, [sp, #0]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	68b9      	ldr	r1, [r7, #8]
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f000 f80f 	bl	800c0c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0a6:	69f8      	ldr	r0, [r7, #28]
 800c0a8:	f000 f8ae 	bl	800c208 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	61bb      	str	r3, [r7, #24]
 800c0b0:	e002      	b.n	800c0b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c0b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c0b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c0b8:	69bb      	ldr	r3, [r7, #24]
	}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3720      	adds	r7, #32
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
	...

0800c0c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b088      	sub	sp, #32
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	607a      	str	r2, [r7, #4]
 800c0d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c0d6:	6879      	ldr	r1, [r7, #4]
 800c0d8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c0dc:	440b      	add	r3, r1
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	f023 0307 	bic.w	r3, r3, #7
 800c0ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	f003 0307 	and.w	r3, r3, #7
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00d      	beq.n	800c112 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800c0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0fa:	b672      	cpsid	i
 800c0fc:	f383 8811 	msr	BASEPRI, r3
 800c100:	f3bf 8f6f 	isb	sy
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	b662      	cpsie	i
 800c10a:	617b      	str	r3, [r7, #20]
}
 800c10c:	bf00      	nop
 800c10e:	bf00      	nop
 800c110:	e7fd      	b.n	800c10e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d01f      	beq.n	800c158 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c118:	2300      	movs	r3, #0
 800c11a:	61fb      	str	r3, [r7, #28]
 800c11c:	e012      	b.n	800c144 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	69fb      	ldr	r3, [r7, #28]
 800c122:	4413      	add	r3, r2
 800c124:	7819      	ldrb	r1, [r3, #0]
 800c126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c128:	69fb      	ldr	r3, [r7, #28]
 800c12a:	4413      	add	r3, r2
 800c12c:	3334      	adds	r3, #52	@ 0x34
 800c12e:	460a      	mov	r2, r1
 800c130:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c132:	68ba      	ldr	r2, [r7, #8]
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	4413      	add	r3, r2
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d006      	beq.n	800c14c <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	3301      	adds	r3, #1
 800c142:	61fb      	str	r3, [r7, #28]
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	2b0f      	cmp	r3, #15
 800c148:	d9e9      	bls.n	800c11e <prvInitialiseNewTask+0x5a>
 800c14a:	e000      	b.n	800c14e <prvInitialiseNewTask+0x8a>
			{
				break;
 800c14c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c156:	e003      	b.n	800c160 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c15a:	2200      	movs	r2, #0
 800c15c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c162:	2b06      	cmp	r3, #6
 800c164:	d901      	bls.n	800c16a <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c166:	2306      	movs	r3, #6
 800c168:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c16c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c16e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c172:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c174:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c178:	2200      	movs	r2, #0
 800c17a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c17e:	3304      	adds	r3, #4
 800c180:	4618      	mov	r0, r3
 800c182:	f7ff f84e 	bl	800b222 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c188:	3318      	adds	r3, #24
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7ff f849 	bl	800b222 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c194:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c198:	f1c3 0207 	rsb	r2, r3, #7
 800c19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c19e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b8:	334c      	adds	r3, #76	@ 0x4c
 800c1ba:	224c      	movs	r2, #76	@ 0x4c
 800c1bc:	2100      	movs	r1, #0
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f002 f8d8 	bl	800e374 <memset>
 800c1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c6:	4a0d      	ldr	r2, [pc, #52]	@ (800c1fc <prvInitialiseNewTask+0x138>)
 800c1c8:	651a      	str	r2, [r3, #80]	@ 0x50
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1cc:	4a0c      	ldr	r2, [pc, #48]	@ (800c200 <prvInitialiseNewTask+0x13c>)
 800c1ce:	655a      	str	r2, [r3, #84]	@ 0x54
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d2:	4a0c      	ldr	r2, [pc, #48]	@ (800c204 <prvInitialiseNewTask+0x140>)
 800c1d4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c1d6:	683a      	ldr	r2, [r7, #0]
 800c1d8:	68f9      	ldr	r1, [r7, #12]
 800c1da:	69b8      	ldr	r0, [r7, #24]
 800c1dc:	f000 ff2e 	bl	800d03c <pxPortInitialiseStack>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d002      	beq.n	800c1f2 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1f2:	bf00      	nop
 800c1f4:	3720      	adds	r7, #32
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20004ccc 	.word	0x20004ccc
 800c200:	20004d34 	.word	0x20004d34
 800c204:	20004d9c 	.word	0x20004d9c

0800c208 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c210:	f001 f824 	bl	800d25c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c214:	4b2a      	ldr	r3, [pc, #168]	@ (800c2c0 <prvAddNewTaskToReadyList+0xb8>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	3301      	adds	r3, #1
 800c21a:	4a29      	ldr	r2, [pc, #164]	@ (800c2c0 <prvAddNewTaskToReadyList+0xb8>)
 800c21c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c21e:	4b29      	ldr	r3, [pc, #164]	@ (800c2c4 <prvAddNewTaskToReadyList+0xbc>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d109      	bne.n	800c23a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c226:	4a27      	ldr	r2, [pc, #156]	@ (800c2c4 <prvAddNewTaskToReadyList+0xbc>)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c22c:	4b24      	ldr	r3, [pc, #144]	@ (800c2c0 <prvAddNewTaskToReadyList+0xb8>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b01      	cmp	r3, #1
 800c232:	d110      	bne.n	800c256 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c234:	f000 fbf8 	bl	800ca28 <prvInitialiseTaskLists>
 800c238:	e00d      	b.n	800c256 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c23a:	4b23      	ldr	r3, [pc, #140]	@ (800c2c8 <prvAddNewTaskToReadyList+0xc0>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d109      	bne.n	800c256 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c242:	4b20      	ldr	r3, [pc, #128]	@ (800c2c4 <prvAddNewTaskToReadyList+0xbc>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d802      	bhi.n	800c256 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c250:	4a1c      	ldr	r2, [pc, #112]	@ (800c2c4 <prvAddNewTaskToReadyList+0xbc>)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c256:	4b1d      	ldr	r3, [pc, #116]	@ (800c2cc <prvAddNewTaskToReadyList+0xc4>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3301      	adds	r3, #1
 800c25c:	4a1b      	ldr	r2, [pc, #108]	@ (800c2cc <prvAddNewTaskToReadyList+0xc4>)
 800c25e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c264:	2201      	movs	r2, #1
 800c266:	409a      	lsls	r2, r3
 800c268:	4b19      	ldr	r3, [pc, #100]	@ (800c2d0 <prvAddNewTaskToReadyList+0xc8>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4313      	orrs	r3, r2
 800c26e:	4a18      	ldr	r2, [pc, #96]	@ (800c2d0 <prvAddNewTaskToReadyList+0xc8>)
 800c270:	6013      	str	r3, [r2, #0]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c276:	4613      	mov	r3, r2
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	4413      	add	r3, r2
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	4a15      	ldr	r2, [pc, #84]	@ (800c2d4 <prvAddNewTaskToReadyList+0xcc>)
 800c280:	441a      	add	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	3304      	adds	r3, #4
 800c286:	4619      	mov	r1, r3
 800c288:	4610      	mov	r0, r2
 800c28a:	f7fe ffd7 	bl	800b23c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c28e:	f001 f81b 	bl	800d2c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c292:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c8 <prvAddNewTaskToReadyList+0xc0>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00e      	beq.n	800c2b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c29a:	4b0a      	ldr	r3, [pc, #40]	@ (800c2c4 <prvAddNewTaskToReadyList+0xbc>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d207      	bcs.n	800c2b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c2a8:	4b0b      	ldr	r3, [pc, #44]	@ (800c2d8 <prvAddNewTaskToReadyList+0xd0>)
 800c2aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2ae:	601a      	str	r2, [r3, #0]
 800c2b0:	f3bf 8f4f 	dsb	sy
 800c2b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2b8:	bf00      	nop
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	20001080 	.word	0x20001080
 800c2c4:	20000f80 	.word	0x20000f80
 800c2c8:	2000108c 	.word	0x2000108c
 800c2cc:	2000109c 	.word	0x2000109c
 800c2d0:	20001088 	.word	0x20001088
 800c2d4:	20000f84 	.word	0x20000f84
 800c2d8:	e000ed04 	.word	0xe000ed04

0800c2dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d01a      	beq.n	800c324 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c2ee:	4b15      	ldr	r3, [pc, #84]	@ (800c344 <vTaskDelay+0x68>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00d      	beq.n	800c312 <vTaskDelay+0x36>
	__asm volatile
 800c2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2fa:	b672      	cpsid	i
 800c2fc:	f383 8811 	msr	BASEPRI, r3
 800c300:	f3bf 8f6f 	isb	sy
 800c304:	f3bf 8f4f 	dsb	sy
 800c308:	b662      	cpsie	i
 800c30a:	60bb      	str	r3, [r7, #8]
}
 800c30c:	bf00      	nop
 800c30e:	bf00      	nop
 800c310:	e7fd      	b.n	800c30e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c312:	f000 f889 	bl	800c428 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c316:	2100      	movs	r1, #0
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 fe29 	bl	800cf70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c31e:	f000 f891 	bl	800c444 <xTaskResumeAll>
 800c322:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d107      	bne.n	800c33a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800c32a:	4b07      	ldr	r3, [pc, #28]	@ (800c348 <vTaskDelay+0x6c>)
 800c32c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c330:	601a      	str	r2, [r3, #0]
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c33a:	bf00      	nop
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	200010a8 	.word	0x200010a8
 800c348:	e000ed04 	.word	0xe000ed04

0800c34c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b08a      	sub	sp, #40	@ 0x28
 800c350:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c352:	2300      	movs	r3, #0
 800c354:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c356:	2300      	movs	r3, #0
 800c358:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c35a:	463a      	mov	r2, r7
 800c35c:	1d39      	adds	r1, r7, #4
 800c35e:	f107 0308 	add.w	r3, r7, #8
 800c362:	4618      	mov	r0, r3
 800c364:	f7f4 fe10 	bl	8000f88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c368:	6839      	ldr	r1, [r7, #0]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	68ba      	ldr	r2, [r7, #8]
 800c36e:	9202      	str	r2, [sp, #8]
 800c370:	9301      	str	r3, [sp, #4]
 800c372:	2300      	movs	r3, #0
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	2300      	movs	r3, #0
 800c378:	460a      	mov	r2, r1
 800c37a:	4923      	ldr	r1, [pc, #140]	@ (800c408 <vTaskStartScheduler+0xbc>)
 800c37c:	4823      	ldr	r0, [pc, #140]	@ (800c40c <vTaskStartScheduler+0xc0>)
 800c37e:	f7ff fdf5 	bl	800bf6c <xTaskCreateStatic>
 800c382:	4603      	mov	r3, r0
 800c384:	4a22      	ldr	r2, [pc, #136]	@ (800c410 <vTaskStartScheduler+0xc4>)
 800c386:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c388:	4b21      	ldr	r3, [pc, #132]	@ (800c410 <vTaskStartScheduler+0xc4>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d002      	beq.n	800c396 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c390:	2301      	movs	r3, #1
 800c392:	617b      	str	r3, [r7, #20]
 800c394:	e001      	b.n	800c39a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c396:	2300      	movs	r3, #0
 800c398:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d11d      	bne.n	800c3dc <vTaskStartScheduler+0x90>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a4:	b672      	cpsid	i
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	b662      	cpsie	i
 800c3b4:	613b      	str	r3, [r7, #16]
}
 800c3b6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c3b8:	4b16      	ldr	r3, [pc, #88]	@ (800c414 <vTaskStartScheduler+0xc8>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	334c      	adds	r3, #76	@ 0x4c
 800c3be:	4a16      	ldr	r2, [pc, #88]	@ (800c418 <vTaskStartScheduler+0xcc>)
 800c3c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c3c2:	4b16      	ldr	r3, [pc, #88]	@ (800c41c <vTaskStartScheduler+0xd0>)
 800c3c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c3ca:	4b15      	ldr	r3, [pc, #84]	@ (800c420 <vTaskStartScheduler+0xd4>)
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c3d0:	4b14      	ldr	r3, [pc, #80]	@ (800c424 <vTaskStartScheduler+0xd8>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c3d6:	f000 fec3 	bl	800d160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c3da:	e011      	b.n	800c400 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3e2:	d10d      	bne.n	800c400 <vTaskStartScheduler+0xb4>
	__asm volatile
 800c3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e8:	b672      	cpsid	i
 800c3ea:	f383 8811 	msr	BASEPRI, r3
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	b662      	cpsie	i
 800c3f8:	60fb      	str	r3, [r7, #12]
}
 800c3fa:	bf00      	nop
 800c3fc:	bf00      	nop
 800c3fe:	e7fd      	b.n	800c3fc <vTaskStartScheduler+0xb0>
}
 800c400:	bf00      	nop
 800c402:	3718      	adds	r7, #24
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	08010b80 	.word	0x08010b80
 800c40c:	0800c9f9 	.word	0x0800c9f9
 800c410:	200010a4 	.word	0x200010a4
 800c414:	20000f80 	.word	0x20000f80
 800c418:	20000040 	.word	0x20000040
 800c41c:	200010a0 	.word	0x200010a0
 800c420:	2000108c 	.word	0x2000108c
 800c424:	20001084 	.word	0x20001084

0800c428 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c428:	b480      	push	{r7}
 800c42a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c42c:	4b04      	ldr	r3, [pc, #16]	@ (800c440 <vTaskSuspendAll+0x18>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	3301      	adds	r3, #1
 800c432:	4a03      	ldr	r2, [pc, #12]	@ (800c440 <vTaskSuspendAll+0x18>)
 800c434:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c436:	bf00      	nop
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr
 800c440:	200010a8 	.word	0x200010a8

0800c444 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c44a:	2300      	movs	r3, #0
 800c44c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c44e:	2300      	movs	r3, #0
 800c450:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c452:	4b43      	ldr	r3, [pc, #268]	@ (800c560 <xTaskResumeAll+0x11c>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10d      	bne.n	800c476 <xTaskResumeAll+0x32>
	__asm volatile
 800c45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c45e:	b672      	cpsid	i
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	b662      	cpsie	i
 800c46e:	603b      	str	r3, [r7, #0]
}
 800c470:	bf00      	nop
 800c472:	bf00      	nop
 800c474:	e7fd      	b.n	800c472 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c476:	f000 fef1 	bl	800d25c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c47a:	4b39      	ldr	r3, [pc, #228]	@ (800c560 <xTaskResumeAll+0x11c>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3b01      	subs	r3, #1
 800c480:	4a37      	ldr	r2, [pc, #220]	@ (800c560 <xTaskResumeAll+0x11c>)
 800c482:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c484:	4b36      	ldr	r3, [pc, #216]	@ (800c560 <xTaskResumeAll+0x11c>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d161      	bne.n	800c550 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c48c:	4b35      	ldr	r3, [pc, #212]	@ (800c564 <xTaskResumeAll+0x120>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d05d      	beq.n	800c550 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c494:	e02e      	b.n	800c4f4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c496:	4b34      	ldr	r3, [pc, #208]	@ (800c568 <xTaskResumeAll+0x124>)
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	3318      	adds	r3, #24
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fe ff27 	bl	800b2f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7fe ff22 	bl	800b2f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	409a      	lsls	r2, r3
 800c4ba:	4b2c      	ldr	r3, [pc, #176]	@ (800c56c <xTaskResumeAll+0x128>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	4a2a      	ldr	r2, [pc, #168]	@ (800c56c <xTaskResumeAll+0x128>)
 800c4c2:	6013      	str	r3, [r2, #0]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4c8:	4613      	mov	r3, r2
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	4413      	add	r3, r2
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4a27      	ldr	r2, [pc, #156]	@ (800c570 <xTaskResumeAll+0x12c>)
 800c4d2:	441a      	add	r2, r3
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4610      	mov	r0, r2
 800c4dc:	f7fe feae 	bl	800b23c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4e4:	4b23      	ldr	r3, [pc, #140]	@ (800c574 <xTaskResumeAll+0x130>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d302      	bcc.n	800c4f4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c4ee:	4b22      	ldr	r3, [pc, #136]	@ (800c578 <xTaskResumeAll+0x134>)
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4f4:	4b1c      	ldr	r3, [pc, #112]	@ (800c568 <xTaskResumeAll+0x124>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1cc      	bne.n	800c496 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d001      	beq.n	800c506 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c502:	f000 fb37 	bl	800cb74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c506:	4b1d      	ldr	r3, [pc, #116]	@ (800c57c <xTaskResumeAll+0x138>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d010      	beq.n	800c534 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c512:	f000 f837 	bl	800c584 <xTaskIncrementTick>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d002      	beq.n	800c522 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c51c:	4b16      	ldr	r3, [pc, #88]	@ (800c578 <xTaskResumeAll+0x134>)
 800c51e:	2201      	movs	r2, #1
 800c520:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	3b01      	subs	r3, #1
 800c526:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1f1      	bne.n	800c512 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c52e:	4b13      	ldr	r3, [pc, #76]	@ (800c57c <xTaskResumeAll+0x138>)
 800c530:	2200      	movs	r2, #0
 800c532:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c534:	4b10      	ldr	r3, [pc, #64]	@ (800c578 <xTaskResumeAll+0x134>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d009      	beq.n	800c550 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c53c:	2301      	movs	r3, #1
 800c53e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c540:	4b0f      	ldr	r3, [pc, #60]	@ (800c580 <xTaskResumeAll+0x13c>)
 800c542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c546:	601a      	str	r2, [r3, #0]
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c550:	f000 feba 	bl	800d2c8 <vPortExitCritical>

	return xAlreadyYielded;
 800c554:	68bb      	ldr	r3, [r7, #8]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	200010a8 	.word	0x200010a8
 800c564:	20001080 	.word	0x20001080
 800c568:	20001040 	.word	0x20001040
 800c56c:	20001088 	.word	0x20001088
 800c570:	20000f84 	.word	0x20000f84
 800c574:	20000f80 	.word	0x20000f80
 800c578:	20001094 	.word	0x20001094
 800c57c:	20001090 	.word	0x20001090
 800c580:	e000ed04 	.word	0xe000ed04

0800c584 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b086      	sub	sp, #24
 800c588:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c58a:	2300      	movs	r3, #0
 800c58c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c58e:	4b50      	ldr	r3, [pc, #320]	@ (800c6d0 <xTaskIncrementTick+0x14c>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2b00      	cmp	r3, #0
 800c594:	f040 808b 	bne.w	800c6ae <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c598:	4b4e      	ldr	r3, [pc, #312]	@ (800c6d4 <xTaskIncrementTick+0x150>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	3301      	adds	r3, #1
 800c59e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c5a0:	4a4c      	ldr	r2, [pc, #304]	@ (800c6d4 <xTaskIncrementTick+0x150>)
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d123      	bne.n	800c5f4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800c5ac:	4b4a      	ldr	r3, [pc, #296]	@ (800c6d8 <xTaskIncrementTick+0x154>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00d      	beq.n	800c5d2 <xTaskIncrementTick+0x4e>
	__asm volatile
 800c5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ba:	b672      	cpsid	i
 800c5bc:	f383 8811 	msr	BASEPRI, r3
 800c5c0:	f3bf 8f6f 	isb	sy
 800c5c4:	f3bf 8f4f 	dsb	sy
 800c5c8:	b662      	cpsie	i
 800c5ca:	603b      	str	r3, [r7, #0]
}
 800c5cc:	bf00      	nop
 800c5ce:	bf00      	nop
 800c5d0:	e7fd      	b.n	800c5ce <xTaskIncrementTick+0x4a>
 800c5d2:	4b41      	ldr	r3, [pc, #260]	@ (800c6d8 <xTaskIncrementTick+0x154>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	60fb      	str	r3, [r7, #12]
 800c5d8:	4b40      	ldr	r3, [pc, #256]	@ (800c6dc <xTaskIncrementTick+0x158>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a3e      	ldr	r2, [pc, #248]	@ (800c6d8 <xTaskIncrementTick+0x154>)
 800c5de:	6013      	str	r3, [r2, #0]
 800c5e0:	4a3e      	ldr	r2, [pc, #248]	@ (800c6dc <xTaskIncrementTick+0x158>)
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	6013      	str	r3, [r2, #0]
 800c5e6:	4b3e      	ldr	r3, [pc, #248]	@ (800c6e0 <xTaskIncrementTick+0x15c>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	4a3c      	ldr	r2, [pc, #240]	@ (800c6e0 <xTaskIncrementTick+0x15c>)
 800c5ee:	6013      	str	r3, [r2, #0]
 800c5f0:	f000 fac0 	bl	800cb74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c5f4:	4b3b      	ldr	r3, [pc, #236]	@ (800c6e4 <xTaskIncrementTick+0x160>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d348      	bcc.n	800c690 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5fe:	4b36      	ldr	r3, [pc, #216]	@ (800c6d8 <xTaskIncrementTick+0x154>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d104      	bne.n	800c612 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c608:	4b36      	ldr	r3, [pc, #216]	@ (800c6e4 <xTaskIncrementTick+0x160>)
 800c60a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c60e:	601a      	str	r2, [r3, #0]
					break;
 800c610:	e03e      	b.n	800c690 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c612:	4b31      	ldr	r3, [pc, #196]	@ (800c6d8 <xTaskIncrementTick+0x154>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c622:	693a      	ldr	r2, [r7, #16]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	429a      	cmp	r2, r3
 800c628:	d203      	bcs.n	800c632 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c62a:	4a2e      	ldr	r2, [pc, #184]	@ (800c6e4 <xTaskIncrementTick+0x160>)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c630:	e02e      	b.n	800c690 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	3304      	adds	r3, #4
 800c636:	4618      	mov	r0, r3
 800c638:	f7fe fe5d 	bl	800b2f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c640:	2b00      	cmp	r3, #0
 800c642:	d004      	beq.n	800c64e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	3318      	adds	r3, #24
 800c648:	4618      	mov	r0, r3
 800c64a:	f7fe fe54 	bl	800b2f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c652:	2201      	movs	r2, #1
 800c654:	409a      	lsls	r2, r3
 800c656:	4b24      	ldr	r3, [pc, #144]	@ (800c6e8 <xTaskIncrementTick+0x164>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4313      	orrs	r3, r2
 800c65c:	4a22      	ldr	r2, [pc, #136]	@ (800c6e8 <xTaskIncrementTick+0x164>)
 800c65e:	6013      	str	r3, [r2, #0]
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c664:	4613      	mov	r3, r2
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	4413      	add	r3, r2
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	4a1f      	ldr	r2, [pc, #124]	@ (800c6ec <xTaskIncrementTick+0x168>)
 800c66e:	441a      	add	r2, r3
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	3304      	adds	r3, #4
 800c674:	4619      	mov	r1, r3
 800c676:	4610      	mov	r0, r2
 800c678:	f7fe fde0 	bl	800b23c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c680:	4b1b      	ldr	r3, [pc, #108]	@ (800c6f0 <xTaskIncrementTick+0x16c>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c686:	429a      	cmp	r2, r3
 800c688:	d3b9      	bcc.n	800c5fe <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800c68a:	2301      	movs	r3, #1
 800c68c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c68e:	e7b6      	b.n	800c5fe <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c690:	4b17      	ldr	r3, [pc, #92]	@ (800c6f0 <xTaskIncrementTick+0x16c>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c696:	4915      	ldr	r1, [pc, #84]	@ (800c6ec <xTaskIncrementTick+0x168>)
 800c698:	4613      	mov	r3, r2
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	4413      	add	r3, r2
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	440b      	add	r3, r1
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d907      	bls.n	800c6b8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	617b      	str	r3, [r7, #20]
 800c6ac:	e004      	b.n	800c6b8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c6ae:	4b11      	ldr	r3, [pc, #68]	@ (800c6f4 <xTaskIncrementTick+0x170>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	4a0f      	ldr	r2, [pc, #60]	@ (800c6f4 <xTaskIncrementTick+0x170>)
 800c6b6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c6b8:	4b0f      	ldr	r3, [pc, #60]	@ (800c6f8 <xTaskIncrementTick+0x174>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d001      	beq.n	800c6c4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c6c4:	697b      	ldr	r3, [r7, #20]
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3718      	adds	r7, #24
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	200010a8 	.word	0x200010a8
 800c6d4:	20001084 	.word	0x20001084
 800c6d8:	20001038 	.word	0x20001038
 800c6dc:	2000103c 	.word	0x2000103c
 800c6e0:	20001098 	.word	0x20001098
 800c6e4:	200010a0 	.word	0x200010a0
 800c6e8:	20001088 	.word	0x20001088
 800c6ec:	20000f84 	.word	0x20000f84
 800c6f0:	20000f80 	.word	0x20000f80
 800c6f4:	20001090 	.word	0x20001090
 800c6f8:	20001094 	.word	0x20001094

0800c6fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b087      	sub	sp, #28
 800c700:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c702:	4b2b      	ldr	r3, [pc, #172]	@ (800c7b0 <vTaskSwitchContext+0xb4>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d003      	beq.n	800c712 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c70a:	4b2a      	ldr	r3, [pc, #168]	@ (800c7b4 <vTaskSwitchContext+0xb8>)
 800c70c:	2201      	movs	r2, #1
 800c70e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c710:	e047      	b.n	800c7a2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c712:	4b28      	ldr	r3, [pc, #160]	@ (800c7b4 <vTaskSwitchContext+0xb8>)
 800c714:	2200      	movs	r2, #0
 800c716:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c718:	4b27      	ldr	r3, [pc, #156]	@ (800c7b8 <vTaskSwitchContext+0xbc>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	fab3 f383 	clz	r3, r3
 800c724:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c726:	7afb      	ldrb	r3, [r7, #11]
 800c728:	f1c3 031f 	rsb	r3, r3, #31
 800c72c:	617b      	str	r3, [r7, #20]
 800c72e:	4923      	ldr	r1, [pc, #140]	@ (800c7bc <vTaskSwitchContext+0xc0>)
 800c730:	697a      	ldr	r2, [r7, #20]
 800c732:	4613      	mov	r3, r2
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	4413      	add	r3, r2
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	440b      	add	r3, r1
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d10d      	bne.n	800c75e <vTaskSwitchContext+0x62>
	__asm volatile
 800c742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c746:	b672      	cpsid	i
 800c748:	f383 8811 	msr	BASEPRI, r3
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	b662      	cpsie	i
 800c756:	607b      	str	r3, [r7, #4]
}
 800c758:	bf00      	nop
 800c75a:	bf00      	nop
 800c75c:	e7fd      	b.n	800c75a <vTaskSwitchContext+0x5e>
 800c75e:	697a      	ldr	r2, [r7, #20]
 800c760:	4613      	mov	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4413      	add	r3, r2
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	4a14      	ldr	r2, [pc, #80]	@ (800c7bc <vTaskSwitchContext+0xc0>)
 800c76a:	4413      	add	r3, r2
 800c76c:	613b      	str	r3, [r7, #16]
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	605a      	str	r2, [r3, #4]
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	3308      	adds	r3, #8
 800c780:	429a      	cmp	r2, r3
 800c782:	d104      	bne.n	800c78e <vTaskSwitchContext+0x92>
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	685a      	ldr	r2, [r3, #4]
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	605a      	str	r2, [r3, #4]
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	4a0a      	ldr	r2, [pc, #40]	@ (800c7c0 <vTaskSwitchContext+0xc4>)
 800c796:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c798:	4b09      	ldr	r3, [pc, #36]	@ (800c7c0 <vTaskSwitchContext+0xc4>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	334c      	adds	r3, #76	@ 0x4c
 800c79e:	4a09      	ldr	r2, [pc, #36]	@ (800c7c4 <vTaskSwitchContext+0xc8>)
 800c7a0:	6013      	str	r3, [r2, #0]
}
 800c7a2:	bf00      	nop
 800c7a4:	371c      	adds	r7, #28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	200010a8 	.word	0x200010a8
 800c7b4:	20001094 	.word	0x20001094
 800c7b8:	20001088 	.word	0x20001088
 800c7bc:	20000f84 	.word	0x20000f84
 800c7c0:	20000f80 	.word	0x20000f80
 800c7c4:	20000040 	.word	0x20000040

0800c7c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d10d      	bne.n	800c7f4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800c7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7dc:	b672      	cpsid	i
 800c7de:	f383 8811 	msr	BASEPRI, r3
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	b662      	cpsie	i
 800c7ec:	60fb      	str	r3, [r7, #12]
}
 800c7ee:	bf00      	nop
 800c7f0:	bf00      	nop
 800c7f2:	e7fd      	b.n	800c7f0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7f4:	4b07      	ldr	r3, [pc, #28]	@ (800c814 <vTaskPlaceOnEventList+0x4c>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	3318      	adds	r3, #24
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7fe fd41 	bl	800b284 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c802:	2101      	movs	r1, #1
 800c804:	6838      	ldr	r0, [r7, #0]
 800c806:	f000 fbb3 	bl	800cf70 <prvAddCurrentTaskToDelayedList>
}
 800c80a:	bf00      	nop
 800c80c:	3710      	adds	r7, #16
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	20000f80 	.word	0x20000f80

0800c818 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b086      	sub	sp, #24
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d10d      	bne.n	800c84a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800c82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c832:	b672      	cpsid	i
 800c834:	f383 8811 	msr	BASEPRI, r3
 800c838:	f3bf 8f6f 	isb	sy
 800c83c:	f3bf 8f4f 	dsb	sy
 800c840:	b662      	cpsie	i
 800c842:	60fb      	str	r3, [r7, #12]
}
 800c844:	bf00      	nop
 800c846:	bf00      	nop
 800c848:	e7fd      	b.n	800c846 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	3318      	adds	r3, #24
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fe fd51 	bl	800b2f6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c854:	4b1d      	ldr	r3, [pc, #116]	@ (800c8cc <xTaskRemoveFromEventList+0xb4>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d11c      	bne.n	800c896 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	3304      	adds	r3, #4
 800c860:	4618      	mov	r0, r3
 800c862:	f7fe fd48 	bl	800b2f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c86a:	2201      	movs	r2, #1
 800c86c:	409a      	lsls	r2, r3
 800c86e:	4b18      	ldr	r3, [pc, #96]	@ (800c8d0 <xTaskRemoveFromEventList+0xb8>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4313      	orrs	r3, r2
 800c874:	4a16      	ldr	r2, [pc, #88]	@ (800c8d0 <xTaskRemoveFromEventList+0xb8>)
 800c876:	6013      	str	r3, [r2, #0]
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c87c:	4613      	mov	r3, r2
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	4413      	add	r3, r2
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	4a13      	ldr	r2, [pc, #76]	@ (800c8d4 <xTaskRemoveFromEventList+0xbc>)
 800c886:	441a      	add	r2, r3
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	3304      	adds	r3, #4
 800c88c:	4619      	mov	r1, r3
 800c88e:	4610      	mov	r0, r2
 800c890:	f7fe fcd4 	bl	800b23c <vListInsertEnd>
 800c894:	e005      	b.n	800c8a2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	3318      	adds	r3, #24
 800c89a:	4619      	mov	r1, r3
 800c89c:	480e      	ldr	r0, [pc, #56]	@ (800c8d8 <xTaskRemoveFromEventList+0xc0>)
 800c89e:	f7fe fccd 	bl	800b23c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c8dc <xTaskRemoveFromEventList+0xc4>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d905      	bls.n	800c8bc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c8b4:	4b0a      	ldr	r3, [pc, #40]	@ (800c8e0 <xTaskRemoveFromEventList+0xc8>)
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	601a      	str	r2, [r3, #0]
 800c8ba:	e001      	b.n	800c8c0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c8c0:	697b      	ldr	r3, [r7, #20]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3718      	adds	r7, #24
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	200010a8 	.word	0x200010a8
 800c8d0:	20001088 	.word	0x20001088
 800c8d4:	20000f84 	.word	0x20000f84
 800c8d8:	20001040 	.word	0x20001040
 800c8dc:	20000f80 	.word	0x20000f80
 800c8e0:	20001094 	.word	0x20001094

0800c8e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c8ec:	4b06      	ldr	r3, [pc, #24]	@ (800c908 <vTaskInternalSetTimeOutState+0x24>)
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c8f4:	4b05      	ldr	r3, [pc, #20]	@ (800c90c <vTaskInternalSetTimeOutState+0x28>)
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	605a      	str	r2, [r3, #4]
}
 800c8fc:	bf00      	nop
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr
 800c908:	20001098 	.word	0x20001098
 800c90c:	20001084 	.word	0x20001084

0800c910 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b088      	sub	sp, #32
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d10d      	bne.n	800c93c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c924:	b672      	cpsid	i
 800c926:	f383 8811 	msr	BASEPRI, r3
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	b662      	cpsie	i
 800c934:	613b      	str	r3, [r7, #16]
}
 800c936:	bf00      	nop
 800c938:	bf00      	nop
 800c93a:	e7fd      	b.n	800c938 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10d      	bne.n	800c95e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800c942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c946:	b672      	cpsid	i
 800c948:	f383 8811 	msr	BASEPRI, r3
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	b662      	cpsie	i
 800c956:	60fb      	str	r3, [r7, #12]
}
 800c958:	bf00      	nop
 800c95a:	bf00      	nop
 800c95c:	e7fd      	b.n	800c95a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800c95e:	f000 fc7d 	bl	800d25c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c962:	4b1d      	ldr	r3, [pc, #116]	@ (800c9d8 <xTaskCheckForTimeOut+0xc8>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	69ba      	ldr	r2, [r7, #24]
 800c96e:	1ad3      	subs	r3, r2, r3
 800c970:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c97a:	d102      	bne.n	800c982 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c97c:	2300      	movs	r3, #0
 800c97e:	61fb      	str	r3, [r7, #28]
 800c980:	e023      	b.n	800c9ca <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	4b15      	ldr	r3, [pc, #84]	@ (800c9dc <xTaskCheckForTimeOut+0xcc>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d007      	beq.n	800c99e <xTaskCheckForTimeOut+0x8e>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	69ba      	ldr	r2, [r7, #24]
 800c994:	429a      	cmp	r2, r3
 800c996:	d302      	bcc.n	800c99e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c998:	2301      	movs	r3, #1
 800c99a:	61fb      	str	r3, [r7, #28]
 800c99c:	e015      	b.n	800c9ca <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	697a      	ldr	r2, [r7, #20]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d20b      	bcs.n	800c9c0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	1ad2      	subs	r2, r2, r3
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f7ff ff95 	bl	800c8e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	61fb      	str	r3, [r7, #28]
 800c9be:	e004      	b.n	800c9ca <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c9ca:	f000 fc7d 	bl	800d2c8 <vPortExitCritical>

	return xReturn;
 800c9ce:	69fb      	ldr	r3, [r7, #28]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3720      	adds	r7, #32
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	20001084 	.word	0x20001084
 800c9dc:	20001098 	.word	0x20001098

0800c9e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c9e4:	4b03      	ldr	r3, [pc, #12]	@ (800c9f4 <vTaskMissedYield+0x14>)
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	601a      	str	r2, [r3, #0]
}
 800c9ea:	bf00      	nop
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr
 800c9f4:	20001094 	.word	0x20001094

0800c9f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ca00:	f000 f852 	bl	800caa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ca04:	4b06      	ldr	r3, [pc, #24]	@ (800ca20 <prvIdleTask+0x28>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d9f9      	bls.n	800ca00 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ca0c:	4b05      	ldr	r3, [pc, #20]	@ (800ca24 <prvIdleTask+0x2c>)
 800ca0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca12:	601a      	str	r2, [r3, #0]
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ca1c:	e7f0      	b.n	800ca00 <prvIdleTask+0x8>
 800ca1e:	bf00      	nop
 800ca20:	20000f84 	.word	0x20000f84
 800ca24:	e000ed04 	.word	0xe000ed04

0800ca28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca2e:	2300      	movs	r3, #0
 800ca30:	607b      	str	r3, [r7, #4]
 800ca32:	e00c      	b.n	800ca4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	4613      	mov	r3, r2
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	4413      	add	r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	4a12      	ldr	r2, [pc, #72]	@ (800ca88 <prvInitialiseTaskLists+0x60>)
 800ca40:	4413      	add	r3, r2
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fe fbcd 	bl	800b1e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	607b      	str	r3, [r7, #4]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2b06      	cmp	r3, #6
 800ca52:	d9ef      	bls.n	800ca34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca54:	480d      	ldr	r0, [pc, #52]	@ (800ca8c <prvInitialiseTaskLists+0x64>)
 800ca56:	f7fe fbc4 	bl	800b1e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca5a:	480d      	ldr	r0, [pc, #52]	@ (800ca90 <prvInitialiseTaskLists+0x68>)
 800ca5c:	f7fe fbc1 	bl	800b1e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca60:	480c      	ldr	r0, [pc, #48]	@ (800ca94 <prvInitialiseTaskLists+0x6c>)
 800ca62:	f7fe fbbe 	bl	800b1e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca66:	480c      	ldr	r0, [pc, #48]	@ (800ca98 <prvInitialiseTaskLists+0x70>)
 800ca68:	f7fe fbbb 	bl	800b1e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca6c:	480b      	ldr	r0, [pc, #44]	@ (800ca9c <prvInitialiseTaskLists+0x74>)
 800ca6e:	f7fe fbb8 	bl	800b1e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca72:	4b0b      	ldr	r3, [pc, #44]	@ (800caa0 <prvInitialiseTaskLists+0x78>)
 800ca74:	4a05      	ldr	r2, [pc, #20]	@ (800ca8c <prvInitialiseTaskLists+0x64>)
 800ca76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca78:	4b0a      	ldr	r3, [pc, #40]	@ (800caa4 <prvInitialiseTaskLists+0x7c>)
 800ca7a:	4a05      	ldr	r2, [pc, #20]	@ (800ca90 <prvInitialiseTaskLists+0x68>)
 800ca7c:	601a      	str	r2, [r3, #0]
}
 800ca7e:	bf00      	nop
 800ca80:	3708      	adds	r7, #8
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	20000f84 	.word	0x20000f84
 800ca8c:	20001010 	.word	0x20001010
 800ca90:	20001024 	.word	0x20001024
 800ca94:	20001040 	.word	0x20001040
 800ca98:	20001054 	.word	0x20001054
 800ca9c:	2000106c 	.word	0x2000106c
 800caa0:	20001038 	.word	0x20001038
 800caa4:	2000103c 	.word	0x2000103c

0800caa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800caae:	e019      	b.n	800cae4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cab0:	f000 fbd4 	bl	800d25c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cab4:	4b10      	ldr	r3, [pc, #64]	@ (800caf8 <prvCheckTasksWaitingTermination+0x50>)
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	3304      	adds	r3, #4
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7fe fc18 	bl	800b2f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cac6:	4b0d      	ldr	r3, [pc, #52]	@ (800cafc <prvCheckTasksWaitingTermination+0x54>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	3b01      	subs	r3, #1
 800cacc:	4a0b      	ldr	r2, [pc, #44]	@ (800cafc <prvCheckTasksWaitingTermination+0x54>)
 800cace:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cad0:	4b0b      	ldr	r3, [pc, #44]	@ (800cb00 <prvCheckTasksWaitingTermination+0x58>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	3b01      	subs	r3, #1
 800cad6:	4a0a      	ldr	r2, [pc, #40]	@ (800cb00 <prvCheckTasksWaitingTermination+0x58>)
 800cad8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cada:	f000 fbf5 	bl	800d2c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 f810 	bl	800cb04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cae4:	4b06      	ldr	r3, [pc, #24]	@ (800cb00 <prvCheckTasksWaitingTermination+0x58>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d1e1      	bne.n	800cab0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800caec:	bf00      	nop
 800caee:	bf00      	nop
 800caf0:	3708      	adds	r7, #8
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	20001054 	.word	0x20001054
 800cafc:	20001080 	.word	0x20001080
 800cb00:	20001068 	.word	0x20001068

0800cb04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	334c      	adds	r3, #76	@ 0x4c
 800cb10:	4618      	mov	r0, r3
 800cb12:	f001 fc3b 	bl	800e38c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d108      	bne.n	800cb32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb24:	4618      	mov	r0, r3
 800cb26:	f000 fd95 	bl	800d654 <vPortFree>
				vPortFree( pxTCB );
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 fd92 	bl	800d654 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cb30:	e01b      	b.n	800cb6a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d103      	bne.n	800cb44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 fd89 	bl	800d654 <vPortFree>
	}
 800cb42:	e012      	b.n	800cb6a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cb4a:	2b02      	cmp	r3, #2
 800cb4c:	d00d      	beq.n	800cb6a <prvDeleteTCB+0x66>
	__asm volatile
 800cb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb52:	b672      	cpsid	i
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	b662      	cpsie	i
 800cb62:	60fb      	str	r3, [r7, #12]
}
 800cb64:	bf00      	nop
 800cb66:	bf00      	nop
 800cb68:	e7fd      	b.n	800cb66 <prvDeleteTCB+0x62>
	}
 800cb6a:	bf00      	nop
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb7a:	4b0c      	ldr	r3, [pc, #48]	@ (800cbac <prvResetNextTaskUnblockTime+0x38>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d104      	bne.n	800cb8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb84:	4b0a      	ldr	r3, [pc, #40]	@ (800cbb0 <prvResetNextTaskUnblockTime+0x3c>)
 800cb86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb8c:	e008      	b.n	800cba0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb8e:	4b07      	ldr	r3, [pc, #28]	@ (800cbac <prvResetNextTaskUnblockTime+0x38>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	4a04      	ldr	r2, [pc, #16]	@ (800cbb0 <prvResetNextTaskUnblockTime+0x3c>)
 800cb9e:	6013      	str	r3, [r2, #0]
}
 800cba0:	bf00      	nop
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr
 800cbac:	20001038 	.word	0x20001038
 800cbb0:	200010a0 	.word	0x200010a0

0800cbb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cbba:	4b0b      	ldr	r3, [pc, #44]	@ (800cbe8 <xTaskGetSchedulerState+0x34>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d102      	bne.n	800cbc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	607b      	str	r3, [r7, #4]
 800cbc6:	e008      	b.n	800cbda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbc8:	4b08      	ldr	r3, [pc, #32]	@ (800cbec <xTaskGetSchedulerState+0x38>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d102      	bne.n	800cbd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cbd0:	2302      	movs	r3, #2
 800cbd2:	607b      	str	r3, [r7, #4]
 800cbd4:	e001      	b.n	800cbda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cbda:	687b      	ldr	r3, [r7, #4]
	}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr
 800cbe8:	2000108c 	.word	0x2000108c
 800cbec:	200010a8 	.word	0x200010a8

0800cbf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d069      	beq.n	800ccda <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc0a:	4b36      	ldr	r3, [pc, #216]	@ (800cce4 <xTaskPriorityInherit+0xf4>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d259      	bcs.n	800ccc8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	699b      	ldr	r3, [r3, #24]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	db06      	blt.n	800cc2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc1c:	4b31      	ldr	r3, [pc, #196]	@ (800cce4 <xTaskPriorityInherit+0xf4>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc22:	f1c3 0207 	rsb	r2, r3, #7
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	6959      	ldr	r1, [r3, #20]
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc32:	4613      	mov	r3, r2
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	4413      	add	r3, r2
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	4a2b      	ldr	r2, [pc, #172]	@ (800cce8 <xTaskPriorityInherit+0xf8>)
 800cc3c:	4413      	add	r3, r2
 800cc3e:	4299      	cmp	r1, r3
 800cc40:	d13a      	bne.n	800ccb8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	3304      	adds	r3, #4
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7fe fb55 	bl	800b2f6 <uxListRemove>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d115      	bne.n	800cc7e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc56:	4924      	ldr	r1, [pc, #144]	@ (800cce8 <xTaskPriorityInherit+0xf8>)
 800cc58:	4613      	mov	r3, r2
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	4413      	add	r3, r2
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	440b      	add	r3, r1
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d10a      	bne.n	800cc7e <xTaskPriorityInherit+0x8e>
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc72:	43da      	mvns	r2, r3
 800cc74:	4b1d      	ldr	r3, [pc, #116]	@ (800ccec <xTaskPriorityInherit+0xfc>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4013      	ands	r3, r2
 800cc7a:	4a1c      	ldr	r2, [pc, #112]	@ (800ccec <xTaskPriorityInherit+0xfc>)
 800cc7c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc7e:	4b19      	ldr	r3, [pc, #100]	@ (800cce4 <xTaskPriorityInherit+0xf4>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	409a      	lsls	r2, r3
 800cc90:	4b16      	ldr	r3, [pc, #88]	@ (800ccec <xTaskPriorityInherit+0xfc>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4313      	orrs	r3, r2
 800cc96:	4a15      	ldr	r2, [pc, #84]	@ (800ccec <xTaskPriorityInherit+0xfc>)
 800cc98:	6013      	str	r3, [r2, #0]
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc9e:	4613      	mov	r3, r2
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	4413      	add	r3, r2
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	4a10      	ldr	r2, [pc, #64]	@ (800cce8 <xTaskPriorityInherit+0xf8>)
 800cca8:	441a      	add	r2, r3
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	3304      	adds	r3, #4
 800ccae:	4619      	mov	r1, r3
 800ccb0:	4610      	mov	r0, r2
 800ccb2:	f7fe fac3 	bl	800b23c <vListInsertEnd>
 800ccb6:	e004      	b.n	800ccc2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ccb8:	4b0a      	ldr	r3, [pc, #40]	@ (800cce4 <xTaskPriorityInherit+0xf4>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	60fb      	str	r3, [r7, #12]
 800ccc6:	e008      	b.n	800ccda <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cccc:	4b05      	ldr	r3, [pc, #20]	@ (800cce4 <xTaskPriorityInherit+0xf4>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d201      	bcs.n	800ccda <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ccda:	68fb      	ldr	r3, [r7, #12]
	}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3710      	adds	r7, #16
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	20000f80 	.word	0x20000f80
 800cce8:	20000f84 	.word	0x20000f84
 800ccec:	20001088 	.word	0x20001088

0800ccf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b086      	sub	sp, #24
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d074      	beq.n	800cdf0 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cd06:	4b3d      	ldr	r3, [pc, #244]	@ (800cdfc <xTaskPriorityDisinherit+0x10c>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	693a      	ldr	r2, [r7, #16]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d00d      	beq.n	800cd2c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd14:	b672      	cpsid	i
 800cd16:	f383 8811 	msr	BASEPRI, r3
 800cd1a:	f3bf 8f6f 	isb	sy
 800cd1e:	f3bf 8f4f 	dsb	sy
 800cd22:	b662      	cpsie	i
 800cd24:	60fb      	str	r3, [r7, #12]
}
 800cd26:	bf00      	nop
 800cd28:	bf00      	nop
 800cd2a:	e7fd      	b.n	800cd28 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d10d      	bne.n	800cd50 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800cd34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd38:	b672      	cpsid	i
 800cd3a:	f383 8811 	msr	BASEPRI, r3
 800cd3e:	f3bf 8f6f 	isb	sy
 800cd42:	f3bf 8f4f 	dsb	sy
 800cd46:	b662      	cpsie	i
 800cd48:	60bb      	str	r3, [r7, #8]
}
 800cd4a:	bf00      	nop
 800cd4c:	bf00      	nop
 800cd4e:	e7fd      	b.n	800cd4c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd54:	1e5a      	subs	r2, r3, #1
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d044      	beq.n	800cdf0 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d140      	bne.n	800cdf0 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	3304      	adds	r3, #4
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7fe fabf 	bl	800b2f6 <uxListRemove>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d115      	bne.n	800cdaa <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd82:	491f      	ldr	r1, [pc, #124]	@ (800ce00 <xTaskPriorityDisinherit+0x110>)
 800cd84:	4613      	mov	r3, r2
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	4413      	add	r3, r2
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	440b      	add	r3, r1
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d10a      	bne.n	800cdaa <xTaskPriorityDisinherit+0xba>
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd98:	2201      	movs	r2, #1
 800cd9a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd9e:	43da      	mvns	r2, r3
 800cda0:	4b18      	ldr	r3, [pc, #96]	@ (800ce04 <xTaskPriorityDisinherit+0x114>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4013      	ands	r3, r2
 800cda6:	4a17      	ldr	r2, [pc, #92]	@ (800ce04 <xTaskPriorityDisinherit+0x114>)
 800cda8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdb6:	f1c3 0207 	rsb	r2, r3, #7
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	409a      	lsls	r2, r3
 800cdc6:	4b0f      	ldr	r3, [pc, #60]	@ (800ce04 <xTaskPriorityDisinherit+0x114>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	4a0d      	ldr	r2, [pc, #52]	@ (800ce04 <xTaskPriorityDisinherit+0x114>)
 800cdce:	6013      	str	r3, [r2, #0]
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	4413      	add	r3, r2
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	4a08      	ldr	r2, [pc, #32]	@ (800ce00 <xTaskPriorityDisinherit+0x110>)
 800cdde:	441a      	add	r2, r3
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	3304      	adds	r3, #4
 800cde4:	4619      	mov	r1, r3
 800cde6:	4610      	mov	r0, r2
 800cde8:	f7fe fa28 	bl	800b23c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cdec:	2301      	movs	r3, #1
 800cdee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cdf0:	697b      	ldr	r3, [r7, #20]
	}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3718      	adds	r7, #24
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	20000f80 	.word	0x20000f80
 800ce00:	20000f84 	.word	0x20000f84
 800ce04:	20001088 	.word	0x20001088

0800ce08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b088      	sub	sp, #32
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ce16:	2301      	movs	r3, #1
 800ce18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	f000 8089 	beq.w	800cf34 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d10d      	bne.n	800ce46 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800ce2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce2e:	b672      	cpsid	i
 800ce30:	f383 8811 	msr	BASEPRI, r3
 800ce34:	f3bf 8f6f 	isb	sy
 800ce38:	f3bf 8f4f 	dsb	sy
 800ce3c:	b662      	cpsie	i
 800ce3e:	60fb      	str	r3, [r7, #12]
}
 800ce40:	bf00      	nop
 800ce42:	bf00      	nop
 800ce44:	e7fd      	b.n	800ce42 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce4a:	683a      	ldr	r2, [r7, #0]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d902      	bls.n	800ce56 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	61fb      	str	r3, [r7, #28]
 800ce54:	e002      	b.n	800ce5c <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce5a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce60:	69fa      	ldr	r2, [r7, #28]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d066      	beq.n	800cf34 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce6a:	697a      	ldr	r2, [r7, #20]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d161      	bne.n	800cf34 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ce70:	4b32      	ldr	r3, [pc, #200]	@ (800cf3c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	69ba      	ldr	r2, [r7, #24]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d10d      	bne.n	800ce96 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800ce7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce7e:	b672      	cpsid	i
 800ce80:	f383 8811 	msr	BASEPRI, r3
 800ce84:	f3bf 8f6f 	isb	sy
 800ce88:	f3bf 8f4f 	dsb	sy
 800ce8c:	b662      	cpsie	i
 800ce8e:	60bb      	str	r3, [r7, #8]
}
 800ce90:	bf00      	nop
 800ce92:	bf00      	nop
 800ce94:	e7fd      	b.n	800ce92 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce9a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	69fa      	ldr	r2, [r7, #28]
 800cea0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	699b      	ldr	r3, [r3, #24]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	db04      	blt.n	800ceb4 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceaa:	69fb      	ldr	r3, [r7, #28]
 800ceac:	f1c3 0207 	rsb	r2, r3, #7
 800ceb0:	69bb      	ldr	r3, [r7, #24]
 800ceb2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	6959      	ldr	r1, [r3, #20]
 800ceb8:	693a      	ldr	r2, [r7, #16]
 800ceba:	4613      	mov	r3, r2
 800cebc:	009b      	lsls	r3, r3, #2
 800cebe:	4413      	add	r3, r2
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	4a1f      	ldr	r2, [pc, #124]	@ (800cf40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cec4:	4413      	add	r3, r2
 800cec6:	4299      	cmp	r1, r3
 800cec8:	d134      	bne.n	800cf34 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	3304      	adds	r3, #4
 800cece:	4618      	mov	r0, r3
 800ced0:	f7fe fa11 	bl	800b2f6 <uxListRemove>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d115      	bne.n	800cf06 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cede:	4918      	ldr	r1, [pc, #96]	@ (800cf40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cee0:	4613      	mov	r3, r2
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	4413      	add	r3, r2
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	440b      	add	r3, r1
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d10a      	bne.n	800cf06 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cef4:	2201      	movs	r2, #1
 800cef6:	fa02 f303 	lsl.w	r3, r2, r3
 800cefa:	43da      	mvns	r2, r3
 800cefc:	4b11      	ldr	r3, [pc, #68]	@ (800cf44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4013      	ands	r3, r2
 800cf02:	4a10      	ldr	r2, [pc, #64]	@ (800cf44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800cf04:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cf06:	69bb      	ldr	r3, [r7, #24]
 800cf08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	409a      	lsls	r2, r3
 800cf0e:	4b0d      	ldr	r3, [pc, #52]	@ (800cf44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4313      	orrs	r3, r2
 800cf14:	4a0b      	ldr	r2, [pc, #44]	@ (800cf44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800cf16:	6013      	str	r3, [r2, #0]
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4413      	add	r3, r2
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	4a06      	ldr	r2, [pc, #24]	@ (800cf40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cf26:	441a      	add	r2, r3
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	3304      	adds	r3, #4
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	4610      	mov	r0, r2
 800cf30:	f7fe f984 	bl	800b23c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf34:	bf00      	nop
 800cf36:	3720      	adds	r7, #32
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	20000f80 	.word	0x20000f80
 800cf40:	20000f84 	.word	0x20000f84
 800cf44:	20001088 	.word	0x20001088

0800cf48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cf48:	b480      	push	{r7}
 800cf4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cf4c:	4b07      	ldr	r3, [pc, #28]	@ (800cf6c <pvTaskIncrementMutexHeldCount+0x24>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d004      	beq.n	800cf5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cf54:	4b05      	ldr	r3, [pc, #20]	@ (800cf6c <pvTaskIncrementMutexHeldCount+0x24>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf5a:	3201      	adds	r2, #1
 800cf5c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800cf5e:	4b03      	ldr	r3, [pc, #12]	@ (800cf6c <pvTaskIncrementMutexHeldCount+0x24>)
 800cf60:	681b      	ldr	r3, [r3, #0]
	}
 800cf62:	4618      	mov	r0, r3
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr
 800cf6c:	20000f80 	.word	0x20000f80

0800cf70 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cf7a:	4b29      	ldr	r3, [pc, #164]	@ (800d020 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf80:	4b28      	ldr	r3, [pc, #160]	@ (800d024 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	3304      	adds	r3, #4
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fe f9b5 	bl	800b2f6 <uxListRemove>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d10b      	bne.n	800cfaa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cf92:	4b24      	ldr	r3, [pc, #144]	@ (800d024 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf98:	2201      	movs	r2, #1
 800cf9a:	fa02 f303 	lsl.w	r3, r2, r3
 800cf9e:	43da      	mvns	r2, r3
 800cfa0:	4b21      	ldr	r3, [pc, #132]	@ (800d028 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4013      	ands	r3, r2
 800cfa6:	4a20      	ldr	r2, [pc, #128]	@ (800d028 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cfa8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cfb0:	d10a      	bne.n	800cfc8 <prvAddCurrentTaskToDelayedList+0x58>
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d007      	beq.n	800cfc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfb8:	4b1a      	ldr	r3, [pc, #104]	@ (800d024 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	3304      	adds	r3, #4
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	481a      	ldr	r0, [pc, #104]	@ (800d02c <prvAddCurrentTaskToDelayedList+0xbc>)
 800cfc2:	f7fe f93b 	bl	800b23c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cfc6:	e026      	b.n	800d016 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4413      	add	r3, r2
 800cfce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cfd0:	4b14      	ldr	r3, [pc, #80]	@ (800d024 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d209      	bcs.n	800cff4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfe0:	4b13      	ldr	r3, [pc, #76]	@ (800d030 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	4b0f      	ldr	r3, [pc, #60]	@ (800d024 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	3304      	adds	r3, #4
 800cfea:	4619      	mov	r1, r3
 800cfec:	4610      	mov	r0, r2
 800cfee:	f7fe f949 	bl	800b284 <vListInsert>
}
 800cff2:	e010      	b.n	800d016 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cff4:	4b0f      	ldr	r3, [pc, #60]	@ (800d034 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	4b0a      	ldr	r3, [pc, #40]	@ (800d024 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	3304      	adds	r3, #4
 800cffe:	4619      	mov	r1, r3
 800d000:	4610      	mov	r0, r2
 800d002:	f7fe f93f 	bl	800b284 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d006:	4b0c      	ldr	r3, [pc, #48]	@ (800d038 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	68ba      	ldr	r2, [r7, #8]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d202      	bcs.n	800d016 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d010:	4a09      	ldr	r2, [pc, #36]	@ (800d038 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	6013      	str	r3, [r2, #0]
}
 800d016:	bf00      	nop
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	20001084 	.word	0x20001084
 800d024:	20000f80 	.word	0x20000f80
 800d028:	20001088 	.word	0x20001088
 800d02c:	2000106c 	.word	0x2000106c
 800d030:	2000103c 	.word	0x2000103c
 800d034:	20001038 	.word	0x20001038
 800d038:	200010a0 	.word	0x200010a0

0800d03c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d03c:	b480      	push	{r7}
 800d03e:	b085      	sub	sp, #20
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	3b04      	subs	r3, #4
 800d04c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	3b04      	subs	r3, #4
 800d05a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	f023 0201 	bic.w	r2, r3, #1
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	3b04      	subs	r3, #4
 800d06a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d06c:	4a0c      	ldr	r2, [pc, #48]	@ (800d0a0 <pxPortInitialiseStack+0x64>)
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	3b14      	subs	r3, #20
 800d076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	3b04      	subs	r3, #4
 800d082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f06f 0202 	mvn.w	r2, #2
 800d08a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	3b20      	subs	r3, #32
 800d090:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d092:	68fb      	ldr	r3, [r7, #12]
}
 800d094:	4618      	mov	r0, r3
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr
 800d0a0:	0800d0a5 	.word	0x0800d0a5

0800d0a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d0ae:	4b15      	ldr	r3, [pc, #84]	@ (800d104 <prvTaskExitError+0x60>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0b6:	d00d      	beq.n	800d0d4 <prvTaskExitError+0x30>
	__asm volatile
 800d0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0bc:	b672      	cpsid	i
 800d0be:	f383 8811 	msr	BASEPRI, r3
 800d0c2:	f3bf 8f6f 	isb	sy
 800d0c6:	f3bf 8f4f 	dsb	sy
 800d0ca:	b662      	cpsie	i
 800d0cc:	60fb      	str	r3, [r7, #12]
}
 800d0ce:	bf00      	nop
 800d0d0:	bf00      	nop
 800d0d2:	e7fd      	b.n	800d0d0 <prvTaskExitError+0x2c>
	__asm volatile
 800d0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d8:	b672      	cpsid	i
 800d0da:	f383 8811 	msr	BASEPRI, r3
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	f3bf 8f4f 	dsb	sy
 800d0e6:	b662      	cpsie	i
 800d0e8:	60bb      	str	r3, [r7, #8]
}
 800d0ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d0ec:	bf00      	nop
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d0fc      	beq.n	800d0ee <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d0f4:	bf00      	nop
 800d0f6:	bf00      	nop
 800d0f8:	3714      	adds	r7, #20
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	20000030 	.word	0x20000030
	...

0800d110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d110:	4b07      	ldr	r3, [pc, #28]	@ (800d130 <pxCurrentTCBConst2>)
 800d112:	6819      	ldr	r1, [r3, #0]
 800d114:	6808      	ldr	r0, [r1, #0]
 800d116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d11a:	f380 8809 	msr	PSP, r0
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f04f 0000 	mov.w	r0, #0
 800d126:	f380 8811 	msr	BASEPRI, r0
 800d12a:	4770      	bx	lr
 800d12c:	f3af 8000 	nop.w

0800d130 <pxCurrentTCBConst2>:
 800d130:	20000f80 	.word	0x20000f80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d134:	bf00      	nop
 800d136:	bf00      	nop

0800d138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d138:	4808      	ldr	r0, [pc, #32]	@ (800d15c <prvPortStartFirstTask+0x24>)
 800d13a:	6800      	ldr	r0, [r0, #0]
 800d13c:	6800      	ldr	r0, [r0, #0]
 800d13e:	f380 8808 	msr	MSP, r0
 800d142:	f04f 0000 	mov.w	r0, #0
 800d146:	f380 8814 	msr	CONTROL, r0
 800d14a:	b662      	cpsie	i
 800d14c:	b661      	cpsie	f
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	df00      	svc	0
 800d158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d15a:	bf00      	nop
 800d15c:	e000ed08 	.word	0xe000ed08

0800d160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d166:	4b37      	ldr	r3, [pc, #220]	@ (800d244 <xPortStartScheduler+0xe4>)
 800d168:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	22ff      	movs	r2, #255	@ 0xff
 800d176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d180:	78fb      	ldrb	r3, [r7, #3]
 800d182:	b2db      	uxtb	r3, r3
 800d184:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d188:	b2da      	uxtb	r2, r3
 800d18a:	4b2f      	ldr	r3, [pc, #188]	@ (800d248 <xPortStartScheduler+0xe8>)
 800d18c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d18e:	4b2f      	ldr	r3, [pc, #188]	@ (800d24c <xPortStartScheduler+0xec>)
 800d190:	2207      	movs	r2, #7
 800d192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d194:	e009      	b.n	800d1aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d196:	4b2d      	ldr	r3, [pc, #180]	@ (800d24c <xPortStartScheduler+0xec>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	3b01      	subs	r3, #1
 800d19c:	4a2b      	ldr	r2, [pc, #172]	@ (800d24c <xPortStartScheduler+0xec>)
 800d19e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1a0:	78fb      	ldrb	r3, [r7, #3]
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	005b      	lsls	r3, r3, #1
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1aa:	78fb      	ldrb	r3, [r7, #3]
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1b2:	2b80      	cmp	r3, #128	@ 0x80
 800d1b4:	d0ef      	beq.n	800d196 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1b6:	4b25      	ldr	r3, [pc, #148]	@ (800d24c <xPortStartScheduler+0xec>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f1c3 0307 	rsb	r3, r3, #7
 800d1be:	2b04      	cmp	r3, #4
 800d1c0:	d00d      	beq.n	800d1de <xPortStartScheduler+0x7e>
	__asm volatile
 800d1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c6:	b672      	cpsid	i
 800d1c8:	f383 8811 	msr	BASEPRI, r3
 800d1cc:	f3bf 8f6f 	isb	sy
 800d1d0:	f3bf 8f4f 	dsb	sy
 800d1d4:	b662      	cpsie	i
 800d1d6:	60bb      	str	r3, [r7, #8]
}
 800d1d8:	bf00      	nop
 800d1da:	bf00      	nop
 800d1dc:	e7fd      	b.n	800d1da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d1de:	4b1b      	ldr	r3, [pc, #108]	@ (800d24c <xPortStartScheduler+0xec>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	021b      	lsls	r3, r3, #8
 800d1e4:	4a19      	ldr	r2, [pc, #100]	@ (800d24c <xPortStartScheduler+0xec>)
 800d1e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d1e8:	4b18      	ldr	r3, [pc, #96]	@ (800d24c <xPortStartScheduler+0xec>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d1f0:	4a16      	ldr	r2, [pc, #88]	@ (800d24c <xPortStartScheduler+0xec>)
 800d1f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	b2da      	uxtb	r2, r3
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d1fc:	4b14      	ldr	r3, [pc, #80]	@ (800d250 <xPortStartScheduler+0xf0>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a13      	ldr	r2, [pc, #76]	@ (800d250 <xPortStartScheduler+0xf0>)
 800d202:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d206:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d208:	4b11      	ldr	r3, [pc, #68]	@ (800d250 <xPortStartScheduler+0xf0>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a10      	ldr	r2, [pc, #64]	@ (800d250 <xPortStartScheduler+0xf0>)
 800d20e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d212:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d214:	f000 f8dc 	bl	800d3d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d218:	4b0e      	ldr	r3, [pc, #56]	@ (800d254 <xPortStartScheduler+0xf4>)
 800d21a:	2200      	movs	r2, #0
 800d21c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d21e:	f000 f8fb 	bl	800d418 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d222:	4b0d      	ldr	r3, [pc, #52]	@ (800d258 <xPortStartScheduler+0xf8>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a0c      	ldr	r2, [pc, #48]	@ (800d258 <xPortStartScheduler+0xf8>)
 800d228:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d22c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d22e:	f7ff ff83 	bl	800d138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d232:	f7ff fa63 	bl	800c6fc <vTaskSwitchContext>
	prvTaskExitError();
 800d236:	f7ff ff35 	bl	800d0a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	e000e400 	.word	0xe000e400
 800d248:	200010ac 	.word	0x200010ac
 800d24c:	200010b0 	.word	0x200010b0
 800d250:	e000ed20 	.word	0xe000ed20
 800d254:	20000030 	.word	0x20000030
 800d258:	e000ef34 	.word	0xe000ef34

0800d25c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
	__asm volatile
 800d262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d266:	b672      	cpsid	i
 800d268:	f383 8811 	msr	BASEPRI, r3
 800d26c:	f3bf 8f6f 	isb	sy
 800d270:	f3bf 8f4f 	dsb	sy
 800d274:	b662      	cpsie	i
 800d276:	607b      	str	r3, [r7, #4]
}
 800d278:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d27a:	4b11      	ldr	r3, [pc, #68]	@ (800d2c0 <vPortEnterCritical+0x64>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	3301      	adds	r3, #1
 800d280:	4a0f      	ldr	r2, [pc, #60]	@ (800d2c0 <vPortEnterCritical+0x64>)
 800d282:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d284:	4b0e      	ldr	r3, [pc, #56]	@ (800d2c0 <vPortEnterCritical+0x64>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d112      	bne.n	800d2b2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d28c:	4b0d      	ldr	r3, [pc, #52]	@ (800d2c4 <vPortEnterCritical+0x68>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	b2db      	uxtb	r3, r3
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00d      	beq.n	800d2b2 <vPortEnterCritical+0x56>
	__asm volatile
 800d296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d29a:	b672      	cpsid	i
 800d29c:	f383 8811 	msr	BASEPRI, r3
 800d2a0:	f3bf 8f6f 	isb	sy
 800d2a4:	f3bf 8f4f 	dsb	sy
 800d2a8:	b662      	cpsie	i
 800d2aa:	603b      	str	r3, [r7, #0]
}
 800d2ac:	bf00      	nop
 800d2ae:	bf00      	nop
 800d2b0:	e7fd      	b.n	800d2ae <vPortEnterCritical+0x52>
	}
}
 800d2b2:	bf00      	nop
 800d2b4:	370c      	adds	r7, #12
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr
 800d2be:	bf00      	nop
 800d2c0:	20000030 	.word	0x20000030
 800d2c4:	e000ed04 	.word	0xe000ed04

0800d2c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d2ce:	4b13      	ldr	r3, [pc, #76]	@ (800d31c <vPortExitCritical+0x54>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d10d      	bne.n	800d2f2 <vPortExitCritical+0x2a>
	__asm volatile
 800d2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2da:	b672      	cpsid	i
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	b662      	cpsie	i
 800d2ea:	607b      	str	r3, [r7, #4]
}
 800d2ec:	bf00      	nop
 800d2ee:	bf00      	nop
 800d2f0:	e7fd      	b.n	800d2ee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d2f2:	4b0a      	ldr	r3, [pc, #40]	@ (800d31c <vPortExitCritical+0x54>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	4a08      	ldr	r2, [pc, #32]	@ (800d31c <vPortExitCritical+0x54>)
 800d2fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d2fc:	4b07      	ldr	r3, [pc, #28]	@ (800d31c <vPortExitCritical+0x54>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d105      	bne.n	800d310 <vPortExitCritical+0x48>
 800d304:	2300      	movs	r3, #0
 800d306:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	f383 8811 	msr	BASEPRI, r3
}
 800d30e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d310:	bf00      	nop
 800d312:	370c      	adds	r7, #12
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr
 800d31c:	20000030 	.word	0x20000030

0800d320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d320:	f3ef 8009 	mrs	r0, PSP
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	4b15      	ldr	r3, [pc, #84]	@ (800d380 <pxCurrentTCBConst>)
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	f01e 0f10 	tst.w	lr, #16
 800d330:	bf08      	it	eq
 800d332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33a:	6010      	str	r0, [r2, #0]
 800d33c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d340:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d344:	b672      	cpsid	i
 800d346:	f380 8811 	msr	BASEPRI, r0
 800d34a:	f3bf 8f4f 	dsb	sy
 800d34e:	f3bf 8f6f 	isb	sy
 800d352:	b662      	cpsie	i
 800d354:	f7ff f9d2 	bl	800c6fc <vTaskSwitchContext>
 800d358:	f04f 0000 	mov.w	r0, #0
 800d35c:	f380 8811 	msr	BASEPRI, r0
 800d360:	bc09      	pop	{r0, r3}
 800d362:	6819      	ldr	r1, [r3, #0]
 800d364:	6808      	ldr	r0, [r1, #0]
 800d366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36a:	f01e 0f10 	tst.w	lr, #16
 800d36e:	bf08      	it	eq
 800d370:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d374:	f380 8809 	msr	PSP, r0
 800d378:	f3bf 8f6f 	isb	sy
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop

0800d380 <pxCurrentTCBConst>:
 800d380:	20000f80 	.word	0x20000f80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d384:	bf00      	nop
 800d386:	bf00      	nop

0800d388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
	__asm volatile
 800d38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d392:	b672      	cpsid	i
 800d394:	f383 8811 	msr	BASEPRI, r3
 800d398:	f3bf 8f6f 	isb	sy
 800d39c:	f3bf 8f4f 	dsb	sy
 800d3a0:	b662      	cpsie	i
 800d3a2:	607b      	str	r3, [r7, #4]
}
 800d3a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d3a6:	f7ff f8ed 	bl	800c584 <xTaskIncrementTick>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d003      	beq.n	800d3b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3b0:	4b06      	ldr	r3, [pc, #24]	@ (800d3cc <SysTick_Handler+0x44>)
 800d3b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3b6:	601a      	str	r2, [r3, #0]
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	f383 8811 	msr	BASEPRI, r3
}
 800d3c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d3c4:	bf00      	nop
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	e000ed04 	.word	0xe000ed04

0800d3d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d3d4:	4b0b      	ldr	r3, [pc, #44]	@ (800d404 <vPortSetupTimerInterrupt+0x34>)
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d3da:	4b0b      	ldr	r3, [pc, #44]	@ (800d408 <vPortSetupTimerInterrupt+0x38>)
 800d3dc:	2200      	movs	r2, #0
 800d3de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d3e0:	4b0a      	ldr	r3, [pc, #40]	@ (800d40c <vPortSetupTimerInterrupt+0x3c>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a0a      	ldr	r2, [pc, #40]	@ (800d410 <vPortSetupTimerInterrupt+0x40>)
 800d3e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ea:	099b      	lsrs	r3, r3, #6
 800d3ec:	4a09      	ldr	r2, [pc, #36]	@ (800d414 <vPortSetupTimerInterrupt+0x44>)
 800d3ee:	3b01      	subs	r3, #1
 800d3f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d3f2:	4b04      	ldr	r3, [pc, #16]	@ (800d404 <vPortSetupTimerInterrupt+0x34>)
 800d3f4:	2207      	movs	r2, #7
 800d3f6:	601a      	str	r2, [r3, #0]
}
 800d3f8:	bf00      	nop
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr
 800d402:	bf00      	nop
 800d404:	e000e010 	.word	0xe000e010
 800d408:	e000e018 	.word	0xe000e018
 800d40c:	20000000 	.word	0x20000000
 800d410:	10624dd3 	.word	0x10624dd3
 800d414:	e000e014 	.word	0xe000e014

0800d418 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d418:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d428 <vPortEnableVFP+0x10>
 800d41c:	6801      	ldr	r1, [r0, #0]
 800d41e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d422:	6001      	str	r1, [r0, #0]
 800d424:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d426:	bf00      	nop
 800d428:	e000ed88 	.word	0xe000ed88

0800d42c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d42c:	b480      	push	{r7}
 800d42e:	b085      	sub	sp, #20
 800d430:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d432:	f3ef 8305 	mrs	r3, IPSR
 800d436:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2b0f      	cmp	r3, #15
 800d43c:	d917      	bls.n	800d46e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d43e:	4a1a      	ldr	r2, [pc, #104]	@ (800d4a8 <vPortValidateInterruptPriority+0x7c>)
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	4413      	add	r3, r2
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d448:	4b18      	ldr	r3, [pc, #96]	@ (800d4ac <vPortValidateInterruptPriority+0x80>)
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	7afa      	ldrb	r2, [r7, #11]
 800d44e:	429a      	cmp	r2, r3
 800d450:	d20d      	bcs.n	800d46e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800d452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d456:	b672      	cpsid	i
 800d458:	f383 8811 	msr	BASEPRI, r3
 800d45c:	f3bf 8f6f 	isb	sy
 800d460:	f3bf 8f4f 	dsb	sy
 800d464:	b662      	cpsie	i
 800d466:	607b      	str	r3, [r7, #4]
}
 800d468:	bf00      	nop
 800d46a:	bf00      	nop
 800d46c:	e7fd      	b.n	800d46a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d46e:	4b10      	ldr	r3, [pc, #64]	@ (800d4b0 <vPortValidateInterruptPriority+0x84>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d476:	4b0f      	ldr	r3, [pc, #60]	@ (800d4b4 <vPortValidateInterruptPriority+0x88>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d90d      	bls.n	800d49a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800d47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d482:	b672      	cpsid	i
 800d484:	f383 8811 	msr	BASEPRI, r3
 800d488:	f3bf 8f6f 	isb	sy
 800d48c:	f3bf 8f4f 	dsb	sy
 800d490:	b662      	cpsie	i
 800d492:	603b      	str	r3, [r7, #0]
}
 800d494:	bf00      	nop
 800d496:	bf00      	nop
 800d498:	e7fd      	b.n	800d496 <vPortValidateInterruptPriority+0x6a>
	}
 800d49a:	bf00      	nop
 800d49c:	3714      	adds	r7, #20
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	e000e3f0 	.word	0xe000e3f0
 800d4ac:	200010ac 	.word	0x200010ac
 800d4b0:	e000ed0c 	.word	0xe000ed0c
 800d4b4:	200010b0 	.word	0x200010b0

0800d4b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b08a      	sub	sp, #40	@ 0x28
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4c4:	f7fe ffb0 	bl	800c428 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4c8:	4b5d      	ldr	r3, [pc, #372]	@ (800d640 <pvPortMalloc+0x188>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d101      	bne.n	800d4d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d4d0:	f000 f920 	bl	800d714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d4d4:	4b5b      	ldr	r3, [pc, #364]	@ (800d644 <pvPortMalloc+0x18c>)
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4013      	ands	r3, r2
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f040 8094 	bne.w	800d60a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d020      	beq.n	800d52a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800d4e8:	2208      	movs	r2, #8
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f003 0307 	and.w	r3, r3, #7
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d017      	beq.n	800d52a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f023 0307 	bic.w	r3, r3, #7
 800d500:	3308      	adds	r3, #8
 800d502:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f003 0307 	and.w	r3, r3, #7
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d00d      	beq.n	800d52a <pvPortMalloc+0x72>
	__asm volatile
 800d50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d512:	b672      	cpsid	i
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	b662      	cpsie	i
 800d522:	617b      	str	r3, [r7, #20]
}
 800d524:	bf00      	nop
 800d526:	bf00      	nop
 800d528:	e7fd      	b.n	800d526 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d06c      	beq.n	800d60a <pvPortMalloc+0x152>
 800d530:	4b45      	ldr	r3, [pc, #276]	@ (800d648 <pvPortMalloc+0x190>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	429a      	cmp	r2, r3
 800d538:	d867      	bhi.n	800d60a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d53a:	4b44      	ldr	r3, [pc, #272]	@ (800d64c <pvPortMalloc+0x194>)
 800d53c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d53e:	4b43      	ldr	r3, [pc, #268]	@ (800d64c <pvPortMalloc+0x194>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d544:	e004      	b.n	800d550 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800d546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d548:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	429a      	cmp	r2, r3
 800d558:	d903      	bls.n	800d562 <pvPortMalloc+0xaa>
 800d55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d1f1      	bne.n	800d546 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d562:	4b37      	ldr	r3, [pc, #220]	@ (800d640 <pvPortMalloc+0x188>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d568:	429a      	cmp	r2, r3
 800d56a:	d04e      	beq.n	800d60a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d56c:	6a3b      	ldr	r3, [r7, #32]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2208      	movs	r2, #8
 800d572:	4413      	add	r3, r2
 800d574:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	6a3b      	ldr	r3, [r7, #32]
 800d57c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d580:	685a      	ldr	r2, [r3, #4]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	1ad2      	subs	r2, r2, r3
 800d586:	2308      	movs	r3, #8
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d922      	bls.n	800d5d4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d58e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	4413      	add	r3, r2
 800d594:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	f003 0307 	and.w	r3, r3, #7
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00d      	beq.n	800d5bc <pvPortMalloc+0x104>
	__asm volatile
 800d5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a4:	b672      	cpsid	i
 800d5a6:	f383 8811 	msr	BASEPRI, r3
 800d5aa:	f3bf 8f6f 	isb	sy
 800d5ae:	f3bf 8f4f 	dsb	sy
 800d5b2:	b662      	cpsie	i
 800d5b4:	613b      	str	r3, [r7, #16]
}
 800d5b6:	bf00      	nop
 800d5b8:	bf00      	nop
 800d5ba:	e7fd      	b.n	800d5b8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5be:	685a      	ldr	r2, [r3, #4]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	1ad2      	subs	r2, r2, r3
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5ce:	69b8      	ldr	r0, [r7, #24]
 800d5d0:	f000 f902 	bl	800d7d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5d4:	4b1c      	ldr	r3, [pc, #112]	@ (800d648 <pvPortMalloc+0x190>)
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	1ad3      	subs	r3, r2, r3
 800d5de:	4a1a      	ldr	r2, [pc, #104]	@ (800d648 <pvPortMalloc+0x190>)
 800d5e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d5e2:	4b19      	ldr	r3, [pc, #100]	@ (800d648 <pvPortMalloc+0x190>)
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	4b1a      	ldr	r3, [pc, #104]	@ (800d650 <pvPortMalloc+0x198>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d203      	bcs.n	800d5f6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d5ee:	4b16      	ldr	r3, [pc, #88]	@ (800d648 <pvPortMalloc+0x190>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4a17      	ldr	r2, [pc, #92]	@ (800d650 <pvPortMalloc+0x198>)
 800d5f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f8:	685a      	ldr	r2, [r3, #4]
 800d5fa:	4b12      	ldr	r3, [pc, #72]	@ (800d644 <pvPortMalloc+0x18c>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	431a      	orrs	r2, r3
 800d600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d602:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d606:	2200      	movs	r2, #0
 800d608:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d60a:	f7fe ff1b 	bl	800c444 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	f003 0307 	and.w	r3, r3, #7
 800d614:	2b00      	cmp	r3, #0
 800d616:	d00d      	beq.n	800d634 <pvPortMalloc+0x17c>
	__asm volatile
 800d618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d61c:	b672      	cpsid	i
 800d61e:	f383 8811 	msr	BASEPRI, r3
 800d622:	f3bf 8f6f 	isb	sy
 800d626:	f3bf 8f4f 	dsb	sy
 800d62a:	b662      	cpsie	i
 800d62c:	60fb      	str	r3, [r7, #12]
}
 800d62e:	bf00      	nop
 800d630:	bf00      	nop
 800d632:	e7fd      	b.n	800d630 <pvPortMalloc+0x178>
	return pvReturn;
 800d634:	69fb      	ldr	r3, [r7, #28]
}
 800d636:	4618      	mov	r0, r3
 800d638:	3728      	adds	r7, #40	@ 0x28
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	20004cbc 	.word	0x20004cbc
 800d644:	20004cc8 	.word	0x20004cc8
 800d648:	20004cc0 	.word	0x20004cc0
 800d64c:	20004cb4 	.word	0x20004cb4
 800d650:	20004cc4 	.word	0x20004cc4

0800d654 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b086      	sub	sp, #24
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d04e      	beq.n	800d704 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d666:	2308      	movs	r3, #8
 800d668:	425b      	negs	r3, r3
 800d66a:	697a      	ldr	r2, [r7, #20]
 800d66c:	4413      	add	r3, r2
 800d66e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	685a      	ldr	r2, [r3, #4]
 800d678:	4b24      	ldr	r3, [pc, #144]	@ (800d70c <vPortFree+0xb8>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4013      	ands	r3, r2
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d10d      	bne.n	800d69e <vPortFree+0x4a>
	__asm volatile
 800d682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d686:	b672      	cpsid	i
 800d688:	f383 8811 	msr	BASEPRI, r3
 800d68c:	f3bf 8f6f 	isb	sy
 800d690:	f3bf 8f4f 	dsb	sy
 800d694:	b662      	cpsie	i
 800d696:	60fb      	str	r3, [r7, #12]
}
 800d698:	bf00      	nop
 800d69a:	bf00      	nop
 800d69c:	e7fd      	b.n	800d69a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00d      	beq.n	800d6c2 <vPortFree+0x6e>
	__asm volatile
 800d6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6aa:	b672      	cpsid	i
 800d6ac:	f383 8811 	msr	BASEPRI, r3
 800d6b0:	f3bf 8f6f 	isb	sy
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	b662      	cpsie	i
 800d6ba:	60bb      	str	r3, [r7, #8]
}
 800d6bc:	bf00      	nop
 800d6be:	bf00      	nop
 800d6c0:	e7fd      	b.n	800d6be <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	685a      	ldr	r2, [r3, #4]
 800d6c6:	4b11      	ldr	r3, [pc, #68]	@ (800d70c <vPortFree+0xb8>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4013      	ands	r3, r2
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d019      	beq.n	800d704 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d115      	bne.n	800d704 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	4b0b      	ldr	r3, [pc, #44]	@ (800d70c <vPortFree+0xb8>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	43db      	mvns	r3, r3
 800d6e2:	401a      	ands	r2, r3
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d6e8:	f7fe fe9e 	bl	800c428 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	685a      	ldr	r2, [r3, #4]
 800d6f0:	4b07      	ldr	r3, [pc, #28]	@ (800d710 <vPortFree+0xbc>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	4a06      	ldr	r2, [pc, #24]	@ (800d710 <vPortFree+0xbc>)
 800d6f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d6fa:	6938      	ldr	r0, [r7, #16]
 800d6fc:	f000 f86c 	bl	800d7d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d700:	f7fe fea0 	bl	800c444 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d704:	bf00      	nop
 800d706:	3718      	adds	r7, #24
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	20004cc8 	.word	0x20004cc8
 800d710:	20004cc0 	.word	0x20004cc0

0800d714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d714:	b480      	push	{r7}
 800d716:	b085      	sub	sp, #20
 800d718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d71a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d71e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d720:	4b27      	ldr	r3, [pc, #156]	@ (800d7c0 <prvHeapInit+0xac>)
 800d722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f003 0307 	and.w	r3, r3, #7
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00c      	beq.n	800d748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	3307      	adds	r3, #7
 800d732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f023 0307 	bic.w	r3, r3, #7
 800d73a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d73c:	68ba      	ldr	r2, [r7, #8]
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	1ad3      	subs	r3, r2, r3
 800d742:	4a1f      	ldr	r2, [pc, #124]	@ (800d7c0 <prvHeapInit+0xac>)
 800d744:	4413      	add	r3, r2
 800d746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d74c:	4a1d      	ldr	r2, [pc, #116]	@ (800d7c4 <prvHeapInit+0xb0>)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d752:	4b1c      	ldr	r3, [pc, #112]	@ (800d7c4 <prvHeapInit+0xb0>)
 800d754:	2200      	movs	r2, #0
 800d756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	68ba      	ldr	r2, [r7, #8]
 800d75c:	4413      	add	r3, r2
 800d75e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d760:	2208      	movs	r2, #8
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	1a9b      	subs	r3, r3, r2
 800d766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f023 0307 	bic.w	r3, r3, #7
 800d76e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	4a15      	ldr	r2, [pc, #84]	@ (800d7c8 <prvHeapInit+0xb4>)
 800d774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d776:	4b14      	ldr	r3, [pc, #80]	@ (800d7c8 <prvHeapInit+0xb4>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2200      	movs	r2, #0
 800d77c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d77e:	4b12      	ldr	r3, [pc, #72]	@ (800d7c8 <prvHeapInit+0xb4>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2200      	movs	r2, #0
 800d784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	1ad2      	subs	r2, r2, r3
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d794:	4b0c      	ldr	r3, [pc, #48]	@ (800d7c8 <prvHeapInit+0xb4>)
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	4a0a      	ldr	r2, [pc, #40]	@ (800d7cc <prvHeapInit+0xb8>)
 800d7a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	4a09      	ldr	r2, [pc, #36]	@ (800d7d0 <prvHeapInit+0xbc>)
 800d7aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7ac:	4b09      	ldr	r3, [pc, #36]	@ (800d7d4 <prvHeapInit+0xc0>)
 800d7ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d7b2:	601a      	str	r2, [r3, #0]
}
 800d7b4:	bf00      	nop
 800d7b6:	3714      	adds	r7, #20
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr
 800d7c0:	200010b4 	.word	0x200010b4
 800d7c4:	20004cb4 	.word	0x20004cb4
 800d7c8:	20004cbc 	.word	0x20004cbc
 800d7cc:	20004cc4 	.word	0x20004cc4
 800d7d0:	20004cc0 	.word	0x20004cc0
 800d7d4:	20004cc8 	.word	0x20004cc8

0800d7d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d7e0:	4b28      	ldr	r3, [pc, #160]	@ (800d884 <prvInsertBlockIntoFreeList+0xac>)
 800d7e2:	60fb      	str	r3, [r7, #12]
 800d7e4:	e002      	b.n	800d7ec <prvInsertBlockIntoFreeList+0x14>
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	60fb      	str	r3, [r7, #12]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d8f7      	bhi.n	800d7e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	68ba      	ldr	r2, [r7, #8]
 800d800:	4413      	add	r3, r2
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	429a      	cmp	r2, r3
 800d806:	d108      	bne.n	800d81a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	685a      	ldr	r2, [r3, #4]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	441a      	add	r2, r3
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	68ba      	ldr	r2, [r7, #8]
 800d824:	441a      	add	r2, r3
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d118      	bne.n	800d860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	4b15      	ldr	r3, [pc, #84]	@ (800d888 <prvInsertBlockIntoFreeList+0xb0>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	429a      	cmp	r2, r3
 800d838:	d00d      	beq.n	800d856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	685a      	ldr	r2, [r3, #4]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	441a      	add	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	601a      	str	r2, [r3, #0]
 800d854:	e008      	b.n	800d868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d856:	4b0c      	ldr	r3, [pc, #48]	@ (800d888 <prvInsertBlockIntoFreeList+0xb0>)
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	601a      	str	r2, [r3, #0]
 800d85e:	e003      	b.n	800d868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d002      	beq.n	800d876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d876:	bf00      	nop
 800d878:	3714      	adds	r7, #20
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	20004cb4 	.word	0x20004cb4
 800d888:	20004cbc 	.word	0x20004cbc

0800d88c <__cvt>:
 800d88c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d890:	ec57 6b10 	vmov	r6, r7, d0
 800d894:	2f00      	cmp	r7, #0
 800d896:	460c      	mov	r4, r1
 800d898:	4619      	mov	r1, r3
 800d89a:	463b      	mov	r3, r7
 800d89c:	bfbb      	ittet	lt
 800d89e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d8a2:	461f      	movlt	r7, r3
 800d8a4:	2300      	movge	r3, #0
 800d8a6:	232d      	movlt	r3, #45	@ 0x2d
 800d8a8:	700b      	strb	r3, [r1, #0]
 800d8aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d8ac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d8b0:	4691      	mov	r9, r2
 800d8b2:	f023 0820 	bic.w	r8, r3, #32
 800d8b6:	bfbc      	itt	lt
 800d8b8:	4632      	movlt	r2, r6
 800d8ba:	4616      	movlt	r6, r2
 800d8bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d8c0:	d005      	beq.n	800d8ce <__cvt+0x42>
 800d8c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d8c6:	d100      	bne.n	800d8ca <__cvt+0x3e>
 800d8c8:	3401      	adds	r4, #1
 800d8ca:	2102      	movs	r1, #2
 800d8cc:	e000      	b.n	800d8d0 <__cvt+0x44>
 800d8ce:	2103      	movs	r1, #3
 800d8d0:	ab03      	add	r3, sp, #12
 800d8d2:	9301      	str	r3, [sp, #4]
 800d8d4:	ab02      	add	r3, sp, #8
 800d8d6:	9300      	str	r3, [sp, #0]
 800d8d8:	ec47 6b10 	vmov	d0, r6, r7
 800d8dc:	4653      	mov	r3, sl
 800d8de:	4622      	mov	r2, r4
 800d8e0:	f000 fe6e 	bl	800e5c0 <_dtoa_r>
 800d8e4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d8e8:	4605      	mov	r5, r0
 800d8ea:	d119      	bne.n	800d920 <__cvt+0x94>
 800d8ec:	f019 0f01 	tst.w	r9, #1
 800d8f0:	d00e      	beq.n	800d910 <__cvt+0x84>
 800d8f2:	eb00 0904 	add.w	r9, r0, r4
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	4639      	mov	r1, r7
 800d8fe:	f7f3 f90b 	bl	8000b18 <__aeabi_dcmpeq>
 800d902:	b108      	cbz	r0, 800d908 <__cvt+0x7c>
 800d904:	f8cd 900c 	str.w	r9, [sp, #12]
 800d908:	2230      	movs	r2, #48	@ 0x30
 800d90a:	9b03      	ldr	r3, [sp, #12]
 800d90c:	454b      	cmp	r3, r9
 800d90e:	d31e      	bcc.n	800d94e <__cvt+0xc2>
 800d910:	9b03      	ldr	r3, [sp, #12]
 800d912:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d914:	1b5b      	subs	r3, r3, r5
 800d916:	4628      	mov	r0, r5
 800d918:	6013      	str	r3, [r2, #0]
 800d91a:	b004      	add	sp, #16
 800d91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d920:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d924:	eb00 0904 	add.w	r9, r0, r4
 800d928:	d1e5      	bne.n	800d8f6 <__cvt+0x6a>
 800d92a:	7803      	ldrb	r3, [r0, #0]
 800d92c:	2b30      	cmp	r3, #48	@ 0x30
 800d92e:	d10a      	bne.n	800d946 <__cvt+0xba>
 800d930:	2200      	movs	r2, #0
 800d932:	2300      	movs	r3, #0
 800d934:	4630      	mov	r0, r6
 800d936:	4639      	mov	r1, r7
 800d938:	f7f3 f8ee 	bl	8000b18 <__aeabi_dcmpeq>
 800d93c:	b918      	cbnz	r0, 800d946 <__cvt+0xba>
 800d93e:	f1c4 0401 	rsb	r4, r4, #1
 800d942:	f8ca 4000 	str.w	r4, [sl]
 800d946:	f8da 3000 	ldr.w	r3, [sl]
 800d94a:	4499      	add	r9, r3
 800d94c:	e7d3      	b.n	800d8f6 <__cvt+0x6a>
 800d94e:	1c59      	adds	r1, r3, #1
 800d950:	9103      	str	r1, [sp, #12]
 800d952:	701a      	strb	r2, [r3, #0]
 800d954:	e7d9      	b.n	800d90a <__cvt+0x7e>

0800d956 <__exponent>:
 800d956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d958:	2900      	cmp	r1, #0
 800d95a:	bfba      	itte	lt
 800d95c:	4249      	neglt	r1, r1
 800d95e:	232d      	movlt	r3, #45	@ 0x2d
 800d960:	232b      	movge	r3, #43	@ 0x2b
 800d962:	2909      	cmp	r1, #9
 800d964:	7002      	strb	r2, [r0, #0]
 800d966:	7043      	strb	r3, [r0, #1]
 800d968:	dd29      	ble.n	800d9be <__exponent+0x68>
 800d96a:	f10d 0307 	add.w	r3, sp, #7
 800d96e:	461d      	mov	r5, r3
 800d970:	270a      	movs	r7, #10
 800d972:	461a      	mov	r2, r3
 800d974:	fbb1 f6f7 	udiv	r6, r1, r7
 800d978:	fb07 1416 	mls	r4, r7, r6, r1
 800d97c:	3430      	adds	r4, #48	@ 0x30
 800d97e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d982:	460c      	mov	r4, r1
 800d984:	2c63      	cmp	r4, #99	@ 0x63
 800d986:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d98a:	4631      	mov	r1, r6
 800d98c:	dcf1      	bgt.n	800d972 <__exponent+0x1c>
 800d98e:	3130      	adds	r1, #48	@ 0x30
 800d990:	1e94      	subs	r4, r2, #2
 800d992:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d996:	1c41      	adds	r1, r0, #1
 800d998:	4623      	mov	r3, r4
 800d99a:	42ab      	cmp	r3, r5
 800d99c:	d30a      	bcc.n	800d9b4 <__exponent+0x5e>
 800d99e:	f10d 0309 	add.w	r3, sp, #9
 800d9a2:	1a9b      	subs	r3, r3, r2
 800d9a4:	42ac      	cmp	r4, r5
 800d9a6:	bf88      	it	hi
 800d9a8:	2300      	movhi	r3, #0
 800d9aa:	3302      	adds	r3, #2
 800d9ac:	4403      	add	r3, r0
 800d9ae:	1a18      	subs	r0, r3, r0
 800d9b0:	b003      	add	sp, #12
 800d9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d9b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d9bc:	e7ed      	b.n	800d99a <__exponent+0x44>
 800d9be:	2330      	movs	r3, #48	@ 0x30
 800d9c0:	3130      	adds	r1, #48	@ 0x30
 800d9c2:	7083      	strb	r3, [r0, #2]
 800d9c4:	70c1      	strb	r1, [r0, #3]
 800d9c6:	1d03      	adds	r3, r0, #4
 800d9c8:	e7f1      	b.n	800d9ae <__exponent+0x58>
	...

0800d9cc <_printf_float>:
 800d9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d0:	b08d      	sub	sp, #52	@ 0x34
 800d9d2:	460c      	mov	r4, r1
 800d9d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d9d8:	4616      	mov	r6, r2
 800d9da:	461f      	mov	r7, r3
 800d9dc:	4605      	mov	r5, r0
 800d9de:	f000 fcd1 	bl	800e384 <_localeconv_r>
 800d9e2:	6803      	ldr	r3, [r0, #0]
 800d9e4:	9304      	str	r3, [sp, #16]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7f2 fc6a 	bl	80002c0 <strlen>
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9f0:	f8d8 3000 	ldr.w	r3, [r8]
 800d9f4:	9005      	str	r0, [sp, #20]
 800d9f6:	3307      	adds	r3, #7
 800d9f8:	f023 0307 	bic.w	r3, r3, #7
 800d9fc:	f103 0208 	add.w	r2, r3, #8
 800da00:	f894 a018 	ldrb.w	sl, [r4, #24]
 800da04:	f8d4 b000 	ldr.w	fp, [r4]
 800da08:	f8c8 2000 	str.w	r2, [r8]
 800da0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da10:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800da14:	9307      	str	r3, [sp, #28]
 800da16:	f8cd 8018 	str.w	r8, [sp, #24]
 800da1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800da1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da22:	4b9c      	ldr	r3, [pc, #624]	@ (800dc94 <_printf_float+0x2c8>)
 800da24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800da28:	f7f3 f8a8 	bl	8000b7c <__aeabi_dcmpun>
 800da2c:	bb70      	cbnz	r0, 800da8c <_printf_float+0xc0>
 800da2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da32:	4b98      	ldr	r3, [pc, #608]	@ (800dc94 <_printf_float+0x2c8>)
 800da34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800da38:	f7f3 f882 	bl	8000b40 <__aeabi_dcmple>
 800da3c:	bb30      	cbnz	r0, 800da8c <_printf_float+0xc0>
 800da3e:	2200      	movs	r2, #0
 800da40:	2300      	movs	r3, #0
 800da42:	4640      	mov	r0, r8
 800da44:	4649      	mov	r1, r9
 800da46:	f7f3 f871 	bl	8000b2c <__aeabi_dcmplt>
 800da4a:	b110      	cbz	r0, 800da52 <_printf_float+0x86>
 800da4c:	232d      	movs	r3, #45	@ 0x2d
 800da4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da52:	4a91      	ldr	r2, [pc, #580]	@ (800dc98 <_printf_float+0x2cc>)
 800da54:	4b91      	ldr	r3, [pc, #580]	@ (800dc9c <_printf_float+0x2d0>)
 800da56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800da5a:	bf94      	ite	ls
 800da5c:	4690      	movls	r8, r2
 800da5e:	4698      	movhi	r8, r3
 800da60:	2303      	movs	r3, #3
 800da62:	6123      	str	r3, [r4, #16]
 800da64:	f02b 0304 	bic.w	r3, fp, #4
 800da68:	6023      	str	r3, [r4, #0]
 800da6a:	f04f 0900 	mov.w	r9, #0
 800da6e:	9700      	str	r7, [sp, #0]
 800da70:	4633      	mov	r3, r6
 800da72:	aa0b      	add	r2, sp, #44	@ 0x2c
 800da74:	4621      	mov	r1, r4
 800da76:	4628      	mov	r0, r5
 800da78:	f000 f9d2 	bl	800de20 <_printf_common>
 800da7c:	3001      	adds	r0, #1
 800da7e:	f040 808d 	bne.w	800db9c <_printf_float+0x1d0>
 800da82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da86:	b00d      	add	sp, #52	@ 0x34
 800da88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da8c:	4642      	mov	r2, r8
 800da8e:	464b      	mov	r3, r9
 800da90:	4640      	mov	r0, r8
 800da92:	4649      	mov	r1, r9
 800da94:	f7f3 f872 	bl	8000b7c <__aeabi_dcmpun>
 800da98:	b140      	cbz	r0, 800daac <_printf_float+0xe0>
 800da9a:	464b      	mov	r3, r9
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	bfbc      	itt	lt
 800daa0:	232d      	movlt	r3, #45	@ 0x2d
 800daa2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800daa6:	4a7e      	ldr	r2, [pc, #504]	@ (800dca0 <_printf_float+0x2d4>)
 800daa8:	4b7e      	ldr	r3, [pc, #504]	@ (800dca4 <_printf_float+0x2d8>)
 800daaa:	e7d4      	b.n	800da56 <_printf_float+0x8a>
 800daac:	6863      	ldr	r3, [r4, #4]
 800daae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800dab2:	9206      	str	r2, [sp, #24]
 800dab4:	1c5a      	adds	r2, r3, #1
 800dab6:	d13b      	bne.n	800db30 <_printf_float+0x164>
 800dab8:	2306      	movs	r3, #6
 800daba:	6063      	str	r3, [r4, #4]
 800dabc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800dac0:	2300      	movs	r3, #0
 800dac2:	6022      	str	r2, [r4, #0]
 800dac4:	9303      	str	r3, [sp, #12]
 800dac6:	ab0a      	add	r3, sp, #40	@ 0x28
 800dac8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800dacc:	ab09      	add	r3, sp, #36	@ 0x24
 800dace:	9300      	str	r3, [sp, #0]
 800dad0:	6861      	ldr	r1, [r4, #4]
 800dad2:	ec49 8b10 	vmov	d0, r8, r9
 800dad6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dada:	4628      	mov	r0, r5
 800dadc:	f7ff fed6 	bl	800d88c <__cvt>
 800dae0:	9b06      	ldr	r3, [sp, #24]
 800dae2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dae4:	2b47      	cmp	r3, #71	@ 0x47
 800dae6:	4680      	mov	r8, r0
 800dae8:	d129      	bne.n	800db3e <_printf_float+0x172>
 800daea:	1cc8      	adds	r0, r1, #3
 800daec:	db02      	blt.n	800daf4 <_printf_float+0x128>
 800daee:	6863      	ldr	r3, [r4, #4]
 800daf0:	4299      	cmp	r1, r3
 800daf2:	dd41      	ble.n	800db78 <_printf_float+0x1ac>
 800daf4:	f1aa 0a02 	sub.w	sl, sl, #2
 800daf8:	fa5f fa8a 	uxtb.w	sl, sl
 800dafc:	3901      	subs	r1, #1
 800dafe:	4652      	mov	r2, sl
 800db00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800db04:	9109      	str	r1, [sp, #36]	@ 0x24
 800db06:	f7ff ff26 	bl	800d956 <__exponent>
 800db0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db0c:	1813      	adds	r3, r2, r0
 800db0e:	2a01      	cmp	r2, #1
 800db10:	4681      	mov	r9, r0
 800db12:	6123      	str	r3, [r4, #16]
 800db14:	dc02      	bgt.n	800db1c <_printf_float+0x150>
 800db16:	6822      	ldr	r2, [r4, #0]
 800db18:	07d2      	lsls	r2, r2, #31
 800db1a:	d501      	bpl.n	800db20 <_printf_float+0x154>
 800db1c:	3301      	adds	r3, #1
 800db1e:	6123      	str	r3, [r4, #16]
 800db20:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800db24:	2b00      	cmp	r3, #0
 800db26:	d0a2      	beq.n	800da6e <_printf_float+0xa2>
 800db28:	232d      	movs	r3, #45	@ 0x2d
 800db2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db2e:	e79e      	b.n	800da6e <_printf_float+0xa2>
 800db30:	9a06      	ldr	r2, [sp, #24]
 800db32:	2a47      	cmp	r2, #71	@ 0x47
 800db34:	d1c2      	bne.n	800dabc <_printf_float+0xf0>
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1c0      	bne.n	800dabc <_printf_float+0xf0>
 800db3a:	2301      	movs	r3, #1
 800db3c:	e7bd      	b.n	800daba <_printf_float+0xee>
 800db3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800db42:	d9db      	bls.n	800dafc <_printf_float+0x130>
 800db44:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800db48:	d118      	bne.n	800db7c <_printf_float+0x1b0>
 800db4a:	2900      	cmp	r1, #0
 800db4c:	6863      	ldr	r3, [r4, #4]
 800db4e:	dd0b      	ble.n	800db68 <_printf_float+0x19c>
 800db50:	6121      	str	r1, [r4, #16]
 800db52:	b913      	cbnz	r3, 800db5a <_printf_float+0x18e>
 800db54:	6822      	ldr	r2, [r4, #0]
 800db56:	07d0      	lsls	r0, r2, #31
 800db58:	d502      	bpl.n	800db60 <_printf_float+0x194>
 800db5a:	3301      	adds	r3, #1
 800db5c:	440b      	add	r3, r1
 800db5e:	6123      	str	r3, [r4, #16]
 800db60:	65a1      	str	r1, [r4, #88]	@ 0x58
 800db62:	f04f 0900 	mov.w	r9, #0
 800db66:	e7db      	b.n	800db20 <_printf_float+0x154>
 800db68:	b913      	cbnz	r3, 800db70 <_printf_float+0x1a4>
 800db6a:	6822      	ldr	r2, [r4, #0]
 800db6c:	07d2      	lsls	r2, r2, #31
 800db6e:	d501      	bpl.n	800db74 <_printf_float+0x1a8>
 800db70:	3302      	adds	r3, #2
 800db72:	e7f4      	b.n	800db5e <_printf_float+0x192>
 800db74:	2301      	movs	r3, #1
 800db76:	e7f2      	b.n	800db5e <_printf_float+0x192>
 800db78:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800db7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db7e:	4299      	cmp	r1, r3
 800db80:	db05      	blt.n	800db8e <_printf_float+0x1c2>
 800db82:	6823      	ldr	r3, [r4, #0]
 800db84:	6121      	str	r1, [r4, #16]
 800db86:	07d8      	lsls	r0, r3, #31
 800db88:	d5ea      	bpl.n	800db60 <_printf_float+0x194>
 800db8a:	1c4b      	adds	r3, r1, #1
 800db8c:	e7e7      	b.n	800db5e <_printf_float+0x192>
 800db8e:	2900      	cmp	r1, #0
 800db90:	bfd4      	ite	le
 800db92:	f1c1 0202 	rsble	r2, r1, #2
 800db96:	2201      	movgt	r2, #1
 800db98:	4413      	add	r3, r2
 800db9a:	e7e0      	b.n	800db5e <_printf_float+0x192>
 800db9c:	6823      	ldr	r3, [r4, #0]
 800db9e:	055a      	lsls	r2, r3, #21
 800dba0:	d407      	bmi.n	800dbb2 <_printf_float+0x1e6>
 800dba2:	6923      	ldr	r3, [r4, #16]
 800dba4:	4642      	mov	r2, r8
 800dba6:	4631      	mov	r1, r6
 800dba8:	4628      	mov	r0, r5
 800dbaa:	47b8      	blx	r7
 800dbac:	3001      	adds	r0, #1
 800dbae:	d12b      	bne.n	800dc08 <_printf_float+0x23c>
 800dbb0:	e767      	b.n	800da82 <_printf_float+0xb6>
 800dbb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dbb6:	f240 80dd 	bls.w	800dd74 <_printf_float+0x3a8>
 800dbba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	f7f2 ffa9 	bl	8000b18 <__aeabi_dcmpeq>
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	d033      	beq.n	800dc32 <_printf_float+0x266>
 800dbca:	4a37      	ldr	r2, [pc, #220]	@ (800dca8 <_printf_float+0x2dc>)
 800dbcc:	2301      	movs	r3, #1
 800dbce:	4631      	mov	r1, r6
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	47b8      	blx	r7
 800dbd4:	3001      	adds	r0, #1
 800dbd6:	f43f af54 	beq.w	800da82 <_printf_float+0xb6>
 800dbda:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dbde:	4543      	cmp	r3, r8
 800dbe0:	db02      	blt.n	800dbe8 <_printf_float+0x21c>
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	07d8      	lsls	r0, r3, #31
 800dbe6:	d50f      	bpl.n	800dc08 <_printf_float+0x23c>
 800dbe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbec:	4631      	mov	r1, r6
 800dbee:	4628      	mov	r0, r5
 800dbf0:	47b8      	blx	r7
 800dbf2:	3001      	adds	r0, #1
 800dbf4:	f43f af45 	beq.w	800da82 <_printf_float+0xb6>
 800dbf8:	f04f 0900 	mov.w	r9, #0
 800dbfc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800dc00:	f104 0a1a 	add.w	sl, r4, #26
 800dc04:	45c8      	cmp	r8, r9
 800dc06:	dc09      	bgt.n	800dc1c <_printf_float+0x250>
 800dc08:	6823      	ldr	r3, [r4, #0]
 800dc0a:	079b      	lsls	r3, r3, #30
 800dc0c:	f100 8103 	bmi.w	800de16 <_printf_float+0x44a>
 800dc10:	68e0      	ldr	r0, [r4, #12]
 800dc12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc14:	4298      	cmp	r0, r3
 800dc16:	bfb8      	it	lt
 800dc18:	4618      	movlt	r0, r3
 800dc1a:	e734      	b.n	800da86 <_printf_float+0xba>
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	4652      	mov	r2, sl
 800dc20:	4631      	mov	r1, r6
 800dc22:	4628      	mov	r0, r5
 800dc24:	47b8      	blx	r7
 800dc26:	3001      	adds	r0, #1
 800dc28:	f43f af2b 	beq.w	800da82 <_printf_float+0xb6>
 800dc2c:	f109 0901 	add.w	r9, r9, #1
 800dc30:	e7e8      	b.n	800dc04 <_printf_float+0x238>
 800dc32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	dc39      	bgt.n	800dcac <_printf_float+0x2e0>
 800dc38:	4a1b      	ldr	r2, [pc, #108]	@ (800dca8 <_printf_float+0x2dc>)
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	4631      	mov	r1, r6
 800dc3e:	4628      	mov	r0, r5
 800dc40:	47b8      	blx	r7
 800dc42:	3001      	adds	r0, #1
 800dc44:	f43f af1d 	beq.w	800da82 <_printf_float+0xb6>
 800dc48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dc4c:	ea59 0303 	orrs.w	r3, r9, r3
 800dc50:	d102      	bne.n	800dc58 <_printf_float+0x28c>
 800dc52:	6823      	ldr	r3, [r4, #0]
 800dc54:	07d9      	lsls	r1, r3, #31
 800dc56:	d5d7      	bpl.n	800dc08 <_printf_float+0x23c>
 800dc58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc5c:	4631      	mov	r1, r6
 800dc5e:	4628      	mov	r0, r5
 800dc60:	47b8      	blx	r7
 800dc62:	3001      	adds	r0, #1
 800dc64:	f43f af0d 	beq.w	800da82 <_printf_float+0xb6>
 800dc68:	f04f 0a00 	mov.w	sl, #0
 800dc6c:	f104 0b1a 	add.w	fp, r4, #26
 800dc70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc72:	425b      	negs	r3, r3
 800dc74:	4553      	cmp	r3, sl
 800dc76:	dc01      	bgt.n	800dc7c <_printf_float+0x2b0>
 800dc78:	464b      	mov	r3, r9
 800dc7a:	e793      	b.n	800dba4 <_printf_float+0x1d8>
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	465a      	mov	r2, fp
 800dc80:	4631      	mov	r1, r6
 800dc82:	4628      	mov	r0, r5
 800dc84:	47b8      	blx	r7
 800dc86:	3001      	adds	r0, #1
 800dc88:	f43f aefb 	beq.w	800da82 <_printf_float+0xb6>
 800dc8c:	f10a 0a01 	add.w	sl, sl, #1
 800dc90:	e7ee      	b.n	800dc70 <_printf_float+0x2a4>
 800dc92:	bf00      	nop
 800dc94:	7fefffff 	.word	0x7fefffff
 800dc98:	08010c20 	.word	0x08010c20
 800dc9c:	08010c24 	.word	0x08010c24
 800dca0:	08010c28 	.word	0x08010c28
 800dca4:	08010c2c 	.word	0x08010c2c
 800dca8:	08010c30 	.word	0x08010c30
 800dcac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dcae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dcb2:	4553      	cmp	r3, sl
 800dcb4:	bfa8      	it	ge
 800dcb6:	4653      	movge	r3, sl
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	4699      	mov	r9, r3
 800dcbc:	dc36      	bgt.n	800dd2c <_printf_float+0x360>
 800dcbe:	f04f 0b00 	mov.w	fp, #0
 800dcc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dcc6:	f104 021a 	add.w	r2, r4, #26
 800dcca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dccc:	9306      	str	r3, [sp, #24]
 800dcce:	eba3 0309 	sub.w	r3, r3, r9
 800dcd2:	455b      	cmp	r3, fp
 800dcd4:	dc31      	bgt.n	800dd3a <_printf_float+0x36e>
 800dcd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcd8:	459a      	cmp	sl, r3
 800dcda:	dc3a      	bgt.n	800dd52 <_printf_float+0x386>
 800dcdc:	6823      	ldr	r3, [r4, #0]
 800dcde:	07da      	lsls	r2, r3, #31
 800dce0:	d437      	bmi.n	800dd52 <_printf_float+0x386>
 800dce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dce4:	ebaa 0903 	sub.w	r9, sl, r3
 800dce8:	9b06      	ldr	r3, [sp, #24]
 800dcea:	ebaa 0303 	sub.w	r3, sl, r3
 800dcee:	4599      	cmp	r9, r3
 800dcf0:	bfa8      	it	ge
 800dcf2:	4699      	movge	r9, r3
 800dcf4:	f1b9 0f00 	cmp.w	r9, #0
 800dcf8:	dc33      	bgt.n	800dd62 <_printf_float+0x396>
 800dcfa:	f04f 0800 	mov.w	r8, #0
 800dcfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd02:	f104 0b1a 	add.w	fp, r4, #26
 800dd06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd08:	ebaa 0303 	sub.w	r3, sl, r3
 800dd0c:	eba3 0309 	sub.w	r3, r3, r9
 800dd10:	4543      	cmp	r3, r8
 800dd12:	f77f af79 	ble.w	800dc08 <_printf_float+0x23c>
 800dd16:	2301      	movs	r3, #1
 800dd18:	465a      	mov	r2, fp
 800dd1a:	4631      	mov	r1, r6
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	47b8      	blx	r7
 800dd20:	3001      	adds	r0, #1
 800dd22:	f43f aeae 	beq.w	800da82 <_printf_float+0xb6>
 800dd26:	f108 0801 	add.w	r8, r8, #1
 800dd2a:	e7ec      	b.n	800dd06 <_printf_float+0x33a>
 800dd2c:	4642      	mov	r2, r8
 800dd2e:	4631      	mov	r1, r6
 800dd30:	4628      	mov	r0, r5
 800dd32:	47b8      	blx	r7
 800dd34:	3001      	adds	r0, #1
 800dd36:	d1c2      	bne.n	800dcbe <_printf_float+0x2f2>
 800dd38:	e6a3      	b.n	800da82 <_printf_float+0xb6>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	4631      	mov	r1, r6
 800dd3e:	4628      	mov	r0, r5
 800dd40:	9206      	str	r2, [sp, #24]
 800dd42:	47b8      	blx	r7
 800dd44:	3001      	adds	r0, #1
 800dd46:	f43f ae9c 	beq.w	800da82 <_printf_float+0xb6>
 800dd4a:	9a06      	ldr	r2, [sp, #24]
 800dd4c:	f10b 0b01 	add.w	fp, fp, #1
 800dd50:	e7bb      	b.n	800dcca <_printf_float+0x2fe>
 800dd52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd56:	4631      	mov	r1, r6
 800dd58:	4628      	mov	r0, r5
 800dd5a:	47b8      	blx	r7
 800dd5c:	3001      	adds	r0, #1
 800dd5e:	d1c0      	bne.n	800dce2 <_printf_float+0x316>
 800dd60:	e68f      	b.n	800da82 <_printf_float+0xb6>
 800dd62:	9a06      	ldr	r2, [sp, #24]
 800dd64:	464b      	mov	r3, r9
 800dd66:	4442      	add	r2, r8
 800dd68:	4631      	mov	r1, r6
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	47b8      	blx	r7
 800dd6e:	3001      	adds	r0, #1
 800dd70:	d1c3      	bne.n	800dcfa <_printf_float+0x32e>
 800dd72:	e686      	b.n	800da82 <_printf_float+0xb6>
 800dd74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dd78:	f1ba 0f01 	cmp.w	sl, #1
 800dd7c:	dc01      	bgt.n	800dd82 <_printf_float+0x3b6>
 800dd7e:	07db      	lsls	r3, r3, #31
 800dd80:	d536      	bpl.n	800ddf0 <_printf_float+0x424>
 800dd82:	2301      	movs	r3, #1
 800dd84:	4642      	mov	r2, r8
 800dd86:	4631      	mov	r1, r6
 800dd88:	4628      	mov	r0, r5
 800dd8a:	47b8      	blx	r7
 800dd8c:	3001      	adds	r0, #1
 800dd8e:	f43f ae78 	beq.w	800da82 <_printf_float+0xb6>
 800dd92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd96:	4631      	mov	r1, r6
 800dd98:	4628      	mov	r0, r5
 800dd9a:	47b8      	blx	r7
 800dd9c:	3001      	adds	r0, #1
 800dd9e:	f43f ae70 	beq.w	800da82 <_printf_float+0xb6>
 800dda2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dda6:	2200      	movs	r2, #0
 800dda8:	2300      	movs	r3, #0
 800ddaa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ddae:	f7f2 feb3 	bl	8000b18 <__aeabi_dcmpeq>
 800ddb2:	b9c0      	cbnz	r0, 800dde6 <_printf_float+0x41a>
 800ddb4:	4653      	mov	r3, sl
 800ddb6:	f108 0201 	add.w	r2, r8, #1
 800ddba:	4631      	mov	r1, r6
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	47b8      	blx	r7
 800ddc0:	3001      	adds	r0, #1
 800ddc2:	d10c      	bne.n	800ddde <_printf_float+0x412>
 800ddc4:	e65d      	b.n	800da82 <_printf_float+0xb6>
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	465a      	mov	r2, fp
 800ddca:	4631      	mov	r1, r6
 800ddcc:	4628      	mov	r0, r5
 800ddce:	47b8      	blx	r7
 800ddd0:	3001      	adds	r0, #1
 800ddd2:	f43f ae56 	beq.w	800da82 <_printf_float+0xb6>
 800ddd6:	f108 0801 	add.w	r8, r8, #1
 800ddda:	45d0      	cmp	r8, sl
 800dddc:	dbf3      	blt.n	800ddc6 <_printf_float+0x3fa>
 800ddde:	464b      	mov	r3, r9
 800dde0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dde4:	e6df      	b.n	800dba6 <_printf_float+0x1da>
 800dde6:	f04f 0800 	mov.w	r8, #0
 800ddea:	f104 0b1a 	add.w	fp, r4, #26
 800ddee:	e7f4      	b.n	800ddda <_printf_float+0x40e>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	4642      	mov	r2, r8
 800ddf4:	e7e1      	b.n	800ddba <_printf_float+0x3ee>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	464a      	mov	r2, r9
 800ddfa:	4631      	mov	r1, r6
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	47b8      	blx	r7
 800de00:	3001      	adds	r0, #1
 800de02:	f43f ae3e 	beq.w	800da82 <_printf_float+0xb6>
 800de06:	f108 0801 	add.w	r8, r8, #1
 800de0a:	68e3      	ldr	r3, [r4, #12]
 800de0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800de0e:	1a5b      	subs	r3, r3, r1
 800de10:	4543      	cmp	r3, r8
 800de12:	dcf0      	bgt.n	800ddf6 <_printf_float+0x42a>
 800de14:	e6fc      	b.n	800dc10 <_printf_float+0x244>
 800de16:	f04f 0800 	mov.w	r8, #0
 800de1a:	f104 0919 	add.w	r9, r4, #25
 800de1e:	e7f4      	b.n	800de0a <_printf_float+0x43e>

0800de20 <_printf_common>:
 800de20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de24:	4616      	mov	r6, r2
 800de26:	4698      	mov	r8, r3
 800de28:	688a      	ldr	r2, [r1, #8]
 800de2a:	690b      	ldr	r3, [r1, #16]
 800de2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800de30:	4293      	cmp	r3, r2
 800de32:	bfb8      	it	lt
 800de34:	4613      	movlt	r3, r2
 800de36:	6033      	str	r3, [r6, #0]
 800de38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800de3c:	4607      	mov	r7, r0
 800de3e:	460c      	mov	r4, r1
 800de40:	b10a      	cbz	r2, 800de46 <_printf_common+0x26>
 800de42:	3301      	adds	r3, #1
 800de44:	6033      	str	r3, [r6, #0]
 800de46:	6823      	ldr	r3, [r4, #0]
 800de48:	0699      	lsls	r1, r3, #26
 800de4a:	bf42      	ittt	mi
 800de4c:	6833      	ldrmi	r3, [r6, #0]
 800de4e:	3302      	addmi	r3, #2
 800de50:	6033      	strmi	r3, [r6, #0]
 800de52:	6825      	ldr	r5, [r4, #0]
 800de54:	f015 0506 	ands.w	r5, r5, #6
 800de58:	d106      	bne.n	800de68 <_printf_common+0x48>
 800de5a:	f104 0a19 	add.w	sl, r4, #25
 800de5e:	68e3      	ldr	r3, [r4, #12]
 800de60:	6832      	ldr	r2, [r6, #0]
 800de62:	1a9b      	subs	r3, r3, r2
 800de64:	42ab      	cmp	r3, r5
 800de66:	dc26      	bgt.n	800deb6 <_printf_common+0x96>
 800de68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800de6c:	6822      	ldr	r2, [r4, #0]
 800de6e:	3b00      	subs	r3, #0
 800de70:	bf18      	it	ne
 800de72:	2301      	movne	r3, #1
 800de74:	0692      	lsls	r2, r2, #26
 800de76:	d42b      	bmi.n	800ded0 <_printf_common+0xb0>
 800de78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800de7c:	4641      	mov	r1, r8
 800de7e:	4638      	mov	r0, r7
 800de80:	47c8      	blx	r9
 800de82:	3001      	adds	r0, #1
 800de84:	d01e      	beq.n	800dec4 <_printf_common+0xa4>
 800de86:	6823      	ldr	r3, [r4, #0]
 800de88:	6922      	ldr	r2, [r4, #16]
 800de8a:	f003 0306 	and.w	r3, r3, #6
 800de8e:	2b04      	cmp	r3, #4
 800de90:	bf02      	ittt	eq
 800de92:	68e5      	ldreq	r5, [r4, #12]
 800de94:	6833      	ldreq	r3, [r6, #0]
 800de96:	1aed      	subeq	r5, r5, r3
 800de98:	68a3      	ldr	r3, [r4, #8]
 800de9a:	bf0c      	ite	eq
 800de9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dea0:	2500      	movne	r5, #0
 800dea2:	4293      	cmp	r3, r2
 800dea4:	bfc4      	itt	gt
 800dea6:	1a9b      	subgt	r3, r3, r2
 800dea8:	18ed      	addgt	r5, r5, r3
 800deaa:	2600      	movs	r6, #0
 800deac:	341a      	adds	r4, #26
 800deae:	42b5      	cmp	r5, r6
 800deb0:	d11a      	bne.n	800dee8 <_printf_common+0xc8>
 800deb2:	2000      	movs	r0, #0
 800deb4:	e008      	b.n	800dec8 <_printf_common+0xa8>
 800deb6:	2301      	movs	r3, #1
 800deb8:	4652      	mov	r2, sl
 800deba:	4641      	mov	r1, r8
 800debc:	4638      	mov	r0, r7
 800debe:	47c8      	blx	r9
 800dec0:	3001      	adds	r0, #1
 800dec2:	d103      	bne.n	800decc <_printf_common+0xac>
 800dec4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800decc:	3501      	adds	r5, #1
 800dece:	e7c6      	b.n	800de5e <_printf_common+0x3e>
 800ded0:	18e1      	adds	r1, r4, r3
 800ded2:	1c5a      	adds	r2, r3, #1
 800ded4:	2030      	movs	r0, #48	@ 0x30
 800ded6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800deda:	4422      	add	r2, r4
 800dedc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dee0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dee4:	3302      	adds	r3, #2
 800dee6:	e7c7      	b.n	800de78 <_printf_common+0x58>
 800dee8:	2301      	movs	r3, #1
 800deea:	4622      	mov	r2, r4
 800deec:	4641      	mov	r1, r8
 800deee:	4638      	mov	r0, r7
 800def0:	47c8      	blx	r9
 800def2:	3001      	adds	r0, #1
 800def4:	d0e6      	beq.n	800dec4 <_printf_common+0xa4>
 800def6:	3601      	adds	r6, #1
 800def8:	e7d9      	b.n	800deae <_printf_common+0x8e>
	...

0800defc <_printf_i>:
 800defc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df00:	7e0f      	ldrb	r7, [r1, #24]
 800df02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800df04:	2f78      	cmp	r7, #120	@ 0x78
 800df06:	4691      	mov	r9, r2
 800df08:	4680      	mov	r8, r0
 800df0a:	460c      	mov	r4, r1
 800df0c:	469a      	mov	sl, r3
 800df0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800df12:	d807      	bhi.n	800df24 <_printf_i+0x28>
 800df14:	2f62      	cmp	r7, #98	@ 0x62
 800df16:	d80a      	bhi.n	800df2e <_printf_i+0x32>
 800df18:	2f00      	cmp	r7, #0
 800df1a:	f000 80d2 	beq.w	800e0c2 <_printf_i+0x1c6>
 800df1e:	2f58      	cmp	r7, #88	@ 0x58
 800df20:	f000 80b9 	beq.w	800e096 <_printf_i+0x19a>
 800df24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800df2c:	e03a      	b.n	800dfa4 <_printf_i+0xa8>
 800df2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800df32:	2b15      	cmp	r3, #21
 800df34:	d8f6      	bhi.n	800df24 <_printf_i+0x28>
 800df36:	a101      	add	r1, pc, #4	@ (adr r1, 800df3c <_printf_i+0x40>)
 800df38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df3c:	0800df95 	.word	0x0800df95
 800df40:	0800dfa9 	.word	0x0800dfa9
 800df44:	0800df25 	.word	0x0800df25
 800df48:	0800df25 	.word	0x0800df25
 800df4c:	0800df25 	.word	0x0800df25
 800df50:	0800df25 	.word	0x0800df25
 800df54:	0800dfa9 	.word	0x0800dfa9
 800df58:	0800df25 	.word	0x0800df25
 800df5c:	0800df25 	.word	0x0800df25
 800df60:	0800df25 	.word	0x0800df25
 800df64:	0800df25 	.word	0x0800df25
 800df68:	0800e0a9 	.word	0x0800e0a9
 800df6c:	0800dfd3 	.word	0x0800dfd3
 800df70:	0800e063 	.word	0x0800e063
 800df74:	0800df25 	.word	0x0800df25
 800df78:	0800df25 	.word	0x0800df25
 800df7c:	0800e0cb 	.word	0x0800e0cb
 800df80:	0800df25 	.word	0x0800df25
 800df84:	0800dfd3 	.word	0x0800dfd3
 800df88:	0800df25 	.word	0x0800df25
 800df8c:	0800df25 	.word	0x0800df25
 800df90:	0800e06b 	.word	0x0800e06b
 800df94:	6833      	ldr	r3, [r6, #0]
 800df96:	1d1a      	adds	r2, r3, #4
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	6032      	str	r2, [r6, #0]
 800df9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dfa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	e09d      	b.n	800e0e4 <_printf_i+0x1e8>
 800dfa8:	6833      	ldr	r3, [r6, #0]
 800dfaa:	6820      	ldr	r0, [r4, #0]
 800dfac:	1d19      	adds	r1, r3, #4
 800dfae:	6031      	str	r1, [r6, #0]
 800dfb0:	0606      	lsls	r6, r0, #24
 800dfb2:	d501      	bpl.n	800dfb8 <_printf_i+0xbc>
 800dfb4:	681d      	ldr	r5, [r3, #0]
 800dfb6:	e003      	b.n	800dfc0 <_printf_i+0xc4>
 800dfb8:	0645      	lsls	r5, r0, #25
 800dfba:	d5fb      	bpl.n	800dfb4 <_printf_i+0xb8>
 800dfbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dfc0:	2d00      	cmp	r5, #0
 800dfc2:	da03      	bge.n	800dfcc <_printf_i+0xd0>
 800dfc4:	232d      	movs	r3, #45	@ 0x2d
 800dfc6:	426d      	negs	r5, r5
 800dfc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dfcc:	4859      	ldr	r0, [pc, #356]	@ (800e134 <_printf_i+0x238>)
 800dfce:	230a      	movs	r3, #10
 800dfd0:	e011      	b.n	800dff6 <_printf_i+0xfa>
 800dfd2:	6821      	ldr	r1, [r4, #0]
 800dfd4:	6833      	ldr	r3, [r6, #0]
 800dfd6:	0608      	lsls	r0, r1, #24
 800dfd8:	f853 5b04 	ldr.w	r5, [r3], #4
 800dfdc:	d402      	bmi.n	800dfe4 <_printf_i+0xe8>
 800dfde:	0649      	lsls	r1, r1, #25
 800dfe0:	bf48      	it	mi
 800dfe2:	b2ad      	uxthmi	r5, r5
 800dfe4:	2f6f      	cmp	r7, #111	@ 0x6f
 800dfe6:	4853      	ldr	r0, [pc, #332]	@ (800e134 <_printf_i+0x238>)
 800dfe8:	6033      	str	r3, [r6, #0]
 800dfea:	bf14      	ite	ne
 800dfec:	230a      	movne	r3, #10
 800dfee:	2308      	moveq	r3, #8
 800dff0:	2100      	movs	r1, #0
 800dff2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dff6:	6866      	ldr	r6, [r4, #4]
 800dff8:	60a6      	str	r6, [r4, #8]
 800dffa:	2e00      	cmp	r6, #0
 800dffc:	bfa2      	ittt	ge
 800dffe:	6821      	ldrge	r1, [r4, #0]
 800e000:	f021 0104 	bicge.w	r1, r1, #4
 800e004:	6021      	strge	r1, [r4, #0]
 800e006:	b90d      	cbnz	r5, 800e00c <_printf_i+0x110>
 800e008:	2e00      	cmp	r6, #0
 800e00a:	d04b      	beq.n	800e0a4 <_printf_i+0x1a8>
 800e00c:	4616      	mov	r6, r2
 800e00e:	fbb5 f1f3 	udiv	r1, r5, r3
 800e012:	fb03 5711 	mls	r7, r3, r1, r5
 800e016:	5dc7      	ldrb	r7, [r0, r7]
 800e018:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e01c:	462f      	mov	r7, r5
 800e01e:	42bb      	cmp	r3, r7
 800e020:	460d      	mov	r5, r1
 800e022:	d9f4      	bls.n	800e00e <_printf_i+0x112>
 800e024:	2b08      	cmp	r3, #8
 800e026:	d10b      	bne.n	800e040 <_printf_i+0x144>
 800e028:	6823      	ldr	r3, [r4, #0]
 800e02a:	07df      	lsls	r7, r3, #31
 800e02c:	d508      	bpl.n	800e040 <_printf_i+0x144>
 800e02e:	6923      	ldr	r3, [r4, #16]
 800e030:	6861      	ldr	r1, [r4, #4]
 800e032:	4299      	cmp	r1, r3
 800e034:	bfde      	ittt	le
 800e036:	2330      	movle	r3, #48	@ 0x30
 800e038:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e03c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e040:	1b92      	subs	r2, r2, r6
 800e042:	6122      	str	r2, [r4, #16]
 800e044:	f8cd a000 	str.w	sl, [sp]
 800e048:	464b      	mov	r3, r9
 800e04a:	aa03      	add	r2, sp, #12
 800e04c:	4621      	mov	r1, r4
 800e04e:	4640      	mov	r0, r8
 800e050:	f7ff fee6 	bl	800de20 <_printf_common>
 800e054:	3001      	adds	r0, #1
 800e056:	d14a      	bne.n	800e0ee <_printf_i+0x1f2>
 800e058:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e05c:	b004      	add	sp, #16
 800e05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e062:	6823      	ldr	r3, [r4, #0]
 800e064:	f043 0320 	orr.w	r3, r3, #32
 800e068:	6023      	str	r3, [r4, #0]
 800e06a:	4833      	ldr	r0, [pc, #204]	@ (800e138 <_printf_i+0x23c>)
 800e06c:	2778      	movs	r7, #120	@ 0x78
 800e06e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e072:	6823      	ldr	r3, [r4, #0]
 800e074:	6831      	ldr	r1, [r6, #0]
 800e076:	061f      	lsls	r7, r3, #24
 800e078:	f851 5b04 	ldr.w	r5, [r1], #4
 800e07c:	d402      	bmi.n	800e084 <_printf_i+0x188>
 800e07e:	065f      	lsls	r7, r3, #25
 800e080:	bf48      	it	mi
 800e082:	b2ad      	uxthmi	r5, r5
 800e084:	6031      	str	r1, [r6, #0]
 800e086:	07d9      	lsls	r1, r3, #31
 800e088:	bf44      	itt	mi
 800e08a:	f043 0320 	orrmi.w	r3, r3, #32
 800e08e:	6023      	strmi	r3, [r4, #0]
 800e090:	b11d      	cbz	r5, 800e09a <_printf_i+0x19e>
 800e092:	2310      	movs	r3, #16
 800e094:	e7ac      	b.n	800dff0 <_printf_i+0xf4>
 800e096:	4827      	ldr	r0, [pc, #156]	@ (800e134 <_printf_i+0x238>)
 800e098:	e7e9      	b.n	800e06e <_printf_i+0x172>
 800e09a:	6823      	ldr	r3, [r4, #0]
 800e09c:	f023 0320 	bic.w	r3, r3, #32
 800e0a0:	6023      	str	r3, [r4, #0]
 800e0a2:	e7f6      	b.n	800e092 <_printf_i+0x196>
 800e0a4:	4616      	mov	r6, r2
 800e0a6:	e7bd      	b.n	800e024 <_printf_i+0x128>
 800e0a8:	6833      	ldr	r3, [r6, #0]
 800e0aa:	6825      	ldr	r5, [r4, #0]
 800e0ac:	6961      	ldr	r1, [r4, #20]
 800e0ae:	1d18      	adds	r0, r3, #4
 800e0b0:	6030      	str	r0, [r6, #0]
 800e0b2:	062e      	lsls	r6, r5, #24
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	d501      	bpl.n	800e0bc <_printf_i+0x1c0>
 800e0b8:	6019      	str	r1, [r3, #0]
 800e0ba:	e002      	b.n	800e0c2 <_printf_i+0x1c6>
 800e0bc:	0668      	lsls	r0, r5, #25
 800e0be:	d5fb      	bpl.n	800e0b8 <_printf_i+0x1bc>
 800e0c0:	8019      	strh	r1, [r3, #0]
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	6123      	str	r3, [r4, #16]
 800e0c6:	4616      	mov	r6, r2
 800e0c8:	e7bc      	b.n	800e044 <_printf_i+0x148>
 800e0ca:	6833      	ldr	r3, [r6, #0]
 800e0cc:	1d1a      	adds	r2, r3, #4
 800e0ce:	6032      	str	r2, [r6, #0]
 800e0d0:	681e      	ldr	r6, [r3, #0]
 800e0d2:	6862      	ldr	r2, [r4, #4]
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	f7f2 f8a2 	bl	8000220 <memchr>
 800e0dc:	b108      	cbz	r0, 800e0e2 <_printf_i+0x1e6>
 800e0de:	1b80      	subs	r0, r0, r6
 800e0e0:	6060      	str	r0, [r4, #4]
 800e0e2:	6863      	ldr	r3, [r4, #4]
 800e0e4:	6123      	str	r3, [r4, #16]
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0ec:	e7aa      	b.n	800e044 <_printf_i+0x148>
 800e0ee:	6923      	ldr	r3, [r4, #16]
 800e0f0:	4632      	mov	r2, r6
 800e0f2:	4649      	mov	r1, r9
 800e0f4:	4640      	mov	r0, r8
 800e0f6:	47d0      	blx	sl
 800e0f8:	3001      	adds	r0, #1
 800e0fa:	d0ad      	beq.n	800e058 <_printf_i+0x15c>
 800e0fc:	6823      	ldr	r3, [r4, #0]
 800e0fe:	079b      	lsls	r3, r3, #30
 800e100:	d413      	bmi.n	800e12a <_printf_i+0x22e>
 800e102:	68e0      	ldr	r0, [r4, #12]
 800e104:	9b03      	ldr	r3, [sp, #12]
 800e106:	4298      	cmp	r0, r3
 800e108:	bfb8      	it	lt
 800e10a:	4618      	movlt	r0, r3
 800e10c:	e7a6      	b.n	800e05c <_printf_i+0x160>
 800e10e:	2301      	movs	r3, #1
 800e110:	4632      	mov	r2, r6
 800e112:	4649      	mov	r1, r9
 800e114:	4640      	mov	r0, r8
 800e116:	47d0      	blx	sl
 800e118:	3001      	adds	r0, #1
 800e11a:	d09d      	beq.n	800e058 <_printf_i+0x15c>
 800e11c:	3501      	adds	r5, #1
 800e11e:	68e3      	ldr	r3, [r4, #12]
 800e120:	9903      	ldr	r1, [sp, #12]
 800e122:	1a5b      	subs	r3, r3, r1
 800e124:	42ab      	cmp	r3, r5
 800e126:	dcf2      	bgt.n	800e10e <_printf_i+0x212>
 800e128:	e7eb      	b.n	800e102 <_printf_i+0x206>
 800e12a:	2500      	movs	r5, #0
 800e12c:	f104 0619 	add.w	r6, r4, #25
 800e130:	e7f5      	b.n	800e11e <_printf_i+0x222>
 800e132:	bf00      	nop
 800e134:	08010c32 	.word	0x08010c32
 800e138:	08010c43 	.word	0x08010c43

0800e13c <siprintf>:
 800e13c:	b40e      	push	{r1, r2, r3}
 800e13e:	b500      	push	{lr}
 800e140:	b09c      	sub	sp, #112	@ 0x70
 800e142:	ab1d      	add	r3, sp, #116	@ 0x74
 800e144:	9002      	str	r0, [sp, #8]
 800e146:	9006      	str	r0, [sp, #24]
 800e148:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e14c:	4809      	ldr	r0, [pc, #36]	@ (800e174 <siprintf+0x38>)
 800e14e:	9107      	str	r1, [sp, #28]
 800e150:	9104      	str	r1, [sp, #16]
 800e152:	4909      	ldr	r1, [pc, #36]	@ (800e178 <siprintf+0x3c>)
 800e154:	f853 2b04 	ldr.w	r2, [r3], #4
 800e158:	9105      	str	r1, [sp, #20]
 800e15a:	6800      	ldr	r0, [r0, #0]
 800e15c:	9301      	str	r3, [sp, #4]
 800e15e:	a902      	add	r1, sp, #8
 800e160:	f001 f898 	bl	800f294 <_svfiprintf_r>
 800e164:	9b02      	ldr	r3, [sp, #8]
 800e166:	2200      	movs	r2, #0
 800e168:	701a      	strb	r2, [r3, #0]
 800e16a:	b01c      	add	sp, #112	@ 0x70
 800e16c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e170:	b003      	add	sp, #12
 800e172:	4770      	bx	lr
 800e174:	20000040 	.word	0x20000040
 800e178:	ffff0208 	.word	0xffff0208

0800e17c <std>:
 800e17c:	2300      	movs	r3, #0
 800e17e:	b510      	push	{r4, lr}
 800e180:	4604      	mov	r4, r0
 800e182:	e9c0 3300 	strd	r3, r3, [r0]
 800e186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e18a:	6083      	str	r3, [r0, #8]
 800e18c:	8181      	strh	r1, [r0, #12]
 800e18e:	6643      	str	r3, [r0, #100]	@ 0x64
 800e190:	81c2      	strh	r2, [r0, #14]
 800e192:	6183      	str	r3, [r0, #24]
 800e194:	4619      	mov	r1, r3
 800e196:	2208      	movs	r2, #8
 800e198:	305c      	adds	r0, #92	@ 0x5c
 800e19a:	f000 f8eb 	bl	800e374 <memset>
 800e19e:	4b0d      	ldr	r3, [pc, #52]	@ (800e1d4 <std+0x58>)
 800e1a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800e1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e1d8 <std+0x5c>)
 800e1a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e1a6:	4b0d      	ldr	r3, [pc, #52]	@ (800e1dc <std+0x60>)
 800e1a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800e1e0 <std+0x64>)
 800e1ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800e1ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e1e4 <std+0x68>)
 800e1b0:	6224      	str	r4, [r4, #32]
 800e1b2:	429c      	cmp	r4, r3
 800e1b4:	d006      	beq.n	800e1c4 <std+0x48>
 800e1b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e1ba:	4294      	cmp	r4, r2
 800e1bc:	d002      	beq.n	800e1c4 <std+0x48>
 800e1be:	33d0      	adds	r3, #208	@ 0xd0
 800e1c0:	429c      	cmp	r4, r3
 800e1c2:	d105      	bne.n	800e1d0 <std+0x54>
 800e1c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1cc:	f000 b95e 	b.w	800e48c <__retarget_lock_init_recursive>
 800e1d0:	bd10      	pop	{r4, pc}
 800e1d2:	bf00      	nop
 800e1d4:	0800fe55 	.word	0x0800fe55
 800e1d8:	0800fe77 	.word	0x0800fe77
 800e1dc:	0800feaf 	.word	0x0800feaf
 800e1e0:	0800fed3 	.word	0x0800fed3
 800e1e4:	20004ccc 	.word	0x20004ccc

0800e1e8 <stdio_exit_handler>:
 800e1e8:	4a02      	ldr	r2, [pc, #8]	@ (800e1f4 <stdio_exit_handler+0xc>)
 800e1ea:	4903      	ldr	r1, [pc, #12]	@ (800e1f8 <stdio_exit_handler+0x10>)
 800e1ec:	4803      	ldr	r0, [pc, #12]	@ (800e1fc <stdio_exit_handler+0x14>)
 800e1ee:	f000 b869 	b.w	800e2c4 <_fwalk_sglue>
 800e1f2:	bf00      	nop
 800e1f4:	20000034 	.word	0x20000034
 800e1f8:	0800f6e9 	.word	0x0800f6e9
 800e1fc:	20000044 	.word	0x20000044

0800e200 <cleanup_stdio>:
 800e200:	6841      	ldr	r1, [r0, #4]
 800e202:	4b0c      	ldr	r3, [pc, #48]	@ (800e234 <cleanup_stdio+0x34>)
 800e204:	4299      	cmp	r1, r3
 800e206:	b510      	push	{r4, lr}
 800e208:	4604      	mov	r4, r0
 800e20a:	d001      	beq.n	800e210 <cleanup_stdio+0x10>
 800e20c:	f001 fa6c 	bl	800f6e8 <_fflush_r>
 800e210:	68a1      	ldr	r1, [r4, #8]
 800e212:	4b09      	ldr	r3, [pc, #36]	@ (800e238 <cleanup_stdio+0x38>)
 800e214:	4299      	cmp	r1, r3
 800e216:	d002      	beq.n	800e21e <cleanup_stdio+0x1e>
 800e218:	4620      	mov	r0, r4
 800e21a:	f001 fa65 	bl	800f6e8 <_fflush_r>
 800e21e:	68e1      	ldr	r1, [r4, #12]
 800e220:	4b06      	ldr	r3, [pc, #24]	@ (800e23c <cleanup_stdio+0x3c>)
 800e222:	4299      	cmp	r1, r3
 800e224:	d004      	beq.n	800e230 <cleanup_stdio+0x30>
 800e226:	4620      	mov	r0, r4
 800e228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e22c:	f001 ba5c 	b.w	800f6e8 <_fflush_r>
 800e230:	bd10      	pop	{r4, pc}
 800e232:	bf00      	nop
 800e234:	20004ccc 	.word	0x20004ccc
 800e238:	20004d34 	.word	0x20004d34
 800e23c:	20004d9c 	.word	0x20004d9c

0800e240 <global_stdio_init.part.0>:
 800e240:	b510      	push	{r4, lr}
 800e242:	4b0b      	ldr	r3, [pc, #44]	@ (800e270 <global_stdio_init.part.0+0x30>)
 800e244:	4c0b      	ldr	r4, [pc, #44]	@ (800e274 <global_stdio_init.part.0+0x34>)
 800e246:	4a0c      	ldr	r2, [pc, #48]	@ (800e278 <global_stdio_init.part.0+0x38>)
 800e248:	601a      	str	r2, [r3, #0]
 800e24a:	4620      	mov	r0, r4
 800e24c:	2200      	movs	r2, #0
 800e24e:	2104      	movs	r1, #4
 800e250:	f7ff ff94 	bl	800e17c <std>
 800e254:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e258:	2201      	movs	r2, #1
 800e25a:	2109      	movs	r1, #9
 800e25c:	f7ff ff8e 	bl	800e17c <std>
 800e260:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e264:	2202      	movs	r2, #2
 800e266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e26a:	2112      	movs	r1, #18
 800e26c:	f7ff bf86 	b.w	800e17c <std>
 800e270:	20004e04 	.word	0x20004e04
 800e274:	20004ccc 	.word	0x20004ccc
 800e278:	0800e1e9 	.word	0x0800e1e9

0800e27c <__sfp_lock_acquire>:
 800e27c:	4801      	ldr	r0, [pc, #4]	@ (800e284 <__sfp_lock_acquire+0x8>)
 800e27e:	f000 b906 	b.w	800e48e <__retarget_lock_acquire_recursive>
 800e282:	bf00      	nop
 800e284:	20004e0d 	.word	0x20004e0d

0800e288 <__sfp_lock_release>:
 800e288:	4801      	ldr	r0, [pc, #4]	@ (800e290 <__sfp_lock_release+0x8>)
 800e28a:	f000 b901 	b.w	800e490 <__retarget_lock_release_recursive>
 800e28e:	bf00      	nop
 800e290:	20004e0d 	.word	0x20004e0d

0800e294 <__sinit>:
 800e294:	b510      	push	{r4, lr}
 800e296:	4604      	mov	r4, r0
 800e298:	f7ff fff0 	bl	800e27c <__sfp_lock_acquire>
 800e29c:	6a23      	ldr	r3, [r4, #32]
 800e29e:	b11b      	cbz	r3, 800e2a8 <__sinit+0x14>
 800e2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2a4:	f7ff bff0 	b.w	800e288 <__sfp_lock_release>
 800e2a8:	4b04      	ldr	r3, [pc, #16]	@ (800e2bc <__sinit+0x28>)
 800e2aa:	6223      	str	r3, [r4, #32]
 800e2ac:	4b04      	ldr	r3, [pc, #16]	@ (800e2c0 <__sinit+0x2c>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d1f5      	bne.n	800e2a0 <__sinit+0xc>
 800e2b4:	f7ff ffc4 	bl	800e240 <global_stdio_init.part.0>
 800e2b8:	e7f2      	b.n	800e2a0 <__sinit+0xc>
 800e2ba:	bf00      	nop
 800e2bc:	0800e201 	.word	0x0800e201
 800e2c0:	20004e04 	.word	0x20004e04

0800e2c4 <_fwalk_sglue>:
 800e2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2c8:	4607      	mov	r7, r0
 800e2ca:	4688      	mov	r8, r1
 800e2cc:	4614      	mov	r4, r2
 800e2ce:	2600      	movs	r6, #0
 800e2d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e2d4:	f1b9 0901 	subs.w	r9, r9, #1
 800e2d8:	d505      	bpl.n	800e2e6 <_fwalk_sglue+0x22>
 800e2da:	6824      	ldr	r4, [r4, #0]
 800e2dc:	2c00      	cmp	r4, #0
 800e2de:	d1f7      	bne.n	800e2d0 <_fwalk_sglue+0xc>
 800e2e0:	4630      	mov	r0, r6
 800e2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2e6:	89ab      	ldrh	r3, [r5, #12]
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d907      	bls.n	800e2fc <_fwalk_sglue+0x38>
 800e2ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	d003      	beq.n	800e2fc <_fwalk_sglue+0x38>
 800e2f4:	4629      	mov	r1, r5
 800e2f6:	4638      	mov	r0, r7
 800e2f8:	47c0      	blx	r8
 800e2fa:	4306      	orrs	r6, r0
 800e2fc:	3568      	adds	r5, #104	@ 0x68
 800e2fe:	e7e9      	b.n	800e2d4 <_fwalk_sglue+0x10>

0800e300 <_vsniprintf_r>:
 800e300:	b530      	push	{r4, r5, lr}
 800e302:	4614      	mov	r4, r2
 800e304:	2c00      	cmp	r4, #0
 800e306:	b09b      	sub	sp, #108	@ 0x6c
 800e308:	4605      	mov	r5, r0
 800e30a:	461a      	mov	r2, r3
 800e30c:	da05      	bge.n	800e31a <_vsniprintf_r+0x1a>
 800e30e:	238b      	movs	r3, #139	@ 0x8b
 800e310:	6003      	str	r3, [r0, #0]
 800e312:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e316:	b01b      	add	sp, #108	@ 0x6c
 800e318:	bd30      	pop	{r4, r5, pc}
 800e31a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e31e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e322:	bf14      	ite	ne
 800e324:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800e328:	4623      	moveq	r3, r4
 800e32a:	9302      	str	r3, [sp, #8]
 800e32c:	9305      	str	r3, [sp, #20]
 800e32e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e332:	9100      	str	r1, [sp, #0]
 800e334:	9104      	str	r1, [sp, #16]
 800e336:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e33a:	4669      	mov	r1, sp
 800e33c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e33e:	f000 ffa9 	bl	800f294 <_svfiprintf_r>
 800e342:	1c43      	adds	r3, r0, #1
 800e344:	bfbc      	itt	lt
 800e346:	238b      	movlt	r3, #139	@ 0x8b
 800e348:	602b      	strlt	r3, [r5, #0]
 800e34a:	2c00      	cmp	r4, #0
 800e34c:	d0e3      	beq.n	800e316 <_vsniprintf_r+0x16>
 800e34e:	9b00      	ldr	r3, [sp, #0]
 800e350:	2200      	movs	r2, #0
 800e352:	701a      	strb	r2, [r3, #0]
 800e354:	e7df      	b.n	800e316 <_vsniprintf_r+0x16>
	...

0800e358 <vsniprintf>:
 800e358:	b507      	push	{r0, r1, r2, lr}
 800e35a:	9300      	str	r3, [sp, #0]
 800e35c:	4613      	mov	r3, r2
 800e35e:	460a      	mov	r2, r1
 800e360:	4601      	mov	r1, r0
 800e362:	4803      	ldr	r0, [pc, #12]	@ (800e370 <vsniprintf+0x18>)
 800e364:	6800      	ldr	r0, [r0, #0]
 800e366:	f7ff ffcb 	bl	800e300 <_vsniprintf_r>
 800e36a:	b003      	add	sp, #12
 800e36c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e370:	20000040 	.word	0x20000040

0800e374 <memset>:
 800e374:	4402      	add	r2, r0
 800e376:	4603      	mov	r3, r0
 800e378:	4293      	cmp	r3, r2
 800e37a:	d100      	bne.n	800e37e <memset+0xa>
 800e37c:	4770      	bx	lr
 800e37e:	f803 1b01 	strb.w	r1, [r3], #1
 800e382:	e7f9      	b.n	800e378 <memset+0x4>

0800e384 <_localeconv_r>:
 800e384:	4800      	ldr	r0, [pc, #0]	@ (800e388 <_localeconv_r+0x4>)
 800e386:	4770      	bx	lr
 800e388:	20000180 	.word	0x20000180

0800e38c <_reclaim_reent>:
 800e38c:	4b29      	ldr	r3, [pc, #164]	@ (800e434 <_reclaim_reent+0xa8>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4283      	cmp	r3, r0
 800e392:	b570      	push	{r4, r5, r6, lr}
 800e394:	4604      	mov	r4, r0
 800e396:	d04b      	beq.n	800e430 <_reclaim_reent+0xa4>
 800e398:	69c3      	ldr	r3, [r0, #28]
 800e39a:	b1ab      	cbz	r3, 800e3c8 <_reclaim_reent+0x3c>
 800e39c:	68db      	ldr	r3, [r3, #12]
 800e39e:	b16b      	cbz	r3, 800e3bc <_reclaim_reent+0x30>
 800e3a0:	2500      	movs	r5, #0
 800e3a2:	69e3      	ldr	r3, [r4, #28]
 800e3a4:	68db      	ldr	r3, [r3, #12]
 800e3a6:	5959      	ldr	r1, [r3, r5]
 800e3a8:	2900      	cmp	r1, #0
 800e3aa:	d13b      	bne.n	800e424 <_reclaim_reent+0x98>
 800e3ac:	3504      	adds	r5, #4
 800e3ae:	2d80      	cmp	r5, #128	@ 0x80
 800e3b0:	d1f7      	bne.n	800e3a2 <_reclaim_reent+0x16>
 800e3b2:	69e3      	ldr	r3, [r4, #28]
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	68d9      	ldr	r1, [r3, #12]
 800e3b8:	f000 fec6 	bl	800f148 <_free_r>
 800e3bc:	69e3      	ldr	r3, [r4, #28]
 800e3be:	6819      	ldr	r1, [r3, #0]
 800e3c0:	b111      	cbz	r1, 800e3c8 <_reclaim_reent+0x3c>
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	f000 fec0 	bl	800f148 <_free_r>
 800e3c8:	6961      	ldr	r1, [r4, #20]
 800e3ca:	b111      	cbz	r1, 800e3d2 <_reclaim_reent+0x46>
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f000 febb 	bl	800f148 <_free_r>
 800e3d2:	69e1      	ldr	r1, [r4, #28]
 800e3d4:	b111      	cbz	r1, 800e3dc <_reclaim_reent+0x50>
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	f000 feb6 	bl	800f148 <_free_r>
 800e3dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e3de:	b111      	cbz	r1, 800e3e6 <_reclaim_reent+0x5a>
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f000 feb1 	bl	800f148 <_free_r>
 800e3e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3e8:	b111      	cbz	r1, 800e3f0 <_reclaim_reent+0x64>
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	f000 feac 	bl	800f148 <_free_r>
 800e3f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e3f2:	b111      	cbz	r1, 800e3fa <_reclaim_reent+0x6e>
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	f000 fea7 	bl	800f148 <_free_r>
 800e3fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e3fc:	b111      	cbz	r1, 800e404 <_reclaim_reent+0x78>
 800e3fe:	4620      	mov	r0, r4
 800e400:	f000 fea2 	bl	800f148 <_free_r>
 800e404:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e406:	b111      	cbz	r1, 800e40e <_reclaim_reent+0x82>
 800e408:	4620      	mov	r0, r4
 800e40a:	f000 fe9d 	bl	800f148 <_free_r>
 800e40e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e410:	b111      	cbz	r1, 800e418 <_reclaim_reent+0x8c>
 800e412:	4620      	mov	r0, r4
 800e414:	f000 fe98 	bl	800f148 <_free_r>
 800e418:	6a23      	ldr	r3, [r4, #32]
 800e41a:	b14b      	cbz	r3, 800e430 <_reclaim_reent+0xa4>
 800e41c:	4620      	mov	r0, r4
 800e41e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e422:	4718      	bx	r3
 800e424:	680e      	ldr	r6, [r1, #0]
 800e426:	4620      	mov	r0, r4
 800e428:	f000 fe8e 	bl	800f148 <_free_r>
 800e42c:	4631      	mov	r1, r6
 800e42e:	e7bb      	b.n	800e3a8 <_reclaim_reent+0x1c>
 800e430:	bd70      	pop	{r4, r5, r6, pc}
 800e432:	bf00      	nop
 800e434:	20000040 	.word	0x20000040

0800e438 <__errno>:
 800e438:	4b01      	ldr	r3, [pc, #4]	@ (800e440 <__errno+0x8>)
 800e43a:	6818      	ldr	r0, [r3, #0]
 800e43c:	4770      	bx	lr
 800e43e:	bf00      	nop
 800e440:	20000040 	.word	0x20000040

0800e444 <__libc_init_array>:
 800e444:	b570      	push	{r4, r5, r6, lr}
 800e446:	4d0d      	ldr	r5, [pc, #52]	@ (800e47c <__libc_init_array+0x38>)
 800e448:	4c0d      	ldr	r4, [pc, #52]	@ (800e480 <__libc_init_array+0x3c>)
 800e44a:	1b64      	subs	r4, r4, r5
 800e44c:	10a4      	asrs	r4, r4, #2
 800e44e:	2600      	movs	r6, #0
 800e450:	42a6      	cmp	r6, r4
 800e452:	d109      	bne.n	800e468 <__libc_init_array+0x24>
 800e454:	4d0b      	ldr	r5, [pc, #44]	@ (800e484 <__libc_init_array+0x40>)
 800e456:	4c0c      	ldr	r4, [pc, #48]	@ (800e488 <__libc_init_array+0x44>)
 800e458:	f002 fa78 	bl	801094c <_init>
 800e45c:	1b64      	subs	r4, r4, r5
 800e45e:	10a4      	asrs	r4, r4, #2
 800e460:	2600      	movs	r6, #0
 800e462:	42a6      	cmp	r6, r4
 800e464:	d105      	bne.n	800e472 <__libc_init_array+0x2e>
 800e466:	bd70      	pop	{r4, r5, r6, pc}
 800e468:	f855 3b04 	ldr.w	r3, [r5], #4
 800e46c:	4798      	blx	r3
 800e46e:	3601      	adds	r6, #1
 800e470:	e7ee      	b.n	800e450 <__libc_init_array+0xc>
 800e472:	f855 3b04 	ldr.w	r3, [r5], #4
 800e476:	4798      	blx	r3
 800e478:	3601      	adds	r6, #1
 800e47a:	e7f2      	b.n	800e462 <__libc_init_array+0x1e>
 800e47c:	08010fb0 	.word	0x08010fb0
 800e480:	08010fb0 	.word	0x08010fb0
 800e484:	08010fb0 	.word	0x08010fb0
 800e488:	08010fb4 	.word	0x08010fb4

0800e48c <__retarget_lock_init_recursive>:
 800e48c:	4770      	bx	lr

0800e48e <__retarget_lock_acquire_recursive>:
 800e48e:	4770      	bx	lr

0800e490 <__retarget_lock_release_recursive>:
 800e490:	4770      	bx	lr

0800e492 <memcpy>:
 800e492:	440a      	add	r2, r1
 800e494:	4291      	cmp	r1, r2
 800e496:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e49a:	d100      	bne.n	800e49e <memcpy+0xc>
 800e49c:	4770      	bx	lr
 800e49e:	b510      	push	{r4, lr}
 800e4a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4a8:	4291      	cmp	r1, r2
 800e4aa:	d1f9      	bne.n	800e4a0 <memcpy+0xe>
 800e4ac:	bd10      	pop	{r4, pc}

0800e4ae <quorem>:
 800e4ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b2:	6903      	ldr	r3, [r0, #16]
 800e4b4:	690c      	ldr	r4, [r1, #16]
 800e4b6:	42a3      	cmp	r3, r4
 800e4b8:	4607      	mov	r7, r0
 800e4ba:	db7e      	blt.n	800e5ba <quorem+0x10c>
 800e4bc:	3c01      	subs	r4, #1
 800e4be:	f101 0814 	add.w	r8, r1, #20
 800e4c2:	00a3      	lsls	r3, r4, #2
 800e4c4:	f100 0514 	add.w	r5, r0, #20
 800e4c8:	9300      	str	r3, [sp, #0]
 800e4ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e4ce:	9301      	str	r3, [sp, #4]
 800e4d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e4d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e4e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800e4e4:	d32e      	bcc.n	800e544 <quorem+0x96>
 800e4e6:	f04f 0a00 	mov.w	sl, #0
 800e4ea:	46c4      	mov	ip, r8
 800e4ec:	46ae      	mov	lr, r5
 800e4ee:	46d3      	mov	fp, sl
 800e4f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e4f4:	b298      	uxth	r0, r3
 800e4f6:	fb06 a000 	mla	r0, r6, r0, sl
 800e4fa:	0c02      	lsrs	r2, r0, #16
 800e4fc:	0c1b      	lsrs	r3, r3, #16
 800e4fe:	fb06 2303 	mla	r3, r6, r3, r2
 800e502:	f8de 2000 	ldr.w	r2, [lr]
 800e506:	b280      	uxth	r0, r0
 800e508:	b292      	uxth	r2, r2
 800e50a:	1a12      	subs	r2, r2, r0
 800e50c:	445a      	add	r2, fp
 800e50e:	f8de 0000 	ldr.w	r0, [lr]
 800e512:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e516:	b29b      	uxth	r3, r3
 800e518:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e51c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e520:	b292      	uxth	r2, r2
 800e522:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e526:	45e1      	cmp	r9, ip
 800e528:	f84e 2b04 	str.w	r2, [lr], #4
 800e52c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e530:	d2de      	bcs.n	800e4f0 <quorem+0x42>
 800e532:	9b00      	ldr	r3, [sp, #0]
 800e534:	58eb      	ldr	r3, [r5, r3]
 800e536:	b92b      	cbnz	r3, 800e544 <quorem+0x96>
 800e538:	9b01      	ldr	r3, [sp, #4]
 800e53a:	3b04      	subs	r3, #4
 800e53c:	429d      	cmp	r5, r3
 800e53e:	461a      	mov	r2, r3
 800e540:	d32f      	bcc.n	800e5a2 <quorem+0xf4>
 800e542:	613c      	str	r4, [r7, #16]
 800e544:	4638      	mov	r0, r7
 800e546:	f001 fb7d 	bl	800fc44 <__mcmp>
 800e54a:	2800      	cmp	r0, #0
 800e54c:	db25      	blt.n	800e59a <quorem+0xec>
 800e54e:	4629      	mov	r1, r5
 800e550:	2000      	movs	r0, #0
 800e552:	f858 2b04 	ldr.w	r2, [r8], #4
 800e556:	f8d1 c000 	ldr.w	ip, [r1]
 800e55a:	fa1f fe82 	uxth.w	lr, r2
 800e55e:	fa1f f38c 	uxth.w	r3, ip
 800e562:	eba3 030e 	sub.w	r3, r3, lr
 800e566:	4403      	add	r3, r0
 800e568:	0c12      	lsrs	r2, r2, #16
 800e56a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e56e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e572:	b29b      	uxth	r3, r3
 800e574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e578:	45c1      	cmp	r9, r8
 800e57a:	f841 3b04 	str.w	r3, [r1], #4
 800e57e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e582:	d2e6      	bcs.n	800e552 <quorem+0xa4>
 800e584:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e588:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e58c:	b922      	cbnz	r2, 800e598 <quorem+0xea>
 800e58e:	3b04      	subs	r3, #4
 800e590:	429d      	cmp	r5, r3
 800e592:	461a      	mov	r2, r3
 800e594:	d30b      	bcc.n	800e5ae <quorem+0x100>
 800e596:	613c      	str	r4, [r7, #16]
 800e598:	3601      	adds	r6, #1
 800e59a:	4630      	mov	r0, r6
 800e59c:	b003      	add	sp, #12
 800e59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a2:	6812      	ldr	r2, [r2, #0]
 800e5a4:	3b04      	subs	r3, #4
 800e5a6:	2a00      	cmp	r2, #0
 800e5a8:	d1cb      	bne.n	800e542 <quorem+0x94>
 800e5aa:	3c01      	subs	r4, #1
 800e5ac:	e7c6      	b.n	800e53c <quorem+0x8e>
 800e5ae:	6812      	ldr	r2, [r2, #0]
 800e5b0:	3b04      	subs	r3, #4
 800e5b2:	2a00      	cmp	r2, #0
 800e5b4:	d1ef      	bne.n	800e596 <quorem+0xe8>
 800e5b6:	3c01      	subs	r4, #1
 800e5b8:	e7ea      	b.n	800e590 <quorem+0xe2>
 800e5ba:	2000      	movs	r0, #0
 800e5bc:	e7ee      	b.n	800e59c <quorem+0xee>
	...

0800e5c0 <_dtoa_r>:
 800e5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c4:	69c7      	ldr	r7, [r0, #28]
 800e5c6:	b099      	sub	sp, #100	@ 0x64
 800e5c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e5cc:	ec55 4b10 	vmov	r4, r5, d0
 800e5d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e5d2:	9109      	str	r1, [sp, #36]	@ 0x24
 800e5d4:	4683      	mov	fp, r0
 800e5d6:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e5da:	b97f      	cbnz	r7, 800e5fc <_dtoa_r+0x3c>
 800e5dc:	2010      	movs	r0, #16
 800e5de:	f000 ff55 	bl	800f48c <malloc>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	f8cb 001c 	str.w	r0, [fp, #28]
 800e5e8:	b920      	cbnz	r0, 800e5f4 <_dtoa_r+0x34>
 800e5ea:	4ba7      	ldr	r3, [pc, #668]	@ (800e888 <_dtoa_r+0x2c8>)
 800e5ec:	21ef      	movs	r1, #239	@ 0xef
 800e5ee:	48a7      	ldr	r0, [pc, #668]	@ (800e88c <_dtoa_r+0x2cc>)
 800e5f0:	f001 fd12 	bl	8010018 <__assert_func>
 800e5f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e5f8:	6007      	str	r7, [r0, #0]
 800e5fa:	60c7      	str	r7, [r0, #12]
 800e5fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e600:	6819      	ldr	r1, [r3, #0]
 800e602:	b159      	cbz	r1, 800e61c <_dtoa_r+0x5c>
 800e604:	685a      	ldr	r2, [r3, #4]
 800e606:	604a      	str	r2, [r1, #4]
 800e608:	2301      	movs	r3, #1
 800e60a:	4093      	lsls	r3, r2
 800e60c:	608b      	str	r3, [r1, #8]
 800e60e:	4658      	mov	r0, fp
 800e610:	f001 f8de 	bl	800f7d0 <_Bfree>
 800e614:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e618:	2200      	movs	r2, #0
 800e61a:	601a      	str	r2, [r3, #0]
 800e61c:	1e2b      	subs	r3, r5, #0
 800e61e:	bfb9      	ittee	lt
 800e620:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e624:	9303      	strlt	r3, [sp, #12]
 800e626:	2300      	movge	r3, #0
 800e628:	6033      	strge	r3, [r6, #0]
 800e62a:	9f03      	ldr	r7, [sp, #12]
 800e62c:	4b98      	ldr	r3, [pc, #608]	@ (800e890 <_dtoa_r+0x2d0>)
 800e62e:	bfbc      	itt	lt
 800e630:	2201      	movlt	r2, #1
 800e632:	6032      	strlt	r2, [r6, #0]
 800e634:	43bb      	bics	r3, r7
 800e636:	d112      	bne.n	800e65e <_dtoa_r+0x9e>
 800e638:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e63a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e63e:	6013      	str	r3, [r2, #0]
 800e640:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e644:	4323      	orrs	r3, r4
 800e646:	f000 854d 	beq.w	800f0e4 <_dtoa_r+0xb24>
 800e64a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e64c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e8a4 <_dtoa_r+0x2e4>
 800e650:	2b00      	cmp	r3, #0
 800e652:	f000 854f 	beq.w	800f0f4 <_dtoa_r+0xb34>
 800e656:	f10a 0303 	add.w	r3, sl, #3
 800e65a:	f000 bd49 	b.w	800f0f0 <_dtoa_r+0xb30>
 800e65e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e662:	2200      	movs	r2, #0
 800e664:	ec51 0b17 	vmov	r0, r1, d7
 800e668:	2300      	movs	r3, #0
 800e66a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e66e:	f7f2 fa53 	bl	8000b18 <__aeabi_dcmpeq>
 800e672:	4680      	mov	r8, r0
 800e674:	b158      	cbz	r0, 800e68e <_dtoa_r+0xce>
 800e676:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e678:	2301      	movs	r3, #1
 800e67a:	6013      	str	r3, [r2, #0]
 800e67c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e67e:	b113      	cbz	r3, 800e686 <_dtoa_r+0xc6>
 800e680:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e682:	4b84      	ldr	r3, [pc, #528]	@ (800e894 <_dtoa_r+0x2d4>)
 800e684:	6013      	str	r3, [r2, #0]
 800e686:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e8a8 <_dtoa_r+0x2e8>
 800e68a:	f000 bd33 	b.w	800f0f4 <_dtoa_r+0xb34>
 800e68e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e692:	aa16      	add	r2, sp, #88	@ 0x58
 800e694:	a917      	add	r1, sp, #92	@ 0x5c
 800e696:	4658      	mov	r0, fp
 800e698:	f001 fb84 	bl	800fda4 <__d2b>
 800e69c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e6a0:	4681      	mov	r9, r0
 800e6a2:	2e00      	cmp	r6, #0
 800e6a4:	d077      	beq.n	800e796 <_dtoa_r+0x1d6>
 800e6a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e6ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e6b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e6bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	4b74      	ldr	r3, [pc, #464]	@ (800e898 <_dtoa_r+0x2d8>)
 800e6c6:	f7f1 fe07 	bl	80002d8 <__aeabi_dsub>
 800e6ca:	a369      	add	r3, pc, #420	@ (adr r3, 800e870 <_dtoa_r+0x2b0>)
 800e6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d0:	f7f1 ffba 	bl	8000648 <__aeabi_dmul>
 800e6d4:	a368      	add	r3, pc, #416	@ (adr r3, 800e878 <_dtoa_r+0x2b8>)
 800e6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6da:	f7f1 fdff 	bl	80002dc <__adddf3>
 800e6de:	4604      	mov	r4, r0
 800e6e0:	4630      	mov	r0, r6
 800e6e2:	460d      	mov	r5, r1
 800e6e4:	f7f1 ff46 	bl	8000574 <__aeabi_i2d>
 800e6e8:	a365      	add	r3, pc, #404	@ (adr r3, 800e880 <_dtoa_r+0x2c0>)
 800e6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ee:	f7f1 ffab 	bl	8000648 <__aeabi_dmul>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	4629      	mov	r1, r5
 800e6fa:	f7f1 fdef 	bl	80002dc <__adddf3>
 800e6fe:	4604      	mov	r4, r0
 800e700:	460d      	mov	r5, r1
 800e702:	f7f2 fa51 	bl	8000ba8 <__aeabi_d2iz>
 800e706:	2200      	movs	r2, #0
 800e708:	4607      	mov	r7, r0
 800e70a:	2300      	movs	r3, #0
 800e70c:	4620      	mov	r0, r4
 800e70e:	4629      	mov	r1, r5
 800e710:	f7f2 fa0c 	bl	8000b2c <__aeabi_dcmplt>
 800e714:	b140      	cbz	r0, 800e728 <_dtoa_r+0x168>
 800e716:	4638      	mov	r0, r7
 800e718:	f7f1 ff2c 	bl	8000574 <__aeabi_i2d>
 800e71c:	4622      	mov	r2, r4
 800e71e:	462b      	mov	r3, r5
 800e720:	f7f2 f9fa 	bl	8000b18 <__aeabi_dcmpeq>
 800e724:	b900      	cbnz	r0, 800e728 <_dtoa_r+0x168>
 800e726:	3f01      	subs	r7, #1
 800e728:	2f16      	cmp	r7, #22
 800e72a:	d851      	bhi.n	800e7d0 <_dtoa_r+0x210>
 800e72c:	4b5b      	ldr	r3, [pc, #364]	@ (800e89c <_dtoa_r+0x2dc>)
 800e72e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e736:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e73a:	f7f2 f9f7 	bl	8000b2c <__aeabi_dcmplt>
 800e73e:	2800      	cmp	r0, #0
 800e740:	d048      	beq.n	800e7d4 <_dtoa_r+0x214>
 800e742:	3f01      	subs	r7, #1
 800e744:	2300      	movs	r3, #0
 800e746:	9312      	str	r3, [sp, #72]	@ 0x48
 800e748:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e74a:	1b9b      	subs	r3, r3, r6
 800e74c:	1e5a      	subs	r2, r3, #1
 800e74e:	bf44      	itt	mi
 800e750:	f1c3 0801 	rsbmi	r8, r3, #1
 800e754:	2300      	movmi	r3, #0
 800e756:	9208      	str	r2, [sp, #32]
 800e758:	bf54      	ite	pl
 800e75a:	f04f 0800 	movpl.w	r8, #0
 800e75e:	9308      	strmi	r3, [sp, #32]
 800e760:	2f00      	cmp	r7, #0
 800e762:	db39      	blt.n	800e7d8 <_dtoa_r+0x218>
 800e764:	9b08      	ldr	r3, [sp, #32]
 800e766:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e768:	443b      	add	r3, r7
 800e76a:	9308      	str	r3, [sp, #32]
 800e76c:	2300      	movs	r3, #0
 800e76e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e772:	2b09      	cmp	r3, #9
 800e774:	d864      	bhi.n	800e840 <_dtoa_r+0x280>
 800e776:	2b05      	cmp	r3, #5
 800e778:	bfc4      	itt	gt
 800e77a:	3b04      	subgt	r3, #4
 800e77c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e77e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e780:	f1a3 0302 	sub.w	r3, r3, #2
 800e784:	bfcc      	ite	gt
 800e786:	2400      	movgt	r4, #0
 800e788:	2401      	movle	r4, #1
 800e78a:	2b03      	cmp	r3, #3
 800e78c:	d863      	bhi.n	800e856 <_dtoa_r+0x296>
 800e78e:	e8df f003 	tbb	[pc, r3]
 800e792:	372a      	.short	0x372a
 800e794:	5535      	.short	0x5535
 800e796:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e79a:	441e      	add	r6, r3
 800e79c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e7a0:	2b20      	cmp	r3, #32
 800e7a2:	bfc1      	itttt	gt
 800e7a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e7a8:	409f      	lslgt	r7, r3
 800e7aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e7ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e7b2:	bfd6      	itet	le
 800e7b4:	f1c3 0320 	rsble	r3, r3, #32
 800e7b8:	ea47 0003 	orrgt.w	r0, r7, r3
 800e7bc:	fa04 f003 	lslle.w	r0, r4, r3
 800e7c0:	f7f1 fec8 	bl	8000554 <__aeabi_ui2d>
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e7ca:	3e01      	subs	r6, #1
 800e7cc:	9214      	str	r2, [sp, #80]	@ 0x50
 800e7ce:	e777      	b.n	800e6c0 <_dtoa_r+0x100>
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	e7b8      	b.n	800e746 <_dtoa_r+0x186>
 800e7d4:	9012      	str	r0, [sp, #72]	@ 0x48
 800e7d6:	e7b7      	b.n	800e748 <_dtoa_r+0x188>
 800e7d8:	427b      	negs	r3, r7
 800e7da:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7dc:	2300      	movs	r3, #0
 800e7de:	eba8 0807 	sub.w	r8, r8, r7
 800e7e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e7e4:	e7c4      	b.n	800e770 <_dtoa_r+0x1b0>
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	dc35      	bgt.n	800e85c <_dtoa_r+0x29c>
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	9300      	str	r3, [sp, #0]
 800e7f4:	9307      	str	r3, [sp, #28]
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e7fa:	e00b      	b.n	800e814 <_dtoa_r+0x254>
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	e7f3      	b.n	800e7e8 <_dtoa_r+0x228>
 800e800:	2300      	movs	r3, #0
 800e802:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e804:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e806:	18fb      	adds	r3, r7, r3
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	3301      	adds	r3, #1
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	9307      	str	r3, [sp, #28]
 800e810:	bfb8      	it	lt
 800e812:	2301      	movlt	r3, #1
 800e814:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e818:	2100      	movs	r1, #0
 800e81a:	2204      	movs	r2, #4
 800e81c:	f102 0514 	add.w	r5, r2, #20
 800e820:	429d      	cmp	r5, r3
 800e822:	d91f      	bls.n	800e864 <_dtoa_r+0x2a4>
 800e824:	6041      	str	r1, [r0, #4]
 800e826:	4658      	mov	r0, fp
 800e828:	f000 ff92 	bl	800f750 <_Balloc>
 800e82c:	4682      	mov	sl, r0
 800e82e:	2800      	cmp	r0, #0
 800e830:	d13c      	bne.n	800e8ac <_dtoa_r+0x2ec>
 800e832:	4b1b      	ldr	r3, [pc, #108]	@ (800e8a0 <_dtoa_r+0x2e0>)
 800e834:	4602      	mov	r2, r0
 800e836:	f240 11af 	movw	r1, #431	@ 0x1af
 800e83a:	e6d8      	b.n	800e5ee <_dtoa_r+0x2e>
 800e83c:	2301      	movs	r3, #1
 800e83e:	e7e0      	b.n	800e802 <_dtoa_r+0x242>
 800e840:	2401      	movs	r4, #1
 800e842:	2300      	movs	r3, #0
 800e844:	9309      	str	r3, [sp, #36]	@ 0x24
 800e846:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e848:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e84c:	9300      	str	r3, [sp, #0]
 800e84e:	9307      	str	r3, [sp, #28]
 800e850:	2200      	movs	r2, #0
 800e852:	2312      	movs	r3, #18
 800e854:	e7d0      	b.n	800e7f8 <_dtoa_r+0x238>
 800e856:	2301      	movs	r3, #1
 800e858:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e85a:	e7f5      	b.n	800e848 <_dtoa_r+0x288>
 800e85c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e85e:	9300      	str	r3, [sp, #0]
 800e860:	9307      	str	r3, [sp, #28]
 800e862:	e7d7      	b.n	800e814 <_dtoa_r+0x254>
 800e864:	3101      	adds	r1, #1
 800e866:	0052      	lsls	r2, r2, #1
 800e868:	e7d8      	b.n	800e81c <_dtoa_r+0x25c>
 800e86a:	bf00      	nop
 800e86c:	f3af 8000 	nop.w
 800e870:	636f4361 	.word	0x636f4361
 800e874:	3fd287a7 	.word	0x3fd287a7
 800e878:	8b60c8b3 	.word	0x8b60c8b3
 800e87c:	3fc68a28 	.word	0x3fc68a28
 800e880:	509f79fb 	.word	0x509f79fb
 800e884:	3fd34413 	.word	0x3fd34413
 800e888:	08010c61 	.word	0x08010c61
 800e88c:	08010c78 	.word	0x08010c78
 800e890:	7ff00000 	.word	0x7ff00000
 800e894:	08010c31 	.word	0x08010c31
 800e898:	3ff80000 	.word	0x3ff80000
 800e89c:	08010d80 	.word	0x08010d80
 800e8a0:	08010cd0 	.word	0x08010cd0
 800e8a4:	08010c5d 	.word	0x08010c5d
 800e8a8:	08010c30 	.word	0x08010c30
 800e8ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e8b0:	6018      	str	r0, [r3, #0]
 800e8b2:	9b07      	ldr	r3, [sp, #28]
 800e8b4:	2b0e      	cmp	r3, #14
 800e8b6:	f200 80a4 	bhi.w	800ea02 <_dtoa_r+0x442>
 800e8ba:	2c00      	cmp	r4, #0
 800e8bc:	f000 80a1 	beq.w	800ea02 <_dtoa_r+0x442>
 800e8c0:	2f00      	cmp	r7, #0
 800e8c2:	dd33      	ble.n	800e92c <_dtoa_r+0x36c>
 800e8c4:	4bad      	ldr	r3, [pc, #692]	@ (800eb7c <_dtoa_r+0x5bc>)
 800e8c6:	f007 020f 	and.w	r2, r7, #15
 800e8ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8ce:	ed93 7b00 	vldr	d7, [r3]
 800e8d2:	05f8      	lsls	r0, r7, #23
 800e8d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e8d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e8dc:	d516      	bpl.n	800e90c <_dtoa_r+0x34c>
 800e8de:	4ba8      	ldr	r3, [pc, #672]	@ (800eb80 <_dtoa_r+0x5c0>)
 800e8e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8e8:	f7f1 ffd8 	bl	800089c <__aeabi_ddiv>
 800e8ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8f0:	f004 040f 	and.w	r4, r4, #15
 800e8f4:	2603      	movs	r6, #3
 800e8f6:	4da2      	ldr	r5, [pc, #648]	@ (800eb80 <_dtoa_r+0x5c0>)
 800e8f8:	b954      	cbnz	r4, 800e910 <_dtoa_r+0x350>
 800e8fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e902:	f7f1 ffcb 	bl	800089c <__aeabi_ddiv>
 800e906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e90a:	e028      	b.n	800e95e <_dtoa_r+0x39e>
 800e90c:	2602      	movs	r6, #2
 800e90e:	e7f2      	b.n	800e8f6 <_dtoa_r+0x336>
 800e910:	07e1      	lsls	r1, r4, #31
 800e912:	d508      	bpl.n	800e926 <_dtoa_r+0x366>
 800e914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e918:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e91c:	f7f1 fe94 	bl	8000648 <__aeabi_dmul>
 800e920:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e924:	3601      	adds	r6, #1
 800e926:	1064      	asrs	r4, r4, #1
 800e928:	3508      	adds	r5, #8
 800e92a:	e7e5      	b.n	800e8f8 <_dtoa_r+0x338>
 800e92c:	f000 80d2 	beq.w	800ead4 <_dtoa_r+0x514>
 800e930:	427c      	negs	r4, r7
 800e932:	4b92      	ldr	r3, [pc, #584]	@ (800eb7c <_dtoa_r+0x5bc>)
 800e934:	4d92      	ldr	r5, [pc, #584]	@ (800eb80 <_dtoa_r+0x5c0>)
 800e936:	f004 020f 	and.w	r2, r4, #15
 800e93a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e942:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e946:	f7f1 fe7f 	bl	8000648 <__aeabi_dmul>
 800e94a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e94e:	1124      	asrs	r4, r4, #4
 800e950:	2300      	movs	r3, #0
 800e952:	2602      	movs	r6, #2
 800e954:	2c00      	cmp	r4, #0
 800e956:	f040 80b2 	bne.w	800eabe <_dtoa_r+0x4fe>
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d1d3      	bne.n	800e906 <_dtoa_r+0x346>
 800e95e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e960:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e964:	2b00      	cmp	r3, #0
 800e966:	f000 80b7 	beq.w	800ead8 <_dtoa_r+0x518>
 800e96a:	4b86      	ldr	r3, [pc, #536]	@ (800eb84 <_dtoa_r+0x5c4>)
 800e96c:	2200      	movs	r2, #0
 800e96e:	4620      	mov	r0, r4
 800e970:	4629      	mov	r1, r5
 800e972:	f7f2 f8db 	bl	8000b2c <__aeabi_dcmplt>
 800e976:	2800      	cmp	r0, #0
 800e978:	f000 80ae 	beq.w	800ead8 <_dtoa_r+0x518>
 800e97c:	9b07      	ldr	r3, [sp, #28]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	f000 80aa 	beq.w	800ead8 <_dtoa_r+0x518>
 800e984:	9b00      	ldr	r3, [sp, #0]
 800e986:	2b00      	cmp	r3, #0
 800e988:	dd37      	ble.n	800e9fa <_dtoa_r+0x43a>
 800e98a:	1e7b      	subs	r3, r7, #1
 800e98c:	9304      	str	r3, [sp, #16]
 800e98e:	4620      	mov	r0, r4
 800e990:	4b7d      	ldr	r3, [pc, #500]	@ (800eb88 <_dtoa_r+0x5c8>)
 800e992:	2200      	movs	r2, #0
 800e994:	4629      	mov	r1, r5
 800e996:	f7f1 fe57 	bl	8000648 <__aeabi_dmul>
 800e99a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e99e:	9c00      	ldr	r4, [sp, #0]
 800e9a0:	3601      	adds	r6, #1
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f7f1 fde6 	bl	8000574 <__aeabi_i2d>
 800e9a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9ac:	f7f1 fe4c 	bl	8000648 <__aeabi_dmul>
 800e9b0:	4b76      	ldr	r3, [pc, #472]	@ (800eb8c <_dtoa_r+0x5cc>)
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f7f1 fc92 	bl	80002dc <__adddf3>
 800e9b8:	4605      	mov	r5, r0
 800e9ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e9be:	2c00      	cmp	r4, #0
 800e9c0:	f040 808d 	bne.w	800eade <_dtoa_r+0x51e>
 800e9c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9c8:	4b71      	ldr	r3, [pc, #452]	@ (800eb90 <_dtoa_r+0x5d0>)
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f7f1 fc84 	bl	80002d8 <__aeabi_dsub>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e9d8:	462a      	mov	r2, r5
 800e9da:	4633      	mov	r3, r6
 800e9dc:	f7f2 f8c4 	bl	8000b68 <__aeabi_dcmpgt>
 800e9e0:	2800      	cmp	r0, #0
 800e9e2:	f040 828b 	bne.w	800eefc <_dtoa_r+0x93c>
 800e9e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9ea:	462a      	mov	r2, r5
 800e9ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e9f0:	f7f2 f89c 	bl	8000b2c <__aeabi_dcmplt>
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	f040 8128 	bne.w	800ec4a <_dtoa_r+0x68a>
 800e9fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e9fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ea02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	f2c0 815a 	blt.w	800ecbe <_dtoa_r+0x6fe>
 800ea0a:	2f0e      	cmp	r7, #14
 800ea0c:	f300 8157 	bgt.w	800ecbe <_dtoa_r+0x6fe>
 800ea10:	4b5a      	ldr	r3, [pc, #360]	@ (800eb7c <_dtoa_r+0x5bc>)
 800ea12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ea16:	ed93 7b00 	vldr	d7, [r3]
 800ea1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	ed8d 7b00 	vstr	d7, [sp]
 800ea22:	da03      	bge.n	800ea2c <_dtoa_r+0x46c>
 800ea24:	9b07      	ldr	r3, [sp, #28]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	f340 8101 	ble.w	800ec2e <_dtoa_r+0x66e>
 800ea2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ea30:	4656      	mov	r6, sl
 800ea32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea36:	4620      	mov	r0, r4
 800ea38:	4629      	mov	r1, r5
 800ea3a:	f7f1 ff2f 	bl	800089c <__aeabi_ddiv>
 800ea3e:	f7f2 f8b3 	bl	8000ba8 <__aeabi_d2iz>
 800ea42:	4680      	mov	r8, r0
 800ea44:	f7f1 fd96 	bl	8000574 <__aeabi_i2d>
 800ea48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea4c:	f7f1 fdfc 	bl	8000648 <__aeabi_dmul>
 800ea50:	4602      	mov	r2, r0
 800ea52:	460b      	mov	r3, r1
 800ea54:	4620      	mov	r0, r4
 800ea56:	4629      	mov	r1, r5
 800ea58:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ea5c:	f7f1 fc3c 	bl	80002d8 <__aeabi_dsub>
 800ea60:	f806 4b01 	strb.w	r4, [r6], #1
 800ea64:	9d07      	ldr	r5, [sp, #28]
 800ea66:	eba6 040a 	sub.w	r4, r6, sl
 800ea6a:	42a5      	cmp	r5, r4
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	460b      	mov	r3, r1
 800ea70:	f040 8117 	bne.w	800eca2 <_dtoa_r+0x6e2>
 800ea74:	f7f1 fc32 	bl	80002dc <__adddf3>
 800ea78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea7c:	4604      	mov	r4, r0
 800ea7e:	460d      	mov	r5, r1
 800ea80:	f7f2 f872 	bl	8000b68 <__aeabi_dcmpgt>
 800ea84:	2800      	cmp	r0, #0
 800ea86:	f040 80f9 	bne.w	800ec7c <_dtoa_r+0x6bc>
 800ea8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea8e:	4620      	mov	r0, r4
 800ea90:	4629      	mov	r1, r5
 800ea92:	f7f2 f841 	bl	8000b18 <__aeabi_dcmpeq>
 800ea96:	b118      	cbz	r0, 800eaa0 <_dtoa_r+0x4e0>
 800ea98:	f018 0f01 	tst.w	r8, #1
 800ea9c:	f040 80ee 	bne.w	800ec7c <_dtoa_r+0x6bc>
 800eaa0:	4649      	mov	r1, r9
 800eaa2:	4658      	mov	r0, fp
 800eaa4:	f000 fe94 	bl	800f7d0 <_Bfree>
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	7033      	strb	r3, [r6, #0]
 800eaac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eaae:	3701      	adds	r7, #1
 800eab0:	601f      	str	r7, [r3, #0]
 800eab2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	f000 831d 	beq.w	800f0f4 <_dtoa_r+0xb34>
 800eaba:	601e      	str	r6, [r3, #0]
 800eabc:	e31a      	b.n	800f0f4 <_dtoa_r+0xb34>
 800eabe:	07e2      	lsls	r2, r4, #31
 800eac0:	d505      	bpl.n	800eace <_dtoa_r+0x50e>
 800eac2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eac6:	f7f1 fdbf 	bl	8000648 <__aeabi_dmul>
 800eaca:	3601      	adds	r6, #1
 800eacc:	2301      	movs	r3, #1
 800eace:	1064      	asrs	r4, r4, #1
 800ead0:	3508      	adds	r5, #8
 800ead2:	e73f      	b.n	800e954 <_dtoa_r+0x394>
 800ead4:	2602      	movs	r6, #2
 800ead6:	e742      	b.n	800e95e <_dtoa_r+0x39e>
 800ead8:	9c07      	ldr	r4, [sp, #28]
 800eada:	9704      	str	r7, [sp, #16]
 800eadc:	e761      	b.n	800e9a2 <_dtoa_r+0x3e2>
 800eade:	4b27      	ldr	r3, [pc, #156]	@ (800eb7c <_dtoa_r+0x5bc>)
 800eae0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eae2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eae6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eaea:	4454      	add	r4, sl
 800eaec:	2900      	cmp	r1, #0
 800eaee:	d053      	beq.n	800eb98 <_dtoa_r+0x5d8>
 800eaf0:	4928      	ldr	r1, [pc, #160]	@ (800eb94 <_dtoa_r+0x5d4>)
 800eaf2:	2000      	movs	r0, #0
 800eaf4:	f7f1 fed2 	bl	800089c <__aeabi_ddiv>
 800eaf8:	4633      	mov	r3, r6
 800eafa:	462a      	mov	r2, r5
 800eafc:	f7f1 fbec 	bl	80002d8 <__aeabi_dsub>
 800eb00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb04:	4656      	mov	r6, sl
 800eb06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb0a:	f7f2 f84d 	bl	8000ba8 <__aeabi_d2iz>
 800eb0e:	4605      	mov	r5, r0
 800eb10:	f7f1 fd30 	bl	8000574 <__aeabi_i2d>
 800eb14:	4602      	mov	r2, r0
 800eb16:	460b      	mov	r3, r1
 800eb18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb1c:	f7f1 fbdc 	bl	80002d8 <__aeabi_dsub>
 800eb20:	3530      	adds	r5, #48	@ 0x30
 800eb22:	4602      	mov	r2, r0
 800eb24:	460b      	mov	r3, r1
 800eb26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb2a:	f806 5b01 	strb.w	r5, [r6], #1
 800eb2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb32:	f7f1 fffb 	bl	8000b2c <__aeabi_dcmplt>
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d171      	bne.n	800ec1e <_dtoa_r+0x65e>
 800eb3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb3e:	4911      	ldr	r1, [pc, #68]	@ (800eb84 <_dtoa_r+0x5c4>)
 800eb40:	2000      	movs	r0, #0
 800eb42:	f7f1 fbc9 	bl	80002d8 <__aeabi_dsub>
 800eb46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb4a:	f7f1 ffef 	bl	8000b2c <__aeabi_dcmplt>
 800eb4e:	2800      	cmp	r0, #0
 800eb50:	f040 8095 	bne.w	800ec7e <_dtoa_r+0x6be>
 800eb54:	42a6      	cmp	r6, r4
 800eb56:	f43f af50 	beq.w	800e9fa <_dtoa_r+0x43a>
 800eb5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb5e:	4b0a      	ldr	r3, [pc, #40]	@ (800eb88 <_dtoa_r+0x5c8>)
 800eb60:	2200      	movs	r2, #0
 800eb62:	f7f1 fd71 	bl	8000648 <__aeabi_dmul>
 800eb66:	4b08      	ldr	r3, [pc, #32]	@ (800eb88 <_dtoa_r+0x5c8>)
 800eb68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb72:	f7f1 fd69 	bl	8000648 <__aeabi_dmul>
 800eb76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb7a:	e7c4      	b.n	800eb06 <_dtoa_r+0x546>
 800eb7c:	08010d80 	.word	0x08010d80
 800eb80:	08010d58 	.word	0x08010d58
 800eb84:	3ff00000 	.word	0x3ff00000
 800eb88:	40240000 	.word	0x40240000
 800eb8c:	401c0000 	.word	0x401c0000
 800eb90:	40140000 	.word	0x40140000
 800eb94:	3fe00000 	.word	0x3fe00000
 800eb98:	4631      	mov	r1, r6
 800eb9a:	4628      	mov	r0, r5
 800eb9c:	f7f1 fd54 	bl	8000648 <__aeabi_dmul>
 800eba0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eba4:	9415      	str	r4, [sp, #84]	@ 0x54
 800eba6:	4656      	mov	r6, sl
 800eba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebac:	f7f1 fffc 	bl	8000ba8 <__aeabi_d2iz>
 800ebb0:	4605      	mov	r5, r0
 800ebb2:	f7f1 fcdf 	bl	8000574 <__aeabi_i2d>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	460b      	mov	r3, r1
 800ebba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebbe:	f7f1 fb8b 	bl	80002d8 <__aeabi_dsub>
 800ebc2:	3530      	adds	r5, #48	@ 0x30
 800ebc4:	f806 5b01 	strb.w	r5, [r6], #1
 800ebc8:	4602      	mov	r2, r0
 800ebca:	460b      	mov	r3, r1
 800ebcc:	42a6      	cmp	r6, r4
 800ebce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ebd2:	f04f 0200 	mov.w	r2, #0
 800ebd6:	d124      	bne.n	800ec22 <_dtoa_r+0x662>
 800ebd8:	4bac      	ldr	r3, [pc, #688]	@ (800ee8c <_dtoa_r+0x8cc>)
 800ebda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ebde:	f7f1 fb7d 	bl	80002dc <__adddf3>
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	460b      	mov	r3, r1
 800ebe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebea:	f7f1 ffbd 	bl	8000b68 <__aeabi_dcmpgt>
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	d145      	bne.n	800ec7e <_dtoa_r+0x6be>
 800ebf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ebf6:	49a5      	ldr	r1, [pc, #660]	@ (800ee8c <_dtoa_r+0x8cc>)
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	f7f1 fb6d 	bl	80002d8 <__aeabi_dsub>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	460b      	mov	r3, r1
 800ec02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec06:	f7f1 ff91 	bl	8000b2c <__aeabi_dcmplt>
 800ec0a:	2800      	cmp	r0, #0
 800ec0c:	f43f aef5 	beq.w	800e9fa <_dtoa_r+0x43a>
 800ec10:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ec12:	1e73      	subs	r3, r6, #1
 800ec14:	9315      	str	r3, [sp, #84]	@ 0x54
 800ec16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ec1a:	2b30      	cmp	r3, #48	@ 0x30
 800ec1c:	d0f8      	beq.n	800ec10 <_dtoa_r+0x650>
 800ec1e:	9f04      	ldr	r7, [sp, #16]
 800ec20:	e73e      	b.n	800eaa0 <_dtoa_r+0x4e0>
 800ec22:	4b9b      	ldr	r3, [pc, #620]	@ (800ee90 <_dtoa_r+0x8d0>)
 800ec24:	f7f1 fd10 	bl	8000648 <__aeabi_dmul>
 800ec28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec2c:	e7bc      	b.n	800eba8 <_dtoa_r+0x5e8>
 800ec2e:	d10c      	bne.n	800ec4a <_dtoa_r+0x68a>
 800ec30:	4b98      	ldr	r3, [pc, #608]	@ (800ee94 <_dtoa_r+0x8d4>)
 800ec32:	2200      	movs	r2, #0
 800ec34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec38:	f7f1 fd06 	bl	8000648 <__aeabi_dmul>
 800ec3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec40:	f7f1 ff88 	bl	8000b54 <__aeabi_dcmpge>
 800ec44:	2800      	cmp	r0, #0
 800ec46:	f000 8157 	beq.w	800eef8 <_dtoa_r+0x938>
 800ec4a:	2400      	movs	r4, #0
 800ec4c:	4625      	mov	r5, r4
 800ec4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec50:	43db      	mvns	r3, r3
 800ec52:	9304      	str	r3, [sp, #16]
 800ec54:	4656      	mov	r6, sl
 800ec56:	2700      	movs	r7, #0
 800ec58:	4621      	mov	r1, r4
 800ec5a:	4658      	mov	r0, fp
 800ec5c:	f000 fdb8 	bl	800f7d0 <_Bfree>
 800ec60:	2d00      	cmp	r5, #0
 800ec62:	d0dc      	beq.n	800ec1e <_dtoa_r+0x65e>
 800ec64:	b12f      	cbz	r7, 800ec72 <_dtoa_r+0x6b2>
 800ec66:	42af      	cmp	r7, r5
 800ec68:	d003      	beq.n	800ec72 <_dtoa_r+0x6b2>
 800ec6a:	4639      	mov	r1, r7
 800ec6c:	4658      	mov	r0, fp
 800ec6e:	f000 fdaf 	bl	800f7d0 <_Bfree>
 800ec72:	4629      	mov	r1, r5
 800ec74:	4658      	mov	r0, fp
 800ec76:	f000 fdab 	bl	800f7d0 <_Bfree>
 800ec7a:	e7d0      	b.n	800ec1e <_dtoa_r+0x65e>
 800ec7c:	9704      	str	r7, [sp, #16]
 800ec7e:	4633      	mov	r3, r6
 800ec80:	461e      	mov	r6, r3
 800ec82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec86:	2a39      	cmp	r2, #57	@ 0x39
 800ec88:	d107      	bne.n	800ec9a <_dtoa_r+0x6da>
 800ec8a:	459a      	cmp	sl, r3
 800ec8c:	d1f8      	bne.n	800ec80 <_dtoa_r+0x6c0>
 800ec8e:	9a04      	ldr	r2, [sp, #16]
 800ec90:	3201      	adds	r2, #1
 800ec92:	9204      	str	r2, [sp, #16]
 800ec94:	2230      	movs	r2, #48	@ 0x30
 800ec96:	f88a 2000 	strb.w	r2, [sl]
 800ec9a:	781a      	ldrb	r2, [r3, #0]
 800ec9c:	3201      	adds	r2, #1
 800ec9e:	701a      	strb	r2, [r3, #0]
 800eca0:	e7bd      	b.n	800ec1e <_dtoa_r+0x65e>
 800eca2:	4b7b      	ldr	r3, [pc, #492]	@ (800ee90 <_dtoa_r+0x8d0>)
 800eca4:	2200      	movs	r2, #0
 800eca6:	f7f1 fccf 	bl	8000648 <__aeabi_dmul>
 800ecaa:	2200      	movs	r2, #0
 800ecac:	2300      	movs	r3, #0
 800ecae:	4604      	mov	r4, r0
 800ecb0:	460d      	mov	r5, r1
 800ecb2:	f7f1 ff31 	bl	8000b18 <__aeabi_dcmpeq>
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	f43f aebb 	beq.w	800ea32 <_dtoa_r+0x472>
 800ecbc:	e6f0      	b.n	800eaa0 <_dtoa_r+0x4e0>
 800ecbe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ecc0:	2a00      	cmp	r2, #0
 800ecc2:	f000 80db 	beq.w	800ee7c <_dtoa_r+0x8bc>
 800ecc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecc8:	2a01      	cmp	r2, #1
 800ecca:	f300 80bf 	bgt.w	800ee4c <_dtoa_r+0x88c>
 800ecce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ecd0:	2a00      	cmp	r2, #0
 800ecd2:	f000 80b7 	beq.w	800ee44 <_dtoa_r+0x884>
 800ecd6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ecda:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ecdc:	4646      	mov	r6, r8
 800ecde:	9a08      	ldr	r2, [sp, #32]
 800ece0:	2101      	movs	r1, #1
 800ece2:	441a      	add	r2, r3
 800ece4:	4658      	mov	r0, fp
 800ece6:	4498      	add	r8, r3
 800ece8:	9208      	str	r2, [sp, #32]
 800ecea:	f000 fe25 	bl	800f938 <__i2b>
 800ecee:	4605      	mov	r5, r0
 800ecf0:	b15e      	cbz	r6, 800ed0a <_dtoa_r+0x74a>
 800ecf2:	9b08      	ldr	r3, [sp, #32]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	dd08      	ble.n	800ed0a <_dtoa_r+0x74a>
 800ecf8:	42b3      	cmp	r3, r6
 800ecfa:	9a08      	ldr	r2, [sp, #32]
 800ecfc:	bfa8      	it	ge
 800ecfe:	4633      	movge	r3, r6
 800ed00:	eba8 0803 	sub.w	r8, r8, r3
 800ed04:	1af6      	subs	r6, r6, r3
 800ed06:	1ad3      	subs	r3, r2, r3
 800ed08:	9308      	str	r3, [sp, #32]
 800ed0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed0c:	b1f3      	cbz	r3, 800ed4c <_dtoa_r+0x78c>
 800ed0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	f000 80b7 	beq.w	800ee84 <_dtoa_r+0x8c4>
 800ed16:	b18c      	cbz	r4, 800ed3c <_dtoa_r+0x77c>
 800ed18:	4629      	mov	r1, r5
 800ed1a:	4622      	mov	r2, r4
 800ed1c:	4658      	mov	r0, fp
 800ed1e:	f000 fecb 	bl	800fab8 <__pow5mult>
 800ed22:	464a      	mov	r2, r9
 800ed24:	4601      	mov	r1, r0
 800ed26:	4605      	mov	r5, r0
 800ed28:	4658      	mov	r0, fp
 800ed2a:	f000 fe1b 	bl	800f964 <__multiply>
 800ed2e:	4649      	mov	r1, r9
 800ed30:	9004      	str	r0, [sp, #16]
 800ed32:	4658      	mov	r0, fp
 800ed34:	f000 fd4c 	bl	800f7d0 <_Bfree>
 800ed38:	9b04      	ldr	r3, [sp, #16]
 800ed3a:	4699      	mov	r9, r3
 800ed3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed3e:	1b1a      	subs	r2, r3, r4
 800ed40:	d004      	beq.n	800ed4c <_dtoa_r+0x78c>
 800ed42:	4649      	mov	r1, r9
 800ed44:	4658      	mov	r0, fp
 800ed46:	f000 feb7 	bl	800fab8 <__pow5mult>
 800ed4a:	4681      	mov	r9, r0
 800ed4c:	2101      	movs	r1, #1
 800ed4e:	4658      	mov	r0, fp
 800ed50:	f000 fdf2 	bl	800f938 <__i2b>
 800ed54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed56:	4604      	mov	r4, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	f000 81cf 	beq.w	800f0fc <_dtoa_r+0xb3c>
 800ed5e:	461a      	mov	r2, r3
 800ed60:	4601      	mov	r1, r0
 800ed62:	4658      	mov	r0, fp
 800ed64:	f000 fea8 	bl	800fab8 <__pow5mult>
 800ed68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	f300 8095 	bgt.w	800ee9c <_dtoa_r+0x8dc>
 800ed72:	9b02      	ldr	r3, [sp, #8]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	f040 8087 	bne.w	800ee88 <_dtoa_r+0x8c8>
 800ed7a:	9b03      	ldr	r3, [sp, #12]
 800ed7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	f040 8089 	bne.w	800ee98 <_dtoa_r+0x8d8>
 800ed86:	9b03      	ldr	r3, [sp, #12]
 800ed88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed8c:	0d1b      	lsrs	r3, r3, #20
 800ed8e:	051b      	lsls	r3, r3, #20
 800ed90:	b12b      	cbz	r3, 800ed9e <_dtoa_r+0x7de>
 800ed92:	9b08      	ldr	r3, [sp, #32]
 800ed94:	3301      	adds	r3, #1
 800ed96:	9308      	str	r3, [sp, #32]
 800ed98:	f108 0801 	add.w	r8, r8, #1
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800eda0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	f000 81b0 	beq.w	800f108 <_dtoa_r+0xb48>
 800eda8:	6923      	ldr	r3, [r4, #16]
 800edaa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800edae:	6918      	ldr	r0, [r3, #16]
 800edb0:	f000 fd76 	bl	800f8a0 <__hi0bits>
 800edb4:	f1c0 0020 	rsb	r0, r0, #32
 800edb8:	9b08      	ldr	r3, [sp, #32]
 800edba:	4418      	add	r0, r3
 800edbc:	f010 001f 	ands.w	r0, r0, #31
 800edc0:	d077      	beq.n	800eeb2 <_dtoa_r+0x8f2>
 800edc2:	f1c0 0320 	rsb	r3, r0, #32
 800edc6:	2b04      	cmp	r3, #4
 800edc8:	dd6b      	ble.n	800eea2 <_dtoa_r+0x8e2>
 800edca:	9b08      	ldr	r3, [sp, #32]
 800edcc:	f1c0 001c 	rsb	r0, r0, #28
 800edd0:	4403      	add	r3, r0
 800edd2:	4480      	add	r8, r0
 800edd4:	4406      	add	r6, r0
 800edd6:	9308      	str	r3, [sp, #32]
 800edd8:	f1b8 0f00 	cmp.w	r8, #0
 800eddc:	dd05      	ble.n	800edea <_dtoa_r+0x82a>
 800edde:	4649      	mov	r1, r9
 800ede0:	4642      	mov	r2, r8
 800ede2:	4658      	mov	r0, fp
 800ede4:	f000 fec2 	bl	800fb6c <__lshift>
 800ede8:	4681      	mov	r9, r0
 800edea:	9b08      	ldr	r3, [sp, #32]
 800edec:	2b00      	cmp	r3, #0
 800edee:	dd05      	ble.n	800edfc <_dtoa_r+0x83c>
 800edf0:	4621      	mov	r1, r4
 800edf2:	461a      	mov	r2, r3
 800edf4:	4658      	mov	r0, fp
 800edf6:	f000 feb9 	bl	800fb6c <__lshift>
 800edfa:	4604      	mov	r4, r0
 800edfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d059      	beq.n	800eeb6 <_dtoa_r+0x8f6>
 800ee02:	4621      	mov	r1, r4
 800ee04:	4648      	mov	r0, r9
 800ee06:	f000 ff1d 	bl	800fc44 <__mcmp>
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	da53      	bge.n	800eeb6 <_dtoa_r+0x8f6>
 800ee0e:	1e7b      	subs	r3, r7, #1
 800ee10:	9304      	str	r3, [sp, #16]
 800ee12:	4649      	mov	r1, r9
 800ee14:	2300      	movs	r3, #0
 800ee16:	220a      	movs	r2, #10
 800ee18:	4658      	mov	r0, fp
 800ee1a:	f000 fcfb 	bl	800f814 <__multadd>
 800ee1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee20:	4681      	mov	r9, r0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f000 8172 	beq.w	800f10c <_dtoa_r+0xb4c>
 800ee28:	2300      	movs	r3, #0
 800ee2a:	4629      	mov	r1, r5
 800ee2c:	220a      	movs	r2, #10
 800ee2e:	4658      	mov	r0, fp
 800ee30:	f000 fcf0 	bl	800f814 <__multadd>
 800ee34:	9b00      	ldr	r3, [sp, #0]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	4605      	mov	r5, r0
 800ee3a:	dc67      	bgt.n	800ef0c <_dtoa_r+0x94c>
 800ee3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee3e:	2b02      	cmp	r3, #2
 800ee40:	dc41      	bgt.n	800eec6 <_dtoa_r+0x906>
 800ee42:	e063      	b.n	800ef0c <_dtoa_r+0x94c>
 800ee44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ee46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ee4a:	e746      	b.n	800ecda <_dtoa_r+0x71a>
 800ee4c:	9b07      	ldr	r3, [sp, #28]
 800ee4e:	1e5c      	subs	r4, r3, #1
 800ee50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee52:	42a3      	cmp	r3, r4
 800ee54:	bfbf      	itttt	lt
 800ee56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ee58:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ee5a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ee5c:	1ae3      	sublt	r3, r4, r3
 800ee5e:	bfb4      	ite	lt
 800ee60:	18d2      	addlt	r2, r2, r3
 800ee62:	1b1c      	subge	r4, r3, r4
 800ee64:	9b07      	ldr	r3, [sp, #28]
 800ee66:	bfbc      	itt	lt
 800ee68:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ee6a:	2400      	movlt	r4, #0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	bfb5      	itete	lt
 800ee70:	eba8 0603 	sublt.w	r6, r8, r3
 800ee74:	9b07      	ldrge	r3, [sp, #28]
 800ee76:	2300      	movlt	r3, #0
 800ee78:	4646      	movge	r6, r8
 800ee7a:	e730      	b.n	800ecde <_dtoa_r+0x71e>
 800ee7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ee7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ee80:	4646      	mov	r6, r8
 800ee82:	e735      	b.n	800ecf0 <_dtoa_r+0x730>
 800ee84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee86:	e75c      	b.n	800ed42 <_dtoa_r+0x782>
 800ee88:	2300      	movs	r3, #0
 800ee8a:	e788      	b.n	800ed9e <_dtoa_r+0x7de>
 800ee8c:	3fe00000 	.word	0x3fe00000
 800ee90:	40240000 	.word	0x40240000
 800ee94:	40140000 	.word	0x40140000
 800ee98:	9b02      	ldr	r3, [sp, #8]
 800ee9a:	e780      	b.n	800ed9e <_dtoa_r+0x7de>
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800eea0:	e782      	b.n	800eda8 <_dtoa_r+0x7e8>
 800eea2:	d099      	beq.n	800edd8 <_dtoa_r+0x818>
 800eea4:	9a08      	ldr	r2, [sp, #32]
 800eea6:	331c      	adds	r3, #28
 800eea8:	441a      	add	r2, r3
 800eeaa:	4498      	add	r8, r3
 800eeac:	441e      	add	r6, r3
 800eeae:	9208      	str	r2, [sp, #32]
 800eeb0:	e792      	b.n	800edd8 <_dtoa_r+0x818>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	e7f6      	b.n	800eea4 <_dtoa_r+0x8e4>
 800eeb6:	9b07      	ldr	r3, [sp, #28]
 800eeb8:	9704      	str	r7, [sp, #16]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	dc20      	bgt.n	800ef00 <_dtoa_r+0x940>
 800eebe:	9300      	str	r3, [sp, #0]
 800eec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eec2:	2b02      	cmp	r3, #2
 800eec4:	dd1e      	ble.n	800ef04 <_dtoa_r+0x944>
 800eec6:	9b00      	ldr	r3, [sp, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	f47f aec0 	bne.w	800ec4e <_dtoa_r+0x68e>
 800eece:	4621      	mov	r1, r4
 800eed0:	2205      	movs	r2, #5
 800eed2:	4658      	mov	r0, fp
 800eed4:	f000 fc9e 	bl	800f814 <__multadd>
 800eed8:	4601      	mov	r1, r0
 800eeda:	4604      	mov	r4, r0
 800eedc:	4648      	mov	r0, r9
 800eede:	f000 feb1 	bl	800fc44 <__mcmp>
 800eee2:	2800      	cmp	r0, #0
 800eee4:	f77f aeb3 	ble.w	800ec4e <_dtoa_r+0x68e>
 800eee8:	4656      	mov	r6, sl
 800eeea:	2331      	movs	r3, #49	@ 0x31
 800eeec:	f806 3b01 	strb.w	r3, [r6], #1
 800eef0:	9b04      	ldr	r3, [sp, #16]
 800eef2:	3301      	adds	r3, #1
 800eef4:	9304      	str	r3, [sp, #16]
 800eef6:	e6ae      	b.n	800ec56 <_dtoa_r+0x696>
 800eef8:	9c07      	ldr	r4, [sp, #28]
 800eefa:	9704      	str	r7, [sp, #16]
 800eefc:	4625      	mov	r5, r4
 800eefe:	e7f3      	b.n	800eee8 <_dtoa_r+0x928>
 800ef00:	9b07      	ldr	r3, [sp, #28]
 800ef02:	9300      	str	r3, [sp, #0]
 800ef04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f000 8104 	beq.w	800f114 <_dtoa_r+0xb54>
 800ef0c:	2e00      	cmp	r6, #0
 800ef0e:	dd05      	ble.n	800ef1c <_dtoa_r+0x95c>
 800ef10:	4629      	mov	r1, r5
 800ef12:	4632      	mov	r2, r6
 800ef14:	4658      	mov	r0, fp
 800ef16:	f000 fe29 	bl	800fb6c <__lshift>
 800ef1a:	4605      	mov	r5, r0
 800ef1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d05a      	beq.n	800efd8 <_dtoa_r+0xa18>
 800ef22:	6869      	ldr	r1, [r5, #4]
 800ef24:	4658      	mov	r0, fp
 800ef26:	f000 fc13 	bl	800f750 <_Balloc>
 800ef2a:	4606      	mov	r6, r0
 800ef2c:	b928      	cbnz	r0, 800ef3a <_dtoa_r+0x97a>
 800ef2e:	4b84      	ldr	r3, [pc, #528]	@ (800f140 <_dtoa_r+0xb80>)
 800ef30:	4602      	mov	r2, r0
 800ef32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ef36:	f7ff bb5a 	b.w	800e5ee <_dtoa_r+0x2e>
 800ef3a:	692a      	ldr	r2, [r5, #16]
 800ef3c:	3202      	adds	r2, #2
 800ef3e:	0092      	lsls	r2, r2, #2
 800ef40:	f105 010c 	add.w	r1, r5, #12
 800ef44:	300c      	adds	r0, #12
 800ef46:	f7ff faa4 	bl	800e492 <memcpy>
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	4631      	mov	r1, r6
 800ef4e:	4658      	mov	r0, fp
 800ef50:	f000 fe0c 	bl	800fb6c <__lshift>
 800ef54:	f10a 0301 	add.w	r3, sl, #1
 800ef58:	9307      	str	r3, [sp, #28]
 800ef5a:	9b00      	ldr	r3, [sp, #0]
 800ef5c:	4453      	add	r3, sl
 800ef5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef60:	9b02      	ldr	r3, [sp, #8]
 800ef62:	f003 0301 	and.w	r3, r3, #1
 800ef66:	462f      	mov	r7, r5
 800ef68:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef6a:	4605      	mov	r5, r0
 800ef6c:	9b07      	ldr	r3, [sp, #28]
 800ef6e:	4621      	mov	r1, r4
 800ef70:	3b01      	subs	r3, #1
 800ef72:	4648      	mov	r0, r9
 800ef74:	9300      	str	r3, [sp, #0]
 800ef76:	f7ff fa9a 	bl	800e4ae <quorem>
 800ef7a:	4639      	mov	r1, r7
 800ef7c:	9002      	str	r0, [sp, #8]
 800ef7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ef82:	4648      	mov	r0, r9
 800ef84:	f000 fe5e 	bl	800fc44 <__mcmp>
 800ef88:	462a      	mov	r2, r5
 800ef8a:	9008      	str	r0, [sp, #32]
 800ef8c:	4621      	mov	r1, r4
 800ef8e:	4658      	mov	r0, fp
 800ef90:	f000 fe74 	bl	800fc7c <__mdiff>
 800ef94:	68c2      	ldr	r2, [r0, #12]
 800ef96:	4606      	mov	r6, r0
 800ef98:	bb02      	cbnz	r2, 800efdc <_dtoa_r+0xa1c>
 800ef9a:	4601      	mov	r1, r0
 800ef9c:	4648      	mov	r0, r9
 800ef9e:	f000 fe51 	bl	800fc44 <__mcmp>
 800efa2:	4602      	mov	r2, r0
 800efa4:	4631      	mov	r1, r6
 800efa6:	4658      	mov	r0, fp
 800efa8:	920e      	str	r2, [sp, #56]	@ 0x38
 800efaa:	f000 fc11 	bl	800f7d0 <_Bfree>
 800efae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800efb2:	9e07      	ldr	r6, [sp, #28]
 800efb4:	ea43 0102 	orr.w	r1, r3, r2
 800efb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efba:	4319      	orrs	r1, r3
 800efbc:	d110      	bne.n	800efe0 <_dtoa_r+0xa20>
 800efbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800efc2:	d029      	beq.n	800f018 <_dtoa_r+0xa58>
 800efc4:	9b08      	ldr	r3, [sp, #32]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	dd02      	ble.n	800efd0 <_dtoa_r+0xa10>
 800efca:	9b02      	ldr	r3, [sp, #8]
 800efcc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800efd0:	9b00      	ldr	r3, [sp, #0]
 800efd2:	f883 8000 	strb.w	r8, [r3]
 800efd6:	e63f      	b.n	800ec58 <_dtoa_r+0x698>
 800efd8:	4628      	mov	r0, r5
 800efda:	e7bb      	b.n	800ef54 <_dtoa_r+0x994>
 800efdc:	2201      	movs	r2, #1
 800efde:	e7e1      	b.n	800efa4 <_dtoa_r+0x9e4>
 800efe0:	9b08      	ldr	r3, [sp, #32]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	db04      	blt.n	800eff0 <_dtoa_r+0xa30>
 800efe6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800efe8:	430b      	orrs	r3, r1
 800efea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800efec:	430b      	orrs	r3, r1
 800efee:	d120      	bne.n	800f032 <_dtoa_r+0xa72>
 800eff0:	2a00      	cmp	r2, #0
 800eff2:	dded      	ble.n	800efd0 <_dtoa_r+0xa10>
 800eff4:	4649      	mov	r1, r9
 800eff6:	2201      	movs	r2, #1
 800eff8:	4658      	mov	r0, fp
 800effa:	f000 fdb7 	bl	800fb6c <__lshift>
 800effe:	4621      	mov	r1, r4
 800f000:	4681      	mov	r9, r0
 800f002:	f000 fe1f 	bl	800fc44 <__mcmp>
 800f006:	2800      	cmp	r0, #0
 800f008:	dc03      	bgt.n	800f012 <_dtoa_r+0xa52>
 800f00a:	d1e1      	bne.n	800efd0 <_dtoa_r+0xa10>
 800f00c:	f018 0f01 	tst.w	r8, #1
 800f010:	d0de      	beq.n	800efd0 <_dtoa_r+0xa10>
 800f012:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f016:	d1d8      	bne.n	800efca <_dtoa_r+0xa0a>
 800f018:	9a00      	ldr	r2, [sp, #0]
 800f01a:	2339      	movs	r3, #57	@ 0x39
 800f01c:	7013      	strb	r3, [r2, #0]
 800f01e:	4633      	mov	r3, r6
 800f020:	461e      	mov	r6, r3
 800f022:	3b01      	subs	r3, #1
 800f024:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f028:	2a39      	cmp	r2, #57	@ 0x39
 800f02a:	d052      	beq.n	800f0d2 <_dtoa_r+0xb12>
 800f02c:	3201      	adds	r2, #1
 800f02e:	701a      	strb	r2, [r3, #0]
 800f030:	e612      	b.n	800ec58 <_dtoa_r+0x698>
 800f032:	2a00      	cmp	r2, #0
 800f034:	dd07      	ble.n	800f046 <_dtoa_r+0xa86>
 800f036:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f03a:	d0ed      	beq.n	800f018 <_dtoa_r+0xa58>
 800f03c:	9a00      	ldr	r2, [sp, #0]
 800f03e:	f108 0301 	add.w	r3, r8, #1
 800f042:	7013      	strb	r3, [r2, #0]
 800f044:	e608      	b.n	800ec58 <_dtoa_r+0x698>
 800f046:	9b07      	ldr	r3, [sp, #28]
 800f048:	9a07      	ldr	r2, [sp, #28]
 800f04a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f04e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f050:	4293      	cmp	r3, r2
 800f052:	d028      	beq.n	800f0a6 <_dtoa_r+0xae6>
 800f054:	4649      	mov	r1, r9
 800f056:	2300      	movs	r3, #0
 800f058:	220a      	movs	r2, #10
 800f05a:	4658      	mov	r0, fp
 800f05c:	f000 fbda 	bl	800f814 <__multadd>
 800f060:	42af      	cmp	r7, r5
 800f062:	4681      	mov	r9, r0
 800f064:	f04f 0300 	mov.w	r3, #0
 800f068:	f04f 020a 	mov.w	r2, #10
 800f06c:	4639      	mov	r1, r7
 800f06e:	4658      	mov	r0, fp
 800f070:	d107      	bne.n	800f082 <_dtoa_r+0xac2>
 800f072:	f000 fbcf 	bl	800f814 <__multadd>
 800f076:	4607      	mov	r7, r0
 800f078:	4605      	mov	r5, r0
 800f07a:	9b07      	ldr	r3, [sp, #28]
 800f07c:	3301      	adds	r3, #1
 800f07e:	9307      	str	r3, [sp, #28]
 800f080:	e774      	b.n	800ef6c <_dtoa_r+0x9ac>
 800f082:	f000 fbc7 	bl	800f814 <__multadd>
 800f086:	4629      	mov	r1, r5
 800f088:	4607      	mov	r7, r0
 800f08a:	2300      	movs	r3, #0
 800f08c:	220a      	movs	r2, #10
 800f08e:	4658      	mov	r0, fp
 800f090:	f000 fbc0 	bl	800f814 <__multadd>
 800f094:	4605      	mov	r5, r0
 800f096:	e7f0      	b.n	800f07a <_dtoa_r+0xaba>
 800f098:	9b00      	ldr	r3, [sp, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	bfcc      	ite	gt
 800f09e:	461e      	movgt	r6, r3
 800f0a0:	2601      	movle	r6, #1
 800f0a2:	4456      	add	r6, sl
 800f0a4:	2700      	movs	r7, #0
 800f0a6:	4649      	mov	r1, r9
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	4658      	mov	r0, fp
 800f0ac:	f000 fd5e 	bl	800fb6c <__lshift>
 800f0b0:	4621      	mov	r1, r4
 800f0b2:	4681      	mov	r9, r0
 800f0b4:	f000 fdc6 	bl	800fc44 <__mcmp>
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	dcb0      	bgt.n	800f01e <_dtoa_r+0xa5e>
 800f0bc:	d102      	bne.n	800f0c4 <_dtoa_r+0xb04>
 800f0be:	f018 0f01 	tst.w	r8, #1
 800f0c2:	d1ac      	bne.n	800f01e <_dtoa_r+0xa5e>
 800f0c4:	4633      	mov	r3, r6
 800f0c6:	461e      	mov	r6, r3
 800f0c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0cc:	2a30      	cmp	r2, #48	@ 0x30
 800f0ce:	d0fa      	beq.n	800f0c6 <_dtoa_r+0xb06>
 800f0d0:	e5c2      	b.n	800ec58 <_dtoa_r+0x698>
 800f0d2:	459a      	cmp	sl, r3
 800f0d4:	d1a4      	bne.n	800f020 <_dtoa_r+0xa60>
 800f0d6:	9b04      	ldr	r3, [sp, #16]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	9304      	str	r3, [sp, #16]
 800f0dc:	2331      	movs	r3, #49	@ 0x31
 800f0de:	f88a 3000 	strb.w	r3, [sl]
 800f0e2:	e5b9      	b.n	800ec58 <_dtoa_r+0x698>
 800f0e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f0e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f144 <_dtoa_r+0xb84>
 800f0ea:	b11b      	cbz	r3, 800f0f4 <_dtoa_r+0xb34>
 800f0ec:	f10a 0308 	add.w	r3, sl, #8
 800f0f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f0f2:	6013      	str	r3, [r2, #0]
 800f0f4:	4650      	mov	r0, sl
 800f0f6:	b019      	add	sp, #100	@ 0x64
 800f0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0fe:	2b01      	cmp	r3, #1
 800f100:	f77f ae37 	ble.w	800ed72 <_dtoa_r+0x7b2>
 800f104:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f106:	930a      	str	r3, [sp, #40]	@ 0x28
 800f108:	2001      	movs	r0, #1
 800f10a:	e655      	b.n	800edb8 <_dtoa_r+0x7f8>
 800f10c:	9b00      	ldr	r3, [sp, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	f77f aed6 	ble.w	800eec0 <_dtoa_r+0x900>
 800f114:	4656      	mov	r6, sl
 800f116:	4621      	mov	r1, r4
 800f118:	4648      	mov	r0, r9
 800f11a:	f7ff f9c8 	bl	800e4ae <quorem>
 800f11e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f122:	f806 8b01 	strb.w	r8, [r6], #1
 800f126:	9b00      	ldr	r3, [sp, #0]
 800f128:	eba6 020a 	sub.w	r2, r6, sl
 800f12c:	4293      	cmp	r3, r2
 800f12e:	ddb3      	ble.n	800f098 <_dtoa_r+0xad8>
 800f130:	4649      	mov	r1, r9
 800f132:	2300      	movs	r3, #0
 800f134:	220a      	movs	r2, #10
 800f136:	4658      	mov	r0, fp
 800f138:	f000 fb6c 	bl	800f814 <__multadd>
 800f13c:	4681      	mov	r9, r0
 800f13e:	e7ea      	b.n	800f116 <_dtoa_r+0xb56>
 800f140:	08010cd0 	.word	0x08010cd0
 800f144:	08010c54 	.word	0x08010c54

0800f148 <_free_r>:
 800f148:	b538      	push	{r3, r4, r5, lr}
 800f14a:	4605      	mov	r5, r0
 800f14c:	2900      	cmp	r1, #0
 800f14e:	d041      	beq.n	800f1d4 <_free_r+0x8c>
 800f150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f154:	1f0c      	subs	r4, r1, #4
 800f156:	2b00      	cmp	r3, #0
 800f158:	bfb8      	it	lt
 800f15a:	18e4      	addlt	r4, r4, r3
 800f15c:	f000 faec 	bl	800f738 <__malloc_lock>
 800f160:	4a1d      	ldr	r2, [pc, #116]	@ (800f1d8 <_free_r+0x90>)
 800f162:	6813      	ldr	r3, [r2, #0]
 800f164:	b933      	cbnz	r3, 800f174 <_free_r+0x2c>
 800f166:	6063      	str	r3, [r4, #4]
 800f168:	6014      	str	r4, [r2, #0]
 800f16a:	4628      	mov	r0, r5
 800f16c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f170:	f000 bae8 	b.w	800f744 <__malloc_unlock>
 800f174:	42a3      	cmp	r3, r4
 800f176:	d908      	bls.n	800f18a <_free_r+0x42>
 800f178:	6820      	ldr	r0, [r4, #0]
 800f17a:	1821      	adds	r1, r4, r0
 800f17c:	428b      	cmp	r3, r1
 800f17e:	bf01      	itttt	eq
 800f180:	6819      	ldreq	r1, [r3, #0]
 800f182:	685b      	ldreq	r3, [r3, #4]
 800f184:	1809      	addeq	r1, r1, r0
 800f186:	6021      	streq	r1, [r4, #0]
 800f188:	e7ed      	b.n	800f166 <_free_r+0x1e>
 800f18a:	461a      	mov	r2, r3
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	b10b      	cbz	r3, 800f194 <_free_r+0x4c>
 800f190:	42a3      	cmp	r3, r4
 800f192:	d9fa      	bls.n	800f18a <_free_r+0x42>
 800f194:	6811      	ldr	r1, [r2, #0]
 800f196:	1850      	adds	r0, r2, r1
 800f198:	42a0      	cmp	r0, r4
 800f19a:	d10b      	bne.n	800f1b4 <_free_r+0x6c>
 800f19c:	6820      	ldr	r0, [r4, #0]
 800f19e:	4401      	add	r1, r0
 800f1a0:	1850      	adds	r0, r2, r1
 800f1a2:	4283      	cmp	r3, r0
 800f1a4:	6011      	str	r1, [r2, #0]
 800f1a6:	d1e0      	bne.n	800f16a <_free_r+0x22>
 800f1a8:	6818      	ldr	r0, [r3, #0]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	6053      	str	r3, [r2, #4]
 800f1ae:	4408      	add	r0, r1
 800f1b0:	6010      	str	r0, [r2, #0]
 800f1b2:	e7da      	b.n	800f16a <_free_r+0x22>
 800f1b4:	d902      	bls.n	800f1bc <_free_r+0x74>
 800f1b6:	230c      	movs	r3, #12
 800f1b8:	602b      	str	r3, [r5, #0]
 800f1ba:	e7d6      	b.n	800f16a <_free_r+0x22>
 800f1bc:	6820      	ldr	r0, [r4, #0]
 800f1be:	1821      	adds	r1, r4, r0
 800f1c0:	428b      	cmp	r3, r1
 800f1c2:	bf04      	itt	eq
 800f1c4:	6819      	ldreq	r1, [r3, #0]
 800f1c6:	685b      	ldreq	r3, [r3, #4]
 800f1c8:	6063      	str	r3, [r4, #4]
 800f1ca:	bf04      	itt	eq
 800f1cc:	1809      	addeq	r1, r1, r0
 800f1ce:	6021      	streq	r1, [r4, #0]
 800f1d0:	6054      	str	r4, [r2, #4]
 800f1d2:	e7ca      	b.n	800f16a <_free_r+0x22>
 800f1d4:	bd38      	pop	{r3, r4, r5, pc}
 800f1d6:	bf00      	nop
 800f1d8:	20004e14 	.word	0x20004e14

0800f1dc <__ssputs_r>:
 800f1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1e0:	688e      	ldr	r6, [r1, #8]
 800f1e2:	461f      	mov	r7, r3
 800f1e4:	42be      	cmp	r6, r7
 800f1e6:	680b      	ldr	r3, [r1, #0]
 800f1e8:	4682      	mov	sl, r0
 800f1ea:	460c      	mov	r4, r1
 800f1ec:	4690      	mov	r8, r2
 800f1ee:	d82d      	bhi.n	800f24c <__ssputs_r+0x70>
 800f1f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f1f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f1f8:	d026      	beq.n	800f248 <__ssputs_r+0x6c>
 800f1fa:	6965      	ldr	r5, [r4, #20]
 800f1fc:	6909      	ldr	r1, [r1, #16]
 800f1fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f202:	eba3 0901 	sub.w	r9, r3, r1
 800f206:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f20a:	1c7b      	adds	r3, r7, #1
 800f20c:	444b      	add	r3, r9
 800f20e:	106d      	asrs	r5, r5, #1
 800f210:	429d      	cmp	r5, r3
 800f212:	bf38      	it	cc
 800f214:	461d      	movcc	r5, r3
 800f216:	0553      	lsls	r3, r2, #21
 800f218:	d527      	bpl.n	800f26a <__ssputs_r+0x8e>
 800f21a:	4629      	mov	r1, r5
 800f21c:	f000 f960 	bl	800f4e0 <_malloc_r>
 800f220:	4606      	mov	r6, r0
 800f222:	b360      	cbz	r0, 800f27e <__ssputs_r+0xa2>
 800f224:	6921      	ldr	r1, [r4, #16]
 800f226:	464a      	mov	r2, r9
 800f228:	f7ff f933 	bl	800e492 <memcpy>
 800f22c:	89a3      	ldrh	r3, [r4, #12]
 800f22e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f236:	81a3      	strh	r3, [r4, #12]
 800f238:	6126      	str	r6, [r4, #16]
 800f23a:	6165      	str	r5, [r4, #20]
 800f23c:	444e      	add	r6, r9
 800f23e:	eba5 0509 	sub.w	r5, r5, r9
 800f242:	6026      	str	r6, [r4, #0]
 800f244:	60a5      	str	r5, [r4, #8]
 800f246:	463e      	mov	r6, r7
 800f248:	42be      	cmp	r6, r7
 800f24a:	d900      	bls.n	800f24e <__ssputs_r+0x72>
 800f24c:	463e      	mov	r6, r7
 800f24e:	6820      	ldr	r0, [r4, #0]
 800f250:	4632      	mov	r2, r6
 800f252:	4641      	mov	r1, r8
 800f254:	f000 fe6f 	bl	800ff36 <memmove>
 800f258:	68a3      	ldr	r3, [r4, #8]
 800f25a:	1b9b      	subs	r3, r3, r6
 800f25c:	60a3      	str	r3, [r4, #8]
 800f25e:	6823      	ldr	r3, [r4, #0]
 800f260:	4433      	add	r3, r6
 800f262:	6023      	str	r3, [r4, #0]
 800f264:	2000      	movs	r0, #0
 800f266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f26a:	462a      	mov	r2, r5
 800f26c:	f000 fe35 	bl	800feda <_realloc_r>
 800f270:	4606      	mov	r6, r0
 800f272:	2800      	cmp	r0, #0
 800f274:	d1e0      	bne.n	800f238 <__ssputs_r+0x5c>
 800f276:	6921      	ldr	r1, [r4, #16]
 800f278:	4650      	mov	r0, sl
 800f27a:	f7ff ff65 	bl	800f148 <_free_r>
 800f27e:	230c      	movs	r3, #12
 800f280:	f8ca 3000 	str.w	r3, [sl]
 800f284:	89a3      	ldrh	r3, [r4, #12]
 800f286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f28a:	81a3      	strh	r3, [r4, #12]
 800f28c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f290:	e7e9      	b.n	800f266 <__ssputs_r+0x8a>
	...

0800f294 <_svfiprintf_r>:
 800f294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f298:	4698      	mov	r8, r3
 800f29a:	898b      	ldrh	r3, [r1, #12]
 800f29c:	061b      	lsls	r3, r3, #24
 800f29e:	b09d      	sub	sp, #116	@ 0x74
 800f2a0:	4607      	mov	r7, r0
 800f2a2:	460d      	mov	r5, r1
 800f2a4:	4614      	mov	r4, r2
 800f2a6:	d510      	bpl.n	800f2ca <_svfiprintf_r+0x36>
 800f2a8:	690b      	ldr	r3, [r1, #16]
 800f2aa:	b973      	cbnz	r3, 800f2ca <_svfiprintf_r+0x36>
 800f2ac:	2140      	movs	r1, #64	@ 0x40
 800f2ae:	f000 f917 	bl	800f4e0 <_malloc_r>
 800f2b2:	6028      	str	r0, [r5, #0]
 800f2b4:	6128      	str	r0, [r5, #16]
 800f2b6:	b930      	cbnz	r0, 800f2c6 <_svfiprintf_r+0x32>
 800f2b8:	230c      	movs	r3, #12
 800f2ba:	603b      	str	r3, [r7, #0]
 800f2bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f2c0:	b01d      	add	sp, #116	@ 0x74
 800f2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2c6:	2340      	movs	r3, #64	@ 0x40
 800f2c8:	616b      	str	r3, [r5, #20]
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2ce:	2320      	movs	r3, #32
 800f2d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2d8:	2330      	movs	r3, #48	@ 0x30
 800f2da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f478 <_svfiprintf_r+0x1e4>
 800f2de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f2e2:	f04f 0901 	mov.w	r9, #1
 800f2e6:	4623      	mov	r3, r4
 800f2e8:	469a      	mov	sl, r3
 800f2ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2ee:	b10a      	cbz	r2, 800f2f4 <_svfiprintf_r+0x60>
 800f2f0:	2a25      	cmp	r2, #37	@ 0x25
 800f2f2:	d1f9      	bne.n	800f2e8 <_svfiprintf_r+0x54>
 800f2f4:	ebba 0b04 	subs.w	fp, sl, r4
 800f2f8:	d00b      	beq.n	800f312 <_svfiprintf_r+0x7e>
 800f2fa:	465b      	mov	r3, fp
 800f2fc:	4622      	mov	r2, r4
 800f2fe:	4629      	mov	r1, r5
 800f300:	4638      	mov	r0, r7
 800f302:	f7ff ff6b 	bl	800f1dc <__ssputs_r>
 800f306:	3001      	adds	r0, #1
 800f308:	f000 80a7 	beq.w	800f45a <_svfiprintf_r+0x1c6>
 800f30c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f30e:	445a      	add	r2, fp
 800f310:	9209      	str	r2, [sp, #36]	@ 0x24
 800f312:	f89a 3000 	ldrb.w	r3, [sl]
 800f316:	2b00      	cmp	r3, #0
 800f318:	f000 809f 	beq.w	800f45a <_svfiprintf_r+0x1c6>
 800f31c:	2300      	movs	r3, #0
 800f31e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f326:	f10a 0a01 	add.w	sl, sl, #1
 800f32a:	9304      	str	r3, [sp, #16]
 800f32c:	9307      	str	r3, [sp, #28]
 800f32e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f332:	931a      	str	r3, [sp, #104]	@ 0x68
 800f334:	4654      	mov	r4, sl
 800f336:	2205      	movs	r2, #5
 800f338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f33c:	484e      	ldr	r0, [pc, #312]	@ (800f478 <_svfiprintf_r+0x1e4>)
 800f33e:	f7f0 ff6f 	bl	8000220 <memchr>
 800f342:	9a04      	ldr	r2, [sp, #16]
 800f344:	b9d8      	cbnz	r0, 800f37e <_svfiprintf_r+0xea>
 800f346:	06d0      	lsls	r0, r2, #27
 800f348:	bf44      	itt	mi
 800f34a:	2320      	movmi	r3, #32
 800f34c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f350:	0711      	lsls	r1, r2, #28
 800f352:	bf44      	itt	mi
 800f354:	232b      	movmi	r3, #43	@ 0x2b
 800f356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f35a:	f89a 3000 	ldrb.w	r3, [sl]
 800f35e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f360:	d015      	beq.n	800f38e <_svfiprintf_r+0xfa>
 800f362:	9a07      	ldr	r2, [sp, #28]
 800f364:	4654      	mov	r4, sl
 800f366:	2000      	movs	r0, #0
 800f368:	f04f 0c0a 	mov.w	ip, #10
 800f36c:	4621      	mov	r1, r4
 800f36e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f372:	3b30      	subs	r3, #48	@ 0x30
 800f374:	2b09      	cmp	r3, #9
 800f376:	d94b      	bls.n	800f410 <_svfiprintf_r+0x17c>
 800f378:	b1b0      	cbz	r0, 800f3a8 <_svfiprintf_r+0x114>
 800f37a:	9207      	str	r2, [sp, #28]
 800f37c:	e014      	b.n	800f3a8 <_svfiprintf_r+0x114>
 800f37e:	eba0 0308 	sub.w	r3, r0, r8
 800f382:	fa09 f303 	lsl.w	r3, r9, r3
 800f386:	4313      	orrs	r3, r2
 800f388:	9304      	str	r3, [sp, #16]
 800f38a:	46a2      	mov	sl, r4
 800f38c:	e7d2      	b.n	800f334 <_svfiprintf_r+0xa0>
 800f38e:	9b03      	ldr	r3, [sp, #12]
 800f390:	1d19      	adds	r1, r3, #4
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	9103      	str	r1, [sp, #12]
 800f396:	2b00      	cmp	r3, #0
 800f398:	bfbb      	ittet	lt
 800f39a:	425b      	neglt	r3, r3
 800f39c:	f042 0202 	orrlt.w	r2, r2, #2
 800f3a0:	9307      	strge	r3, [sp, #28]
 800f3a2:	9307      	strlt	r3, [sp, #28]
 800f3a4:	bfb8      	it	lt
 800f3a6:	9204      	strlt	r2, [sp, #16]
 800f3a8:	7823      	ldrb	r3, [r4, #0]
 800f3aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3ac:	d10a      	bne.n	800f3c4 <_svfiprintf_r+0x130>
 800f3ae:	7863      	ldrb	r3, [r4, #1]
 800f3b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3b2:	d132      	bne.n	800f41a <_svfiprintf_r+0x186>
 800f3b4:	9b03      	ldr	r3, [sp, #12]
 800f3b6:	1d1a      	adds	r2, r3, #4
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	9203      	str	r2, [sp, #12]
 800f3bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f3c0:	3402      	adds	r4, #2
 800f3c2:	9305      	str	r3, [sp, #20]
 800f3c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f488 <_svfiprintf_r+0x1f4>
 800f3c8:	7821      	ldrb	r1, [r4, #0]
 800f3ca:	2203      	movs	r2, #3
 800f3cc:	4650      	mov	r0, sl
 800f3ce:	f7f0 ff27 	bl	8000220 <memchr>
 800f3d2:	b138      	cbz	r0, 800f3e4 <_svfiprintf_r+0x150>
 800f3d4:	9b04      	ldr	r3, [sp, #16]
 800f3d6:	eba0 000a 	sub.w	r0, r0, sl
 800f3da:	2240      	movs	r2, #64	@ 0x40
 800f3dc:	4082      	lsls	r2, r0
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	3401      	adds	r4, #1
 800f3e2:	9304      	str	r3, [sp, #16]
 800f3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3e8:	4824      	ldr	r0, [pc, #144]	@ (800f47c <_svfiprintf_r+0x1e8>)
 800f3ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f3ee:	2206      	movs	r2, #6
 800f3f0:	f7f0 ff16 	bl	8000220 <memchr>
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	d036      	beq.n	800f466 <_svfiprintf_r+0x1d2>
 800f3f8:	4b21      	ldr	r3, [pc, #132]	@ (800f480 <_svfiprintf_r+0x1ec>)
 800f3fa:	bb1b      	cbnz	r3, 800f444 <_svfiprintf_r+0x1b0>
 800f3fc:	9b03      	ldr	r3, [sp, #12]
 800f3fe:	3307      	adds	r3, #7
 800f400:	f023 0307 	bic.w	r3, r3, #7
 800f404:	3308      	adds	r3, #8
 800f406:	9303      	str	r3, [sp, #12]
 800f408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f40a:	4433      	add	r3, r6
 800f40c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f40e:	e76a      	b.n	800f2e6 <_svfiprintf_r+0x52>
 800f410:	fb0c 3202 	mla	r2, ip, r2, r3
 800f414:	460c      	mov	r4, r1
 800f416:	2001      	movs	r0, #1
 800f418:	e7a8      	b.n	800f36c <_svfiprintf_r+0xd8>
 800f41a:	2300      	movs	r3, #0
 800f41c:	3401      	adds	r4, #1
 800f41e:	9305      	str	r3, [sp, #20]
 800f420:	4619      	mov	r1, r3
 800f422:	f04f 0c0a 	mov.w	ip, #10
 800f426:	4620      	mov	r0, r4
 800f428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f42c:	3a30      	subs	r2, #48	@ 0x30
 800f42e:	2a09      	cmp	r2, #9
 800f430:	d903      	bls.n	800f43a <_svfiprintf_r+0x1a6>
 800f432:	2b00      	cmp	r3, #0
 800f434:	d0c6      	beq.n	800f3c4 <_svfiprintf_r+0x130>
 800f436:	9105      	str	r1, [sp, #20]
 800f438:	e7c4      	b.n	800f3c4 <_svfiprintf_r+0x130>
 800f43a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f43e:	4604      	mov	r4, r0
 800f440:	2301      	movs	r3, #1
 800f442:	e7f0      	b.n	800f426 <_svfiprintf_r+0x192>
 800f444:	ab03      	add	r3, sp, #12
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	462a      	mov	r2, r5
 800f44a:	4b0e      	ldr	r3, [pc, #56]	@ (800f484 <_svfiprintf_r+0x1f0>)
 800f44c:	a904      	add	r1, sp, #16
 800f44e:	4638      	mov	r0, r7
 800f450:	f7fe fabc 	bl	800d9cc <_printf_float>
 800f454:	1c42      	adds	r2, r0, #1
 800f456:	4606      	mov	r6, r0
 800f458:	d1d6      	bne.n	800f408 <_svfiprintf_r+0x174>
 800f45a:	89ab      	ldrh	r3, [r5, #12]
 800f45c:	065b      	lsls	r3, r3, #25
 800f45e:	f53f af2d 	bmi.w	800f2bc <_svfiprintf_r+0x28>
 800f462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f464:	e72c      	b.n	800f2c0 <_svfiprintf_r+0x2c>
 800f466:	ab03      	add	r3, sp, #12
 800f468:	9300      	str	r3, [sp, #0]
 800f46a:	462a      	mov	r2, r5
 800f46c:	4b05      	ldr	r3, [pc, #20]	@ (800f484 <_svfiprintf_r+0x1f0>)
 800f46e:	a904      	add	r1, sp, #16
 800f470:	4638      	mov	r0, r7
 800f472:	f7fe fd43 	bl	800defc <_printf_i>
 800f476:	e7ed      	b.n	800f454 <_svfiprintf_r+0x1c0>
 800f478:	08010ce1 	.word	0x08010ce1
 800f47c:	08010ceb 	.word	0x08010ceb
 800f480:	0800d9cd 	.word	0x0800d9cd
 800f484:	0800f1dd 	.word	0x0800f1dd
 800f488:	08010ce7 	.word	0x08010ce7

0800f48c <malloc>:
 800f48c:	4b02      	ldr	r3, [pc, #8]	@ (800f498 <malloc+0xc>)
 800f48e:	4601      	mov	r1, r0
 800f490:	6818      	ldr	r0, [r3, #0]
 800f492:	f000 b825 	b.w	800f4e0 <_malloc_r>
 800f496:	bf00      	nop
 800f498:	20000040 	.word	0x20000040

0800f49c <sbrk_aligned>:
 800f49c:	b570      	push	{r4, r5, r6, lr}
 800f49e:	4e0f      	ldr	r6, [pc, #60]	@ (800f4dc <sbrk_aligned+0x40>)
 800f4a0:	460c      	mov	r4, r1
 800f4a2:	6831      	ldr	r1, [r6, #0]
 800f4a4:	4605      	mov	r5, r0
 800f4a6:	b911      	cbnz	r1, 800f4ae <sbrk_aligned+0x12>
 800f4a8:	f000 fd94 	bl	800ffd4 <_sbrk_r>
 800f4ac:	6030      	str	r0, [r6, #0]
 800f4ae:	4621      	mov	r1, r4
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	f000 fd8f 	bl	800ffd4 <_sbrk_r>
 800f4b6:	1c43      	adds	r3, r0, #1
 800f4b8:	d103      	bne.n	800f4c2 <sbrk_aligned+0x26>
 800f4ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f4be:	4620      	mov	r0, r4
 800f4c0:	bd70      	pop	{r4, r5, r6, pc}
 800f4c2:	1cc4      	adds	r4, r0, #3
 800f4c4:	f024 0403 	bic.w	r4, r4, #3
 800f4c8:	42a0      	cmp	r0, r4
 800f4ca:	d0f8      	beq.n	800f4be <sbrk_aligned+0x22>
 800f4cc:	1a21      	subs	r1, r4, r0
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	f000 fd80 	bl	800ffd4 <_sbrk_r>
 800f4d4:	3001      	adds	r0, #1
 800f4d6:	d1f2      	bne.n	800f4be <sbrk_aligned+0x22>
 800f4d8:	e7ef      	b.n	800f4ba <sbrk_aligned+0x1e>
 800f4da:	bf00      	nop
 800f4dc:	20004e10 	.word	0x20004e10

0800f4e0 <_malloc_r>:
 800f4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4e4:	1ccd      	adds	r5, r1, #3
 800f4e6:	f025 0503 	bic.w	r5, r5, #3
 800f4ea:	3508      	adds	r5, #8
 800f4ec:	2d0c      	cmp	r5, #12
 800f4ee:	bf38      	it	cc
 800f4f0:	250c      	movcc	r5, #12
 800f4f2:	2d00      	cmp	r5, #0
 800f4f4:	4606      	mov	r6, r0
 800f4f6:	db01      	blt.n	800f4fc <_malloc_r+0x1c>
 800f4f8:	42a9      	cmp	r1, r5
 800f4fa:	d904      	bls.n	800f506 <_malloc_r+0x26>
 800f4fc:	230c      	movs	r3, #12
 800f4fe:	6033      	str	r3, [r6, #0]
 800f500:	2000      	movs	r0, #0
 800f502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f506:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f5dc <_malloc_r+0xfc>
 800f50a:	f000 f915 	bl	800f738 <__malloc_lock>
 800f50e:	f8d8 3000 	ldr.w	r3, [r8]
 800f512:	461c      	mov	r4, r3
 800f514:	bb44      	cbnz	r4, 800f568 <_malloc_r+0x88>
 800f516:	4629      	mov	r1, r5
 800f518:	4630      	mov	r0, r6
 800f51a:	f7ff ffbf 	bl	800f49c <sbrk_aligned>
 800f51e:	1c43      	adds	r3, r0, #1
 800f520:	4604      	mov	r4, r0
 800f522:	d158      	bne.n	800f5d6 <_malloc_r+0xf6>
 800f524:	f8d8 4000 	ldr.w	r4, [r8]
 800f528:	4627      	mov	r7, r4
 800f52a:	2f00      	cmp	r7, #0
 800f52c:	d143      	bne.n	800f5b6 <_malloc_r+0xd6>
 800f52e:	2c00      	cmp	r4, #0
 800f530:	d04b      	beq.n	800f5ca <_malloc_r+0xea>
 800f532:	6823      	ldr	r3, [r4, #0]
 800f534:	4639      	mov	r1, r7
 800f536:	4630      	mov	r0, r6
 800f538:	eb04 0903 	add.w	r9, r4, r3
 800f53c:	f000 fd4a 	bl	800ffd4 <_sbrk_r>
 800f540:	4581      	cmp	r9, r0
 800f542:	d142      	bne.n	800f5ca <_malloc_r+0xea>
 800f544:	6821      	ldr	r1, [r4, #0]
 800f546:	1a6d      	subs	r5, r5, r1
 800f548:	4629      	mov	r1, r5
 800f54a:	4630      	mov	r0, r6
 800f54c:	f7ff ffa6 	bl	800f49c <sbrk_aligned>
 800f550:	3001      	adds	r0, #1
 800f552:	d03a      	beq.n	800f5ca <_malloc_r+0xea>
 800f554:	6823      	ldr	r3, [r4, #0]
 800f556:	442b      	add	r3, r5
 800f558:	6023      	str	r3, [r4, #0]
 800f55a:	f8d8 3000 	ldr.w	r3, [r8]
 800f55e:	685a      	ldr	r2, [r3, #4]
 800f560:	bb62      	cbnz	r2, 800f5bc <_malloc_r+0xdc>
 800f562:	f8c8 7000 	str.w	r7, [r8]
 800f566:	e00f      	b.n	800f588 <_malloc_r+0xa8>
 800f568:	6822      	ldr	r2, [r4, #0]
 800f56a:	1b52      	subs	r2, r2, r5
 800f56c:	d420      	bmi.n	800f5b0 <_malloc_r+0xd0>
 800f56e:	2a0b      	cmp	r2, #11
 800f570:	d917      	bls.n	800f5a2 <_malloc_r+0xc2>
 800f572:	1961      	adds	r1, r4, r5
 800f574:	42a3      	cmp	r3, r4
 800f576:	6025      	str	r5, [r4, #0]
 800f578:	bf18      	it	ne
 800f57a:	6059      	strne	r1, [r3, #4]
 800f57c:	6863      	ldr	r3, [r4, #4]
 800f57e:	bf08      	it	eq
 800f580:	f8c8 1000 	streq.w	r1, [r8]
 800f584:	5162      	str	r2, [r4, r5]
 800f586:	604b      	str	r3, [r1, #4]
 800f588:	4630      	mov	r0, r6
 800f58a:	f000 f8db 	bl	800f744 <__malloc_unlock>
 800f58e:	f104 000b 	add.w	r0, r4, #11
 800f592:	1d23      	adds	r3, r4, #4
 800f594:	f020 0007 	bic.w	r0, r0, #7
 800f598:	1ac2      	subs	r2, r0, r3
 800f59a:	bf1c      	itt	ne
 800f59c:	1a1b      	subne	r3, r3, r0
 800f59e:	50a3      	strne	r3, [r4, r2]
 800f5a0:	e7af      	b.n	800f502 <_malloc_r+0x22>
 800f5a2:	6862      	ldr	r2, [r4, #4]
 800f5a4:	42a3      	cmp	r3, r4
 800f5a6:	bf0c      	ite	eq
 800f5a8:	f8c8 2000 	streq.w	r2, [r8]
 800f5ac:	605a      	strne	r2, [r3, #4]
 800f5ae:	e7eb      	b.n	800f588 <_malloc_r+0xa8>
 800f5b0:	4623      	mov	r3, r4
 800f5b2:	6864      	ldr	r4, [r4, #4]
 800f5b4:	e7ae      	b.n	800f514 <_malloc_r+0x34>
 800f5b6:	463c      	mov	r4, r7
 800f5b8:	687f      	ldr	r7, [r7, #4]
 800f5ba:	e7b6      	b.n	800f52a <_malloc_r+0x4a>
 800f5bc:	461a      	mov	r2, r3
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	42a3      	cmp	r3, r4
 800f5c2:	d1fb      	bne.n	800f5bc <_malloc_r+0xdc>
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	6053      	str	r3, [r2, #4]
 800f5c8:	e7de      	b.n	800f588 <_malloc_r+0xa8>
 800f5ca:	230c      	movs	r3, #12
 800f5cc:	6033      	str	r3, [r6, #0]
 800f5ce:	4630      	mov	r0, r6
 800f5d0:	f000 f8b8 	bl	800f744 <__malloc_unlock>
 800f5d4:	e794      	b.n	800f500 <_malloc_r+0x20>
 800f5d6:	6005      	str	r5, [r0, #0]
 800f5d8:	e7d6      	b.n	800f588 <_malloc_r+0xa8>
 800f5da:	bf00      	nop
 800f5dc:	20004e14 	.word	0x20004e14

0800f5e0 <__sflush_r>:
 800f5e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e8:	0716      	lsls	r6, r2, #28
 800f5ea:	4605      	mov	r5, r0
 800f5ec:	460c      	mov	r4, r1
 800f5ee:	d454      	bmi.n	800f69a <__sflush_r+0xba>
 800f5f0:	684b      	ldr	r3, [r1, #4]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	dc02      	bgt.n	800f5fc <__sflush_r+0x1c>
 800f5f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	dd48      	ble.n	800f68e <__sflush_r+0xae>
 800f5fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5fe:	2e00      	cmp	r6, #0
 800f600:	d045      	beq.n	800f68e <__sflush_r+0xae>
 800f602:	2300      	movs	r3, #0
 800f604:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f608:	682f      	ldr	r7, [r5, #0]
 800f60a:	6a21      	ldr	r1, [r4, #32]
 800f60c:	602b      	str	r3, [r5, #0]
 800f60e:	d030      	beq.n	800f672 <__sflush_r+0x92>
 800f610:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f612:	89a3      	ldrh	r3, [r4, #12]
 800f614:	0759      	lsls	r1, r3, #29
 800f616:	d505      	bpl.n	800f624 <__sflush_r+0x44>
 800f618:	6863      	ldr	r3, [r4, #4]
 800f61a:	1ad2      	subs	r2, r2, r3
 800f61c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f61e:	b10b      	cbz	r3, 800f624 <__sflush_r+0x44>
 800f620:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f622:	1ad2      	subs	r2, r2, r3
 800f624:	2300      	movs	r3, #0
 800f626:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f628:	6a21      	ldr	r1, [r4, #32]
 800f62a:	4628      	mov	r0, r5
 800f62c:	47b0      	blx	r6
 800f62e:	1c43      	adds	r3, r0, #1
 800f630:	89a3      	ldrh	r3, [r4, #12]
 800f632:	d106      	bne.n	800f642 <__sflush_r+0x62>
 800f634:	6829      	ldr	r1, [r5, #0]
 800f636:	291d      	cmp	r1, #29
 800f638:	d82b      	bhi.n	800f692 <__sflush_r+0xb2>
 800f63a:	4a2a      	ldr	r2, [pc, #168]	@ (800f6e4 <__sflush_r+0x104>)
 800f63c:	410a      	asrs	r2, r1
 800f63e:	07d6      	lsls	r6, r2, #31
 800f640:	d427      	bmi.n	800f692 <__sflush_r+0xb2>
 800f642:	2200      	movs	r2, #0
 800f644:	6062      	str	r2, [r4, #4]
 800f646:	04d9      	lsls	r1, r3, #19
 800f648:	6922      	ldr	r2, [r4, #16]
 800f64a:	6022      	str	r2, [r4, #0]
 800f64c:	d504      	bpl.n	800f658 <__sflush_r+0x78>
 800f64e:	1c42      	adds	r2, r0, #1
 800f650:	d101      	bne.n	800f656 <__sflush_r+0x76>
 800f652:	682b      	ldr	r3, [r5, #0]
 800f654:	b903      	cbnz	r3, 800f658 <__sflush_r+0x78>
 800f656:	6560      	str	r0, [r4, #84]	@ 0x54
 800f658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f65a:	602f      	str	r7, [r5, #0]
 800f65c:	b1b9      	cbz	r1, 800f68e <__sflush_r+0xae>
 800f65e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f662:	4299      	cmp	r1, r3
 800f664:	d002      	beq.n	800f66c <__sflush_r+0x8c>
 800f666:	4628      	mov	r0, r5
 800f668:	f7ff fd6e 	bl	800f148 <_free_r>
 800f66c:	2300      	movs	r3, #0
 800f66e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f670:	e00d      	b.n	800f68e <__sflush_r+0xae>
 800f672:	2301      	movs	r3, #1
 800f674:	4628      	mov	r0, r5
 800f676:	47b0      	blx	r6
 800f678:	4602      	mov	r2, r0
 800f67a:	1c50      	adds	r0, r2, #1
 800f67c:	d1c9      	bne.n	800f612 <__sflush_r+0x32>
 800f67e:	682b      	ldr	r3, [r5, #0]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d0c6      	beq.n	800f612 <__sflush_r+0x32>
 800f684:	2b1d      	cmp	r3, #29
 800f686:	d001      	beq.n	800f68c <__sflush_r+0xac>
 800f688:	2b16      	cmp	r3, #22
 800f68a:	d11e      	bne.n	800f6ca <__sflush_r+0xea>
 800f68c:	602f      	str	r7, [r5, #0]
 800f68e:	2000      	movs	r0, #0
 800f690:	e022      	b.n	800f6d8 <__sflush_r+0xf8>
 800f692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f696:	b21b      	sxth	r3, r3
 800f698:	e01b      	b.n	800f6d2 <__sflush_r+0xf2>
 800f69a:	690f      	ldr	r7, [r1, #16]
 800f69c:	2f00      	cmp	r7, #0
 800f69e:	d0f6      	beq.n	800f68e <__sflush_r+0xae>
 800f6a0:	0793      	lsls	r3, r2, #30
 800f6a2:	680e      	ldr	r6, [r1, #0]
 800f6a4:	bf08      	it	eq
 800f6a6:	694b      	ldreq	r3, [r1, #20]
 800f6a8:	600f      	str	r7, [r1, #0]
 800f6aa:	bf18      	it	ne
 800f6ac:	2300      	movne	r3, #0
 800f6ae:	eba6 0807 	sub.w	r8, r6, r7
 800f6b2:	608b      	str	r3, [r1, #8]
 800f6b4:	f1b8 0f00 	cmp.w	r8, #0
 800f6b8:	dde9      	ble.n	800f68e <__sflush_r+0xae>
 800f6ba:	6a21      	ldr	r1, [r4, #32]
 800f6bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f6be:	4643      	mov	r3, r8
 800f6c0:	463a      	mov	r2, r7
 800f6c2:	4628      	mov	r0, r5
 800f6c4:	47b0      	blx	r6
 800f6c6:	2800      	cmp	r0, #0
 800f6c8:	dc08      	bgt.n	800f6dc <__sflush_r+0xfc>
 800f6ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6d2:	81a3      	strh	r3, [r4, #12]
 800f6d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6dc:	4407      	add	r7, r0
 800f6de:	eba8 0800 	sub.w	r8, r8, r0
 800f6e2:	e7e7      	b.n	800f6b4 <__sflush_r+0xd4>
 800f6e4:	dfbffffe 	.word	0xdfbffffe

0800f6e8 <_fflush_r>:
 800f6e8:	b538      	push	{r3, r4, r5, lr}
 800f6ea:	690b      	ldr	r3, [r1, #16]
 800f6ec:	4605      	mov	r5, r0
 800f6ee:	460c      	mov	r4, r1
 800f6f0:	b913      	cbnz	r3, 800f6f8 <_fflush_r+0x10>
 800f6f2:	2500      	movs	r5, #0
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	bd38      	pop	{r3, r4, r5, pc}
 800f6f8:	b118      	cbz	r0, 800f702 <_fflush_r+0x1a>
 800f6fa:	6a03      	ldr	r3, [r0, #32]
 800f6fc:	b90b      	cbnz	r3, 800f702 <_fflush_r+0x1a>
 800f6fe:	f7fe fdc9 	bl	800e294 <__sinit>
 800f702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d0f3      	beq.n	800f6f2 <_fflush_r+0xa>
 800f70a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f70c:	07d0      	lsls	r0, r2, #31
 800f70e:	d404      	bmi.n	800f71a <_fflush_r+0x32>
 800f710:	0599      	lsls	r1, r3, #22
 800f712:	d402      	bmi.n	800f71a <_fflush_r+0x32>
 800f714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f716:	f7fe feba 	bl	800e48e <__retarget_lock_acquire_recursive>
 800f71a:	4628      	mov	r0, r5
 800f71c:	4621      	mov	r1, r4
 800f71e:	f7ff ff5f 	bl	800f5e0 <__sflush_r>
 800f722:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f724:	07da      	lsls	r2, r3, #31
 800f726:	4605      	mov	r5, r0
 800f728:	d4e4      	bmi.n	800f6f4 <_fflush_r+0xc>
 800f72a:	89a3      	ldrh	r3, [r4, #12]
 800f72c:	059b      	lsls	r3, r3, #22
 800f72e:	d4e1      	bmi.n	800f6f4 <_fflush_r+0xc>
 800f730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f732:	f7fe fead 	bl	800e490 <__retarget_lock_release_recursive>
 800f736:	e7dd      	b.n	800f6f4 <_fflush_r+0xc>

0800f738 <__malloc_lock>:
 800f738:	4801      	ldr	r0, [pc, #4]	@ (800f740 <__malloc_lock+0x8>)
 800f73a:	f7fe bea8 	b.w	800e48e <__retarget_lock_acquire_recursive>
 800f73e:	bf00      	nop
 800f740:	20004e0c 	.word	0x20004e0c

0800f744 <__malloc_unlock>:
 800f744:	4801      	ldr	r0, [pc, #4]	@ (800f74c <__malloc_unlock+0x8>)
 800f746:	f7fe bea3 	b.w	800e490 <__retarget_lock_release_recursive>
 800f74a:	bf00      	nop
 800f74c:	20004e0c 	.word	0x20004e0c

0800f750 <_Balloc>:
 800f750:	b570      	push	{r4, r5, r6, lr}
 800f752:	69c6      	ldr	r6, [r0, #28]
 800f754:	4604      	mov	r4, r0
 800f756:	460d      	mov	r5, r1
 800f758:	b976      	cbnz	r6, 800f778 <_Balloc+0x28>
 800f75a:	2010      	movs	r0, #16
 800f75c:	f7ff fe96 	bl	800f48c <malloc>
 800f760:	4602      	mov	r2, r0
 800f762:	61e0      	str	r0, [r4, #28]
 800f764:	b920      	cbnz	r0, 800f770 <_Balloc+0x20>
 800f766:	4b18      	ldr	r3, [pc, #96]	@ (800f7c8 <_Balloc+0x78>)
 800f768:	4818      	ldr	r0, [pc, #96]	@ (800f7cc <_Balloc+0x7c>)
 800f76a:	216b      	movs	r1, #107	@ 0x6b
 800f76c:	f000 fc54 	bl	8010018 <__assert_func>
 800f770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f774:	6006      	str	r6, [r0, #0]
 800f776:	60c6      	str	r6, [r0, #12]
 800f778:	69e6      	ldr	r6, [r4, #28]
 800f77a:	68f3      	ldr	r3, [r6, #12]
 800f77c:	b183      	cbz	r3, 800f7a0 <_Balloc+0x50>
 800f77e:	69e3      	ldr	r3, [r4, #28]
 800f780:	68db      	ldr	r3, [r3, #12]
 800f782:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f786:	b9b8      	cbnz	r0, 800f7b8 <_Balloc+0x68>
 800f788:	2101      	movs	r1, #1
 800f78a:	fa01 f605 	lsl.w	r6, r1, r5
 800f78e:	1d72      	adds	r2, r6, #5
 800f790:	0092      	lsls	r2, r2, #2
 800f792:	4620      	mov	r0, r4
 800f794:	f000 fc5e 	bl	8010054 <_calloc_r>
 800f798:	b160      	cbz	r0, 800f7b4 <_Balloc+0x64>
 800f79a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f79e:	e00e      	b.n	800f7be <_Balloc+0x6e>
 800f7a0:	2221      	movs	r2, #33	@ 0x21
 800f7a2:	2104      	movs	r1, #4
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	f000 fc55 	bl	8010054 <_calloc_r>
 800f7aa:	69e3      	ldr	r3, [r4, #28]
 800f7ac:	60f0      	str	r0, [r6, #12]
 800f7ae:	68db      	ldr	r3, [r3, #12]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d1e4      	bne.n	800f77e <_Balloc+0x2e>
 800f7b4:	2000      	movs	r0, #0
 800f7b6:	bd70      	pop	{r4, r5, r6, pc}
 800f7b8:	6802      	ldr	r2, [r0, #0]
 800f7ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f7be:	2300      	movs	r3, #0
 800f7c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f7c4:	e7f7      	b.n	800f7b6 <_Balloc+0x66>
 800f7c6:	bf00      	nop
 800f7c8:	08010c61 	.word	0x08010c61
 800f7cc:	08010cf2 	.word	0x08010cf2

0800f7d0 <_Bfree>:
 800f7d0:	b570      	push	{r4, r5, r6, lr}
 800f7d2:	69c6      	ldr	r6, [r0, #28]
 800f7d4:	4605      	mov	r5, r0
 800f7d6:	460c      	mov	r4, r1
 800f7d8:	b976      	cbnz	r6, 800f7f8 <_Bfree+0x28>
 800f7da:	2010      	movs	r0, #16
 800f7dc:	f7ff fe56 	bl	800f48c <malloc>
 800f7e0:	4602      	mov	r2, r0
 800f7e2:	61e8      	str	r0, [r5, #28]
 800f7e4:	b920      	cbnz	r0, 800f7f0 <_Bfree+0x20>
 800f7e6:	4b09      	ldr	r3, [pc, #36]	@ (800f80c <_Bfree+0x3c>)
 800f7e8:	4809      	ldr	r0, [pc, #36]	@ (800f810 <_Bfree+0x40>)
 800f7ea:	218f      	movs	r1, #143	@ 0x8f
 800f7ec:	f000 fc14 	bl	8010018 <__assert_func>
 800f7f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7f4:	6006      	str	r6, [r0, #0]
 800f7f6:	60c6      	str	r6, [r0, #12]
 800f7f8:	b13c      	cbz	r4, 800f80a <_Bfree+0x3a>
 800f7fa:	69eb      	ldr	r3, [r5, #28]
 800f7fc:	6862      	ldr	r2, [r4, #4]
 800f7fe:	68db      	ldr	r3, [r3, #12]
 800f800:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f804:	6021      	str	r1, [r4, #0]
 800f806:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f80a:	bd70      	pop	{r4, r5, r6, pc}
 800f80c:	08010c61 	.word	0x08010c61
 800f810:	08010cf2 	.word	0x08010cf2

0800f814 <__multadd>:
 800f814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f818:	690d      	ldr	r5, [r1, #16]
 800f81a:	4607      	mov	r7, r0
 800f81c:	460c      	mov	r4, r1
 800f81e:	461e      	mov	r6, r3
 800f820:	f101 0c14 	add.w	ip, r1, #20
 800f824:	2000      	movs	r0, #0
 800f826:	f8dc 3000 	ldr.w	r3, [ip]
 800f82a:	b299      	uxth	r1, r3
 800f82c:	fb02 6101 	mla	r1, r2, r1, r6
 800f830:	0c1e      	lsrs	r6, r3, #16
 800f832:	0c0b      	lsrs	r3, r1, #16
 800f834:	fb02 3306 	mla	r3, r2, r6, r3
 800f838:	b289      	uxth	r1, r1
 800f83a:	3001      	adds	r0, #1
 800f83c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f840:	4285      	cmp	r5, r0
 800f842:	f84c 1b04 	str.w	r1, [ip], #4
 800f846:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f84a:	dcec      	bgt.n	800f826 <__multadd+0x12>
 800f84c:	b30e      	cbz	r6, 800f892 <__multadd+0x7e>
 800f84e:	68a3      	ldr	r3, [r4, #8]
 800f850:	42ab      	cmp	r3, r5
 800f852:	dc19      	bgt.n	800f888 <__multadd+0x74>
 800f854:	6861      	ldr	r1, [r4, #4]
 800f856:	4638      	mov	r0, r7
 800f858:	3101      	adds	r1, #1
 800f85a:	f7ff ff79 	bl	800f750 <_Balloc>
 800f85e:	4680      	mov	r8, r0
 800f860:	b928      	cbnz	r0, 800f86e <__multadd+0x5a>
 800f862:	4602      	mov	r2, r0
 800f864:	4b0c      	ldr	r3, [pc, #48]	@ (800f898 <__multadd+0x84>)
 800f866:	480d      	ldr	r0, [pc, #52]	@ (800f89c <__multadd+0x88>)
 800f868:	21ba      	movs	r1, #186	@ 0xba
 800f86a:	f000 fbd5 	bl	8010018 <__assert_func>
 800f86e:	6922      	ldr	r2, [r4, #16]
 800f870:	3202      	adds	r2, #2
 800f872:	f104 010c 	add.w	r1, r4, #12
 800f876:	0092      	lsls	r2, r2, #2
 800f878:	300c      	adds	r0, #12
 800f87a:	f7fe fe0a 	bl	800e492 <memcpy>
 800f87e:	4621      	mov	r1, r4
 800f880:	4638      	mov	r0, r7
 800f882:	f7ff ffa5 	bl	800f7d0 <_Bfree>
 800f886:	4644      	mov	r4, r8
 800f888:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f88c:	3501      	adds	r5, #1
 800f88e:	615e      	str	r6, [r3, #20]
 800f890:	6125      	str	r5, [r4, #16]
 800f892:	4620      	mov	r0, r4
 800f894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f898:	08010cd0 	.word	0x08010cd0
 800f89c:	08010cf2 	.word	0x08010cf2

0800f8a0 <__hi0bits>:
 800f8a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	bf36      	itet	cc
 800f8a8:	0403      	lslcc	r3, r0, #16
 800f8aa:	2000      	movcs	r0, #0
 800f8ac:	2010      	movcc	r0, #16
 800f8ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f8b2:	bf3c      	itt	cc
 800f8b4:	021b      	lslcc	r3, r3, #8
 800f8b6:	3008      	addcc	r0, #8
 800f8b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f8bc:	bf3c      	itt	cc
 800f8be:	011b      	lslcc	r3, r3, #4
 800f8c0:	3004      	addcc	r0, #4
 800f8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8c6:	bf3c      	itt	cc
 800f8c8:	009b      	lslcc	r3, r3, #2
 800f8ca:	3002      	addcc	r0, #2
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	db05      	blt.n	800f8dc <__hi0bits+0x3c>
 800f8d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f8d4:	f100 0001 	add.w	r0, r0, #1
 800f8d8:	bf08      	it	eq
 800f8da:	2020      	moveq	r0, #32
 800f8dc:	4770      	bx	lr

0800f8de <__lo0bits>:
 800f8de:	6803      	ldr	r3, [r0, #0]
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	f013 0007 	ands.w	r0, r3, #7
 800f8e6:	d00b      	beq.n	800f900 <__lo0bits+0x22>
 800f8e8:	07d9      	lsls	r1, r3, #31
 800f8ea:	d421      	bmi.n	800f930 <__lo0bits+0x52>
 800f8ec:	0798      	lsls	r0, r3, #30
 800f8ee:	bf49      	itett	mi
 800f8f0:	085b      	lsrmi	r3, r3, #1
 800f8f2:	089b      	lsrpl	r3, r3, #2
 800f8f4:	2001      	movmi	r0, #1
 800f8f6:	6013      	strmi	r3, [r2, #0]
 800f8f8:	bf5c      	itt	pl
 800f8fa:	6013      	strpl	r3, [r2, #0]
 800f8fc:	2002      	movpl	r0, #2
 800f8fe:	4770      	bx	lr
 800f900:	b299      	uxth	r1, r3
 800f902:	b909      	cbnz	r1, 800f908 <__lo0bits+0x2a>
 800f904:	0c1b      	lsrs	r3, r3, #16
 800f906:	2010      	movs	r0, #16
 800f908:	b2d9      	uxtb	r1, r3
 800f90a:	b909      	cbnz	r1, 800f910 <__lo0bits+0x32>
 800f90c:	3008      	adds	r0, #8
 800f90e:	0a1b      	lsrs	r3, r3, #8
 800f910:	0719      	lsls	r1, r3, #28
 800f912:	bf04      	itt	eq
 800f914:	091b      	lsreq	r3, r3, #4
 800f916:	3004      	addeq	r0, #4
 800f918:	0799      	lsls	r1, r3, #30
 800f91a:	bf04      	itt	eq
 800f91c:	089b      	lsreq	r3, r3, #2
 800f91e:	3002      	addeq	r0, #2
 800f920:	07d9      	lsls	r1, r3, #31
 800f922:	d403      	bmi.n	800f92c <__lo0bits+0x4e>
 800f924:	085b      	lsrs	r3, r3, #1
 800f926:	f100 0001 	add.w	r0, r0, #1
 800f92a:	d003      	beq.n	800f934 <__lo0bits+0x56>
 800f92c:	6013      	str	r3, [r2, #0]
 800f92e:	4770      	bx	lr
 800f930:	2000      	movs	r0, #0
 800f932:	4770      	bx	lr
 800f934:	2020      	movs	r0, #32
 800f936:	4770      	bx	lr

0800f938 <__i2b>:
 800f938:	b510      	push	{r4, lr}
 800f93a:	460c      	mov	r4, r1
 800f93c:	2101      	movs	r1, #1
 800f93e:	f7ff ff07 	bl	800f750 <_Balloc>
 800f942:	4602      	mov	r2, r0
 800f944:	b928      	cbnz	r0, 800f952 <__i2b+0x1a>
 800f946:	4b05      	ldr	r3, [pc, #20]	@ (800f95c <__i2b+0x24>)
 800f948:	4805      	ldr	r0, [pc, #20]	@ (800f960 <__i2b+0x28>)
 800f94a:	f240 1145 	movw	r1, #325	@ 0x145
 800f94e:	f000 fb63 	bl	8010018 <__assert_func>
 800f952:	2301      	movs	r3, #1
 800f954:	6144      	str	r4, [r0, #20]
 800f956:	6103      	str	r3, [r0, #16]
 800f958:	bd10      	pop	{r4, pc}
 800f95a:	bf00      	nop
 800f95c:	08010cd0 	.word	0x08010cd0
 800f960:	08010cf2 	.word	0x08010cf2

0800f964 <__multiply>:
 800f964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f968:	4614      	mov	r4, r2
 800f96a:	690a      	ldr	r2, [r1, #16]
 800f96c:	6923      	ldr	r3, [r4, #16]
 800f96e:	429a      	cmp	r2, r3
 800f970:	bfa8      	it	ge
 800f972:	4623      	movge	r3, r4
 800f974:	460f      	mov	r7, r1
 800f976:	bfa4      	itt	ge
 800f978:	460c      	movge	r4, r1
 800f97a:	461f      	movge	r7, r3
 800f97c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f980:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f984:	68a3      	ldr	r3, [r4, #8]
 800f986:	6861      	ldr	r1, [r4, #4]
 800f988:	eb0a 0609 	add.w	r6, sl, r9
 800f98c:	42b3      	cmp	r3, r6
 800f98e:	b085      	sub	sp, #20
 800f990:	bfb8      	it	lt
 800f992:	3101      	addlt	r1, #1
 800f994:	f7ff fedc 	bl	800f750 <_Balloc>
 800f998:	b930      	cbnz	r0, 800f9a8 <__multiply+0x44>
 800f99a:	4602      	mov	r2, r0
 800f99c:	4b44      	ldr	r3, [pc, #272]	@ (800fab0 <__multiply+0x14c>)
 800f99e:	4845      	ldr	r0, [pc, #276]	@ (800fab4 <__multiply+0x150>)
 800f9a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f9a4:	f000 fb38 	bl	8010018 <__assert_func>
 800f9a8:	f100 0514 	add.w	r5, r0, #20
 800f9ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f9b0:	462b      	mov	r3, r5
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	4543      	cmp	r3, r8
 800f9b6:	d321      	bcc.n	800f9fc <__multiply+0x98>
 800f9b8:	f107 0114 	add.w	r1, r7, #20
 800f9bc:	f104 0214 	add.w	r2, r4, #20
 800f9c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f9c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f9c8:	9302      	str	r3, [sp, #8]
 800f9ca:	1b13      	subs	r3, r2, r4
 800f9cc:	3b15      	subs	r3, #21
 800f9ce:	f023 0303 	bic.w	r3, r3, #3
 800f9d2:	3304      	adds	r3, #4
 800f9d4:	f104 0715 	add.w	r7, r4, #21
 800f9d8:	42ba      	cmp	r2, r7
 800f9da:	bf38      	it	cc
 800f9dc:	2304      	movcc	r3, #4
 800f9de:	9301      	str	r3, [sp, #4]
 800f9e0:	9b02      	ldr	r3, [sp, #8]
 800f9e2:	9103      	str	r1, [sp, #12]
 800f9e4:	428b      	cmp	r3, r1
 800f9e6:	d80c      	bhi.n	800fa02 <__multiply+0x9e>
 800f9e8:	2e00      	cmp	r6, #0
 800f9ea:	dd03      	ble.n	800f9f4 <__multiply+0x90>
 800f9ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d05b      	beq.n	800faac <__multiply+0x148>
 800f9f4:	6106      	str	r6, [r0, #16]
 800f9f6:	b005      	add	sp, #20
 800f9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9fc:	f843 2b04 	str.w	r2, [r3], #4
 800fa00:	e7d8      	b.n	800f9b4 <__multiply+0x50>
 800fa02:	f8b1 a000 	ldrh.w	sl, [r1]
 800fa06:	f1ba 0f00 	cmp.w	sl, #0
 800fa0a:	d024      	beq.n	800fa56 <__multiply+0xf2>
 800fa0c:	f104 0e14 	add.w	lr, r4, #20
 800fa10:	46a9      	mov	r9, r5
 800fa12:	f04f 0c00 	mov.w	ip, #0
 800fa16:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fa1a:	f8d9 3000 	ldr.w	r3, [r9]
 800fa1e:	fa1f fb87 	uxth.w	fp, r7
 800fa22:	b29b      	uxth	r3, r3
 800fa24:	fb0a 330b 	mla	r3, sl, fp, r3
 800fa28:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fa2c:	f8d9 7000 	ldr.w	r7, [r9]
 800fa30:	4463      	add	r3, ip
 800fa32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fa36:	fb0a c70b 	mla	r7, sl, fp, ip
 800fa3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fa44:	4572      	cmp	r2, lr
 800fa46:	f849 3b04 	str.w	r3, [r9], #4
 800fa4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fa4e:	d8e2      	bhi.n	800fa16 <__multiply+0xb2>
 800fa50:	9b01      	ldr	r3, [sp, #4]
 800fa52:	f845 c003 	str.w	ip, [r5, r3]
 800fa56:	9b03      	ldr	r3, [sp, #12]
 800fa58:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fa5c:	3104      	adds	r1, #4
 800fa5e:	f1b9 0f00 	cmp.w	r9, #0
 800fa62:	d021      	beq.n	800faa8 <__multiply+0x144>
 800fa64:	682b      	ldr	r3, [r5, #0]
 800fa66:	f104 0c14 	add.w	ip, r4, #20
 800fa6a:	46ae      	mov	lr, r5
 800fa6c:	f04f 0a00 	mov.w	sl, #0
 800fa70:	f8bc b000 	ldrh.w	fp, [ip]
 800fa74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fa78:	fb09 770b 	mla	r7, r9, fp, r7
 800fa7c:	4457      	add	r7, sl
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fa84:	f84e 3b04 	str.w	r3, [lr], #4
 800fa88:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fa8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa90:	f8be 3000 	ldrh.w	r3, [lr]
 800fa94:	fb09 330a 	mla	r3, r9, sl, r3
 800fa98:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fa9c:	4562      	cmp	r2, ip
 800fa9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800faa2:	d8e5      	bhi.n	800fa70 <__multiply+0x10c>
 800faa4:	9f01      	ldr	r7, [sp, #4]
 800faa6:	51eb      	str	r3, [r5, r7]
 800faa8:	3504      	adds	r5, #4
 800faaa:	e799      	b.n	800f9e0 <__multiply+0x7c>
 800faac:	3e01      	subs	r6, #1
 800faae:	e79b      	b.n	800f9e8 <__multiply+0x84>
 800fab0:	08010cd0 	.word	0x08010cd0
 800fab4:	08010cf2 	.word	0x08010cf2

0800fab8 <__pow5mult>:
 800fab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fabc:	4615      	mov	r5, r2
 800fabe:	f012 0203 	ands.w	r2, r2, #3
 800fac2:	4607      	mov	r7, r0
 800fac4:	460e      	mov	r6, r1
 800fac6:	d007      	beq.n	800fad8 <__pow5mult+0x20>
 800fac8:	4c25      	ldr	r4, [pc, #148]	@ (800fb60 <__pow5mult+0xa8>)
 800faca:	3a01      	subs	r2, #1
 800facc:	2300      	movs	r3, #0
 800face:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fad2:	f7ff fe9f 	bl	800f814 <__multadd>
 800fad6:	4606      	mov	r6, r0
 800fad8:	10ad      	asrs	r5, r5, #2
 800fada:	d03d      	beq.n	800fb58 <__pow5mult+0xa0>
 800fadc:	69fc      	ldr	r4, [r7, #28]
 800fade:	b97c      	cbnz	r4, 800fb00 <__pow5mult+0x48>
 800fae0:	2010      	movs	r0, #16
 800fae2:	f7ff fcd3 	bl	800f48c <malloc>
 800fae6:	4602      	mov	r2, r0
 800fae8:	61f8      	str	r0, [r7, #28]
 800faea:	b928      	cbnz	r0, 800faf8 <__pow5mult+0x40>
 800faec:	4b1d      	ldr	r3, [pc, #116]	@ (800fb64 <__pow5mult+0xac>)
 800faee:	481e      	ldr	r0, [pc, #120]	@ (800fb68 <__pow5mult+0xb0>)
 800faf0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800faf4:	f000 fa90 	bl	8010018 <__assert_func>
 800faf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fafc:	6004      	str	r4, [r0, #0]
 800fafe:	60c4      	str	r4, [r0, #12]
 800fb00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fb04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb08:	b94c      	cbnz	r4, 800fb1e <__pow5mult+0x66>
 800fb0a:	f240 2171 	movw	r1, #625	@ 0x271
 800fb0e:	4638      	mov	r0, r7
 800fb10:	f7ff ff12 	bl	800f938 <__i2b>
 800fb14:	2300      	movs	r3, #0
 800fb16:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb1a:	4604      	mov	r4, r0
 800fb1c:	6003      	str	r3, [r0, #0]
 800fb1e:	f04f 0900 	mov.w	r9, #0
 800fb22:	07eb      	lsls	r3, r5, #31
 800fb24:	d50a      	bpl.n	800fb3c <__pow5mult+0x84>
 800fb26:	4631      	mov	r1, r6
 800fb28:	4622      	mov	r2, r4
 800fb2a:	4638      	mov	r0, r7
 800fb2c:	f7ff ff1a 	bl	800f964 <__multiply>
 800fb30:	4631      	mov	r1, r6
 800fb32:	4680      	mov	r8, r0
 800fb34:	4638      	mov	r0, r7
 800fb36:	f7ff fe4b 	bl	800f7d0 <_Bfree>
 800fb3a:	4646      	mov	r6, r8
 800fb3c:	106d      	asrs	r5, r5, #1
 800fb3e:	d00b      	beq.n	800fb58 <__pow5mult+0xa0>
 800fb40:	6820      	ldr	r0, [r4, #0]
 800fb42:	b938      	cbnz	r0, 800fb54 <__pow5mult+0x9c>
 800fb44:	4622      	mov	r2, r4
 800fb46:	4621      	mov	r1, r4
 800fb48:	4638      	mov	r0, r7
 800fb4a:	f7ff ff0b 	bl	800f964 <__multiply>
 800fb4e:	6020      	str	r0, [r4, #0]
 800fb50:	f8c0 9000 	str.w	r9, [r0]
 800fb54:	4604      	mov	r4, r0
 800fb56:	e7e4      	b.n	800fb22 <__pow5mult+0x6a>
 800fb58:	4630      	mov	r0, r6
 800fb5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb5e:	bf00      	nop
 800fb60:	08010d4c 	.word	0x08010d4c
 800fb64:	08010c61 	.word	0x08010c61
 800fb68:	08010cf2 	.word	0x08010cf2

0800fb6c <__lshift>:
 800fb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb70:	460c      	mov	r4, r1
 800fb72:	6849      	ldr	r1, [r1, #4]
 800fb74:	6923      	ldr	r3, [r4, #16]
 800fb76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb7a:	68a3      	ldr	r3, [r4, #8]
 800fb7c:	4607      	mov	r7, r0
 800fb7e:	4691      	mov	r9, r2
 800fb80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb84:	f108 0601 	add.w	r6, r8, #1
 800fb88:	42b3      	cmp	r3, r6
 800fb8a:	db0b      	blt.n	800fba4 <__lshift+0x38>
 800fb8c:	4638      	mov	r0, r7
 800fb8e:	f7ff fddf 	bl	800f750 <_Balloc>
 800fb92:	4605      	mov	r5, r0
 800fb94:	b948      	cbnz	r0, 800fbaa <__lshift+0x3e>
 800fb96:	4602      	mov	r2, r0
 800fb98:	4b28      	ldr	r3, [pc, #160]	@ (800fc3c <__lshift+0xd0>)
 800fb9a:	4829      	ldr	r0, [pc, #164]	@ (800fc40 <__lshift+0xd4>)
 800fb9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fba0:	f000 fa3a 	bl	8010018 <__assert_func>
 800fba4:	3101      	adds	r1, #1
 800fba6:	005b      	lsls	r3, r3, #1
 800fba8:	e7ee      	b.n	800fb88 <__lshift+0x1c>
 800fbaa:	2300      	movs	r3, #0
 800fbac:	f100 0114 	add.w	r1, r0, #20
 800fbb0:	f100 0210 	add.w	r2, r0, #16
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	4553      	cmp	r3, sl
 800fbb8:	db33      	blt.n	800fc22 <__lshift+0xb6>
 800fbba:	6920      	ldr	r0, [r4, #16]
 800fbbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fbc0:	f104 0314 	add.w	r3, r4, #20
 800fbc4:	f019 091f 	ands.w	r9, r9, #31
 800fbc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fbcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fbd0:	d02b      	beq.n	800fc2a <__lshift+0xbe>
 800fbd2:	f1c9 0e20 	rsb	lr, r9, #32
 800fbd6:	468a      	mov	sl, r1
 800fbd8:	2200      	movs	r2, #0
 800fbda:	6818      	ldr	r0, [r3, #0]
 800fbdc:	fa00 f009 	lsl.w	r0, r0, r9
 800fbe0:	4310      	orrs	r0, r2
 800fbe2:	f84a 0b04 	str.w	r0, [sl], #4
 800fbe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbea:	459c      	cmp	ip, r3
 800fbec:	fa22 f20e 	lsr.w	r2, r2, lr
 800fbf0:	d8f3      	bhi.n	800fbda <__lshift+0x6e>
 800fbf2:	ebac 0304 	sub.w	r3, ip, r4
 800fbf6:	3b15      	subs	r3, #21
 800fbf8:	f023 0303 	bic.w	r3, r3, #3
 800fbfc:	3304      	adds	r3, #4
 800fbfe:	f104 0015 	add.w	r0, r4, #21
 800fc02:	4584      	cmp	ip, r0
 800fc04:	bf38      	it	cc
 800fc06:	2304      	movcc	r3, #4
 800fc08:	50ca      	str	r2, [r1, r3]
 800fc0a:	b10a      	cbz	r2, 800fc10 <__lshift+0xa4>
 800fc0c:	f108 0602 	add.w	r6, r8, #2
 800fc10:	3e01      	subs	r6, #1
 800fc12:	4638      	mov	r0, r7
 800fc14:	612e      	str	r6, [r5, #16]
 800fc16:	4621      	mov	r1, r4
 800fc18:	f7ff fdda 	bl	800f7d0 <_Bfree>
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc22:	f842 0f04 	str.w	r0, [r2, #4]!
 800fc26:	3301      	adds	r3, #1
 800fc28:	e7c5      	b.n	800fbb6 <__lshift+0x4a>
 800fc2a:	3904      	subs	r1, #4
 800fc2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc30:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc34:	459c      	cmp	ip, r3
 800fc36:	d8f9      	bhi.n	800fc2c <__lshift+0xc0>
 800fc38:	e7ea      	b.n	800fc10 <__lshift+0xa4>
 800fc3a:	bf00      	nop
 800fc3c:	08010cd0 	.word	0x08010cd0
 800fc40:	08010cf2 	.word	0x08010cf2

0800fc44 <__mcmp>:
 800fc44:	690a      	ldr	r2, [r1, #16]
 800fc46:	4603      	mov	r3, r0
 800fc48:	6900      	ldr	r0, [r0, #16]
 800fc4a:	1a80      	subs	r0, r0, r2
 800fc4c:	b530      	push	{r4, r5, lr}
 800fc4e:	d10e      	bne.n	800fc6e <__mcmp+0x2a>
 800fc50:	3314      	adds	r3, #20
 800fc52:	3114      	adds	r1, #20
 800fc54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fc58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fc5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fc60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fc64:	4295      	cmp	r5, r2
 800fc66:	d003      	beq.n	800fc70 <__mcmp+0x2c>
 800fc68:	d205      	bcs.n	800fc76 <__mcmp+0x32>
 800fc6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc6e:	bd30      	pop	{r4, r5, pc}
 800fc70:	42a3      	cmp	r3, r4
 800fc72:	d3f3      	bcc.n	800fc5c <__mcmp+0x18>
 800fc74:	e7fb      	b.n	800fc6e <__mcmp+0x2a>
 800fc76:	2001      	movs	r0, #1
 800fc78:	e7f9      	b.n	800fc6e <__mcmp+0x2a>
	...

0800fc7c <__mdiff>:
 800fc7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc80:	4689      	mov	r9, r1
 800fc82:	4606      	mov	r6, r0
 800fc84:	4611      	mov	r1, r2
 800fc86:	4648      	mov	r0, r9
 800fc88:	4614      	mov	r4, r2
 800fc8a:	f7ff ffdb 	bl	800fc44 <__mcmp>
 800fc8e:	1e05      	subs	r5, r0, #0
 800fc90:	d112      	bne.n	800fcb8 <__mdiff+0x3c>
 800fc92:	4629      	mov	r1, r5
 800fc94:	4630      	mov	r0, r6
 800fc96:	f7ff fd5b 	bl	800f750 <_Balloc>
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	b928      	cbnz	r0, 800fcaa <__mdiff+0x2e>
 800fc9e:	4b3f      	ldr	r3, [pc, #252]	@ (800fd9c <__mdiff+0x120>)
 800fca0:	f240 2137 	movw	r1, #567	@ 0x237
 800fca4:	483e      	ldr	r0, [pc, #248]	@ (800fda0 <__mdiff+0x124>)
 800fca6:	f000 f9b7 	bl	8010018 <__assert_func>
 800fcaa:	2301      	movs	r3, #1
 800fcac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fcb0:	4610      	mov	r0, r2
 800fcb2:	b003      	add	sp, #12
 800fcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcb8:	bfbc      	itt	lt
 800fcba:	464b      	movlt	r3, r9
 800fcbc:	46a1      	movlt	r9, r4
 800fcbe:	4630      	mov	r0, r6
 800fcc0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fcc4:	bfba      	itte	lt
 800fcc6:	461c      	movlt	r4, r3
 800fcc8:	2501      	movlt	r5, #1
 800fcca:	2500      	movge	r5, #0
 800fccc:	f7ff fd40 	bl	800f750 <_Balloc>
 800fcd0:	4602      	mov	r2, r0
 800fcd2:	b918      	cbnz	r0, 800fcdc <__mdiff+0x60>
 800fcd4:	4b31      	ldr	r3, [pc, #196]	@ (800fd9c <__mdiff+0x120>)
 800fcd6:	f240 2145 	movw	r1, #581	@ 0x245
 800fcda:	e7e3      	b.n	800fca4 <__mdiff+0x28>
 800fcdc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fce0:	6926      	ldr	r6, [r4, #16]
 800fce2:	60c5      	str	r5, [r0, #12]
 800fce4:	f109 0310 	add.w	r3, r9, #16
 800fce8:	f109 0514 	add.w	r5, r9, #20
 800fcec:	f104 0e14 	add.w	lr, r4, #20
 800fcf0:	f100 0b14 	add.w	fp, r0, #20
 800fcf4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fcf8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fcfc:	9301      	str	r3, [sp, #4]
 800fcfe:	46d9      	mov	r9, fp
 800fd00:	f04f 0c00 	mov.w	ip, #0
 800fd04:	9b01      	ldr	r3, [sp, #4]
 800fd06:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fd0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fd0e:	9301      	str	r3, [sp, #4]
 800fd10:	fa1f f38a 	uxth.w	r3, sl
 800fd14:	4619      	mov	r1, r3
 800fd16:	b283      	uxth	r3, r0
 800fd18:	1acb      	subs	r3, r1, r3
 800fd1a:	0c00      	lsrs	r0, r0, #16
 800fd1c:	4463      	add	r3, ip
 800fd1e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fd22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fd26:	b29b      	uxth	r3, r3
 800fd28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fd2c:	4576      	cmp	r6, lr
 800fd2e:	f849 3b04 	str.w	r3, [r9], #4
 800fd32:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fd36:	d8e5      	bhi.n	800fd04 <__mdiff+0x88>
 800fd38:	1b33      	subs	r3, r6, r4
 800fd3a:	3b15      	subs	r3, #21
 800fd3c:	f023 0303 	bic.w	r3, r3, #3
 800fd40:	3415      	adds	r4, #21
 800fd42:	3304      	adds	r3, #4
 800fd44:	42a6      	cmp	r6, r4
 800fd46:	bf38      	it	cc
 800fd48:	2304      	movcc	r3, #4
 800fd4a:	441d      	add	r5, r3
 800fd4c:	445b      	add	r3, fp
 800fd4e:	461e      	mov	r6, r3
 800fd50:	462c      	mov	r4, r5
 800fd52:	4544      	cmp	r4, r8
 800fd54:	d30e      	bcc.n	800fd74 <__mdiff+0xf8>
 800fd56:	f108 0103 	add.w	r1, r8, #3
 800fd5a:	1b49      	subs	r1, r1, r5
 800fd5c:	f021 0103 	bic.w	r1, r1, #3
 800fd60:	3d03      	subs	r5, #3
 800fd62:	45a8      	cmp	r8, r5
 800fd64:	bf38      	it	cc
 800fd66:	2100      	movcc	r1, #0
 800fd68:	440b      	add	r3, r1
 800fd6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd6e:	b191      	cbz	r1, 800fd96 <__mdiff+0x11a>
 800fd70:	6117      	str	r7, [r2, #16]
 800fd72:	e79d      	b.n	800fcb0 <__mdiff+0x34>
 800fd74:	f854 1b04 	ldr.w	r1, [r4], #4
 800fd78:	46e6      	mov	lr, ip
 800fd7a:	0c08      	lsrs	r0, r1, #16
 800fd7c:	fa1c fc81 	uxtah	ip, ip, r1
 800fd80:	4471      	add	r1, lr
 800fd82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fd86:	b289      	uxth	r1, r1
 800fd88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fd8c:	f846 1b04 	str.w	r1, [r6], #4
 800fd90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fd94:	e7dd      	b.n	800fd52 <__mdiff+0xd6>
 800fd96:	3f01      	subs	r7, #1
 800fd98:	e7e7      	b.n	800fd6a <__mdiff+0xee>
 800fd9a:	bf00      	nop
 800fd9c:	08010cd0 	.word	0x08010cd0
 800fda0:	08010cf2 	.word	0x08010cf2

0800fda4 <__d2b>:
 800fda4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fda8:	460f      	mov	r7, r1
 800fdaa:	2101      	movs	r1, #1
 800fdac:	ec59 8b10 	vmov	r8, r9, d0
 800fdb0:	4616      	mov	r6, r2
 800fdb2:	f7ff fccd 	bl	800f750 <_Balloc>
 800fdb6:	4604      	mov	r4, r0
 800fdb8:	b930      	cbnz	r0, 800fdc8 <__d2b+0x24>
 800fdba:	4602      	mov	r2, r0
 800fdbc:	4b23      	ldr	r3, [pc, #140]	@ (800fe4c <__d2b+0xa8>)
 800fdbe:	4824      	ldr	r0, [pc, #144]	@ (800fe50 <__d2b+0xac>)
 800fdc0:	f240 310f 	movw	r1, #783	@ 0x30f
 800fdc4:	f000 f928 	bl	8010018 <__assert_func>
 800fdc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fdcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fdd0:	b10d      	cbz	r5, 800fdd6 <__d2b+0x32>
 800fdd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fdd6:	9301      	str	r3, [sp, #4]
 800fdd8:	f1b8 0300 	subs.w	r3, r8, #0
 800fddc:	d023      	beq.n	800fe26 <__d2b+0x82>
 800fdde:	4668      	mov	r0, sp
 800fde0:	9300      	str	r3, [sp, #0]
 800fde2:	f7ff fd7c 	bl	800f8de <__lo0bits>
 800fde6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fdea:	b1d0      	cbz	r0, 800fe22 <__d2b+0x7e>
 800fdec:	f1c0 0320 	rsb	r3, r0, #32
 800fdf0:	fa02 f303 	lsl.w	r3, r2, r3
 800fdf4:	430b      	orrs	r3, r1
 800fdf6:	40c2      	lsrs	r2, r0
 800fdf8:	6163      	str	r3, [r4, #20]
 800fdfa:	9201      	str	r2, [sp, #4]
 800fdfc:	9b01      	ldr	r3, [sp, #4]
 800fdfe:	61a3      	str	r3, [r4, #24]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	bf0c      	ite	eq
 800fe04:	2201      	moveq	r2, #1
 800fe06:	2202      	movne	r2, #2
 800fe08:	6122      	str	r2, [r4, #16]
 800fe0a:	b1a5      	cbz	r5, 800fe36 <__d2b+0x92>
 800fe0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fe10:	4405      	add	r5, r0
 800fe12:	603d      	str	r5, [r7, #0]
 800fe14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fe18:	6030      	str	r0, [r6, #0]
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	b003      	add	sp, #12
 800fe1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe22:	6161      	str	r1, [r4, #20]
 800fe24:	e7ea      	b.n	800fdfc <__d2b+0x58>
 800fe26:	a801      	add	r0, sp, #4
 800fe28:	f7ff fd59 	bl	800f8de <__lo0bits>
 800fe2c:	9b01      	ldr	r3, [sp, #4]
 800fe2e:	6163      	str	r3, [r4, #20]
 800fe30:	3020      	adds	r0, #32
 800fe32:	2201      	movs	r2, #1
 800fe34:	e7e8      	b.n	800fe08 <__d2b+0x64>
 800fe36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fe3e:	6038      	str	r0, [r7, #0]
 800fe40:	6918      	ldr	r0, [r3, #16]
 800fe42:	f7ff fd2d 	bl	800f8a0 <__hi0bits>
 800fe46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe4a:	e7e5      	b.n	800fe18 <__d2b+0x74>
 800fe4c:	08010cd0 	.word	0x08010cd0
 800fe50:	08010cf2 	.word	0x08010cf2

0800fe54 <__sread>:
 800fe54:	b510      	push	{r4, lr}
 800fe56:	460c      	mov	r4, r1
 800fe58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe5c:	f000 f8a8 	bl	800ffb0 <_read_r>
 800fe60:	2800      	cmp	r0, #0
 800fe62:	bfab      	itete	ge
 800fe64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fe66:	89a3      	ldrhlt	r3, [r4, #12]
 800fe68:	181b      	addge	r3, r3, r0
 800fe6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fe6e:	bfac      	ite	ge
 800fe70:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fe72:	81a3      	strhlt	r3, [r4, #12]
 800fe74:	bd10      	pop	{r4, pc}

0800fe76 <__swrite>:
 800fe76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe7a:	461f      	mov	r7, r3
 800fe7c:	898b      	ldrh	r3, [r1, #12]
 800fe7e:	05db      	lsls	r3, r3, #23
 800fe80:	4605      	mov	r5, r0
 800fe82:	460c      	mov	r4, r1
 800fe84:	4616      	mov	r6, r2
 800fe86:	d505      	bpl.n	800fe94 <__swrite+0x1e>
 800fe88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe8c:	2302      	movs	r3, #2
 800fe8e:	2200      	movs	r2, #0
 800fe90:	f000 f87c 	bl	800ff8c <_lseek_r>
 800fe94:	89a3      	ldrh	r3, [r4, #12]
 800fe96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fe9e:	81a3      	strh	r3, [r4, #12]
 800fea0:	4632      	mov	r2, r6
 800fea2:	463b      	mov	r3, r7
 800fea4:	4628      	mov	r0, r5
 800fea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feaa:	f000 b8a3 	b.w	800fff4 <_write_r>

0800feae <__sseek>:
 800feae:	b510      	push	{r4, lr}
 800feb0:	460c      	mov	r4, r1
 800feb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feb6:	f000 f869 	bl	800ff8c <_lseek_r>
 800feba:	1c43      	adds	r3, r0, #1
 800febc:	89a3      	ldrh	r3, [r4, #12]
 800febe:	bf15      	itete	ne
 800fec0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fec2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fec6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800feca:	81a3      	strheq	r3, [r4, #12]
 800fecc:	bf18      	it	ne
 800fece:	81a3      	strhne	r3, [r4, #12]
 800fed0:	bd10      	pop	{r4, pc}

0800fed2 <__sclose>:
 800fed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fed6:	f000 b849 	b.w	800ff6c <_close_r>

0800feda <_realloc_r>:
 800feda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fede:	4680      	mov	r8, r0
 800fee0:	4615      	mov	r5, r2
 800fee2:	460c      	mov	r4, r1
 800fee4:	b921      	cbnz	r1, 800fef0 <_realloc_r+0x16>
 800fee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feea:	4611      	mov	r1, r2
 800feec:	f7ff baf8 	b.w	800f4e0 <_malloc_r>
 800fef0:	b92a      	cbnz	r2, 800fefe <_realloc_r+0x24>
 800fef2:	f7ff f929 	bl	800f148 <_free_r>
 800fef6:	2400      	movs	r4, #0
 800fef8:	4620      	mov	r0, r4
 800fefa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fefe:	f000 f8cf 	bl	80100a0 <_malloc_usable_size_r>
 800ff02:	4285      	cmp	r5, r0
 800ff04:	4606      	mov	r6, r0
 800ff06:	d802      	bhi.n	800ff0e <_realloc_r+0x34>
 800ff08:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ff0c:	d8f4      	bhi.n	800fef8 <_realloc_r+0x1e>
 800ff0e:	4629      	mov	r1, r5
 800ff10:	4640      	mov	r0, r8
 800ff12:	f7ff fae5 	bl	800f4e0 <_malloc_r>
 800ff16:	4607      	mov	r7, r0
 800ff18:	2800      	cmp	r0, #0
 800ff1a:	d0ec      	beq.n	800fef6 <_realloc_r+0x1c>
 800ff1c:	42b5      	cmp	r5, r6
 800ff1e:	462a      	mov	r2, r5
 800ff20:	4621      	mov	r1, r4
 800ff22:	bf28      	it	cs
 800ff24:	4632      	movcs	r2, r6
 800ff26:	f7fe fab4 	bl	800e492 <memcpy>
 800ff2a:	4621      	mov	r1, r4
 800ff2c:	4640      	mov	r0, r8
 800ff2e:	f7ff f90b 	bl	800f148 <_free_r>
 800ff32:	463c      	mov	r4, r7
 800ff34:	e7e0      	b.n	800fef8 <_realloc_r+0x1e>

0800ff36 <memmove>:
 800ff36:	4288      	cmp	r0, r1
 800ff38:	b510      	push	{r4, lr}
 800ff3a:	eb01 0402 	add.w	r4, r1, r2
 800ff3e:	d902      	bls.n	800ff46 <memmove+0x10>
 800ff40:	4284      	cmp	r4, r0
 800ff42:	4623      	mov	r3, r4
 800ff44:	d807      	bhi.n	800ff56 <memmove+0x20>
 800ff46:	1e43      	subs	r3, r0, #1
 800ff48:	42a1      	cmp	r1, r4
 800ff4a:	d008      	beq.n	800ff5e <memmove+0x28>
 800ff4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff50:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff54:	e7f8      	b.n	800ff48 <memmove+0x12>
 800ff56:	4402      	add	r2, r0
 800ff58:	4601      	mov	r1, r0
 800ff5a:	428a      	cmp	r2, r1
 800ff5c:	d100      	bne.n	800ff60 <memmove+0x2a>
 800ff5e:	bd10      	pop	{r4, pc}
 800ff60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff64:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff68:	e7f7      	b.n	800ff5a <memmove+0x24>
	...

0800ff6c <_close_r>:
 800ff6c:	b538      	push	{r3, r4, r5, lr}
 800ff6e:	4d06      	ldr	r5, [pc, #24]	@ (800ff88 <_close_r+0x1c>)
 800ff70:	2300      	movs	r3, #0
 800ff72:	4604      	mov	r4, r0
 800ff74:	4608      	mov	r0, r1
 800ff76:	602b      	str	r3, [r5, #0]
 800ff78:	f7f1 fedf 	bl	8001d3a <_close>
 800ff7c:	1c43      	adds	r3, r0, #1
 800ff7e:	d102      	bne.n	800ff86 <_close_r+0x1a>
 800ff80:	682b      	ldr	r3, [r5, #0]
 800ff82:	b103      	cbz	r3, 800ff86 <_close_r+0x1a>
 800ff84:	6023      	str	r3, [r4, #0]
 800ff86:	bd38      	pop	{r3, r4, r5, pc}
 800ff88:	20004e08 	.word	0x20004e08

0800ff8c <_lseek_r>:
 800ff8c:	b538      	push	{r3, r4, r5, lr}
 800ff8e:	4d07      	ldr	r5, [pc, #28]	@ (800ffac <_lseek_r+0x20>)
 800ff90:	4604      	mov	r4, r0
 800ff92:	4608      	mov	r0, r1
 800ff94:	4611      	mov	r1, r2
 800ff96:	2200      	movs	r2, #0
 800ff98:	602a      	str	r2, [r5, #0]
 800ff9a:	461a      	mov	r2, r3
 800ff9c:	f7f1 fef4 	bl	8001d88 <_lseek>
 800ffa0:	1c43      	adds	r3, r0, #1
 800ffa2:	d102      	bne.n	800ffaa <_lseek_r+0x1e>
 800ffa4:	682b      	ldr	r3, [r5, #0]
 800ffa6:	b103      	cbz	r3, 800ffaa <_lseek_r+0x1e>
 800ffa8:	6023      	str	r3, [r4, #0]
 800ffaa:	bd38      	pop	{r3, r4, r5, pc}
 800ffac:	20004e08 	.word	0x20004e08

0800ffb0 <_read_r>:
 800ffb0:	b538      	push	{r3, r4, r5, lr}
 800ffb2:	4d07      	ldr	r5, [pc, #28]	@ (800ffd0 <_read_r+0x20>)
 800ffb4:	4604      	mov	r4, r0
 800ffb6:	4608      	mov	r0, r1
 800ffb8:	4611      	mov	r1, r2
 800ffba:	2200      	movs	r2, #0
 800ffbc:	602a      	str	r2, [r5, #0]
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	f7f1 fe82 	bl	8001cc8 <_read>
 800ffc4:	1c43      	adds	r3, r0, #1
 800ffc6:	d102      	bne.n	800ffce <_read_r+0x1e>
 800ffc8:	682b      	ldr	r3, [r5, #0]
 800ffca:	b103      	cbz	r3, 800ffce <_read_r+0x1e>
 800ffcc:	6023      	str	r3, [r4, #0]
 800ffce:	bd38      	pop	{r3, r4, r5, pc}
 800ffd0:	20004e08 	.word	0x20004e08

0800ffd4 <_sbrk_r>:
 800ffd4:	b538      	push	{r3, r4, r5, lr}
 800ffd6:	4d06      	ldr	r5, [pc, #24]	@ (800fff0 <_sbrk_r+0x1c>)
 800ffd8:	2300      	movs	r3, #0
 800ffda:	4604      	mov	r4, r0
 800ffdc:	4608      	mov	r0, r1
 800ffde:	602b      	str	r3, [r5, #0]
 800ffe0:	f7f1 fee0 	bl	8001da4 <_sbrk>
 800ffe4:	1c43      	adds	r3, r0, #1
 800ffe6:	d102      	bne.n	800ffee <_sbrk_r+0x1a>
 800ffe8:	682b      	ldr	r3, [r5, #0]
 800ffea:	b103      	cbz	r3, 800ffee <_sbrk_r+0x1a>
 800ffec:	6023      	str	r3, [r4, #0]
 800ffee:	bd38      	pop	{r3, r4, r5, pc}
 800fff0:	20004e08 	.word	0x20004e08

0800fff4 <_write_r>:
 800fff4:	b538      	push	{r3, r4, r5, lr}
 800fff6:	4d07      	ldr	r5, [pc, #28]	@ (8010014 <_write_r+0x20>)
 800fff8:	4604      	mov	r4, r0
 800fffa:	4608      	mov	r0, r1
 800fffc:	4611      	mov	r1, r2
 800fffe:	2200      	movs	r2, #0
 8010000:	602a      	str	r2, [r5, #0]
 8010002:	461a      	mov	r2, r3
 8010004:	f7f1 fe7d 	bl	8001d02 <_write>
 8010008:	1c43      	adds	r3, r0, #1
 801000a:	d102      	bne.n	8010012 <_write_r+0x1e>
 801000c:	682b      	ldr	r3, [r5, #0]
 801000e:	b103      	cbz	r3, 8010012 <_write_r+0x1e>
 8010010:	6023      	str	r3, [r4, #0]
 8010012:	bd38      	pop	{r3, r4, r5, pc}
 8010014:	20004e08 	.word	0x20004e08

08010018 <__assert_func>:
 8010018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801001a:	4614      	mov	r4, r2
 801001c:	461a      	mov	r2, r3
 801001e:	4b09      	ldr	r3, [pc, #36]	@ (8010044 <__assert_func+0x2c>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4605      	mov	r5, r0
 8010024:	68d8      	ldr	r0, [r3, #12]
 8010026:	b954      	cbnz	r4, 801003e <__assert_func+0x26>
 8010028:	4b07      	ldr	r3, [pc, #28]	@ (8010048 <__assert_func+0x30>)
 801002a:	461c      	mov	r4, r3
 801002c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010030:	9100      	str	r1, [sp, #0]
 8010032:	462b      	mov	r3, r5
 8010034:	4905      	ldr	r1, [pc, #20]	@ (801004c <__assert_func+0x34>)
 8010036:	f000 f83b 	bl	80100b0 <fiprintf>
 801003a:	f000 f858 	bl	80100ee <abort>
 801003e:	4b04      	ldr	r3, [pc, #16]	@ (8010050 <__assert_func+0x38>)
 8010040:	e7f4      	b.n	801002c <__assert_func+0x14>
 8010042:	bf00      	nop
 8010044:	20000040 	.word	0x20000040
 8010048:	08010f8e 	.word	0x08010f8e
 801004c:	08010f60 	.word	0x08010f60
 8010050:	08010f53 	.word	0x08010f53

08010054 <_calloc_r>:
 8010054:	b570      	push	{r4, r5, r6, lr}
 8010056:	fba1 5402 	umull	r5, r4, r1, r2
 801005a:	b93c      	cbnz	r4, 801006c <_calloc_r+0x18>
 801005c:	4629      	mov	r1, r5
 801005e:	f7ff fa3f 	bl	800f4e0 <_malloc_r>
 8010062:	4606      	mov	r6, r0
 8010064:	b928      	cbnz	r0, 8010072 <_calloc_r+0x1e>
 8010066:	2600      	movs	r6, #0
 8010068:	4630      	mov	r0, r6
 801006a:	bd70      	pop	{r4, r5, r6, pc}
 801006c:	220c      	movs	r2, #12
 801006e:	6002      	str	r2, [r0, #0]
 8010070:	e7f9      	b.n	8010066 <_calloc_r+0x12>
 8010072:	462a      	mov	r2, r5
 8010074:	4621      	mov	r1, r4
 8010076:	f7fe f97d 	bl	800e374 <memset>
 801007a:	e7f5      	b.n	8010068 <_calloc_r+0x14>

0801007c <__ascii_mbtowc>:
 801007c:	b082      	sub	sp, #8
 801007e:	b901      	cbnz	r1, 8010082 <__ascii_mbtowc+0x6>
 8010080:	a901      	add	r1, sp, #4
 8010082:	b142      	cbz	r2, 8010096 <__ascii_mbtowc+0x1a>
 8010084:	b14b      	cbz	r3, 801009a <__ascii_mbtowc+0x1e>
 8010086:	7813      	ldrb	r3, [r2, #0]
 8010088:	600b      	str	r3, [r1, #0]
 801008a:	7812      	ldrb	r2, [r2, #0]
 801008c:	1e10      	subs	r0, r2, #0
 801008e:	bf18      	it	ne
 8010090:	2001      	movne	r0, #1
 8010092:	b002      	add	sp, #8
 8010094:	4770      	bx	lr
 8010096:	4610      	mov	r0, r2
 8010098:	e7fb      	b.n	8010092 <__ascii_mbtowc+0x16>
 801009a:	f06f 0001 	mvn.w	r0, #1
 801009e:	e7f8      	b.n	8010092 <__ascii_mbtowc+0x16>

080100a0 <_malloc_usable_size_r>:
 80100a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100a4:	1f18      	subs	r0, r3, #4
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	bfbc      	itt	lt
 80100aa:	580b      	ldrlt	r3, [r1, r0]
 80100ac:	18c0      	addlt	r0, r0, r3
 80100ae:	4770      	bx	lr

080100b0 <fiprintf>:
 80100b0:	b40e      	push	{r1, r2, r3}
 80100b2:	b503      	push	{r0, r1, lr}
 80100b4:	4601      	mov	r1, r0
 80100b6:	ab03      	add	r3, sp, #12
 80100b8:	4805      	ldr	r0, [pc, #20]	@ (80100d0 <fiprintf+0x20>)
 80100ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80100be:	6800      	ldr	r0, [r0, #0]
 80100c0:	9301      	str	r3, [sp, #4]
 80100c2:	f000 f845 	bl	8010150 <_vfiprintf_r>
 80100c6:	b002      	add	sp, #8
 80100c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80100cc:	b003      	add	sp, #12
 80100ce:	4770      	bx	lr
 80100d0:	20000040 	.word	0x20000040

080100d4 <__ascii_wctomb>:
 80100d4:	4603      	mov	r3, r0
 80100d6:	4608      	mov	r0, r1
 80100d8:	b141      	cbz	r1, 80100ec <__ascii_wctomb+0x18>
 80100da:	2aff      	cmp	r2, #255	@ 0xff
 80100dc:	d904      	bls.n	80100e8 <__ascii_wctomb+0x14>
 80100de:	228a      	movs	r2, #138	@ 0x8a
 80100e0:	601a      	str	r2, [r3, #0]
 80100e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80100e6:	4770      	bx	lr
 80100e8:	700a      	strb	r2, [r1, #0]
 80100ea:	2001      	movs	r0, #1
 80100ec:	4770      	bx	lr

080100ee <abort>:
 80100ee:	b508      	push	{r3, lr}
 80100f0:	2006      	movs	r0, #6
 80100f2:	f000 fa85 	bl	8010600 <raise>
 80100f6:	2001      	movs	r0, #1
 80100f8:	f7f1 fddb 	bl	8001cb2 <_exit>

080100fc <__sfputc_r>:
 80100fc:	6893      	ldr	r3, [r2, #8]
 80100fe:	3b01      	subs	r3, #1
 8010100:	2b00      	cmp	r3, #0
 8010102:	b410      	push	{r4}
 8010104:	6093      	str	r3, [r2, #8]
 8010106:	da08      	bge.n	801011a <__sfputc_r+0x1e>
 8010108:	6994      	ldr	r4, [r2, #24]
 801010a:	42a3      	cmp	r3, r4
 801010c:	db01      	blt.n	8010112 <__sfputc_r+0x16>
 801010e:	290a      	cmp	r1, #10
 8010110:	d103      	bne.n	801011a <__sfputc_r+0x1e>
 8010112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010116:	f000 b933 	b.w	8010380 <__swbuf_r>
 801011a:	6813      	ldr	r3, [r2, #0]
 801011c:	1c58      	adds	r0, r3, #1
 801011e:	6010      	str	r0, [r2, #0]
 8010120:	7019      	strb	r1, [r3, #0]
 8010122:	4608      	mov	r0, r1
 8010124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010128:	4770      	bx	lr

0801012a <__sfputs_r>:
 801012a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801012c:	4606      	mov	r6, r0
 801012e:	460f      	mov	r7, r1
 8010130:	4614      	mov	r4, r2
 8010132:	18d5      	adds	r5, r2, r3
 8010134:	42ac      	cmp	r4, r5
 8010136:	d101      	bne.n	801013c <__sfputs_r+0x12>
 8010138:	2000      	movs	r0, #0
 801013a:	e007      	b.n	801014c <__sfputs_r+0x22>
 801013c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010140:	463a      	mov	r2, r7
 8010142:	4630      	mov	r0, r6
 8010144:	f7ff ffda 	bl	80100fc <__sfputc_r>
 8010148:	1c43      	adds	r3, r0, #1
 801014a:	d1f3      	bne.n	8010134 <__sfputs_r+0xa>
 801014c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010150 <_vfiprintf_r>:
 8010150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010154:	460d      	mov	r5, r1
 8010156:	b09d      	sub	sp, #116	@ 0x74
 8010158:	4614      	mov	r4, r2
 801015a:	4698      	mov	r8, r3
 801015c:	4606      	mov	r6, r0
 801015e:	b118      	cbz	r0, 8010168 <_vfiprintf_r+0x18>
 8010160:	6a03      	ldr	r3, [r0, #32]
 8010162:	b90b      	cbnz	r3, 8010168 <_vfiprintf_r+0x18>
 8010164:	f7fe f896 	bl	800e294 <__sinit>
 8010168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801016a:	07d9      	lsls	r1, r3, #31
 801016c:	d405      	bmi.n	801017a <_vfiprintf_r+0x2a>
 801016e:	89ab      	ldrh	r3, [r5, #12]
 8010170:	059a      	lsls	r2, r3, #22
 8010172:	d402      	bmi.n	801017a <_vfiprintf_r+0x2a>
 8010174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010176:	f7fe f98a 	bl	800e48e <__retarget_lock_acquire_recursive>
 801017a:	89ab      	ldrh	r3, [r5, #12]
 801017c:	071b      	lsls	r3, r3, #28
 801017e:	d501      	bpl.n	8010184 <_vfiprintf_r+0x34>
 8010180:	692b      	ldr	r3, [r5, #16]
 8010182:	b99b      	cbnz	r3, 80101ac <_vfiprintf_r+0x5c>
 8010184:	4629      	mov	r1, r5
 8010186:	4630      	mov	r0, r6
 8010188:	f000 f938 	bl	80103fc <__swsetup_r>
 801018c:	b170      	cbz	r0, 80101ac <_vfiprintf_r+0x5c>
 801018e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010190:	07dc      	lsls	r4, r3, #31
 8010192:	d504      	bpl.n	801019e <_vfiprintf_r+0x4e>
 8010194:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010198:	b01d      	add	sp, #116	@ 0x74
 801019a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801019e:	89ab      	ldrh	r3, [r5, #12]
 80101a0:	0598      	lsls	r0, r3, #22
 80101a2:	d4f7      	bmi.n	8010194 <_vfiprintf_r+0x44>
 80101a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80101a6:	f7fe f973 	bl	800e490 <__retarget_lock_release_recursive>
 80101aa:	e7f3      	b.n	8010194 <_vfiprintf_r+0x44>
 80101ac:	2300      	movs	r3, #0
 80101ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80101b0:	2320      	movs	r3, #32
 80101b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80101b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80101ba:	2330      	movs	r3, #48	@ 0x30
 80101bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801036c <_vfiprintf_r+0x21c>
 80101c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80101c4:	f04f 0901 	mov.w	r9, #1
 80101c8:	4623      	mov	r3, r4
 80101ca:	469a      	mov	sl, r3
 80101cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101d0:	b10a      	cbz	r2, 80101d6 <_vfiprintf_r+0x86>
 80101d2:	2a25      	cmp	r2, #37	@ 0x25
 80101d4:	d1f9      	bne.n	80101ca <_vfiprintf_r+0x7a>
 80101d6:	ebba 0b04 	subs.w	fp, sl, r4
 80101da:	d00b      	beq.n	80101f4 <_vfiprintf_r+0xa4>
 80101dc:	465b      	mov	r3, fp
 80101de:	4622      	mov	r2, r4
 80101e0:	4629      	mov	r1, r5
 80101e2:	4630      	mov	r0, r6
 80101e4:	f7ff ffa1 	bl	801012a <__sfputs_r>
 80101e8:	3001      	adds	r0, #1
 80101ea:	f000 80a7 	beq.w	801033c <_vfiprintf_r+0x1ec>
 80101ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101f0:	445a      	add	r2, fp
 80101f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80101f4:	f89a 3000 	ldrb.w	r3, [sl]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	f000 809f 	beq.w	801033c <_vfiprintf_r+0x1ec>
 80101fe:	2300      	movs	r3, #0
 8010200:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010208:	f10a 0a01 	add.w	sl, sl, #1
 801020c:	9304      	str	r3, [sp, #16]
 801020e:	9307      	str	r3, [sp, #28]
 8010210:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010214:	931a      	str	r3, [sp, #104]	@ 0x68
 8010216:	4654      	mov	r4, sl
 8010218:	2205      	movs	r2, #5
 801021a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801021e:	4853      	ldr	r0, [pc, #332]	@ (801036c <_vfiprintf_r+0x21c>)
 8010220:	f7ef fffe 	bl	8000220 <memchr>
 8010224:	9a04      	ldr	r2, [sp, #16]
 8010226:	b9d8      	cbnz	r0, 8010260 <_vfiprintf_r+0x110>
 8010228:	06d1      	lsls	r1, r2, #27
 801022a:	bf44      	itt	mi
 801022c:	2320      	movmi	r3, #32
 801022e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010232:	0713      	lsls	r3, r2, #28
 8010234:	bf44      	itt	mi
 8010236:	232b      	movmi	r3, #43	@ 0x2b
 8010238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801023c:	f89a 3000 	ldrb.w	r3, [sl]
 8010240:	2b2a      	cmp	r3, #42	@ 0x2a
 8010242:	d015      	beq.n	8010270 <_vfiprintf_r+0x120>
 8010244:	9a07      	ldr	r2, [sp, #28]
 8010246:	4654      	mov	r4, sl
 8010248:	2000      	movs	r0, #0
 801024a:	f04f 0c0a 	mov.w	ip, #10
 801024e:	4621      	mov	r1, r4
 8010250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010254:	3b30      	subs	r3, #48	@ 0x30
 8010256:	2b09      	cmp	r3, #9
 8010258:	d94b      	bls.n	80102f2 <_vfiprintf_r+0x1a2>
 801025a:	b1b0      	cbz	r0, 801028a <_vfiprintf_r+0x13a>
 801025c:	9207      	str	r2, [sp, #28]
 801025e:	e014      	b.n	801028a <_vfiprintf_r+0x13a>
 8010260:	eba0 0308 	sub.w	r3, r0, r8
 8010264:	fa09 f303 	lsl.w	r3, r9, r3
 8010268:	4313      	orrs	r3, r2
 801026a:	9304      	str	r3, [sp, #16]
 801026c:	46a2      	mov	sl, r4
 801026e:	e7d2      	b.n	8010216 <_vfiprintf_r+0xc6>
 8010270:	9b03      	ldr	r3, [sp, #12]
 8010272:	1d19      	adds	r1, r3, #4
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	9103      	str	r1, [sp, #12]
 8010278:	2b00      	cmp	r3, #0
 801027a:	bfbb      	ittet	lt
 801027c:	425b      	neglt	r3, r3
 801027e:	f042 0202 	orrlt.w	r2, r2, #2
 8010282:	9307      	strge	r3, [sp, #28]
 8010284:	9307      	strlt	r3, [sp, #28]
 8010286:	bfb8      	it	lt
 8010288:	9204      	strlt	r2, [sp, #16]
 801028a:	7823      	ldrb	r3, [r4, #0]
 801028c:	2b2e      	cmp	r3, #46	@ 0x2e
 801028e:	d10a      	bne.n	80102a6 <_vfiprintf_r+0x156>
 8010290:	7863      	ldrb	r3, [r4, #1]
 8010292:	2b2a      	cmp	r3, #42	@ 0x2a
 8010294:	d132      	bne.n	80102fc <_vfiprintf_r+0x1ac>
 8010296:	9b03      	ldr	r3, [sp, #12]
 8010298:	1d1a      	adds	r2, r3, #4
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	9203      	str	r2, [sp, #12]
 801029e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80102a2:	3402      	adds	r4, #2
 80102a4:	9305      	str	r3, [sp, #20]
 80102a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801037c <_vfiprintf_r+0x22c>
 80102aa:	7821      	ldrb	r1, [r4, #0]
 80102ac:	2203      	movs	r2, #3
 80102ae:	4650      	mov	r0, sl
 80102b0:	f7ef ffb6 	bl	8000220 <memchr>
 80102b4:	b138      	cbz	r0, 80102c6 <_vfiprintf_r+0x176>
 80102b6:	9b04      	ldr	r3, [sp, #16]
 80102b8:	eba0 000a 	sub.w	r0, r0, sl
 80102bc:	2240      	movs	r2, #64	@ 0x40
 80102be:	4082      	lsls	r2, r0
 80102c0:	4313      	orrs	r3, r2
 80102c2:	3401      	adds	r4, #1
 80102c4:	9304      	str	r3, [sp, #16]
 80102c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102ca:	4829      	ldr	r0, [pc, #164]	@ (8010370 <_vfiprintf_r+0x220>)
 80102cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80102d0:	2206      	movs	r2, #6
 80102d2:	f7ef ffa5 	bl	8000220 <memchr>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d03f      	beq.n	801035a <_vfiprintf_r+0x20a>
 80102da:	4b26      	ldr	r3, [pc, #152]	@ (8010374 <_vfiprintf_r+0x224>)
 80102dc:	bb1b      	cbnz	r3, 8010326 <_vfiprintf_r+0x1d6>
 80102de:	9b03      	ldr	r3, [sp, #12]
 80102e0:	3307      	adds	r3, #7
 80102e2:	f023 0307 	bic.w	r3, r3, #7
 80102e6:	3308      	adds	r3, #8
 80102e8:	9303      	str	r3, [sp, #12]
 80102ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102ec:	443b      	add	r3, r7
 80102ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80102f0:	e76a      	b.n	80101c8 <_vfiprintf_r+0x78>
 80102f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80102f6:	460c      	mov	r4, r1
 80102f8:	2001      	movs	r0, #1
 80102fa:	e7a8      	b.n	801024e <_vfiprintf_r+0xfe>
 80102fc:	2300      	movs	r3, #0
 80102fe:	3401      	adds	r4, #1
 8010300:	9305      	str	r3, [sp, #20]
 8010302:	4619      	mov	r1, r3
 8010304:	f04f 0c0a 	mov.w	ip, #10
 8010308:	4620      	mov	r0, r4
 801030a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801030e:	3a30      	subs	r2, #48	@ 0x30
 8010310:	2a09      	cmp	r2, #9
 8010312:	d903      	bls.n	801031c <_vfiprintf_r+0x1cc>
 8010314:	2b00      	cmp	r3, #0
 8010316:	d0c6      	beq.n	80102a6 <_vfiprintf_r+0x156>
 8010318:	9105      	str	r1, [sp, #20]
 801031a:	e7c4      	b.n	80102a6 <_vfiprintf_r+0x156>
 801031c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010320:	4604      	mov	r4, r0
 8010322:	2301      	movs	r3, #1
 8010324:	e7f0      	b.n	8010308 <_vfiprintf_r+0x1b8>
 8010326:	ab03      	add	r3, sp, #12
 8010328:	9300      	str	r3, [sp, #0]
 801032a:	462a      	mov	r2, r5
 801032c:	4b12      	ldr	r3, [pc, #72]	@ (8010378 <_vfiprintf_r+0x228>)
 801032e:	a904      	add	r1, sp, #16
 8010330:	4630      	mov	r0, r6
 8010332:	f7fd fb4b 	bl	800d9cc <_printf_float>
 8010336:	4607      	mov	r7, r0
 8010338:	1c78      	adds	r0, r7, #1
 801033a:	d1d6      	bne.n	80102ea <_vfiprintf_r+0x19a>
 801033c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801033e:	07d9      	lsls	r1, r3, #31
 8010340:	d405      	bmi.n	801034e <_vfiprintf_r+0x1fe>
 8010342:	89ab      	ldrh	r3, [r5, #12]
 8010344:	059a      	lsls	r2, r3, #22
 8010346:	d402      	bmi.n	801034e <_vfiprintf_r+0x1fe>
 8010348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801034a:	f7fe f8a1 	bl	800e490 <__retarget_lock_release_recursive>
 801034e:	89ab      	ldrh	r3, [r5, #12]
 8010350:	065b      	lsls	r3, r3, #25
 8010352:	f53f af1f 	bmi.w	8010194 <_vfiprintf_r+0x44>
 8010356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010358:	e71e      	b.n	8010198 <_vfiprintf_r+0x48>
 801035a:	ab03      	add	r3, sp, #12
 801035c:	9300      	str	r3, [sp, #0]
 801035e:	462a      	mov	r2, r5
 8010360:	4b05      	ldr	r3, [pc, #20]	@ (8010378 <_vfiprintf_r+0x228>)
 8010362:	a904      	add	r1, sp, #16
 8010364:	4630      	mov	r0, r6
 8010366:	f7fd fdc9 	bl	800defc <_printf_i>
 801036a:	e7e4      	b.n	8010336 <_vfiprintf_r+0x1e6>
 801036c:	08010ce1 	.word	0x08010ce1
 8010370:	08010ceb 	.word	0x08010ceb
 8010374:	0800d9cd 	.word	0x0800d9cd
 8010378:	0801012b 	.word	0x0801012b
 801037c:	08010ce7 	.word	0x08010ce7

08010380 <__swbuf_r>:
 8010380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010382:	460e      	mov	r6, r1
 8010384:	4614      	mov	r4, r2
 8010386:	4605      	mov	r5, r0
 8010388:	b118      	cbz	r0, 8010392 <__swbuf_r+0x12>
 801038a:	6a03      	ldr	r3, [r0, #32]
 801038c:	b90b      	cbnz	r3, 8010392 <__swbuf_r+0x12>
 801038e:	f7fd ff81 	bl	800e294 <__sinit>
 8010392:	69a3      	ldr	r3, [r4, #24]
 8010394:	60a3      	str	r3, [r4, #8]
 8010396:	89a3      	ldrh	r3, [r4, #12]
 8010398:	071a      	lsls	r2, r3, #28
 801039a:	d501      	bpl.n	80103a0 <__swbuf_r+0x20>
 801039c:	6923      	ldr	r3, [r4, #16]
 801039e:	b943      	cbnz	r3, 80103b2 <__swbuf_r+0x32>
 80103a0:	4621      	mov	r1, r4
 80103a2:	4628      	mov	r0, r5
 80103a4:	f000 f82a 	bl	80103fc <__swsetup_r>
 80103a8:	b118      	cbz	r0, 80103b2 <__swbuf_r+0x32>
 80103aa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80103ae:	4638      	mov	r0, r7
 80103b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103b2:	6823      	ldr	r3, [r4, #0]
 80103b4:	6922      	ldr	r2, [r4, #16]
 80103b6:	1a98      	subs	r0, r3, r2
 80103b8:	6963      	ldr	r3, [r4, #20]
 80103ba:	b2f6      	uxtb	r6, r6
 80103bc:	4283      	cmp	r3, r0
 80103be:	4637      	mov	r7, r6
 80103c0:	dc05      	bgt.n	80103ce <__swbuf_r+0x4e>
 80103c2:	4621      	mov	r1, r4
 80103c4:	4628      	mov	r0, r5
 80103c6:	f7ff f98f 	bl	800f6e8 <_fflush_r>
 80103ca:	2800      	cmp	r0, #0
 80103cc:	d1ed      	bne.n	80103aa <__swbuf_r+0x2a>
 80103ce:	68a3      	ldr	r3, [r4, #8]
 80103d0:	3b01      	subs	r3, #1
 80103d2:	60a3      	str	r3, [r4, #8]
 80103d4:	6823      	ldr	r3, [r4, #0]
 80103d6:	1c5a      	adds	r2, r3, #1
 80103d8:	6022      	str	r2, [r4, #0]
 80103da:	701e      	strb	r6, [r3, #0]
 80103dc:	6962      	ldr	r2, [r4, #20]
 80103de:	1c43      	adds	r3, r0, #1
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d004      	beq.n	80103ee <__swbuf_r+0x6e>
 80103e4:	89a3      	ldrh	r3, [r4, #12]
 80103e6:	07db      	lsls	r3, r3, #31
 80103e8:	d5e1      	bpl.n	80103ae <__swbuf_r+0x2e>
 80103ea:	2e0a      	cmp	r6, #10
 80103ec:	d1df      	bne.n	80103ae <__swbuf_r+0x2e>
 80103ee:	4621      	mov	r1, r4
 80103f0:	4628      	mov	r0, r5
 80103f2:	f7ff f979 	bl	800f6e8 <_fflush_r>
 80103f6:	2800      	cmp	r0, #0
 80103f8:	d0d9      	beq.n	80103ae <__swbuf_r+0x2e>
 80103fa:	e7d6      	b.n	80103aa <__swbuf_r+0x2a>

080103fc <__swsetup_r>:
 80103fc:	b538      	push	{r3, r4, r5, lr}
 80103fe:	4b29      	ldr	r3, [pc, #164]	@ (80104a4 <__swsetup_r+0xa8>)
 8010400:	4605      	mov	r5, r0
 8010402:	6818      	ldr	r0, [r3, #0]
 8010404:	460c      	mov	r4, r1
 8010406:	b118      	cbz	r0, 8010410 <__swsetup_r+0x14>
 8010408:	6a03      	ldr	r3, [r0, #32]
 801040a:	b90b      	cbnz	r3, 8010410 <__swsetup_r+0x14>
 801040c:	f7fd ff42 	bl	800e294 <__sinit>
 8010410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010414:	0719      	lsls	r1, r3, #28
 8010416:	d422      	bmi.n	801045e <__swsetup_r+0x62>
 8010418:	06da      	lsls	r2, r3, #27
 801041a:	d407      	bmi.n	801042c <__swsetup_r+0x30>
 801041c:	2209      	movs	r2, #9
 801041e:	602a      	str	r2, [r5, #0]
 8010420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010424:	81a3      	strh	r3, [r4, #12]
 8010426:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801042a:	e033      	b.n	8010494 <__swsetup_r+0x98>
 801042c:	0758      	lsls	r0, r3, #29
 801042e:	d512      	bpl.n	8010456 <__swsetup_r+0x5a>
 8010430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010432:	b141      	cbz	r1, 8010446 <__swsetup_r+0x4a>
 8010434:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010438:	4299      	cmp	r1, r3
 801043a:	d002      	beq.n	8010442 <__swsetup_r+0x46>
 801043c:	4628      	mov	r0, r5
 801043e:	f7fe fe83 	bl	800f148 <_free_r>
 8010442:	2300      	movs	r3, #0
 8010444:	6363      	str	r3, [r4, #52]	@ 0x34
 8010446:	89a3      	ldrh	r3, [r4, #12]
 8010448:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801044c:	81a3      	strh	r3, [r4, #12]
 801044e:	2300      	movs	r3, #0
 8010450:	6063      	str	r3, [r4, #4]
 8010452:	6923      	ldr	r3, [r4, #16]
 8010454:	6023      	str	r3, [r4, #0]
 8010456:	89a3      	ldrh	r3, [r4, #12]
 8010458:	f043 0308 	orr.w	r3, r3, #8
 801045c:	81a3      	strh	r3, [r4, #12]
 801045e:	6923      	ldr	r3, [r4, #16]
 8010460:	b94b      	cbnz	r3, 8010476 <__swsetup_r+0x7a>
 8010462:	89a3      	ldrh	r3, [r4, #12]
 8010464:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801046c:	d003      	beq.n	8010476 <__swsetup_r+0x7a>
 801046e:	4621      	mov	r1, r4
 8010470:	4628      	mov	r0, r5
 8010472:	f000 f83f 	bl	80104f4 <__smakebuf_r>
 8010476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801047a:	f013 0201 	ands.w	r2, r3, #1
 801047e:	d00a      	beq.n	8010496 <__swsetup_r+0x9a>
 8010480:	2200      	movs	r2, #0
 8010482:	60a2      	str	r2, [r4, #8]
 8010484:	6962      	ldr	r2, [r4, #20]
 8010486:	4252      	negs	r2, r2
 8010488:	61a2      	str	r2, [r4, #24]
 801048a:	6922      	ldr	r2, [r4, #16]
 801048c:	b942      	cbnz	r2, 80104a0 <__swsetup_r+0xa4>
 801048e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010492:	d1c5      	bne.n	8010420 <__swsetup_r+0x24>
 8010494:	bd38      	pop	{r3, r4, r5, pc}
 8010496:	0799      	lsls	r1, r3, #30
 8010498:	bf58      	it	pl
 801049a:	6962      	ldrpl	r2, [r4, #20]
 801049c:	60a2      	str	r2, [r4, #8]
 801049e:	e7f4      	b.n	801048a <__swsetup_r+0x8e>
 80104a0:	2000      	movs	r0, #0
 80104a2:	e7f7      	b.n	8010494 <__swsetup_r+0x98>
 80104a4:	20000040 	.word	0x20000040

080104a8 <__swhatbuf_r>:
 80104a8:	b570      	push	{r4, r5, r6, lr}
 80104aa:	460c      	mov	r4, r1
 80104ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104b0:	2900      	cmp	r1, #0
 80104b2:	b096      	sub	sp, #88	@ 0x58
 80104b4:	4615      	mov	r5, r2
 80104b6:	461e      	mov	r6, r3
 80104b8:	da0d      	bge.n	80104d6 <__swhatbuf_r+0x2e>
 80104ba:	89a3      	ldrh	r3, [r4, #12]
 80104bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80104c0:	f04f 0100 	mov.w	r1, #0
 80104c4:	bf14      	ite	ne
 80104c6:	2340      	movne	r3, #64	@ 0x40
 80104c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80104cc:	2000      	movs	r0, #0
 80104ce:	6031      	str	r1, [r6, #0]
 80104d0:	602b      	str	r3, [r5, #0]
 80104d2:	b016      	add	sp, #88	@ 0x58
 80104d4:	bd70      	pop	{r4, r5, r6, pc}
 80104d6:	466a      	mov	r2, sp
 80104d8:	f000 f848 	bl	801056c <_fstat_r>
 80104dc:	2800      	cmp	r0, #0
 80104de:	dbec      	blt.n	80104ba <__swhatbuf_r+0x12>
 80104e0:	9901      	ldr	r1, [sp, #4]
 80104e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80104e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80104ea:	4259      	negs	r1, r3
 80104ec:	4159      	adcs	r1, r3
 80104ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80104f2:	e7eb      	b.n	80104cc <__swhatbuf_r+0x24>

080104f4 <__smakebuf_r>:
 80104f4:	898b      	ldrh	r3, [r1, #12]
 80104f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104f8:	079d      	lsls	r5, r3, #30
 80104fa:	4606      	mov	r6, r0
 80104fc:	460c      	mov	r4, r1
 80104fe:	d507      	bpl.n	8010510 <__smakebuf_r+0x1c>
 8010500:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010504:	6023      	str	r3, [r4, #0]
 8010506:	6123      	str	r3, [r4, #16]
 8010508:	2301      	movs	r3, #1
 801050a:	6163      	str	r3, [r4, #20]
 801050c:	b003      	add	sp, #12
 801050e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010510:	ab01      	add	r3, sp, #4
 8010512:	466a      	mov	r2, sp
 8010514:	f7ff ffc8 	bl	80104a8 <__swhatbuf_r>
 8010518:	9f00      	ldr	r7, [sp, #0]
 801051a:	4605      	mov	r5, r0
 801051c:	4639      	mov	r1, r7
 801051e:	4630      	mov	r0, r6
 8010520:	f7fe ffde 	bl	800f4e0 <_malloc_r>
 8010524:	b948      	cbnz	r0, 801053a <__smakebuf_r+0x46>
 8010526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801052a:	059a      	lsls	r2, r3, #22
 801052c:	d4ee      	bmi.n	801050c <__smakebuf_r+0x18>
 801052e:	f023 0303 	bic.w	r3, r3, #3
 8010532:	f043 0302 	orr.w	r3, r3, #2
 8010536:	81a3      	strh	r3, [r4, #12]
 8010538:	e7e2      	b.n	8010500 <__smakebuf_r+0xc>
 801053a:	89a3      	ldrh	r3, [r4, #12]
 801053c:	6020      	str	r0, [r4, #0]
 801053e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010542:	81a3      	strh	r3, [r4, #12]
 8010544:	9b01      	ldr	r3, [sp, #4]
 8010546:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801054a:	b15b      	cbz	r3, 8010564 <__smakebuf_r+0x70>
 801054c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010550:	4630      	mov	r0, r6
 8010552:	f000 f81d 	bl	8010590 <_isatty_r>
 8010556:	b128      	cbz	r0, 8010564 <__smakebuf_r+0x70>
 8010558:	89a3      	ldrh	r3, [r4, #12]
 801055a:	f023 0303 	bic.w	r3, r3, #3
 801055e:	f043 0301 	orr.w	r3, r3, #1
 8010562:	81a3      	strh	r3, [r4, #12]
 8010564:	89a3      	ldrh	r3, [r4, #12]
 8010566:	431d      	orrs	r5, r3
 8010568:	81a5      	strh	r5, [r4, #12]
 801056a:	e7cf      	b.n	801050c <__smakebuf_r+0x18>

0801056c <_fstat_r>:
 801056c:	b538      	push	{r3, r4, r5, lr}
 801056e:	4d07      	ldr	r5, [pc, #28]	@ (801058c <_fstat_r+0x20>)
 8010570:	2300      	movs	r3, #0
 8010572:	4604      	mov	r4, r0
 8010574:	4608      	mov	r0, r1
 8010576:	4611      	mov	r1, r2
 8010578:	602b      	str	r3, [r5, #0]
 801057a:	f7f1 fbea 	bl	8001d52 <_fstat>
 801057e:	1c43      	adds	r3, r0, #1
 8010580:	d102      	bne.n	8010588 <_fstat_r+0x1c>
 8010582:	682b      	ldr	r3, [r5, #0]
 8010584:	b103      	cbz	r3, 8010588 <_fstat_r+0x1c>
 8010586:	6023      	str	r3, [r4, #0]
 8010588:	bd38      	pop	{r3, r4, r5, pc}
 801058a:	bf00      	nop
 801058c:	20004e08 	.word	0x20004e08

08010590 <_isatty_r>:
 8010590:	b538      	push	{r3, r4, r5, lr}
 8010592:	4d06      	ldr	r5, [pc, #24]	@ (80105ac <_isatty_r+0x1c>)
 8010594:	2300      	movs	r3, #0
 8010596:	4604      	mov	r4, r0
 8010598:	4608      	mov	r0, r1
 801059a:	602b      	str	r3, [r5, #0]
 801059c:	f7f1 fbe9 	bl	8001d72 <_isatty>
 80105a0:	1c43      	adds	r3, r0, #1
 80105a2:	d102      	bne.n	80105aa <_isatty_r+0x1a>
 80105a4:	682b      	ldr	r3, [r5, #0]
 80105a6:	b103      	cbz	r3, 80105aa <_isatty_r+0x1a>
 80105a8:	6023      	str	r3, [r4, #0]
 80105aa:	bd38      	pop	{r3, r4, r5, pc}
 80105ac:	20004e08 	.word	0x20004e08

080105b0 <_raise_r>:
 80105b0:	291f      	cmp	r1, #31
 80105b2:	b538      	push	{r3, r4, r5, lr}
 80105b4:	4605      	mov	r5, r0
 80105b6:	460c      	mov	r4, r1
 80105b8:	d904      	bls.n	80105c4 <_raise_r+0x14>
 80105ba:	2316      	movs	r3, #22
 80105bc:	6003      	str	r3, [r0, #0]
 80105be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80105c2:	bd38      	pop	{r3, r4, r5, pc}
 80105c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80105c6:	b112      	cbz	r2, 80105ce <_raise_r+0x1e>
 80105c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105cc:	b94b      	cbnz	r3, 80105e2 <_raise_r+0x32>
 80105ce:	4628      	mov	r0, r5
 80105d0:	f000 f830 	bl	8010634 <_getpid_r>
 80105d4:	4622      	mov	r2, r4
 80105d6:	4601      	mov	r1, r0
 80105d8:	4628      	mov	r0, r5
 80105da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105de:	f000 b817 	b.w	8010610 <_kill_r>
 80105e2:	2b01      	cmp	r3, #1
 80105e4:	d00a      	beq.n	80105fc <_raise_r+0x4c>
 80105e6:	1c59      	adds	r1, r3, #1
 80105e8:	d103      	bne.n	80105f2 <_raise_r+0x42>
 80105ea:	2316      	movs	r3, #22
 80105ec:	6003      	str	r3, [r0, #0]
 80105ee:	2001      	movs	r0, #1
 80105f0:	e7e7      	b.n	80105c2 <_raise_r+0x12>
 80105f2:	2100      	movs	r1, #0
 80105f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80105f8:	4620      	mov	r0, r4
 80105fa:	4798      	blx	r3
 80105fc:	2000      	movs	r0, #0
 80105fe:	e7e0      	b.n	80105c2 <_raise_r+0x12>

08010600 <raise>:
 8010600:	4b02      	ldr	r3, [pc, #8]	@ (801060c <raise+0xc>)
 8010602:	4601      	mov	r1, r0
 8010604:	6818      	ldr	r0, [r3, #0]
 8010606:	f7ff bfd3 	b.w	80105b0 <_raise_r>
 801060a:	bf00      	nop
 801060c:	20000040 	.word	0x20000040

08010610 <_kill_r>:
 8010610:	b538      	push	{r3, r4, r5, lr}
 8010612:	4d07      	ldr	r5, [pc, #28]	@ (8010630 <_kill_r+0x20>)
 8010614:	2300      	movs	r3, #0
 8010616:	4604      	mov	r4, r0
 8010618:	4608      	mov	r0, r1
 801061a:	4611      	mov	r1, r2
 801061c:	602b      	str	r3, [r5, #0]
 801061e:	f7f1 fb38 	bl	8001c92 <_kill>
 8010622:	1c43      	adds	r3, r0, #1
 8010624:	d102      	bne.n	801062c <_kill_r+0x1c>
 8010626:	682b      	ldr	r3, [r5, #0]
 8010628:	b103      	cbz	r3, 801062c <_kill_r+0x1c>
 801062a:	6023      	str	r3, [r4, #0]
 801062c:	bd38      	pop	{r3, r4, r5, pc}
 801062e:	bf00      	nop
 8010630:	20004e08 	.word	0x20004e08

08010634 <_getpid_r>:
 8010634:	f7f1 bb25 	b.w	8001c82 <_getpid>

08010638 <expf>:
 8010638:	b508      	push	{r3, lr}
 801063a:	ed2d 8b02 	vpush	{d8}
 801063e:	eef0 8a40 	vmov.f32	s17, s0
 8010642:	f000 f839 	bl	80106b8 <__ieee754_expf>
 8010646:	eeb0 8a40 	vmov.f32	s16, s0
 801064a:	eeb0 0a68 	vmov.f32	s0, s17
 801064e:	f000 f829 	bl	80106a4 <finitef>
 8010652:	b160      	cbz	r0, 801066e <expf+0x36>
 8010654:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8010694 <expf+0x5c>
 8010658:	eef4 8ae7 	vcmpe.f32	s17, s15
 801065c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010660:	dd0a      	ble.n	8010678 <expf+0x40>
 8010662:	f7fd fee9 	bl	800e438 <__errno>
 8010666:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8010698 <expf+0x60>
 801066a:	2322      	movs	r3, #34	@ 0x22
 801066c:	6003      	str	r3, [r0, #0]
 801066e:	eeb0 0a48 	vmov.f32	s0, s16
 8010672:	ecbd 8b02 	vpop	{d8}
 8010676:	bd08      	pop	{r3, pc}
 8010678:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801069c <expf+0x64>
 801067c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010684:	d5f3      	bpl.n	801066e <expf+0x36>
 8010686:	f7fd fed7 	bl	800e438 <__errno>
 801068a:	2322      	movs	r3, #34	@ 0x22
 801068c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 80106a0 <expf+0x68>
 8010690:	6003      	str	r3, [r0, #0]
 8010692:	e7ec      	b.n	801066e <expf+0x36>
 8010694:	42b17217 	.word	0x42b17217
 8010698:	7f800000 	.word	0x7f800000
 801069c:	c2cff1b5 	.word	0xc2cff1b5
 80106a0:	00000000 	.word	0x00000000

080106a4 <finitef>:
 80106a4:	ee10 3a10 	vmov	r3, s0
 80106a8:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80106ac:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80106b0:	bfac      	ite	ge
 80106b2:	2000      	movge	r0, #0
 80106b4:	2001      	movlt	r0, #1
 80106b6:	4770      	bx	lr

080106b8 <__ieee754_expf>:
 80106b8:	ee10 2a10 	vmov	r2, s0
 80106bc:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 80106c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80106c4:	d902      	bls.n	80106cc <__ieee754_expf+0x14>
 80106c6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80106ca:	4770      	bx	lr
 80106cc:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80106d0:	d106      	bne.n	80106e0 <__ieee754_expf+0x28>
 80106d2:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801080c <__ieee754_expf+0x154>
 80106d6:	2900      	cmp	r1, #0
 80106d8:	bf18      	it	ne
 80106da:	eeb0 0a67 	vmovne.f32	s0, s15
 80106de:	4770      	bx	lr
 80106e0:	484b      	ldr	r0, [pc, #300]	@ (8010810 <__ieee754_expf+0x158>)
 80106e2:	4282      	cmp	r2, r0
 80106e4:	dd02      	ble.n	80106ec <__ieee754_expf+0x34>
 80106e6:	2000      	movs	r0, #0
 80106e8:	f000 b92a 	b.w	8010940 <__math_oflowf>
 80106ec:	2a00      	cmp	r2, #0
 80106ee:	da05      	bge.n	80106fc <__ieee754_expf+0x44>
 80106f0:	4a48      	ldr	r2, [pc, #288]	@ (8010814 <__ieee754_expf+0x15c>)
 80106f2:	4293      	cmp	r3, r2
 80106f4:	d902      	bls.n	80106fc <__ieee754_expf+0x44>
 80106f6:	2000      	movs	r0, #0
 80106f8:	f000 b91c 	b.w	8010934 <__math_uflowf>
 80106fc:	4a46      	ldr	r2, [pc, #280]	@ (8010818 <__ieee754_expf+0x160>)
 80106fe:	4293      	cmp	r3, r2
 8010700:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8010704:	d952      	bls.n	80107ac <__ieee754_expf+0xf4>
 8010706:	4a45      	ldr	r2, [pc, #276]	@ (801081c <__ieee754_expf+0x164>)
 8010708:	4293      	cmp	r3, r2
 801070a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801070e:	d834      	bhi.n	801077a <__ieee754_expf+0xc2>
 8010710:	4b43      	ldr	r3, [pc, #268]	@ (8010820 <__ieee754_expf+0x168>)
 8010712:	4413      	add	r3, r2
 8010714:	ed93 7a00 	vldr	s14, [r3]
 8010718:	4b42      	ldr	r3, [pc, #264]	@ (8010824 <__ieee754_expf+0x16c>)
 801071a:	4413      	add	r3, r2
 801071c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8010720:	f1c1 0201 	rsb	r2, r1, #1
 8010724:	edd3 7a00 	vldr	s15, [r3]
 8010728:	1a52      	subs	r2, r2, r1
 801072a:	ee37 0a67 	vsub.f32	s0, s14, s15
 801072e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8010732:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8010828 <__ieee754_expf+0x170>
 8010736:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801082c <__ieee754_expf+0x174>
 801073a:	eee6 6a05 	vfma.f32	s13, s12, s10
 801073e:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8010830 <__ieee754_expf+0x178>
 8010742:	eea6 5a86 	vfma.f32	s10, s13, s12
 8010746:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010834 <__ieee754_expf+0x17c>
 801074a:	eee5 6a06 	vfma.f32	s13, s10, s12
 801074e:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8010838 <__ieee754_expf+0x180>
 8010752:	eea6 5a86 	vfma.f32	s10, s13, s12
 8010756:	eef0 6a40 	vmov.f32	s13, s0
 801075a:	eee5 6a46 	vfms.f32	s13, s10, s12
 801075e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010762:	ee20 5a26 	vmul.f32	s10, s0, s13
 8010766:	bb92      	cbnz	r2, 80107ce <__ieee754_expf+0x116>
 8010768:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801076c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8010770:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010774:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8010778:	4770      	bx	lr
 801077a:	4b30      	ldr	r3, [pc, #192]	@ (801083c <__ieee754_expf+0x184>)
 801077c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8010840 <__ieee754_expf+0x188>
 8010780:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8010844 <__ieee754_expf+0x18c>
 8010784:	4413      	add	r3, r2
 8010786:	edd3 7a00 	vldr	s15, [r3]
 801078a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801078e:	eeb0 7a40 	vmov.f32	s14, s0
 8010792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010796:	ee17 2a90 	vmov	r2, s15
 801079a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801079e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80107a2:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8010848 <__ieee754_expf+0x190>
 80107a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80107aa:	e7be      	b.n	801072a <__ieee754_expf+0x72>
 80107ac:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 80107b0:	d20b      	bcs.n	80107ca <__ieee754_expf+0x112>
 80107b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801084c <__ieee754_expf+0x194>
 80107b6:	ee70 6a26 	vadd.f32	s13, s0, s13
 80107ba:	eef4 6ae5 	vcmpe.f32	s13, s11
 80107be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c2:	dd02      	ble.n	80107ca <__ieee754_expf+0x112>
 80107c4:	ee30 0a25 	vadd.f32	s0, s0, s11
 80107c8:	4770      	bx	lr
 80107ca:	2200      	movs	r2, #0
 80107cc:	e7af      	b.n	801072e <__ieee754_expf+0x76>
 80107ce:	ee36 6a66 	vsub.f32	s12, s12, s13
 80107d2:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 80107d6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80107da:	bfb8      	it	lt
 80107dc:	3264      	addlt	r2, #100	@ 0x64
 80107de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80107e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80107e6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80107ea:	ee17 3a90 	vmov	r3, s15
 80107ee:	bfab      	itete	ge
 80107f0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80107f4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80107f8:	ee00 3a10 	vmovge	s0, r3
 80107fc:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8010850 <__ieee754_expf+0x198>
 8010800:	bfbc      	itt	lt
 8010802:	ee00 3a10 	vmovlt	s0, r3
 8010806:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801080a:	4770      	bx	lr
 801080c:	00000000 	.word	0x00000000
 8010810:	42b17217 	.word	0x42b17217
 8010814:	42cff1b5 	.word	0x42cff1b5
 8010818:	3eb17218 	.word	0x3eb17218
 801081c:	3f851591 	.word	0x3f851591
 8010820:	08010f98 	.word	0x08010f98
 8010824:	08010f90 	.word	0x08010f90
 8010828:	3331bb4c 	.word	0x3331bb4c
 801082c:	b5ddea0e 	.word	0xb5ddea0e
 8010830:	388ab355 	.word	0x388ab355
 8010834:	bb360b61 	.word	0xbb360b61
 8010838:	3e2aaaab 	.word	0x3e2aaaab
 801083c:	08010fa0 	.word	0x08010fa0
 8010840:	3fb8aa3b 	.word	0x3fb8aa3b
 8010844:	3f317180 	.word	0x3f317180
 8010848:	3717f7d1 	.word	0x3717f7d1
 801084c:	7149f2ca 	.word	0x7149f2ca
 8010850:	0d800000 	.word	0x0d800000

08010854 <fmaxf>:
 8010854:	b508      	push	{r3, lr}
 8010856:	ed2d 8b02 	vpush	{d8}
 801085a:	eeb0 8a40 	vmov.f32	s16, s0
 801085e:	eef0 8a60 	vmov.f32	s17, s1
 8010862:	f000 f831 	bl	80108c8 <__fpclassifyf>
 8010866:	b930      	cbnz	r0, 8010876 <fmaxf+0x22>
 8010868:	eeb0 8a68 	vmov.f32	s16, s17
 801086c:	eeb0 0a48 	vmov.f32	s0, s16
 8010870:	ecbd 8b02 	vpop	{d8}
 8010874:	bd08      	pop	{r3, pc}
 8010876:	eeb0 0a68 	vmov.f32	s0, s17
 801087a:	f000 f825 	bl	80108c8 <__fpclassifyf>
 801087e:	2800      	cmp	r0, #0
 8010880:	d0f4      	beq.n	801086c <fmaxf+0x18>
 8010882:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801088a:	dded      	ble.n	8010868 <fmaxf+0x14>
 801088c:	e7ee      	b.n	801086c <fmaxf+0x18>

0801088e <fminf>:
 801088e:	b508      	push	{r3, lr}
 8010890:	ed2d 8b02 	vpush	{d8}
 8010894:	eeb0 8a40 	vmov.f32	s16, s0
 8010898:	eef0 8a60 	vmov.f32	s17, s1
 801089c:	f000 f814 	bl	80108c8 <__fpclassifyf>
 80108a0:	b930      	cbnz	r0, 80108b0 <fminf+0x22>
 80108a2:	eeb0 8a68 	vmov.f32	s16, s17
 80108a6:	eeb0 0a48 	vmov.f32	s0, s16
 80108aa:	ecbd 8b02 	vpop	{d8}
 80108ae:	bd08      	pop	{r3, pc}
 80108b0:	eeb0 0a68 	vmov.f32	s0, s17
 80108b4:	f000 f808 	bl	80108c8 <__fpclassifyf>
 80108b8:	2800      	cmp	r0, #0
 80108ba:	d0f4      	beq.n	80108a6 <fminf+0x18>
 80108bc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80108c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108c4:	d5ed      	bpl.n	80108a2 <fminf+0x14>
 80108c6:	e7ee      	b.n	80108a6 <fminf+0x18>

080108c8 <__fpclassifyf>:
 80108c8:	ee10 3a10 	vmov	r3, s0
 80108cc:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80108d0:	d00d      	beq.n	80108ee <__fpclassifyf+0x26>
 80108d2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80108d6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80108da:	d30a      	bcc.n	80108f2 <__fpclassifyf+0x2a>
 80108dc:	4b07      	ldr	r3, [pc, #28]	@ (80108fc <__fpclassifyf+0x34>)
 80108de:	1e42      	subs	r2, r0, #1
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d908      	bls.n	80108f6 <__fpclassifyf+0x2e>
 80108e4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80108e8:	4258      	negs	r0, r3
 80108ea:	4158      	adcs	r0, r3
 80108ec:	4770      	bx	lr
 80108ee:	2002      	movs	r0, #2
 80108f0:	4770      	bx	lr
 80108f2:	2004      	movs	r0, #4
 80108f4:	4770      	bx	lr
 80108f6:	2003      	movs	r0, #3
 80108f8:	4770      	bx	lr
 80108fa:	bf00      	nop
 80108fc:	007ffffe 	.word	0x007ffffe

08010900 <with_errnof>:
 8010900:	b510      	push	{r4, lr}
 8010902:	ed2d 8b02 	vpush	{d8}
 8010906:	eeb0 8a40 	vmov.f32	s16, s0
 801090a:	4604      	mov	r4, r0
 801090c:	f7fd fd94 	bl	800e438 <__errno>
 8010910:	eeb0 0a48 	vmov.f32	s0, s16
 8010914:	ecbd 8b02 	vpop	{d8}
 8010918:	6004      	str	r4, [r0, #0]
 801091a:	bd10      	pop	{r4, pc}

0801091c <xflowf>:
 801091c:	b130      	cbz	r0, 801092c <xflowf+0x10>
 801091e:	eef1 7a40 	vneg.f32	s15, s0
 8010922:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010926:	2022      	movs	r0, #34	@ 0x22
 8010928:	f7ff bfea 	b.w	8010900 <with_errnof>
 801092c:	eef0 7a40 	vmov.f32	s15, s0
 8010930:	e7f7      	b.n	8010922 <xflowf+0x6>
	...

08010934 <__math_uflowf>:
 8010934:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801093c <__math_uflowf+0x8>
 8010938:	f7ff bff0 	b.w	801091c <xflowf>
 801093c:	10000000 	.word	0x10000000

08010940 <__math_oflowf>:
 8010940:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010948 <__math_oflowf+0x8>
 8010944:	f7ff bfea 	b.w	801091c <xflowf>
 8010948:	70000000 	.word	0x70000000

0801094c <_init>:
 801094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801094e:	bf00      	nop
 8010950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010952:	bc08      	pop	{r3}
 8010954:	469e      	mov	lr, r3
 8010956:	4770      	bx	lr

08010958 <_fini>:
 8010958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801095a:	bf00      	nop
 801095c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801095e:	bc08      	pop	{r3}
 8010960:	469e      	mov	lr, r3
 8010962:	4770      	bx	lr
