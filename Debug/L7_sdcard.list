
L7_sdcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3e0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  0800d5c0  0800d5c0  0000e5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbb0  0800dbb0  0000f1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbb0  0800dbb0  0000ebb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbb8  0800dbb8  0000f1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbb8  0800dbb8  0000ebb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbbc  0800dbbc  0000ebbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800dbc0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b8c  200001f8  0800ddb8  0000f1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d84  0800ddb8  0000fd84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017aab  00000000  00000000  0000f228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a51  00000000  00000000  00026cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  0002a728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef8  00000000  00000000  0002bab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002639c  00000000  00000000  0002c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b971  00000000  00000000  00052d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dafc4  00000000  00000000  0006e6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149679  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000633c  00000000  00000000  001496bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  0014f9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d5a8 	.word	0x0800d5a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	0800d5a8 	.word	0x0800d5a8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_GPIO_EXTI_Callback>:
FIL fil;        // File handle
FRESULT fres;   // Result after operations


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
     if (GPIO_Pin == GPIO_PIN_0)
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d102      	bne.n	8000f9e <HAL_GPIO_EXTI_Callback+0x16>
     {
		temperature = true;
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <HAL_GPIO_EXTI_Callback+0x24>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
   	  }
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	200005f8 	.word	0x200005f8

08000fb0 <myprintf>:


void myprintf(const char *fmt, ...) {
 8000fb0:	b40f      	push	{r0, r1, r2, r3}
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc6:	480b      	ldr	r0, [pc, #44]	@ (8000ff4 <myprintf+0x44>)
 8000fc8:	f00a f84a 	bl	800b060 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000fcc:	4809      	ldr	r0, [pc, #36]	@ (8000ff4 <myprintf+0x44>)
 8000fce:	f7ff f977 	bl	80002c0 <strlen>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fde:	4905      	ldr	r1, [pc, #20]	@ (8000ff4 <myprintf+0x44>)
 8000fe0:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <myprintf+0x48>)
 8000fe2:	f004 fe97 	bl	8005d14 <HAL_UART_Transmit>

}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ff0:	b004      	add	sp, #16
 8000ff2:	4770      	bx	lr
 8000ff4:	20000a64 	.word	0x20000a64
 8000ff8:	20000214 	.word	0x20000214

08000ffc <sd_init>:
void sd_init()
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0

	 myprintf("\r\n~ SD card started ~\r\n\r\n");
 8001002:	482c      	ldr	r0, [pc, #176]	@ (80010b4 <sd_init+0xb8>)
 8001004:	f7ff ffd4 	bl	8000fb0 <myprintf>
    HAL_Delay(1000);
 8001008:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800100c:	f000 fe7c 	bl	8001d08 <HAL_Delay>
	    // Mount the file system
	    fres = f_mount(&FatFs, "/", 1); // 1 = mount immediately
 8001010:	2201      	movs	r2, #1
 8001012:	4929      	ldr	r1, [pc, #164]	@ (80010b8 <sd_init+0xbc>)
 8001014:	4829      	ldr	r0, [pc, #164]	@ (80010bc <sd_init+0xc0>)
 8001016:	f008 fd91 	bl	8009b3c <f_mount>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <sd_init+0xc4>)
 8001020:	701a      	strb	r2, [r3, #0]
	    if (fres != FR_OK) {
 8001022:	4b27      	ldr	r3, [pc, #156]	@ (80010c0 <sd_init+0xc4>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d006      	beq.n	8001038 <sd_init+0x3c>
	        myprintf("f_mount error (%i)\r\n", fres);
 800102a:	4b25      	ldr	r3, [pc, #148]	@ (80010c0 <sd_init+0xc4>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4619      	mov	r1, r3
 8001030:	4824      	ldr	r0, [pc, #144]	@ (80010c4 <sd_init+0xc8>)
 8001032:	f7ff ffbd 	bl	8000fb0 <myprintf>
 8001036:	e005      	b.n	8001044 <sd_init+0x48>
	        // Infinite loop on failure
	    } else {
	        myprintf("f_mount success (%i)\r\n", fres);
 8001038:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <sd_init+0xc4>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	4822      	ldr	r0, [pc, #136]	@ (80010c8 <sd_init+0xcc>)
 8001040:	f7ff ffb6 	bl	8000fb0 <myprintf>
	    // Variables for free space calculation
	    DWORD free_clusters, free_sectors, total_sectors;
	    FATFS* getFreeFs;

	    // Get free space
	    fres = f_getfree("", &free_clusters, &getFreeFs);
 8001044:	463a      	mov	r2, r7
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4820      	ldr	r0, [pc, #128]	@ (80010cc <sd_init+0xd0>)
 800104c:	f009 f993 	bl	800a376 <f_getfree>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <sd_init+0xc4>)
 8001056:	701a      	strb	r2, [r3, #0]
	    if (fres != FR_OK) {
 8001058:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <sd_init+0xc4>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <sd_init+0x70>
	        myprintf("f_getfree error (%i)\r\n", fres);
 8001060:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <sd_init+0xc4>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	481a      	ldr	r0, [pc, #104]	@ (80010d0 <sd_init+0xd4>)
 8001068:	f7ff ffa2 	bl	8000fb0 <myprintf>
	        // Infinite loop on failure
	    }

	    // Calculate total and free space (formula from ChaN's documentation)
	    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	3b02      	subs	r3, #2
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	8952      	ldrh	r2, [r2, #10]
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	60fb      	str	r3, [r7, #12]
	    free_sectors = free_clusters * getFreeFs->csize;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	895b      	ldrh	r3, [r3, #10]
 8001080:	461a      	mov	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	60bb      	str	r3, [r7, #8]

	    myprintf("SD card stats:\r\n");
 800108a:	4812      	ldr	r0, [pc, #72]	@ (80010d4 <sd_init+0xd8>)
 800108c:	f7ff ff90 	bl	8000fb0 <myprintf>
	    myprintf("%10lu KiB total drive space.\r\n", total_sectors / 2);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	085b      	lsrs	r3, r3, #1
 8001094:	4619      	mov	r1, r3
 8001096:	4810      	ldr	r0, [pc, #64]	@ (80010d8 <sd_init+0xdc>)
 8001098:	f7ff ff8a 	bl	8000fb0 <myprintf>
	    myprintf("%10lu KiB available.\r\n", free_sectors / 2);
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	085b      	lsrs	r3, r3, #1
 80010a0:	4619      	mov	r1, r3
 80010a2:	480e      	ldr	r0, [pc, #56]	@ (80010dc <sd_init+0xe0>)
 80010a4:	f7ff ff84 	bl	8000fb0 <myprintf>

	    // Open file for writing
	    sd_open();
 80010a8:	f000 f866 	bl	8001178 <sd_open>



}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	0800d5c0 	.word	0x0800d5c0
 80010b8:	0800d5dc 	.word	0x0800d5dc
 80010bc:	20000600 	.word	0x20000600
 80010c0:	20000a60 	.word	0x20000a60
 80010c4:	0800d5e0 	.word	0x0800d5e0
 80010c8:	0800d5f8 	.word	0x0800d5f8
 80010cc:	0800d610 	.word	0x0800d610
 80010d0:	0800d614 	.word	0x0800d614
 80010d4:	0800d62c 	.word	0x0800d62c
 80010d8:	0800d640 	.word	0x0800d640
 80010dc:	0800d660 	.word	0x0800d660

080010e0 <sd_write>:
void sd_write()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_APPEND);
 80010e4:	2232      	movs	r2, #50	@ 0x32
 80010e6:	491c      	ldr	r1, [pc, #112]	@ (8001158 <sd_write+0x78>)
 80010e8:	481c      	ldr	r0, [pc, #112]	@ (800115c <sd_write+0x7c>)
 80010ea:	f008 fd6d 	bl	8009bc8 <f_open>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <sd_write+0x80>)
 80010f4:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK)
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <sd_write+0x80>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d113      	bne.n	8001126 <sd_write+0x46>
			    {
			        myprintf("Opened 'write.txt' for writing successfully.\r\n");
 80010fe:	4819      	ldr	r0, [pc, #100]	@ (8001164 <sd_write+0x84>)
 8001100:	f7ff ff56 	bl	8000fb0 <myprintf>
			    } else
			    {
			        myprintf("f_open error (%i)\r\n", fres);
			        while (1); // Infinite loop on failure
			    }
			 fres = f_write(&fil, log_console.msg, log_console.msg_len, &bytesWrote);
 8001104:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <sd_write+0x88>)
 8001106:	889b      	ldrh	r3, [r3, #4]
 8001108:	461a      	mov	r2, r3
 800110a:	4b18      	ldr	r3, [pc, #96]	@ (800116c <sd_write+0x8c>)
 800110c:	4918      	ldr	r1, [pc, #96]	@ (8001170 <sd_write+0x90>)
 800110e:	4813      	ldr	r0, [pc, #76]	@ (800115c <sd_write+0x7c>)
 8001110:	f008 ff14 	bl	8009f3c <f_write>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <sd_write+0x80>)
 800111a:	701a      	strb	r2, [r3, #0]
			 if (fres == FR_OK)
 800111c:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <sd_write+0x80>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10c      	bne.n	800113e <sd_write+0x5e>
 8001124:	e007      	b.n	8001136 <sd_write+0x56>
			        myprintf("f_open error (%i)\r\n", fres);
 8001126:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <sd_write+0x80>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	4811      	ldr	r0, [pc, #68]	@ (8001174 <sd_write+0x94>)
 800112e:	f7ff ff3f 	bl	8000fb0 <myprintf>
			        while (1); // Infinite loop on failure
 8001132:	bf00      	nop
 8001134:	e7fd      	b.n	8001132 <sd_write+0x52>
			 		    {
			 		        myprintf("Opened 'write.txt' for writing successfully.\r\n");
 8001136:	480b      	ldr	r0, [pc, #44]	@ (8001164 <sd_write+0x84>)
 8001138:	f7ff ff3a 	bl	8000fb0 <myprintf>
 800113c:	e007      	b.n	800114e <sd_write+0x6e>
			 		    } else
			 		    {
			 		        myprintf("f_open error (%i)\r\n", fres);
 800113e:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <sd_write+0x80>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	480b      	ldr	r0, [pc, #44]	@ (8001174 <sd_write+0x94>)
 8001146:	f7ff ff33 	bl	8000fb0 <myprintf>
			 		        while (1); // Infinite loop on failure
 800114a:	bf00      	nop
 800114c:	e7fd      	b.n	800114a <sd_write+0x6a>
			 		    }
	f_close(&fil);
 800114e:	4803      	ldr	r0, [pc, #12]	@ (800115c <sd_write+0x7c>)
 8001150:	f009 f8e7 	bl	800a322 <f_close>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	0800d678 	.word	0x0800d678
 800115c:	20000830 	.word	0x20000830
 8001160:	20000a60 	.word	0x20000a60
 8001164:	0800d684 	.word	0x0800d684
 8001168:	200002f0 	.word	0x200002f0
 800116c:	200005fc 	.word	0x200005fc
 8001170:	200002f6 	.word	0x200002f6
 8001174:	0800d6b4 	.word	0x0800d6b4

08001178 <sd_open>:
void sd_open()
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800117c:	221a      	movs	r2, #26
 800117e:	490e      	ldr	r1, [pc, #56]	@ (80011b8 <sd_open+0x40>)
 8001180:	480e      	ldr	r0, [pc, #56]	@ (80011bc <sd_open+0x44>)
 8001182:	f008 fd21 	bl	8009bc8 <f_open>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <sd_open+0x48>)
 800118c:	701a      	strb	r2, [r3, #0]
		    if (fres == FR_OK)
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <sd_open+0x48>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d103      	bne.n	800119e <sd_open+0x26>
		    {
		        myprintf("Opened 'write.txt' for writing successfully.\r\n");
 8001196:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <sd_open+0x4c>)
 8001198:	f7ff ff0a 	bl	8000fb0 <myprintf>
 800119c:	e007      	b.n	80011ae <sd_open+0x36>
		    } else
		    {
		        myprintf("f_open error (%i)\r\n", fres);
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <sd_open+0x48>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	4808      	ldr	r0, [pc, #32]	@ (80011c8 <sd_open+0x50>)
 80011a6:	f7ff ff03 	bl	8000fb0 <myprintf>
		        while (1); // Infinite loop on failure
 80011aa:	bf00      	nop
 80011ac:	e7fd      	b.n	80011aa <sd_open+0x32>
		    }
	f_close(&fil);
 80011ae:	4803      	ldr	r0, [pc, #12]	@ (80011bc <sd_open+0x44>)
 80011b0:	f009 f8b7 	bl	800a322 <f_close>
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	0800d678 	.word	0x0800d678
 80011bc:	20000830 	.word	0x20000830
 80011c0:	20000a60 	.word	0x20000a60
 80011c4:	0800d684 	.word	0x0800d684
 80011c8:	0800d6b4 	.word	0x0800d6b4

080011cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011cc:	b5b0      	push	{r4, r5, r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  int ir_values = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d6:	f000 fd3a 	bl	8001c4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011da:	f000 f923 	bl	8001424 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 80011de:	f000 f9bb 	bl	8001558 <MX_GPIO_Init>
  erlog_init(&log_console, &huart3);
 80011e2:	497e      	ldr	r1, [pc, #504]	@ (80013dc <main+0x210>)
 80011e4:	487e      	ldr	r0, [pc, #504]	@ (80013e0 <main+0x214>)
 80011e6:	f005 ffd3 	bl	8007190 <erlog_init>
  max30102_init(&max30102 , &hi2c2);
 80011ea:	497e      	ldr	r1, [pc, #504]	@ (80013e4 <main+0x218>)
 80011ec:	487e      	ldr	r0, [pc, #504]	@ (80013e8 <main+0x21c>)
 80011ee:	f006 fad9 	bl	80077a4 <max30102_init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_SPI1_Init();
 80011f2:	f000 f973 	bl	80014dc <MX_SPI1_Init>
  MX_FATFS_Init();
 80011f6:	f005 fa45 	bl	8006684 <MX_FATFS_Init>
  sd_init();
 80011fa:	f7ff feff 	bl	8000ffc <sd_init>
  /* USER CODE BEGIN 2 */

  read_register(&max30102, MAX30102_REVISIONID , &max30102.revision_id);
 80011fe:	4a7b      	ldr	r2, [pc, #492]	@ (80013ec <main+0x220>)
 8001200:	21fe      	movs	r1, #254	@ 0xfe
 8001202:	4879      	ldr	r0, [pc, #484]	@ (80013e8 <main+0x21c>)
 8001204:	f006 faf1 	bl	80077ea <read_register>
  read_register(&max30102, MAX30102_PARTID , &max30102.part_id);
 8001208:	4a79      	ldr	r2, [pc, #484]	@ (80013f0 <main+0x224>)
 800120a:	21ff      	movs	r1, #255	@ 0xff
 800120c:	4876      	ldr	r0, [pc, #472]	@ (80013e8 <main+0x21c>)
 800120e:	f006 faec 	bl	80077ea <read_register>
  log_console.msg_len = sprintf((char *)log_console.msg,"MAX30102 Revision_id: %x, Part_id: %x\r\n", max30102.revision_id, max30102.part_id);
 8001212:	4b75      	ldr	r3, [pc, #468]	@ (80013e8 <main+0x21c>)
 8001214:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8001218:	461a      	mov	r2, r3
 800121a:	4b73      	ldr	r3, [pc, #460]	@ (80013e8 <main+0x21c>)
 800121c:	f893 3187 	ldrb.w	r3, [r3, #391]	@ 0x187
 8001220:	4974      	ldr	r1, [pc, #464]	@ (80013f4 <main+0x228>)
 8001222:	4875      	ldr	r0, [pc, #468]	@ (80013f8 <main+0x22c>)
 8001224:	f009 fe0e 	bl	800ae44 <siprintf>
 8001228:	4603      	mov	r3, r0
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b6c      	ldr	r3, [pc, #432]	@ (80013e0 <main+0x214>)
 800122e:	809a      	strh	r2, [r3, #4]
  erlog_write(&log_console);
 8001230:	486b      	ldr	r0, [pc, #428]	@ (80013e0 <main+0x214>)
 8001232:	f005 ffc8 	bl	80071c6 <erlog_write>
  erlog_clear(&log_console);
 8001236:	486a      	ldr	r0, [pc, #424]	@ (80013e0 <main+0x214>)
 8001238:	f005 ffd7 	bl	80071ea <erlog_clear>


  max30102_clear_fifo(&max30102);
 800123c:	486a      	ldr	r0, [pc, #424]	@ (80013e8 <main+0x21c>)
 800123e:	f006 fb55 	bl	80078ec <max30102_clear_fifo>
  max30102_softReset(&max30102);
 8001242:	4869      	ldr	r0, [pc, #420]	@ (80013e8 <main+0x21c>)
 8001244:	f006 fc92 	bl	8007b6c <max30102_softReset>
  max30102_set_fifoaverage(&max30102 , max30102_smp_ave_4);
 8001248:	2140      	movs	r1, #64	@ 0x40
 800124a:	4867      	ldr	r0, [pc, #412]	@ (80013e8 <main+0x21c>)
 800124c:	f006 fb65 	bl	800791a <max30102_set_fifoaverage>
  max30102_enableFIFORollover(&max30102);
 8001250:	4865      	ldr	r0, [pc, #404]	@ (80013e8 <main+0x21c>)
 8001252:	f006 fc0f 	bl	8007a74 <max30102_enableFIFORollover>

  max30102_setpulsewidth(&max30102 , max30102_pw_18_bit);
 8001256:	2103      	movs	r1, #3
 8001258:	4863      	ldr	r0, [pc, #396]	@ (80013e8 <main+0x21c>)
 800125a:	f006 fbfb 	bl	8007a54 <max30102_setpulsewidth>
  max30102_setadcrange(&max30102, max30102_adc_4096);
 800125e:	2120      	movs	r1, #32
 8001260:	4861      	ldr	r0, [pc, #388]	@ (80013e8 <main+0x21c>)
 8001262:	f006 fbd7 	bl	8007a14 <max30102_setadcrange>
  max30102_setsamplerate(&max30102, max30102_sr_400);
 8001266:	210c      	movs	r1, #12
 8001268:	485f      	ldr	r0, [pc, #380]	@ (80013e8 <main+0x21c>)
 800126a:	f006 fbe3 	bl	8007a34 <max30102_setsamplerate>
  max30102_setledmode(&max30102 , max30102_led_irg);
 800126e:	2103      	movs	r1, #3
 8001270:	485d      	ldr	r0, [pc, #372]	@ (80013e8 <main+0x21c>)
 8001272:	f006 fbbf 	bl	80079f4 <max30102_setledmode>
  max30102_set_pulseamplitude(&max30102, 0x1F, RED_COLOUR);   // configure heartbeat sensor colours
 8001276:	2201      	movs	r2, #1
 8001278:	211f      	movs	r1, #31
 800127a:	485b      	ldr	r0, [pc, #364]	@ (80013e8 <main+0x21c>)
 800127c:	f006 fc46 	bl	8007b0c <max30102_set_pulseamplitude>
  max30102_set_pulseamplitude(&max30102, 0x1F, GREEN_COLOUR);
 8001280:	2202      	movs	r2, #2
 8001282:	211f      	movs	r1, #31
 8001284:	4858      	ldr	r0, [pc, #352]	@ (80013e8 <main+0x21c>)
 8001286:	f006 fc41 	bl	8007b0c <max30102_set_pulseamplitude>
  max30102_set_pulseamplitude(&max30102, 0x1F, IR);
 800128a:	2203      	movs	r2, #3
 800128c:	211f      	movs	r1, #31
 800128e:	4856      	ldr	r0, [pc, #344]	@ (80013e8 <main+0x21c>)
 8001290:	f006 fc3c 	bl	8007b0c <max30102_set_pulseamplitude>
  max30102_set_pulseamplitude(&max30102, 0x1F, PROXIMITY);
 8001294:	2204      	movs	r2, #4
 8001296:	211f      	movs	r1, #31
 8001298:	4853      	ldr	r0, [pc, #332]	@ (80013e8 <main+0x21c>)
 800129a:	f006 fc37 	bl	8007b0c <max30102_set_pulseamplitude>

  max30102_enableSlot(&max30102 , 3, SLOT_GREEN_LED);
 800129e:	2303      	movs	r3, #3
 80012a0:	461a      	mov	r2, r3
 80012a2:	2103      	movs	r1, #3
 80012a4:	4850      	ldr	r0, [pc, #320]	@ (80013e8 <main+0x21c>)
 80012a6:	f006 fbf3 	bl	8007a90 <max30102_enableSlot>
  max30102_set_pulseamplitude(&max30102, 0x0A, RED_COLOUR);   // configure heartbeat sensor colours
 80012aa:	2201      	movs	r2, #1
 80012ac:	210a      	movs	r1, #10
 80012ae:	484e      	ldr	r0, [pc, #312]	@ (80013e8 <main+0x21c>)
 80012b0:	f006 fc2c 	bl	8007b0c <max30102_set_pulseamplitude>
  max30102_set_pulseamplitude(&max30102, 0x00, GREEN_COLOUR);
 80012b4:	2202      	movs	r2, #2
 80012b6:	2100      	movs	r1, #0
 80012b8:	484b      	ldr	r0, [pc, #300]	@ (80013e8 <main+0x21c>)
 80012ba:	f006 fc27 	bl	8007b0c <max30102_set_pulseamplitude>
  EXTI_Init(&max30102);
 80012be:	484a      	ldr	r0, [pc, #296]	@ (80013e8 <main+0x21c>)
 80012c0:	f006 fd87 	bl	8007dd2 <EXTI_Init>
  max30102_enableDIETEMPRDY(&max30102);
 80012c4:	4848      	ldr	r0, [pc, #288]	@ (80013e8 <main+0x21c>)
 80012c6:	f006 fb03 	bl	80078d0 <max30102_enableDIETEMPRDY>
  HAL_Delay(1);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f000 fd1c 	bl	8001d08 <HAL_Delay>
  /* USER CODE BEGIN 3 */
  while (1)
  {

	 /*measure temperature values*/
	 if(temperature == true)
 80012d0:	4b4a      	ldr	r3, [pc, #296]	@ (80013fc <main+0x230>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d01b      	beq.n	8001312 <main+0x146>
	 {
		 temp = max30102_readtemp(&max30102);
 80012da:	4843      	ldr	r0, [pc, #268]	@ (80013e8 <main+0x21c>)
 80012dc:	f006 fb2e 	bl	800793c <max30102_readtemp>
 80012e0:	eef0 7a40 	vmov.f32	s15, s0
 80012e4:	4b46      	ldr	r3, [pc, #280]	@ (8001400 <main+0x234>)
 80012e6:	edc3 7a00 	vstr	s15, [r3]
		 log_console.msg_len= sprintf((char *)log_console.msg,"Temp :- %0.2f C \r\n", temp);
 80012ea:	4b45      	ldr	r3, [pc, #276]	@ (8001400 <main+0x234>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f952 	bl	8000598 <__aeabi_f2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4942      	ldr	r1, [pc, #264]	@ (8001404 <main+0x238>)
 80012fa:	483f      	ldr	r0, [pc, #252]	@ (80013f8 <main+0x22c>)
 80012fc:	f009 fda2 	bl	800ae44 <siprintf>
 8001300:	4603      	mov	r3, r0
 8001302:	b29a      	uxth	r2, r3
 8001304:	4b36      	ldr	r3, [pc, #216]	@ (80013e0 <main+0x214>)
 8001306:	809a      	strh	r2, [r3, #4]
		 sd_write();
 8001308:	f7ff feea 	bl	80010e0 <sd_write>
		 temperature = false;
 800130c:	4b3b      	ldr	r3, [pc, #236]	@ (80013fc <main+0x230>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]

	 }

	 erlog_write(&log_console);
 8001312:	4833      	ldr	r0, [pc, #204]	@ (80013e0 <main+0x214>)
 8001314:	f005 ff57 	bl	80071c6 <erlog_write>
	 HAL_Delay(100);
 8001318:	2064      	movs	r0, #100	@ 0x64
 800131a:	f000 fcf5 	bl	8001d08 <HAL_Delay>
	 erlog_clear(&log_console);
 800131e:	4830      	ldr	r0, [pc, #192]	@ (80013e0 <main+0x214>)
 8001320:	f005 ff63 	bl	80071ea <erlog_clear>
     HAL_Delay(100);
 8001324:	2064      	movs	r0, #100	@ 0x64
 8001326:	f000 fcef 	bl	8001d08 <HAL_Delay>

     /*measure heartrate & spo2 values*/
	 ir_values = max30102_safeCheck(&max30102);
 800132a:	482f      	ldr	r0, [pc, #188]	@ (80013e8 <main+0x21c>)
 800132c:	f006 fd28 	bl	8007d80 <max30102_safeCheck>
 8001330:	4603      	mov	r3, r0
 8001332:	607b      	str	r3, [r7, #4]
	 if(ir_values > 50000)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800133a:	4293      	cmp	r3, r2
 800133c:	dd20      	ble.n	8001380 <main+0x1b4>
	 {
		 checkbeat(ir_values);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f006 f992 	bl	8007668 <checkbeat>
		 Spo2AvgInit(&max30102);
 8001344:	4828      	ldr	r0, [pc, #160]	@ (80013e8 <main+0x21c>)
 8001346:	f006 fdf3 	bl	8007f30 <Spo2AvgInit>
		 log_console.msg_len= sprintf((char *)log_console.msg,"Finger Detected , Heartbeat:- %f , spo2 - %f\r\n", beatsPerMinute, spo2);
 800134a:	4b2f      	ldr	r3, [pc, #188]	@ (8001408 <main+0x23c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f922 	bl	8000598 <__aeabi_f2d>
 8001354:	4604      	mov	r4, r0
 8001356:	460d      	mov	r5, r1
 8001358:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <main+0x240>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f91b 	bl	8000598 <__aeabi_f2d>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	e9cd 2300 	strd	r2, r3, [sp]
 800136a:	4622      	mov	r2, r4
 800136c:	462b      	mov	r3, r5
 800136e:	4928      	ldr	r1, [pc, #160]	@ (8001410 <main+0x244>)
 8001370:	4821      	ldr	r0, [pc, #132]	@ (80013f8 <main+0x22c>)
 8001372:	f009 fd67 	bl	800ae44 <siprintf>
 8001376:	4603      	mov	r3, r0
 8001378:	b29a      	uxth	r2, r3
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <main+0x214>)
 800137c:	809a      	strh	r2, [r3, #4]
 800137e:	e021      	b.n	80013c4 <main+0x1f8>

	 }
	 else
	 {

		 HighPassFilter_reset(&high_pass_filter);
 8001380:	4824      	ldr	r0, [pc, #144]	@ (8001414 <main+0x248>)
 8001382:	f005 ffe7 	bl	8007354 <HighPassFilter_reset>
		 LowPassFilter_reset(&low_pass_filter);
 8001386:	4824      	ldr	r0, [pc, #144]	@ (8001418 <main+0x24c>)
 8001388:	f006 f887 	bl	800749a <LowPassFilter_reset>
		 beatsPerMinute = 0;
 800138c:	4b1e      	ldr	r3, [pc, #120]	@ (8001408 <main+0x23c>)
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
		 beatAvg = 0;
 8001394:	4b21      	ldr	r3, [pc, #132]	@ (800141c <main+0x250>)
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
		 strcpy(log_console.msg , "No finger detected \r\n");
 800139c:	4a16      	ldr	r2, [pc, #88]	@ (80013f8 <main+0x22c>)
 800139e:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <main+0x254>)
 80013a0:	4615      	mov	r5, r2
 80013a2:	461c      	mov	r4, r3
 80013a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a6:	6028      	str	r0, [r5, #0]
 80013a8:	6069      	str	r1, [r5, #4]
 80013aa:	60aa      	str	r2, [r5, #8]
 80013ac:	60eb      	str	r3, [r5, #12]
 80013ae:	6820      	ldr	r0, [r4, #0]
 80013b0:	6128      	str	r0, [r5, #16]
 80013b2:	88a3      	ldrh	r3, [r4, #4]
 80013b4:	82ab      	strh	r3, [r5, #20]
		 log_console.msg_len = strlen(log_console.msg);
 80013b6:	4810      	ldr	r0, [pc, #64]	@ (80013f8 <main+0x22c>)
 80013b8:	f7fe ff82 	bl	80002c0 <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <main+0x214>)
 80013c2:	809a      	strh	r2, [r3, #4]
	 }
	 erlog_write(&log_console);
 80013c4:	4806      	ldr	r0, [pc, #24]	@ (80013e0 <main+0x214>)
 80013c6:	f005 fefe 	bl	80071c6 <erlog_write>
	 HAL_Delay(100);
 80013ca:	2064      	movs	r0, #100	@ 0x64
 80013cc:	f000 fc9c 	bl	8001d08 <HAL_Delay>
	 sd_write();
 80013d0:	f7ff fe86 	bl	80010e0 <sd_write>
	 erlog_clear(&log_console);
 80013d4:	4802      	ldr	r0, [pc, #8]	@ (80013e0 <main+0x214>)
 80013d6:	f005 ff08 	bl	80071ea <erlog_clear>
	 if(temperature == true)
 80013da:	e779      	b.n	80012d0 <main+0x104>
 80013dc:	20000214 	.word	0x20000214
 80013e0:	200002f0 	.word	0x200002f0
 80013e4:	2000029c 	.word	0x2000029c
 80013e8:	200003f8 	.word	0x200003f8
 80013ec:	20000580 	.word	0x20000580
 80013f0:	2000057f 	.word	0x2000057f
 80013f4:	0800d6c8 	.word	0x0800d6c8
 80013f8:	200002f6 	.word	0x200002f6
 80013fc:	200005f8 	.word	0x200005f8
 8001400:	200005e8 	.word	0x200005e8
 8001404:	0800d6f0 	.word	0x0800d6f0
 8001408:	200005f0 	.word	0x200005f0
 800140c:	200005ec 	.word	0x200005ec
 8001410:	0800d704 	.word	0x0800d704
 8001414:	20000b90 	.word	0x20000b90
 8001418:	20000b80 	.word	0x20000b80
 800141c:	200005f4 	.word	0x200005f4
 8001420:	0800d734 	.word	0x0800d734

08001424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b094      	sub	sp, #80	@ 0x50
 8001428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142a:	f107 0320 	add.w	r3, r7, #32
 800142e:	2230      	movs	r2, #48	@ 0x30
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f009 fe22 	bl	800b07c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001448:	f002 fe28 	bl	800409c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800144c:	4b21      	ldr	r3, [pc, #132]	@ (80014d4 <SystemClock_Config+0xb0>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001450:	4a20      	ldr	r2, [pc, #128]	@ (80014d4 <SystemClock_Config+0xb0>)
 8001452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001456:	6413      	str	r3, [r2, #64]	@ 0x40
 8001458:	4b1e      	ldr	r3, [pc, #120]	@ (80014d4 <SystemClock_Config+0xb0>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001464:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <SystemClock_Config+0xb4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800146c:	4a1a      	ldr	r2, [pc, #104]	@ (80014d8 <SystemClock_Config+0xb4>)
 800146e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <SystemClock_Config+0xb4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001480:	2301      	movs	r3, #1
 8001482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001484:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800148a:	2300      	movs	r3, #0
 800148c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148e:	f107 0320 	add.w	r3, r7, #32
 8001492:	4618      	mov	r0, r3
 8001494:	f002 fe12 	bl	80040bc <HAL_RCC_OscConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800149e:	f000 f94d 	bl	800173c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a2:	230f      	movs	r3, #15
 80014a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80014a6:	2301      	movs	r3, #1
 80014a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 f8a1 	bl	8004604 <HAL_RCC_ClockConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80014c8:	f000 f938 	bl	800173c <Error_Handler>
  }
}
 80014cc:	bf00      	nop
 80014ce:	3750      	adds	r7, #80	@ 0x50
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40007000 	.word	0x40007000

080014dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <MX_SPI1_Init+0x74>)
 80014e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001554 <MX_SPI1_Init+0x78>)
 80014e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <MX_SPI1_Init+0x74>)
 80014e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <MX_SPI1_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f4:	4b16      	ldr	r3, [pc, #88]	@ (8001550 <MX_SPI1_Init+0x74>)
 80014f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80014fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014fc:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <MX_SPI1_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <MX_SPI1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <MX_SPI1_Init+0x74>)
 800150a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800150e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001510:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <MX_SPI1_Init+0x74>)
 8001512:	2228      	movs	r2, #40	@ 0x28
 8001514:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <MX_SPI1_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <MX_SPI1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <MX_SPI1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <MX_SPI1_Init+0x74>)
 800152a:	2207      	movs	r2, #7
 800152c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800152e:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <MX_SPI1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MX_SPI1_Init+0x74>)
 8001536:	2208      	movs	r2, #8
 8001538:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MX_SPI1_Init+0x74>)
 800153c:	f003 fdd2 	bl	80050e4 <HAL_SPI_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001546:	f000 f8f9 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000584 	.word	0x20000584
 8001554:	40013000 	.word	0x40013000

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	@ 0x30
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	4b6d      	ldr	r3, [pc, #436]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a6c      	ldr	r2, [pc, #432]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b6a      	ldr	r3, [pc, #424]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001586:	4b67      	ldr	r3, [pc, #412]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a66      	ldr	r2, [pc, #408]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 800158c:	f043 0320 	orr.w	r3, r3, #32
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b64      	ldr	r3, [pc, #400]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0320 	and.w	r3, r3, #32
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800159e:	4b61      	ldr	r3, [pc, #388]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a60      	ldr	r2, [pc, #384]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 80015a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b5e      	ldr	r3, [pc, #376]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b58      	ldr	r3, [pc, #352]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b55      	ldr	r3, [pc, #340]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a54      	ldr	r2, [pc, #336]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b52      	ldr	r3, [pc, #328]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a4e      	ldr	r2, [pc, #312]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015fe:	4b49      	ldr	r3, [pc, #292]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a48      	ldr	r2, [pc, #288]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 8001604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b46      	ldr	r3, [pc, #280]	@ (8001724 <MX_GPIO_Init+0x1cc>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f244 0181 	movw	r1, #16513	@ 0x4081
 800161c:	4842      	ldr	r0, [pc, #264]	@ (8001728 <MX_GPIO_Init+0x1d0>)
 800161e:	f000 fe75 	bl	800230c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001628:	4840      	ldr	r0, [pc, #256]	@ (800172c <MX_GPIO_Init+0x1d4>)
 800162a:	f000 fe6f 	bl	800230c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	2140      	movs	r1, #64	@ 0x40
 8001632:	483f      	ldr	r0, [pc, #252]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 8001634:	f000 fe6a 	bl	800230c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800163c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800163e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4839      	ldr	r0, [pc, #228]	@ (8001734 <MX_GPIO_Init+0x1dc>)
 8001650:	f000 fcc0 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001654:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	482e      	ldr	r0, [pc, #184]	@ (8001728 <MX_GPIO_Init+0x1d0>)
 800166e:	f000 fcb1 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001672:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	2301      	movs	r3, #1
 800167a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4828      	ldr	r0, [pc, #160]	@ (800172c <MX_GPIO_Init+0x1d4>)
 800168c:	f000 fca2 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001690:	2340      	movs	r3, #64	@ 0x40
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001694:	2301      	movs	r3, #1
 8001696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	4619      	mov	r1, r3
 80016a6:	4822      	ldr	r0, [pc, #136]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 80016a8:	f000 fc94 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	481c      	ldr	r0, [pc, #112]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 80016c0:	f000 fc88 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016c4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80016c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016d6:	230a      	movs	r3, #10
 80016d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4619      	mov	r1, r3
 80016e0:	4815      	ldr	r0, [pc, #84]	@ (8001738 <MX_GPIO_Init+0x1e0>)
 80016e2:	f000 fc77 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4619      	mov	r1, r3
 80016fa:	480f      	ldr	r0, [pc, #60]	@ (8001738 <MX_GPIO_Init+0x1e0>)
 80016fc:	f000 fc6a 	bl	8001fd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001700:	2301      	movs	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Interrupt on falling edge
 8001704:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001708:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170a:	2301      	movs	r3, #1
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	@ (800172c <MX_GPIO_Init+0x1d4>)
 8001716:	f000 fc5d 	bl	8001fd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800171a:	bf00      	nop
 800171c:	3730      	adds	r7, #48	@ 0x30
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40020400 	.word	0x40020400
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40021800 	.word	0x40021800
 8001734:	40020800 	.word	0x40020800
 8001738:	40020000 	.word	0x40020000

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <Error_Handler+0x8>

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_MspInit+0x44>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	4a0e      	ldr	r2, [pc, #56]	@ (800178c <HAL_MspInit+0x44>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001758:	6413      	str	r3, [r2, #64]	@ 0x40
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <HAL_MspInit+0x44>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <HAL_MspInit+0x44>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176a:	4a08      	ldr	r2, [pc, #32]	@ (800178c <HAL_MspInit+0x44>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001770:	6453      	str	r3, [r2, #68]	@ 0x44
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_MspInit+0x44>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b0aa      	sub	sp, #168	@ 0xa8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2280      	movs	r2, #128	@ 0x80
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f009 fc63 	bl	800b07c <memset>
  if(hi2c->Instance==I2C2)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a29      	ldr	r2, [pc, #164]	@ (8001860 <HAL_I2C_MspInit+0xd0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d14b      	bne.n	8001858 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80017c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017c4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 f93e 	bl	8004a50 <HAL_RCCEx_PeriphCLKConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017da:	f7ff ffaf 	bl	800173c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017de:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <HAL_I2C_MspInit+0xd4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a20      	ldr	r2, [pc, #128]	@ (8001864 <HAL_I2C_MspInit+0xd4>)
 80017e4:	f043 0320 	orr.w	r3, r3, #32
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001864 <HAL_I2C_MspInit+0xd4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0320 	and.w	r3, r3, #32
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017f6:	2303      	movs	r3, #3
 80017f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fc:	2312      	movs	r3, #18
 80017fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800180e:	2304      	movs	r3, #4
 8001810:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001814:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001818:	4619      	mov	r1, r3
 800181a:	4813      	ldr	r0, [pc, #76]	@ (8001868 <HAL_I2C_MspInit+0xd8>)
 800181c:	f000 fbda 	bl	8001fd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001820:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <HAL_I2C_MspInit+0xd4>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001824:	4a0f      	ldr	r2, [pc, #60]	@ (8001864 <HAL_I2C_MspInit+0xd4>)
 8001826:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800182a:	6413      	str	r3, [r2, #64]	@ 0x40
 800182c:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <HAL_I2C_MspInit+0xd4>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	2021      	movs	r0, #33	@ 0x21
 800183e:	f000 fb62 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001842:	2021      	movs	r0, #33	@ 0x21
 8001844:	f000 fb7b 	bl	8001f3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	2022      	movs	r0, #34	@ 0x22
 800184e:	f000 fb5a 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001852:	2022      	movs	r0, #34	@ 0x22
 8001854:	f000 fb73 	bl	8001f3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001858:	bf00      	nop
 800185a:	37a8      	adds	r7, #168	@ 0xa8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40005800 	.word	0x40005800
 8001864:	40023800 	.word	0x40023800
 8001868:	40021400 	.word	0x40021400

0800186c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	@ 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a17      	ldr	r2, [pc, #92]	@ (80018e8 <HAL_SPI_MspInit+0x7c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d127      	bne.n	80018de <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800188e:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <HAL_SPI_MspInit+0x80>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001892:	4a16      	ldr	r2, [pc, #88]	@ (80018ec <HAL_SPI_MspInit+0x80>)
 8001894:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001898:	6453      	str	r3, [r2, #68]	@ 0x44
 800189a:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <HAL_SPI_MspInit+0x80>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <HAL_SPI_MspInit+0x80>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a10      	ldr	r2, [pc, #64]	@ (80018ec <HAL_SPI_MspInit+0x80>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <HAL_SPI_MspInit+0x80>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018be:	23e0      	movs	r3, #224	@ 0xe0
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ce:	2305      	movs	r3, #5
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <HAL_SPI_MspInit+0x84>)
 80018da:	f000 fb7b 	bl	8001fd4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80018de:	bf00      	nop
 80018e0:	3728      	adds	r7, #40	@ 0x28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40013000 	.word	0x40013000
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020000 	.word	0x40020000

080018f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0aa      	sub	sp, #168	@ 0xa8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	2280      	movs	r2, #128	@ 0x80
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f009 fbb1 	bl	800b07c <memset>
  if(huart->Instance==USART3)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a22      	ldr	r2, [pc, #136]	@ (80019a8 <HAL_UART_MspInit+0xb4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d13c      	bne.n	800199e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001924:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001928:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800192a:	2300      	movs	r3, #0
 800192c:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4618      	mov	r0, r3
 8001934:	f003 f88c 	bl	8004a50 <HAL_RCCEx_PeriphCLKConfig>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800193e:	f7ff fefd 	bl	800173c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001942:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <HAL_UART_MspInit+0xb8>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	4a19      	ldr	r2, [pc, #100]	@ (80019ac <HAL_UART_MspInit+0xb8>)
 8001948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800194c:	6413      	str	r3, [r2, #64]	@ 0x40
 800194e:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <HAL_UART_MspInit+0xb8>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800195a:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <HAL_UART_MspInit+0xb8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a13      	ldr	r2, [pc, #76]	@ (80019ac <HAL_UART_MspInit+0xb8>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <HAL_UART_MspInit+0xb8>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001972:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001976:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800198c:	2307      	movs	r3, #7
 800198e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001992:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	@ (80019b0 <HAL_UART_MspInit+0xbc>)
 800199a:	f000 fb1b 	bl	8001fd4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800199e:	bf00      	nop
 80019a0:	37a8      	adds	r7, #168	@ 0xa8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40004800 	.word	0x40004800
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020c00 	.word	0x40020c00

080019b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <NMI_Handler+0x4>

080019bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <HardFault_Handler+0x4>

080019c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <MemManage_Handler+0x4>

080019cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <BusFault_Handler+0x4>

080019d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <UsageFault_Handler+0x4>

080019dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0a:	f000 f95d 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001a18:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <I2C2_EV_IRQHandler+0x10>)
 8001a1a:	f001 f981 	bl	8002d20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000029c 	.word	0x2000029c

08001a28 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001a2c:	4802      	ldr	r0, [pc, #8]	@ (8001a38 <I2C2_ER_IRQHandler+0x10>)
 8001a2e:	f001 f991 	bl	8002d54 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000029c 	.word	0x2000029c

08001a3c <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);  // Call the HAL handler to manage the interrupt
 8001a40:	2001      	movs	r0, #1
 8001a42:	f000 fc7d 	bl	8002340 <HAL_GPIO_EXTI_IRQHandler>
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  return 1;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <_kill>:

int _kill(int pid, int sig)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a64:	f009 fb16 	bl	800b094 <__errno>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2216      	movs	r2, #22
 8001a6c:	601a      	str	r2, [r3, #0]
  return -1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <_exit>:

void _exit (int status)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a82:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffe7 	bl	8001a5a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <_exit+0x12>

08001a90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	e00a      	b.n	8001ab8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aa2:	f3af 8000 	nop.w
 8001aa6:	4601      	mov	r1, r0
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60ba      	str	r2, [r7, #8]
 8001aae:	b2ca      	uxtb	r2, r1
 8001ab0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbf0      	blt.n	8001aa2 <_read+0x12>
  }

  return len;
 8001ac0:	687b      	ldr	r3, [r7, #4]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e009      	b.n	8001af0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	60ba      	str	r2, [r7, #8]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	dbf1      	blt.n	8001adc <_write+0x12>
  }
  return len;
 8001af8:	687b      	ldr	r3, [r7, #4]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_close>:

int _close(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b2a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <_isatty>:

int _isatty(int file)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b74:	4a14      	ldr	r2, [pc, #80]	@ (8001bc8 <_sbrk+0x5c>)
 8001b76:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <_sbrk+0x60>)
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b80:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b88:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <_sbrk+0x64>)
 8001b8a:	4a12      	ldr	r2, [pc, #72]	@ (8001bd4 <_sbrk+0x68>)
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8e:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d207      	bcs.n	8001bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b9c:	f009 fa7a 	bl	800b094 <__errno>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001baa:	e009      	b.n	8001bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bac:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	4a05      	ldr	r2, [pc, #20]	@ (8001bd0 <_sbrk+0x64>)
 8001bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20040000 	.word	0x20040000
 8001bcc:	00000400 	.word	0x00000400
 8001bd0:	20000b64 	.word	0x20000b64
 8001bd4:	20000d88 	.word	0x20000d88

08001bd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <SystemInit+0x20>)
 8001bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001be2:	4a05      	ldr	r2, [pc, #20]	@ (8001bf8 <SystemInit+0x20>)
 8001be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001c00:	f7ff ffea 	bl	8001bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c04:	480c      	ldr	r0, [pc, #48]	@ (8001c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c06:	490d      	ldr	r1, [pc, #52]	@ (8001c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c08:	4a0d      	ldr	r2, [pc, #52]	@ (8001c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c0c:	e002      	b.n	8001c14 <LoopCopyDataInit>

08001c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c12:	3304      	adds	r3, #4

08001c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c18:	d3f9      	bcc.n	8001c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c20:	e001      	b.n	8001c26 <LoopFillZerobss>

08001c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c24:	3204      	adds	r2, #4

08001c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c28:	d3fb      	bcc.n	8001c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2a:	f009 fa39 	bl	800b0a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c2e:	f7ff facd 	bl	80011cc <main>
  bx  lr    
 8001c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c34:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c3c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001c40:	0800dbc0 	.word	0x0800dbc0
  ldr r2, =_sbss
 8001c44:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001c48:	20000d84 	.word	0x20000d84

08001c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c4c:	e7fe      	b.n	8001c4c <ADC_IRQHandler>

08001c4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c52:	2003      	movs	r0, #3
 8001c54:	f000 f94c 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f000 f805 	bl	8001c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c5e:	f7ff fd73 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c70:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <HAL_InitTick+0x54>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <HAL_InitTick+0x58>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f967 	bl	8001f5a <HAL_SYSTICK_Config>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00e      	b.n	8001cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b0f      	cmp	r3, #15
 8001c9a:	d80a      	bhi.n	8001cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ca4:	f000 f92f 	bl	8001f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca8:	4a06      	ldr	r2, [pc, #24]	@ (8001cc4 <HAL_InitTick+0x5c>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e000      	b.n	8001cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_IncTick+0x20>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_IncTick+0x24>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	@ (8001cec <HAL_IncTick+0x24>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	20000b68 	.word	0x20000b68

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <HAL_GetTick+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000b68 	.word	0x20000b68

08001d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff ffee 	bl	8001cf0 <HAL_GetTick>
 8001d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d20:	d005      	beq.n	8001d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <HAL_Delay+0x44>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2e:	bf00      	nop
 8001d30:	f7ff ffde 	bl	8001cf0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8f7      	bhi.n	8001d30 <HAL_Delay+0x28>
  {
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <__NVIC_SetPriorityGrouping+0x40>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <__NVIC_SetPriorityGrouping+0x40>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00
 8001d94:	05fa0000 	.word	0x05fa0000

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	@ (8001dec <__NVIC_EnableIRQ+0x38>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	@ (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	@ (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	@ 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ebc:	d301      	bcc.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00f      	b.n	8001ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8001eec <SysTick_Config+0x40>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	210f      	movs	r1, #15
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ed0:	f7ff ff8e 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <SysTick_Config+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <SysTick_Config+0x40>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff29 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff3e 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff8e 	bl	8001e44 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5d 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff31 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffa2 	bl	8001eac <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d004      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2280      	movs	r2, #128	@ 0x80
 8001f8a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e00c      	b.n	8001faa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2205      	movs	r2, #5
 8001f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fc4:	b2db      	uxtb	r3, r3
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	@ 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	e169      	b.n	80022c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	429a      	cmp	r2, r3
 800200e:	f040 8158 	bne.w	80022c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b01      	cmp	r3, #1
 800201c:	d005      	beq.n	800202a <HAL_GPIO_Init+0x56>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d130      	bne.n	800208c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	2203      	movs	r2, #3
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 0201 	and.w	r2, r3, #1
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b03      	cmp	r3, #3
 8002096:	d017      	beq.n	80020c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d123      	bne.n	800211c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	220f      	movs	r2, #15
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	08da      	lsrs	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3208      	adds	r2, #8
 8002116:	69b9      	ldr	r1, [r7, #24]
 8002118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0203 	and.w	r2, r3, #3
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80b2 	beq.w	80022c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215e:	4b60      	ldr	r3, [pc, #384]	@ (80022e0 <HAL_GPIO_Init+0x30c>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	4a5f      	ldr	r2, [pc, #380]	@ (80022e0 <HAL_GPIO_Init+0x30c>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002168:	6453      	str	r3, [r2, #68]	@ 0x44
 800216a:	4b5d      	ldr	r3, [pc, #372]	@ (80022e0 <HAL_GPIO_Init+0x30c>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002176:	4a5b      	ldr	r2, [pc, #364]	@ (80022e4 <HAL_GPIO_Init+0x310>)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	3302      	adds	r3, #2
 800217e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	220f      	movs	r2, #15
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a52      	ldr	r2, [pc, #328]	@ (80022e8 <HAL_GPIO_Init+0x314>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d02b      	beq.n	80021fa <HAL_GPIO_Init+0x226>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a51      	ldr	r2, [pc, #324]	@ (80022ec <HAL_GPIO_Init+0x318>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d025      	beq.n	80021f6 <HAL_GPIO_Init+0x222>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a50      	ldr	r2, [pc, #320]	@ (80022f0 <HAL_GPIO_Init+0x31c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01f      	beq.n	80021f2 <HAL_GPIO_Init+0x21e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4f      	ldr	r2, [pc, #316]	@ (80022f4 <HAL_GPIO_Init+0x320>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d019      	beq.n	80021ee <HAL_GPIO_Init+0x21a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4e      	ldr	r2, [pc, #312]	@ (80022f8 <HAL_GPIO_Init+0x324>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_GPIO_Init+0x216>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4d      	ldr	r2, [pc, #308]	@ (80022fc <HAL_GPIO_Init+0x328>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00d      	beq.n	80021e6 <HAL_GPIO_Init+0x212>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002300 <HAL_GPIO_Init+0x32c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <HAL_GPIO_Init+0x20e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002304 <HAL_GPIO_Init+0x330>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_GPIO_Init+0x20a>
 80021da:	2307      	movs	r3, #7
 80021dc:	e00e      	b.n	80021fc <HAL_GPIO_Init+0x228>
 80021de:	2308      	movs	r3, #8
 80021e0:	e00c      	b.n	80021fc <HAL_GPIO_Init+0x228>
 80021e2:	2306      	movs	r3, #6
 80021e4:	e00a      	b.n	80021fc <HAL_GPIO_Init+0x228>
 80021e6:	2305      	movs	r3, #5
 80021e8:	e008      	b.n	80021fc <HAL_GPIO_Init+0x228>
 80021ea:	2304      	movs	r3, #4
 80021ec:	e006      	b.n	80021fc <HAL_GPIO_Init+0x228>
 80021ee:	2303      	movs	r3, #3
 80021f0:	e004      	b.n	80021fc <HAL_GPIO_Init+0x228>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e002      	b.n	80021fc <HAL_GPIO_Init+0x228>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_GPIO_Init+0x228>
 80021fa:	2300      	movs	r3, #0
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	f002 0203 	and.w	r2, r2, #3
 8002202:	0092      	lsls	r2, r2, #2
 8002204:	4093      	lsls	r3, r2
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800220c:	4935      	ldr	r1, [pc, #212]	@ (80022e4 <HAL_GPIO_Init+0x310>)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	3302      	adds	r3, #2
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800221a:	4b3b      	ldr	r3, [pc, #236]	@ (8002308 <HAL_GPIO_Init+0x334>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800223e:	4a32      	ldr	r2, [pc, #200]	@ (8002308 <HAL_GPIO_Init+0x334>)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002244:	4b30      	ldr	r3, [pc, #192]	@ (8002308 <HAL_GPIO_Init+0x334>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002268:	4a27      	ldr	r2, [pc, #156]	@ (8002308 <HAL_GPIO_Init+0x334>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800226e:	4b26      	ldr	r3, [pc, #152]	@ (8002308 <HAL_GPIO_Init+0x334>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002292:	4a1d      	ldr	r2, [pc, #116]	@ (8002308 <HAL_GPIO_Init+0x334>)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002298:	4b1b      	ldr	r3, [pc, #108]	@ (8002308 <HAL_GPIO_Init+0x334>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022bc:	4a12      	ldr	r2, [pc, #72]	@ (8002308 <HAL_GPIO_Init+0x334>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3301      	adds	r3, #1
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b0f      	cmp	r3, #15
 80022cc:	f67f ae92 	bls.w	8001ff4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3724      	adds	r7, #36	@ 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40013800 	.word	0x40013800
 80022e8:	40020000 	.word	0x40020000
 80022ec:	40020400 	.word	0x40020400
 80022f0:	40020800 	.word	0x40020800
 80022f4:	40020c00 	.word	0x40020c00
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40021400 	.word	0x40021400
 8002300:	40021800 	.word	0x40021800
 8002304:	40021c00 	.word	0x40021c00
 8002308:	40013c00 	.word	0x40013c00

0800230c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]
 8002318:	4613      	mov	r3, r2
 800231a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800231c:	787b      	ldrb	r3, [r7, #1]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002322:	887a      	ldrh	r2, [r7, #2]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002328:	e003      	b.n	8002332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800232a:	887b      	ldrh	r3, [r7, #2]
 800232c:	041a      	lsls	r2, r3, #16
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	619a      	str	r2, [r3, #24]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800234a:	4b08      	ldr	r3, [pc, #32]	@ (800236c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d006      	beq.n	8002364 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002356:	4a05      	ldr	r2, [pc, #20]	@ (800236c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe fe12 	bl	8000f88 <HAL_GPIO_EXTI_Callback>
  }
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40013c00 	.word	0x40013c00

08002370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e08b      	b.n	800249a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff f9fa 	bl	8001790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2224      	movs	r2, #36	@ 0x24
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d107      	bne.n	80023ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	e006      	b.n	80023f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80023f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d108      	bne.n	8002412 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	e007      	b.n	8002422 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002420:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b1d      	ldr	r3, [pc, #116]	@ (80024a4 <HAL_I2C_Init+0x134>)
 800242e:	430b      	orrs	r3, r1
 8002430:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002440:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69d9      	ldr	r1, [r3, #28]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1a      	ldr	r2, [r3, #32]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	02008000 	.word	0x02008000

080024a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	461a      	mov	r2, r3
 80024b4:	460b      	mov	r3, r1
 80024b6:	817b      	strh	r3, [r7, #10]
 80024b8:	4613      	mov	r3, r2
 80024ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	f040 80fd 	bne.w	80026c4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_I2C_Master_Transmit+0x30>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e0f6      	b.n	80026c6 <HAL_I2C_Master_Transmit+0x21e>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024e0:	f7ff fc06 	bl	8001cf0 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2319      	movs	r3, #25
 80024ec:	2201      	movs	r2, #1
 80024ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f001 fa5b 	bl	80039ae <I2C_WaitOnFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0e1      	b.n	80026c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2221      	movs	r2, #33	@ 0x21
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2210      	movs	r2, #16
 800250e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	893a      	ldrh	r2, [r7, #8]
 8002522:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	2bff      	cmp	r3, #255	@ 0xff
 8002532:	d906      	bls.n	8002542 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	22ff      	movs	r2, #255	@ 0xff
 8002538:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800253a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	e007      	b.n	8002552 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800254c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002550:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002556:	2b00      	cmp	r3, #0
 8002558:	d024      	beq.n	80025a4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	781a      	ldrb	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3301      	adds	r3, #1
 8002592:	b2da      	uxtb	r2, r3
 8002594:	8979      	ldrh	r1, [r7, #10]
 8002596:	4b4e      	ldr	r3, [pc, #312]	@ (80026d0 <HAL_I2C_Master_Transmit+0x228>)
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f001 fc55 	bl	8003e4c <I2C_TransferConfig>
 80025a2:	e066      	b.n	8002672 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	8979      	ldrh	r1, [r7, #10]
 80025ac:	4b48      	ldr	r3, [pc, #288]	@ (80026d0 <HAL_I2C_Master_Transmit+0x228>)
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f001 fc4a 	bl	8003e4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025b8:	e05b      	b.n	8002672 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	6a39      	ldr	r1, [r7, #32]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f001 fa4e 	bl	8003a60 <I2C_WaitOnTXISFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e07b      	b.n	80026c6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d034      	beq.n	8002672 <HAL_I2C_Master_Transmit+0x1ca>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260c:	2b00      	cmp	r3, #0
 800260e:	d130      	bne.n	8002672 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	2200      	movs	r2, #0
 8002618:	2180      	movs	r1, #128	@ 0x80
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f001 f9c7 	bl	80039ae <I2C_WaitOnFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e04d      	b.n	80026c6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262e:	b29b      	uxth	r3, r3
 8002630:	2bff      	cmp	r3, #255	@ 0xff
 8002632:	d90e      	bls.n	8002652 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	22ff      	movs	r2, #255	@ 0xff
 8002638:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263e:	b2da      	uxtb	r2, r3
 8002640:	8979      	ldrh	r1, [r7, #10]
 8002642:	2300      	movs	r3, #0
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f001 fbfe 	bl	8003e4c <I2C_TransferConfig>
 8002650:	e00f      	b.n	8002672 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002660:	b2da      	uxtb	r2, r3
 8002662:	8979      	ldrh	r1, [r7, #10]
 8002664:	2300      	movs	r3, #0
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f001 fbed 	bl	8003e4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d19e      	bne.n	80025ba <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	6a39      	ldr	r1, [r7, #32]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f001 fa34 	bl	8003aee <I2C_WaitOnSTOPFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e01a      	b.n	80026c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2220      	movs	r2, #32
 8002696:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <HAL_I2C_Master_Transmit+0x22c>)
 80026a4:	400b      	ands	r3, r1
 80026a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	80002000 	.word	0x80002000
 80026d4:	fe00e800 	.word	0xfe00e800

080026d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	461a      	mov	r2, r3
 80026e4:	460b      	mov	r3, r1
 80026e6:	817b      	strh	r3, [r7, #10]
 80026e8:	4613      	mov	r3, r2
 80026ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	f040 80db 	bne.w	80028b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_I2C_Master_Receive+0x30>
 8002704:	2302      	movs	r3, #2
 8002706:	e0d4      	b.n	80028b2 <HAL_I2C_Master_Receive+0x1da>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002710:	f7ff faee 	bl	8001cf0 <HAL_GetTick>
 8002714:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	2319      	movs	r3, #25
 800271c:	2201      	movs	r2, #1
 800271e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f001 f943 	bl	80039ae <I2C_WaitOnFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0bf      	b.n	80028b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2222      	movs	r2, #34	@ 0x22
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2210      	movs	r2, #16
 800273e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	893a      	ldrh	r2, [r7, #8]
 8002752:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	2bff      	cmp	r3, #255	@ 0xff
 8002762:	d90e      	bls.n	8002782 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276e:	b2da      	uxtb	r2, r3
 8002770:	8979      	ldrh	r1, [r7, #10]
 8002772:	4b52      	ldr	r3, [pc, #328]	@ (80028bc <HAL_I2C_Master_Receive+0x1e4>)
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f001 fb66 	bl	8003e4c <I2C_TransferConfig>
 8002780:	e06d      	b.n	800285e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002790:	b2da      	uxtb	r2, r3
 8002792:	8979      	ldrh	r1, [r7, #10]
 8002794:	4b49      	ldr	r3, [pc, #292]	@ (80028bc <HAL_I2C_Master_Receive+0x1e4>)
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f001 fb55 	bl	8003e4c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80027a2:	e05c      	b.n	800285e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	6a39      	ldr	r1, [r7, #32]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f001 f9e3 	bl	8003b74 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e07c      	b.n	80028b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d034      	beq.n	800285e <HAL_I2C_Master_Receive+0x186>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d130      	bne.n	800285e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	2200      	movs	r2, #0
 8002804:	2180      	movs	r1, #128	@ 0x80
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f001 f8d1 	bl	80039ae <I2C_WaitOnFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e04d      	b.n	80028b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	2bff      	cmp	r3, #255	@ 0xff
 800281e:	d90e      	bls.n	800283e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	22ff      	movs	r2, #255	@ 0xff
 8002824:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282a:	b2da      	uxtb	r2, r3
 800282c:	8979      	ldrh	r1, [r7, #10]
 800282e:	2300      	movs	r3, #0
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f001 fb08 	bl	8003e4c <I2C_TransferConfig>
 800283c:	e00f      	b.n	800285e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284c:	b2da      	uxtb	r2, r3
 800284e:	8979      	ldrh	r1, [r7, #10]
 8002850:	2300      	movs	r3, #0
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f001 faf7 	bl	8003e4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d19d      	bne.n	80027a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	6a39      	ldr	r1, [r7, #32]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f001 f93e 	bl	8003aee <I2C_WaitOnSTOPFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e01a      	b.n	80028b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2220      	movs	r2, #32
 8002882:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <HAL_I2C_Master_Receive+0x1e8>)
 8002890:	400b      	ands	r3, r1
 8002892:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e000      	b.n	80028b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	80002400 	.word	0x80002400
 80028c0:	fe00e800 	.word	0xfe00e800

080028c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	4608      	mov	r0, r1
 80028ce:	4611      	mov	r1, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	817b      	strh	r3, [r7, #10]
 80028d6:	460b      	mov	r3, r1
 80028d8:	813b      	strh	r3, [r7, #8]
 80028da:	4613      	mov	r3, r2
 80028dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	f040 80f9 	bne.w	8002ade <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_I2C_Mem_Write+0x34>
 80028f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0ed      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_I2C_Mem_Write+0x4e>
 800290e:	2302      	movs	r3, #2
 8002910:	e0e6      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800291a:	f7ff f9e9 	bl	8001cf0 <HAL_GetTick>
 800291e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2319      	movs	r3, #25
 8002926:	2201      	movs	r2, #1
 8002928:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f001 f83e 	bl	80039ae <I2C_WaitOnFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0d1      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2221      	movs	r2, #33	@ 0x21
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2240      	movs	r2, #64	@ 0x40
 8002948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a3a      	ldr	r2, [r7, #32]
 8002956:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800295c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002964:	88f8      	ldrh	r0, [r7, #6]
 8002966:	893a      	ldrh	r2, [r7, #8]
 8002968:	8979      	ldrh	r1, [r7, #10]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	4603      	mov	r3, r0
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fb81 	bl	800307c <I2C_RequestMemoryWrite>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0a9      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	2bff      	cmp	r3, #255	@ 0xff
 8002994:	d90e      	bls.n	80029b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	22ff      	movs	r2, #255	@ 0xff
 800299a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	8979      	ldrh	r1, [r7, #10]
 80029a4:	2300      	movs	r3, #0
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f001 fa4d 	bl	8003e4c <I2C_TransferConfig>
 80029b2:	e00f      	b.n	80029d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	8979      	ldrh	r1, [r7, #10]
 80029c6:	2300      	movs	r3, #0
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f001 fa3c 	bl	8003e4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f001 f841 	bl	8003a60 <I2C_WaitOnTXISFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e07b      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d034      	beq.n	8002a8c <HAL_I2C_Mem_Write+0x1c8>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d130      	bne.n	8002a8c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a30:	2200      	movs	r2, #0
 8002a32:	2180      	movs	r1, #128	@ 0x80
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 ffba 	bl	80039ae <I2C_WaitOnFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e04d      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2bff      	cmp	r3, #255	@ 0xff
 8002a4c:	d90e      	bls.n	8002a6c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	22ff      	movs	r2, #255	@ 0xff
 8002a52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	8979      	ldrh	r1, [r7, #10]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f001 f9f1 	bl	8003e4c <I2C_TransferConfig>
 8002a6a:	e00f      	b.n	8002a8c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	8979      	ldrh	r1, [r7, #10]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f001 f9e0 	bl	8003e4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d19e      	bne.n	80029d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f001 f827 	bl	8003aee <I2C_WaitOnSTOPFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e01a      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <HAL_I2C_Mem_Write+0x224>)
 8002abe:	400b      	ands	r3, r1
 8002ac0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e000      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ade:	2302      	movs	r3, #2
  }
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	fe00e800 	.word	0xfe00e800

08002aec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	4608      	mov	r0, r1
 8002af6:	4611      	mov	r1, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	817b      	strh	r3, [r7, #10]
 8002afe:	460b      	mov	r3, r1
 8002b00:	813b      	strh	r3, [r7, #8]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	f040 80fd 	bne.w	8002d0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_I2C_Mem_Read+0x34>
 8002b1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b26:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0f1      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_I2C_Mem_Read+0x4e>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e0ea      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b42:	f7ff f8d5 	bl	8001cf0 <HAL_GetTick>
 8002b46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	2319      	movs	r3, #25
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 ff2a 	bl	80039ae <I2C_WaitOnFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0d5      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2222      	movs	r2, #34	@ 0x22
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2240      	movs	r2, #64	@ 0x40
 8002b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a3a      	ldr	r2, [r7, #32]
 8002b7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b8c:	88f8      	ldrh	r0, [r7, #6]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	8979      	ldrh	r1, [r7, #10]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 fac1 	bl	8003124 <I2C_RequestMemoryRead>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0ad      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2bff      	cmp	r3, #255	@ 0xff
 8002bbc:	d90e      	bls.n	8002bdc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	8979      	ldrh	r1, [r7, #10]
 8002bcc:	4b52      	ldr	r3, [pc, #328]	@ (8002d18 <HAL_I2C_Mem_Read+0x22c>)
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f001 f939 	bl	8003e4c <I2C_TransferConfig>
 8002bda:	e00f      	b.n	8002bfc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	8979      	ldrh	r1, [r7, #10]
 8002bee:	4b4a      	ldr	r3, [pc, #296]	@ (8002d18 <HAL_I2C_Mem_Read+0x22c>)
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f001 f928 	bl	8003e4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c02:	2200      	movs	r2, #0
 8002c04:	2104      	movs	r1, #4
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fed1 	bl	80039ae <I2C_WaitOnFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e07c      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d034      	beq.n	8002cbc <HAL_I2C_Mem_Read+0x1d0>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d130      	bne.n	8002cbc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c60:	2200      	movs	r2, #0
 8002c62:	2180      	movs	r1, #128	@ 0x80
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fea2 	bl	80039ae <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e04d      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2bff      	cmp	r3, #255	@ 0xff
 8002c7c:	d90e      	bls.n	8002c9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	8979      	ldrh	r1, [r7, #10]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f001 f8d9 	bl	8003e4c <I2C_TransferConfig>
 8002c9a:	e00f      	b.n	8002cbc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	8979      	ldrh	r1, [r7, #10]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f001 f8c8 	bl	8003e4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d19a      	bne.n	8002bfc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 ff0f 	bl	8003aee <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e01a      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <HAL_I2C_Mem_Read+0x230>)
 8002cee:	400b      	ands	r3, r1
 8002cf0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
  }
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	80002400 	.word	0x80002400
 8002d1c:	fe00e800 	.word	0xfe00e800

08002d20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	68f9      	ldr	r1, [r7, #12]
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4798      	blx	r3
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00f      	beq.n	8002d96 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d84:	f043 0201 	orr.w	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d94:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00f      	beq.n	8002dc0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dae:	f043 0208 	orr.w	r2, r3, #8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dbe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00f      	beq.n	8002dea <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd8:	f043 0202 	orr.w	r2, r3, #2
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002de8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 030b 	and.w	r3, r3, #11
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fc7d 	bl	80036fc <I2C_ITError>
  }
}
 8002e02:	bf00      	nop
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	70fb      	strb	r3, [r7, #3]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <I2C_Slave_ISR_IT+0x24>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e0e2      	b.n	8003074 <I2C_Slave_ISR_IT+0x1ea>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d009      	beq.n	8002ed4 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d004      	beq.n	8002ed4 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002eca:	6939      	ldr	r1, [r7, #16]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fa5d 	bl	800338c <I2C_ITSlaveCplt>
 8002ed2:	e0ca      	b.n	800306a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d04b      	beq.n	8002f76 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d046      	beq.n	8002f76 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d128      	bne.n	8002f44 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b28      	cmp	r3, #40	@ 0x28
 8002efc:	d108      	bne.n	8002f10 <I2C_Slave_ISR_IT+0x86>
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f04:	d104      	bne.n	8002f10 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f06:	6939      	ldr	r1, [r7, #16]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 fba3 	bl	8003654 <I2C_ITListenCplt>
 8002f0e:	e031      	b.n	8002f74 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b29      	cmp	r3, #41	@ 0x29
 8002f1a:	d10e      	bne.n	8002f3a <I2C_Slave_ISR_IT+0xb0>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f22:	d00a      	beq.n	8002f3a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2210      	movs	r2, #16
 8002f2a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fcfc 	bl	800392a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f9ce 	bl	80032d4 <I2C_ITSlaveSeqCplt>
 8002f38:	e01c      	b.n	8002f74 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2210      	movs	r2, #16
 8002f40:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002f42:	e08f      	b.n	8003064 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2210      	movs	r2, #16
 8002f4a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f50:	f043 0204 	orr.w	r2, r3, #4
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <I2C_Slave_ISR_IT+0xdc>
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f64:	d17e      	bne.n	8003064 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 fbc5 	bl	80036fc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f72:	e077      	b.n	8003064 <I2C_Slave_ISR_IT+0x1da>
 8002f74:	e076      	b.n	8003064 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d02f      	beq.n	8002fe0 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d02a      	beq.n	8002fe0 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d018      	beq.n	8002fc6 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d14b      	bne.n	8003068 <I2C_Slave_ISR_IT+0x1de>
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fd6:	d047      	beq.n	8003068 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f97b 	bl	80032d4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002fde:	e043      	b.n	8003068 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d004      	beq.n	8002ffe <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002ff4:	6939      	ldr	r1, [r7, #16]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f8e8 	bl	80031cc <I2C_ITAddrCplt>
 8002ffc:	e035      	b.n	800306a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d030      	beq.n	800306a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800300e:	2b00      	cmp	r3, #0
 8003010:	d02b      	beq.n	800306a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d018      	beq.n	800304e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800304c:	e00d      	b.n	800306a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003054:	d002      	beq.n	800305c <I2C_Slave_ISR_IT+0x1d2>
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f939 	bl	80032d4 <I2C_ITSlaveSeqCplt>
 8003062:	e002      	b.n	800306a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003064:	bf00      	nop
 8003066:	e000      	b.n	800306a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003068:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af02      	add	r7, sp, #8
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	4608      	mov	r0, r1
 8003086:	4611      	mov	r1, r2
 8003088:	461a      	mov	r2, r3
 800308a:	4603      	mov	r3, r0
 800308c:	817b      	strh	r3, [r7, #10]
 800308e:	460b      	mov	r3, r1
 8003090:	813b      	strh	r3, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	b2da      	uxtb	r2, r3
 800309a:	8979      	ldrh	r1, [r7, #10]
 800309c:	4b20      	ldr	r3, [pc, #128]	@ (8003120 <I2C_RequestMemoryWrite+0xa4>)
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 fed1 	bl	8003e4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	69b9      	ldr	r1, [r7, #24]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fcd6 	bl	8003a60 <I2C_WaitOnTXISFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e02c      	b.n	8003118 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d105      	bne.n	80030d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030c4:	893b      	ldrh	r3, [r7, #8]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80030ce:	e015      	b.n	80030fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030d0:	893b      	ldrh	r3, [r7, #8]
 80030d2:	0a1b      	lsrs	r3, r3, #8
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	69b9      	ldr	r1, [r7, #24]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fcbc 	bl	8003a60 <I2C_WaitOnTXISFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e012      	b.n	8003118 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030f2:	893b      	ldrh	r3, [r7, #8]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2200      	movs	r2, #0
 8003104:	2180      	movs	r1, #128	@ 0x80
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 fc51 	bl	80039ae <I2C_WaitOnFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	80002000 	.word	0x80002000

08003124 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	4608      	mov	r0, r1
 800312e:	4611      	mov	r1, r2
 8003130:	461a      	mov	r2, r3
 8003132:	4603      	mov	r3, r0
 8003134:	817b      	strh	r3, [r7, #10]
 8003136:	460b      	mov	r3, r1
 8003138:	813b      	strh	r3, [r7, #8]
 800313a:	4613      	mov	r3, r2
 800313c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	8979      	ldrh	r1, [r7, #10]
 8003144:	4b20      	ldr	r3, [pc, #128]	@ (80031c8 <I2C_RequestMemoryRead+0xa4>)
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	2300      	movs	r3, #0
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fe7e 	bl	8003e4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	69b9      	ldr	r1, [r7, #24]
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fc83 	bl	8003a60 <I2C_WaitOnTXISFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e02c      	b.n	80031be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d105      	bne.n	8003176 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800316a:	893b      	ldrh	r3, [r7, #8]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	629a      	str	r2, [r3, #40]	@ 0x28
 8003174:	e015      	b.n	80031a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003176:	893b      	ldrh	r3, [r7, #8]
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	b29b      	uxth	r3, r3
 800317c:	b2da      	uxtb	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	69b9      	ldr	r1, [r7, #24]
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fc69 	bl	8003a60 <I2C_WaitOnTXISFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e012      	b.n	80031be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003198:	893b      	ldrh	r3, [r7, #8]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2200      	movs	r2, #0
 80031aa:	2140      	movs	r1, #64	@ 0x40
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fbfe 	bl	80039ae <I2C_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	80002000 	.word	0x80002000

080031cc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80031e2:	2b28      	cmp	r3, #40	@ 0x28
 80031e4:	d16a      	bne.n	80032bc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	0c1b      	lsrs	r3, r3, #16
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	0c1b      	lsrs	r3, r3, #16
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003204:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	b29b      	uxth	r3, r3
 800320e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003212:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	b29b      	uxth	r3, r3
 800321c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003220:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d138      	bne.n	800329c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800322a:	897b      	ldrh	r3, [r7, #10]
 800322c:	09db      	lsrs	r3, r3, #7
 800322e:	b29a      	uxth	r2, r3
 8003230:	89bb      	ldrh	r3, [r7, #12]
 8003232:	4053      	eors	r3, r2
 8003234:	b29b      	uxth	r3, r3
 8003236:	f003 0306 	and.w	r3, r3, #6
 800323a:	2b00      	cmp	r3, #0
 800323c:	d11c      	bne.n	8003278 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800323e:	897b      	ldrh	r3, [r7, #10]
 8003240:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003250:	2b02      	cmp	r3, #2
 8003252:	d13b      	bne.n	80032cc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2208      	movs	r2, #8
 8003260:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800326a:	89ba      	ldrh	r2, [r7, #12]
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff fdde 	bl	8002e32 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003276:	e029      	b.n	80032cc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003278:	893b      	ldrh	r3, [r7, #8]
 800327a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800327c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fe15 	bl	8003eb0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800328e:	89ba      	ldrh	r2, [r7, #12]
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	4619      	mov	r1, r3
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff fdcc 	bl	8002e32 <HAL_I2C_AddrCallback>
}
 800329a:	e017      	b.n	80032cc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800329c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fe05 	bl	8003eb0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80032ae:	89ba      	ldrh	r2, [r7, #12]
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	4619      	mov	r1, r3
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fdbc 	bl	8002e32 <HAL_I2C_AddrCallback>
}
 80032ba:	e007      	b.n	80032cc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2208      	movs	r2, #8
 80032c2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e00c      	b.n	8003322 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d007      	beq.n	8003322 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003320:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b29      	cmp	r3, #41	@ 0x29
 800332c:	d112      	bne.n	8003354 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2228      	movs	r2, #40	@ 0x28
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2221      	movs	r2, #33	@ 0x21
 800333a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800333c:	2101      	movs	r1, #1
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fdb6 	bl	8003eb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff fd5c 	bl	8002e0a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003352:	e017      	b.n	8003384 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b2a      	cmp	r3, #42	@ 0x2a
 800335e:	d111      	bne.n	8003384 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2228      	movs	r2, #40	@ 0x28
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2222      	movs	r2, #34	@ 0x22
 800336c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800336e:	2102      	movs	r1, #2
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fd9d 	bl	8003eb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff fd4d 	bl	8002e1e <HAL_I2C_SlaveRxCpltCallback>
}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ae:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2220      	movs	r2, #32
 80033b6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033b8:	7afb      	ldrb	r3, [r7, #11]
 80033ba:	2b21      	cmp	r3, #33	@ 0x21
 80033bc:	d002      	beq.n	80033c4 <I2C_ITSlaveCplt+0x38>
 80033be:	7afb      	ldrb	r3, [r7, #11]
 80033c0:	2b29      	cmp	r3, #41	@ 0x29
 80033c2:	d108      	bne.n	80033d6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80033c4:	f248 0101 	movw	r1, #32769	@ 0x8001
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fd71 	bl	8003eb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2221      	movs	r2, #33	@ 0x21
 80033d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80033d4:	e019      	b.n	800340a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80033d6:	7afb      	ldrb	r3, [r7, #11]
 80033d8:	2b22      	cmp	r3, #34	@ 0x22
 80033da:	d002      	beq.n	80033e2 <I2C_ITSlaveCplt+0x56>
 80033dc:	7afb      	ldrb	r3, [r7, #11]
 80033de:	2b2a      	cmp	r3, #42	@ 0x2a
 80033e0:	d108      	bne.n	80033f4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80033e2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fd62 	bl	8003eb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2222      	movs	r2, #34	@ 0x22
 80033f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80033f2:	e00a      	b.n	800340a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80033f4:	7afb      	ldrb	r3, [r7, #11]
 80033f6:	2b28      	cmp	r3, #40	@ 0x28
 80033f8:	d107      	bne.n	800340a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80033fa:	f248 0103 	movw	r1, #32771	@ 0x8003
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fd56 	bl	8003eb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003418:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b89      	ldr	r3, [pc, #548]	@ (800364c <I2C_ITSlaveCplt+0x2c0>)
 8003426:	400b      	ands	r3, r1
 8003428:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fa7d 	bl	800392a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d013      	beq.n	8003462 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003448:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01f      	beq.n	8003492 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	b29a      	uxth	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003460:	e017      	b.n	8003492 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d012      	beq.n	8003492 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800347a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d006      	beq.n	8003492 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	b29a      	uxth	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d020      	beq.n	80034de <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0304 	bic.w	r3, r3, #4
 80034a2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00c      	beq.n	80034de <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ec:	f043 0204 	orr.w	r2, r3, #4
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d049      	beq.n	8003592 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003504:	2b00      	cmp	r3, #0
 8003506:	d044      	beq.n	8003592 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d128      	bne.n	8003564 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b28      	cmp	r3, #40	@ 0x28
 800351c:	d108      	bne.n	8003530 <I2C_ITSlaveCplt+0x1a4>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003524:	d104      	bne.n	8003530 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003526:	6979      	ldr	r1, [r7, #20]
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f893 	bl	8003654 <I2C_ITListenCplt>
 800352e:	e030      	b.n	8003592 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b29      	cmp	r3, #41	@ 0x29
 800353a:	d10e      	bne.n	800355a <I2C_ITSlaveCplt+0x1ce>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003542:	d00a      	beq.n	800355a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2210      	movs	r2, #16
 800354a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f9ec 	bl	800392a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff febe 	bl	80032d4 <I2C_ITSlaveSeqCplt>
 8003558:	e01b      	b.n	8003592 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2210      	movs	r2, #16
 8003560:	61da      	str	r2, [r3, #28]
 8003562:	e016      	b.n	8003592 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2210      	movs	r2, #16
 800356a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003570:	f043 0204 	orr.w	r2, r3, #4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <I2C_ITSlaveCplt+0x1fa>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003584:	d105      	bne.n	8003592 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	4619      	mov	r1, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f8b5 	bl	80036fc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d010      	beq.n	80035ca <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ac:	4619      	mov	r1, r3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f8a4 	bl	80036fc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b28      	cmp	r3, #40	@ 0x28
 80035be:	d141      	bne.n	8003644 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80035c0:	6979      	ldr	r1, [r7, #20]
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f846 	bl	8003654 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035c8:	e03c      	b.n	8003644 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035d2:	d014      	beq.n	80035fe <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff fe7d 	bl	80032d4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003650 <I2C_ITSlaveCplt+0x2c4>)
 80035de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff fc29 	bl	8002e4e <HAL_I2C_ListenCpltCallback>
}
 80035fc:	e022      	b.n	8003644 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b22      	cmp	r3, #34	@ 0x22
 8003608:	d10e      	bne.n	8003628 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff fbfc 	bl	8002e1e <HAL_I2C_SlaveRxCpltCallback>
}
 8003626:	e00d      	b.n	8003644 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff fbe3 	bl	8002e0a <HAL_I2C_SlaveTxCpltCallback>
}
 8003644:	bf00      	nop
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	fe00e800 	.word	0xfe00e800
 8003650:	ffff0000 	.word	0xffff0000

08003654 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a25      	ldr	r2, [pc, #148]	@ (80036f8 <I2C_ITListenCplt+0xa4>)
 8003662:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d022      	beq.n	80036d0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d012      	beq.n	80036d0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c8:	f043 0204 	orr.w	r2, r3, #4
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036d0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fbeb 	bl	8003eb0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2210      	movs	r2, #16
 80036e0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fbaf 	bl	8002e4e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	ffff0000 	.word	0xffff0000

080036fc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800370c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a6d      	ldr	r2, [pc, #436]	@ (80038d0 <I2C_ITError+0x1d4>)
 800371a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	2b28      	cmp	r3, #40	@ 0x28
 8003732:	d005      	beq.n	8003740 <I2C_ITError+0x44>
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b29      	cmp	r3, #41	@ 0x29
 8003738:	d002      	beq.n	8003740 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	2b2a      	cmp	r3, #42	@ 0x2a
 800373e:	d10b      	bne.n	8003758 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003740:	2103      	movs	r1, #3
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fbb4 	bl	8003eb0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2228      	movs	r2, #40	@ 0x28
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a60      	ldr	r2, [pc, #384]	@ (80038d4 <I2C_ITError+0x1d8>)
 8003754:	635a      	str	r2, [r3, #52]	@ 0x34
 8003756:	e030      	b.n	80037ba <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003758:	f248 0103 	movw	r1, #32771	@ 0x8003
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fba7 	bl	8003eb0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f8e1 	bl	800392a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b60      	cmp	r3, #96	@ 0x60
 8003772:	d01f      	beq.n	80037b4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b20      	cmp	r3, #32
 8003788:	d114      	bne.n	80037b4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2b10      	cmp	r3, #16
 8003796:	d109      	bne.n	80037ac <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2210      	movs	r2, #16
 800379e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a4:	f043 0204 	orr.w	r2, r3, #4
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2220      	movs	r2, #32
 80037b2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d039      	beq.n	800383c <I2C_ITError+0x140>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b11      	cmp	r3, #17
 80037cc:	d002      	beq.n	80037d4 <I2C_ITError+0xd8>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b21      	cmp	r3, #33	@ 0x21
 80037d2:	d133      	bne.n	800383c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037e2:	d107      	bne.n	80037f4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe fbdc 	bl	8001fb6 <HAL_DMA_GetState>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b01      	cmp	r3, #1
 8003802:	d017      	beq.n	8003834 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003808:	4a33      	ldr	r2, [pc, #204]	@ (80038d8 <I2C_ITError+0x1dc>)
 800380a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003818:	4618      	mov	r0, r3
 800381a:	f7fe fbaa 	bl	8001f72 <HAL_DMA_Abort_IT>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d04d      	beq.n	80038c0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800382e:	4610      	mov	r0, r2
 8003830:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003832:	e045      	b.n	80038c0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f851 	bl	80038dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800383a:	e041      	b.n	80038c0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d039      	beq.n	80038b8 <I2C_ITError+0x1bc>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b12      	cmp	r3, #18
 8003848:	d002      	beq.n	8003850 <I2C_ITError+0x154>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b22      	cmp	r3, #34	@ 0x22
 800384e:	d133      	bne.n	80038b8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800385a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800385e:	d107      	bne.n	8003870 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800386e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe fb9e 	bl	8001fb6 <HAL_DMA_GetState>
 800387a:	4603      	mov	r3, r0
 800387c:	2b01      	cmp	r3, #1
 800387e:	d017      	beq.n	80038b0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003884:	4a14      	ldr	r2, [pc, #80]	@ (80038d8 <I2C_ITError+0x1dc>)
 8003886:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003894:	4618      	mov	r0, r3
 8003896:	f7fe fb6c 	bl	8001f72 <HAL_DMA_Abort_IT>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d011      	beq.n	80038c4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038aa:	4610      	mov	r0, r2
 80038ac:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038ae:	e009      	b.n	80038c4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f813 	bl	80038dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038b6:	e005      	b.n	80038c4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f80f 	bl	80038dc <I2C_TreatErrorCallback>
  }
}
 80038be:	e002      	b.n	80038c6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038c0:	bf00      	nop
 80038c2:	e000      	b.n	80038c6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038c4:	bf00      	nop
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	ffff0000 	.word	0xffff0000
 80038d4:	08002e8b 	.word	0x08002e8b
 80038d8:	08003973 	.word	0x08003973

080038dc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b60      	cmp	r3, #96	@ 0x60
 80038ee:	d10e      	bne.n	800390e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fab5 	bl	8002e76 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800390c:	e009      	b.n	8003922 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff faa0 	bl	8002e62 <HAL_I2C_ErrorCallback>
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b02      	cmp	r3, #2
 800393e:	d103      	bne.n	8003948 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2200      	movs	r2, #0
 8003946:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b01      	cmp	r3, #1
 8003954:	d007      	beq.n	8003966 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699a      	ldr	r2, [r3, #24]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	619a      	str	r2, [r3, #24]
  }
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398c:	2200      	movs	r2, #0
 800398e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	2200      	movs	r2, #0
 800399e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f7ff ff9b 	bl	80038dc <I2C_TreatErrorCallback>
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	4613      	mov	r3, r2
 80039bc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039be:	e03b      	b.n	8003a38 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	6839      	ldr	r1, [r7, #0]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f961 	bl	8003c8c <I2C_IsErrorOccurred>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e041      	b.n	8003a58 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039da:	d02d      	beq.n	8003a38 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039dc:	f7fe f988 	bl	8001cf0 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d302      	bcc.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0x44>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d122      	bne.n	8003a38 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699a      	ldr	r2, [r3, #24]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4013      	ands	r3, r2
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d113      	bne.n	8003a38 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a14:	f043 0220 	orr.w	r2, r3, #32
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e00f      	b.n	8003a58 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	4013      	ands	r3, r2
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	461a      	mov	r2, r3
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d0b4      	beq.n	80039c0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a6c:	e033      	b.n	8003ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f90a 	bl	8003c8c <I2C_IsErrorOccurred>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e031      	b.n	8003ae6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a88:	d025      	beq.n	8003ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8a:	f7fe f931 	bl	8001cf0 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d302      	bcc.n	8003aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d11a      	bne.n	8003ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d013      	beq.n	8003ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab2:	f043 0220 	orr.w	r2, r3, #32
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e007      	b.n	8003ae6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d1c4      	bne.n	8003a6e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003afa:	e02f      	b.n	8003b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f8c3 	bl	8003c8c <I2C_IsErrorOccurred>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e02d      	b.n	8003b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b10:	f7fe f8ee 	bl	8001cf0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d302      	bcc.n	8003b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d11a      	bne.n	8003b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d013      	beq.n	8003b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b38:	f043 0220 	orr.w	r2, r3, #32
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e007      	b.n	8003b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d1c8      	bne.n	8003afc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003b84:	e071      	b.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f87e 	bl	8003c8c <I2C_IsErrorOccurred>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d13b      	bne.n	8003c20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d138      	bne.n	8003c20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d105      	bne.n	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	2b10      	cmp	r3, #16
 8003bd4:	d121      	bne.n	8003c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2210      	movs	r2, #16
 8003bdc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2204      	movs	r2, #4
 8003be2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2220      	movs	r2, #32
 8003bea:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6859      	ldr	r1, [r3, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b24      	ldr	r3, [pc, #144]	@ (8003c88 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003bf8:	400b      	ands	r3, r1
 8003bfa:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	75fb      	strb	r3, [r7, #23]
 8003c18:	e002      	b.n	8003c20 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003c20:	f7fe f866 	bl	8001cf0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d302      	bcc.n	8003c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d119      	bne.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d116      	bne.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d00f      	beq.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4e:	f043 0220 	orr.w	r2, r3, #32
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d002      	beq.n	8003c7e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d083      	beq.n	8003b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	fe00e800 	.word	0xfe00e800

08003c8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	@ 0x28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d068      	beq.n	8003d8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2210      	movs	r2, #16
 8003cbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cc0:	e049      	b.n	8003d56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cc8:	d045      	beq.n	8003d56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cca:	f7fe f811 	bl	8001cf0 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d302      	bcc.n	8003ce0 <I2C_IsErrorOccurred+0x54>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d13a      	bne.n	8003d56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cf2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d02:	d121      	bne.n	8003d48 <I2C_IsErrorOccurred+0xbc>
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d0a:	d01d      	beq.n	8003d48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d01a      	beq.n	8003d48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d22:	f7fd ffe5 	bl	8001cf0 <HAL_GetTick>
 8003d26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d28:	e00e      	b.n	8003d48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d2a:	f7fd ffe1 	bl	8001cf0 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b19      	cmp	r3, #25
 8003d36:	d907      	bls.n	8003d48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	f043 0320 	orr.w	r3, r3, #32
 8003d3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003d46:	e006      	b.n	8003d56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d1e9      	bne.n	8003d2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d003      	beq.n	8003d6c <I2C_IsErrorOccurred+0xe0>
 8003d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0aa      	beq.n	8003cc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d103      	bne.n	8003d7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	f043 0304 	orr.w	r3, r3, #4
 8003d82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003dac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00b      	beq.n	8003dd6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f043 0308 	orr.w	r3, r3, #8
 8003dc4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00b      	beq.n	8003df8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	f043 0302 	orr.w	r3, r3, #2
 8003de6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003df0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003df8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01c      	beq.n	8003e3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff fd92 	bl	800392a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b0d      	ldr	r3, [pc, #52]	@ (8003e48 <I2C_IsErrorOccurred+0x1bc>)
 8003e12:	400b      	ands	r3, r1
 8003e14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3728      	adds	r7, #40	@ 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	fe00e800 	.word	0xfe00e800

08003e4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	607b      	str	r3, [r7, #4]
 8003e56:	460b      	mov	r3, r1
 8003e58:	817b      	strh	r3, [r7, #10]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e5e:	897b      	ldrh	r3, [r7, #10]
 8003e60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e64:	7a7b      	ldrb	r3, [r7, #9]
 8003e66:	041b      	lsls	r3, r3, #16
 8003e68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	0d5b      	lsrs	r3, r3, #21
 8003e86:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e8a:	4b08      	ldr	r3, [pc, #32]	@ (8003eac <I2C_TransferConfig+0x60>)
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	ea02 0103 	and.w	r1, r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	03ff63ff 	.word	0x03ff63ff

08003eb0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ec0:	887b      	ldrh	r3, [r7, #2]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00f      	beq.n	8003eea <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003ed0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ede:	2b28      	cmp	r3, #40	@ 0x28
 8003ee0:	d003      	beq.n	8003eea <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003ee8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003eea:	887b      	ldrh	r3, [r7, #2]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00f      	beq.n	8003f14 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003efa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f08:	2b28      	cmp	r3, #40	@ 0x28
 8003f0a:	d003      	beq.n	8003f14 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003f12:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003f14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	da03      	bge.n	8003f24 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003f22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003f24:	887b      	ldrh	r3, [r7, #2]
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d103      	bne.n	8003f32 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003f30:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f32:	887b      	ldrh	r3, [r7, #2]
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d103      	bne.n	8003f40 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f043 0320 	orr.w	r3, r3, #32
 8003f3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003f40:	887b      	ldrh	r3, [r7, #2]
 8003f42:	2b40      	cmp	r3, #64	@ 0x40
 8003f44:	d103      	bne.n	8003f4e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f4c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	43da      	mvns	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	400a      	ands	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d138      	bne.n	8003ff4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e032      	b.n	8003ff6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2224      	movs	r2, #36	@ 0x24
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0201 	bic.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6819      	ldr	r1, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004002:	b480      	push	{r7}
 8004004:	b085      	sub	sp, #20
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b20      	cmp	r3, #32
 8004016:	d139      	bne.n	800408c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004022:	2302      	movs	r3, #2
 8004024:	e033      	b.n	800408e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2224      	movs	r2, #36	@ 0x24
 8004032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0201 	bic.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004054:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a04      	ldr	r2, [pc, #16]	@ (80040b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040aa:	6013      	str	r3, [r2, #0]
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40007000 	.word	0x40007000

080040bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80040c4:	2300      	movs	r3, #0
 80040c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e291      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8087 	beq.w	80041ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040e0:	4b96      	ldr	r3, [pc, #600]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 030c 	and.w	r3, r3, #12
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d00c      	beq.n	8004106 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ec:	4b93      	ldr	r3, [pc, #588]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 030c 	and.w	r3, r3, #12
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d112      	bne.n	800411e <HAL_RCC_OscConfig+0x62>
 80040f8:	4b90      	ldr	r3, [pc, #576]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004100:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004104:	d10b      	bne.n	800411e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004106:	4b8d      	ldr	r3, [pc, #564]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d06c      	beq.n	80041ec <HAL_RCC_OscConfig+0x130>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d168      	bne.n	80041ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e26b      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004126:	d106      	bne.n	8004136 <HAL_RCC_OscConfig+0x7a>
 8004128:	4b84      	ldr	r3, [pc, #528]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a83      	ldr	r2, [pc, #524]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800412e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	e02e      	b.n	8004194 <HAL_RCC_OscConfig+0xd8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10c      	bne.n	8004158 <HAL_RCC_OscConfig+0x9c>
 800413e:	4b7f      	ldr	r3, [pc, #508]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a7e      	ldr	r2, [pc, #504]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	4b7c      	ldr	r3, [pc, #496]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a7b      	ldr	r2, [pc, #492]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004150:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	e01d      	b.n	8004194 <HAL_RCC_OscConfig+0xd8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004160:	d10c      	bne.n	800417c <HAL_RCC_OscConfig+0xc0>
 8004162:	4b76      	ldr	r3, [pc, #472]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a75      	ldr	r2, [pc, #468]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	4b73      	ldr	r3, [pc, #460]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a72      	ldr	r2, [pc, #456]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	e00b      	b.n	8004194 <HAL_RCC_OscConfig+0xd8>
 800417c:	4b6f      	ldr	r3, [pc, #444]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a6e      	ldr	r2, [pc, #440]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	4b6c      	ldr	r3, [pc, #432]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a6b      	ldr	r2, [pc, #428]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800418e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d013      	beq.n	80041c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fd fda8 	bl	8001cf0 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041a4:	f7fd fda4 	bl	8001cf0 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b64      	cmp	r3, #100	@ 0x64
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e21f      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b6:	4b61      	ldr	r3, [pc, #388]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0xe8>
 80041c2:	e014      	b.n	80041ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c4:	f7fd fd94 	bl	8001cf0 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041cc:	f7fd fd90 	bl	8001cf0 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b64      	cmp	r3, #100	@ 0x64
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e20b      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041de:	4b57      	ldr	r3, [pc, #348]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x110>
 80041ea:	e000      	b.n	80041ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d069      	beq.n	80042ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041fa:	4b50      	ldr	r3, [pc, #320]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 030c 	and.w	r3, r3, #12
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00b      	beq.n	800421e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004206:	4b4d      	ldr	r3, [pc, #308]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 030c 	and.w	r3, r3, #12
 800420e:	2b08      	cmp	r3, #8
 8004210:	d11c      	bne.n	800424c <HAL_RCC_OscConfig+0x190>
 8004212:	4b4a      	ldr	r3, [pc, #296]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d116      	bne.n	800424c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800421e:	4b47      	ldr	r3, [pc, #284]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_RCC_OscConfig+0x17a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d001      	beq.n	8004236 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e1df      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004236:	4b41      	ldr	r3, [pc, #260]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	493d      	ldr	r1, [pc, #244]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004246:	4313      	orrs	r3, r2
 8004248:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800424a:	e040      	b.n	80042ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d023      	beq.n	800429c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004254:	4b39      	ldr	r3, [pc, #228]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a38      	ldr	r2, [pc, #224]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fd fd46 	bl	8001cf0 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004268:	f7fd fd42 	bl	8001cf0 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e1bd      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427a:	4b30      	ldr	r3, [pc, #192]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004286:	4b2d      	ldr	r3, [pc, #180]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4929      	ldr	r1, [pc, #164]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004296:	4313      	orrs	r3, r2
 8004298:	600b      	str	r3, [r1, #0]
 800429a:	e018      	b.n	80042ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800429c:	4b27      	ldr	r3, [pc, #156]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a26      	ldr	r2, [pc, #152]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fd fd22 	bl	8001cf0 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b0:	f7fd fd1e 	bl	8001cf0 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e199      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c2:	4b1e      	ldr	r3, [pc, #120]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d038      	beq.n	800434c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d019      	beq.n	8004316 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e2:	4b16      	ldr	r3, [pc, #88]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80042e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e6:	4a15      	ldr	r2, [pc, #84]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ee:	f7fd fcff 	bl	8001cf0 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f6:	f7fd fcfb 	bl	8001cf0 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e176      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004308:	4b0c      	ldr	r3, [pc, #48]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800430a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCC_OscConfig+0x23a>
 8004314:	e01a      	b.n	800434c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004316:	4b09      	ldr	r3, [pc, #36]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 8004318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431a:	4a08      	ldr	r2, [pc, #32]	@ (800433c <HAL_RCC_OscConfig+0x280>)
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004322:	f7fd fce5 	bl	8001cf0 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004328:	e00a      	b.n	8004340 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800432a:	f7fd fce1 	bl	8001cf0 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d903      	bls.n	8004340 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e15c      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>
 800433c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004340:	4b91      	ldr	r3, [pc, #580]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1ee      	bne.n	800432a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80a4 	beq.w	80044a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800435a:	4b8b      	ldr	r3, [pc, #556]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10d      	bne.n	8004382 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004366:	4b88      	ldr	r3, [pc, #544]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436a:	4a87      	ldr	r2, [pc, #540]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 800436c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004370:	6413      	str	r3, [r2, #64]	@ 0x40
 8004372:	4b85      	ldr	r3, [pc, #532]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800437e:	2301      	movs	r3, #1
 8004380:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004382:	4b82      	ldr	r3, [pc, #520]	@ (800458c <HAL_RCC_OscConfig+0x4d0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d118      	bne.n	80043c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800438e:	4b7f      	ldr	r3, [pc, #508]	@ (800458c <HAL_RCC_OscConfig+0x4d0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a7e      	ldr	r2, [pc, #504]	@ (800458c <HAL_RCC_OscConfig+0x4d0>)
 8004394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439a:	f7fd fca9 	bl	8001cf0 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a2:	f7fd fca5 	bl	8001cf0 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b64      	cmp	r3, #100	@ 0x64
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e120      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b4:	4b75      	ldr	r3, [pc, #468]	@ (800458c <HAL_RCC_OscConfig+0x4d0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d106      	bne.n	80043d6 <HAL_RCC_OscConfig+0x31a>
 80043c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043cc:	4a6e      	ldr	r2, [pc, #440]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d4:	e02d      	b.n	8004432 <HAL_RCC_OscConfig+0x376>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x33c>
 80043de:	4b6a      	ldr	r3, [pc, #424]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e2:	4a69      	ldr	r2, [pc, #420]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ea:	4b67      	ldr	r3, [pc, #412]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ee:	4a66      	ldr	r2, [pc, #408]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 80043f0:	f023 0304 	bic.w	r3, r3, #4
 80043f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f6:	e01c      	b.n	8004432 <HAL_RCC_OscConfig+0x376>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b05      	cmp	r3, #5
 80043fe:	d10c      	bne.n	800441a <HAL_RCC_OscConfig+0x35e>
 8004400:	4b61      	ldr	r3, [pc, #388]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004404:	4a60      	ldr	r2, [pc, #384]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004406:	f043 0304 	orr.w	r3, r3, #4
 800440a:	6713      	str	r3, [r2, #112]	@ 0x70
 800440c:	4b5e      	ldr	r3, [pc, #376]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004410:	4a5d      	ldr	r2, [pc, #372]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	6713      	str	r3, [r2, #112]	@ 0x70
 8004418:	e00b      	b.n	8004432 <HAL_RCC_OscConfig+0x376>
 800441a:	4b5b      	ldr	r3, [pc, #364]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441e:	4a5a      	ldr	r2, [pc, #360]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	6713      	str	r3, [r2, #112]	@ 0x70
 8004426:	4b58      	ldr	r3, [pc, #352]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442a:	4a57      	ldr	r2, [pc, #348]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 800442c:	f023 0304 	bic.w	r3, r3, #4
 8004430:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d015      	beq.n	8004466 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443a:	f7fd fc59 	bl	8001cf0 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004440:	e00a      	b.n	8004458 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004442:	f7fd fc55 	bl	8001cf0 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e0ce      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004458:	4b4b      	ldr	r3, [pc, #300]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0ee      	beq.n	8004442 <HAL_RCC_OscConfig+0x386>
 8004464:	e014      	b.n	8004490 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fd fc43 	bl	8001cf0 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800446c:	e00a      	b.n	8004484 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446e:	f7fd fc3f 	bl	8001cf0 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800447c:	4293      	cmp	r3, r2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e0b8      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004484:	4b40      	ldr	r3, [pc, #256]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ee      	bne.n	800446e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004490:	7dfb      	ldrb	r3, [r7, #23]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d105      	bne.n	80044a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004496:	4b3c      	ldr	r3, [pc, #240]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	4a3b      	ldr	r2, [pc, #236]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 800449c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044a0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 80a4 	beq.w	80045f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ac:	4b36      	ldr	r3, [pc, #216]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 030c 	and.w	r3, r3, #12
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d06b      	beq.n	8004590 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d149      	bne.n	8004554 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c0:	4b31      	ldr	r3, [pc, #196]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a30      	ldr	r2, [pc, #192]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 80044c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fd fc10 	bl	8001cf0 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d4:	f7fd fc0c 	bl	8001cf0 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e087      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e6:	4b28      	ldr	r3, [pc, #160]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69da      	ldr	r2, [r3, #28]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004500:	019b      	lsls	r3, r3, #6
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	3b01      	subs	r3, #1
 800450c:	041b      	lsls	r3, r3, #16
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004514:	061b      	lsls	r3, r3, #24
 8004516:	4313      	orrs	r3, r2
 8004518:	4a1b      	ldr	r2, [pc, #108]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 800451a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800451e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004520:	4b19      	ldr	r3, [pc, #100]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a18      	ldr	r2, [pc, #96]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800452a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fd fbe0 	bl	8001cf0 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004534:	f7fd fbdc 	bl	8001cf0 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e057      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004546:	4b10      	ldr	r3, [pc, #64]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x478>
 8004552:	e04f      	b.n	80045f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004554:	4b0c      	ldr	r3, [pc, #48]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a0b      	ldr	r2, [pc, #44]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 800455a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800455e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fd fbc6 	bl	8001cf0 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004568:	f7fd fbc2 	bl	8001cf0 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e03d      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457a:	4b03      	ldr	r3, [pc, #12]	@ (8004588 <HAL_RCC_OscConfig+0x4cc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x4ac>
 8004586:	e035      	b.n	80045f4 <HAL_RCC_OscConfig+0x538>
 8004588:	40023800 	.word	0x40023800
 800458c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004590:	4b1b      	ldr	r3, [pc, #108]	@ (8004600 <HAL_RCC_OscConfig+0x544>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d028      	beq.n	80045f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d121      	bne.n	80045f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d11a      	bne.n	80045f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045c0:	4013      	ands	r3, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d111      	bne.n	80045f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d6:	085b      	lsrs	r3, r3, #1
 80045d8:	3b01      	subs	r3, #1
 80045da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d107      	bne.n	80045f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800

08004604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0d0      	b.n	80047be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800461c:	4b6a      	ldr	r3, [pc, #424]	@ (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d910      	bls.n	800464c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462a:	4b67      	ldr	r3, [pc, #412]	@ (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 020f 	bic.w	r2, r3, #15
 8004632:	4965      	ldr	r1, [pc, #404]	@ (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	4b63      	ldr	r3, [pc, #396]	@ (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0b8      	b.n	80047be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d020      	beq.n	800469a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004664:	4b59      	ldr	r3, [pc, #356]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	4a58      	ldr	r2, [pc, #352]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 800466a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800466e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800467c:	4b53      	ldr	r3, [pc, #332]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	4a52      	ldr	r2, [pc, #328]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 8004682:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004686:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004688:	4b50      	ldr	r3, [pc, #320]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	494d      	ldr	r1, [pc, #308]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d040      	beq.n	8004728 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d107      	bne.n	80046be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ae:	4b47      	ldr	r3, [pc, #284]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d115      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e07f      	b.n	80047be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d107      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c6:	4b41      	ldr	r3, [pc, #260]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e073      	b.n	80047be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d6:	4b3d      	ldr	r3, [pc, #244]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e06b      	b.n	80047be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046e6:	4b39      	ldr	r3, [pc, #228]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f023 0203 	bic.w	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4936      	ldr	r1, [pc, #216]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f8:	f7fd fafa 	bl	8001cf0 <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004700:	f7fd faf6 	bl	8001cf0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e053      	b.n	80047be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004716:	4b2d      	ldr	r3, [pc, #180]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 020c 	and.w	r2, r3, #12
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	429a      	cmp	r2, r3
 8004726:	d1eb      	bne.n	8004700 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004728:	4b27      	ldr	r3, [pc, #156]	@ (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d210      	bcs.n	8004758 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4b24      	ldr	r3, [pc, #144]	@ (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f023 020f 	bic.w	r2, r3, #15
 800473e:	4922      	ldr	r1, [pc, #136]	@ (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	4313      	orrs	r3, r2
 8004744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004746:	4b20      	ldr	r3, [pc, #128]	@ (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d001      	beq.n	8004758 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e032      	b.n	80047be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004764:	4b19      	ldr	r3, [pc, #100]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4916      	ldr	r1, [pc, #88]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004782:	4b12      	ldr	r3, [pc, #72]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	490e      	ldr	r1, [pc, #56]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004796:	f000 f821 	bl	80047dc <HAL_RCC_GetSysClockFreq>
 800479a:	4602      	mov	r2, r0
 800479c:	4b0b      	ldr	r3, [pc, #44]	@ (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	490a      	ldr	r1, [pc, #40]	@ (80047d0 <HAL_RCC_ClockConfig+0x1cc>)
 80047a8:	5ccb      	ldrb	r3, [r1, r3]
 80047aa:	fa22 f303 	lsr.w	r3, r2, r3
 80047ae:	4a09      	ldr	r2, [pc, #36]	@ (80047d4 <HAL_RCC_ClockConfig+0x1d0>)
 80047b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047b2:	4b09      	ldr	r3, [pc, #36]	@ (80047d8 <HAL_RCC_ClockConfig+0x1d4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fd fa56 	bl	8001c68 <HAL_InitTick>

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40023c00 	.word	0x40023c00
 80047cc:	40023800 	.word	0x40023800
 80047d0:	0800d790 	.word	0x0800d790
 80047d4:	20000000 	.word	0x20000000
 80047d8:	20000004 	.word	0x20000004

080047dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e0:	b094      	sub	sp, #80	@ 0x50
 80047e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80047e8:	2300      	movs	r3, #0
 80047ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ec:	2300      	movs	r3, #0
 80047ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80047f0:	2300      	movs	r3, #0
 80047f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047f4:	4b79      	ldr	r3, [pc, #484]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d00d      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x40>
 8004800:	2b08      	cmp	r3, #8
 8004802:	f200 80e1 	bhi.w	80049c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0x34>
 800480a:	2b04      	cmp	r3, #4
 800480c:	d003      	beq.n	8004816 <HAL_RCC_GetSysClockFreq+0x3a>
 800480e:	e0db      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004810:	4b73      	ldr	r3, [pc, #460]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004812:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004814:	e0db      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004816:	4b73      	ldr	r3, [pc, #460]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004818:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800481a:	e0d8      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800481c:	4b6f      	ldr	r3, [pc, #444]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004824:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004826:	4b6d      	ldr	r3, [pc, #436]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d063      	beq.n	80048fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004832:	4b6a      	ldr	r3, [pc, #424]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	2200      	movs	r2, #0
 800483a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800483c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800483e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004844:	633b      	str	r3, [r7, #48]	@ 0x30
 8004846:	2300      	movs	r3, #0
 8004848:	637b      	str	r3, [r7, #52]	@ 0x34
 800484a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800484e:	4622      	mov	r2, r4
 8004850:	462b      	mov	r3, r5
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f04f 0100 	mov.w	r1, #0
 800485a:	0159      	lsls	r1, r3, #5
 800485c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004860:	0150      	lsls	r0, r2, #5
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4621      	mov	r1, r4
 8004868:	1a51      	subs	r1, r2, r1
 800486a:	6139      	str	r1, [r7, #16]
 800486c:	4629      	mov	r1, r5
 800486e:	eb63 0301 	sbc.w	r3, r3, r1
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004880:	4659      	mov	r1, fp
 8004882:	018b      	lsls	r3, r1, #6
 8004884:	4651      	mov	r1, sl
 8004886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800488a:	4651      	mov	r1, sl
 800488c:	018a      	lsls	r2, r1, #6
 800488e:	4651      	mov	r1, sl
 8004890:	ebb2 0801 	subs.w	r8, r2, r1
 8004894:	4659      	mov	r1, fp
 8004896:	eb63 0901 	sbc.w	r9, r3, r1
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ae:	4690      	mov	r8, r2
 80048b0:	4699      	mov	r9, r3
 80048b2:	4623      	mov	r3, r4
 80048b4:	eb18 0303 	adds.w	r3, r8, r3
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	462b      	mov	r3, r5
 80048bc:	eb49 0303 	adc.w	r3, r9, r3
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048ce:	4629      	mov	r1, r5
 80048d0:	024b      	lsls	r3, r1, #9
 80048d2:	4621      	mov	r1, r4
 80048d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048d8:	4621      	mov	r1, r4
 80048da:	024a      	lsls	r2, r1, #9
 80048dc:	4610      	mov	r0, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048e2:	2200      	movs	r2, #0
 80048e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048ec:	f7fc f9d4 	bl	8000c98 <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4613      	mov	r3, r2
 80048f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048f8:	e058      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fa:	4b38      	ldr	r3, [pc, #224]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	099b      	lsrs	r3, r3, #6
 8004900:	2200      	movs	r2, #0
 8004902:	4618      	mov	r0, r3
 8004904:	4611      	mov	r1, r2
 8004906:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800490a:	623b      	str	r3, [r7, #32]
 800490c:	2300      	movs	r3, #0
 800490e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004910:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004914:	4642      	mov	r2, r8
 8004916:	464b      	mov	r3, r9
 8004918:	f04f 0000 	mov.w	r0, #0
 800491c:	f04f 0100 	mov.w	r1, #0
 8004920:	0159      	lsls	r1, r3, #5
 8004922:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004926:	0150      	lsls	r0, r2, #5
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4641      	mov	r1, r8
 800492e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004932:	4649      	mov	r1, r9
 8004934:	eb63 0b01 	sbc.w	fp, r3, r1
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004944:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004948:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800494c:	ebb2 040a 	subs.w	r4, r2, sl
 8004950:	eb63 050b 	sbc.w	r5, r3, fp
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	00eb      	lsls	r3, r5, #3
 800495e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004962:	00e2      	lsls	r2, r4, #3
 8004964:	4614      	mov	r4, r2
 8004966:	461d      	mov	r5, r3
 8004968:	4643      	mov	r3, r8
 800496a:	18e3      	adds	r3, r4, r3
 800496c:	603b      	str	r3, [r7, #0]
 800496e:	464b      	mov	r3, r9
 8004970:	eb45 0303 	adc.w	r3, r5, r3
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004982:	4629      	mov	r1, r5
 8004984:	028b      	lsls	r3, r1, #10
 8004986:	4621      	mov	r1, r4
 8004988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800498c:	4621      	mov	r1, r4
 800498e:	028a      	lsls	r2, r1, #10
 8004990:	4610      	mov	r0, r2
 8004992:	4619      	mov	r1, r3
 8004994:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004996:	2200      	movs	r2, #0
 8004998:	61bb      	str	r3, [r7, #24]
 800499a:	61fa      	str	r2, [r7, #28]
 800499c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049a0:	f7fc f97a 	bl	8000c98 <__aeabi_uldivmod>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4613      	mov	r3, r2
 80049aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049ac:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x200>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	0c1b      	lsrs	r3, r3, #16
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	3301      	adds	r3, #1
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80049bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049c6:	e002      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049c8:	4b05      	ldr	r3, [pc, #20]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80049ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3750      	adds	r7, #80	@ 0x50
 80049d4:	46bd      	mov	sp, r7
 80049d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800
 80049e0:	00f42400 	.word	0x00f42400
 80049e4:	007a1200 	.word	0x007a1200

080049e8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049ec:	4b03      	ldr	r3, [pc, #12]	@ (80049fc <HAL_RCC_GetHCLKFreq+0x14>)
 80049ee:	681b      	ldr	r3, [r3, #0]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000000 	.word	0x20000000

08004a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a04:	f7ff fff0 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	0a9b      	lsrs	r3, r3, #10
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	4903      	ldr	r1, [pc, #12]	@ (8004a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a16:	5ccb      	ldrb	r3, [r1, r3]
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40023800 	.word	0x40023800
 8004a24:	0800d7a0 	.word	0x0800d7a0

08004a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a2c:	f7ff ffdc 	bl	80049e8 <HAL_RCC_GetHCLKFreq>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b05      	ldr	r3, [pc, #20]	@ (8004a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	0b5b      	lsrs	r3, r3, #13
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	4903      	ldr	r1, [pc, #12]	@ (8004a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a3e:	5ccb      	ldrb	r3, [r1, r3]
 8004a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	0800d7a0 	.word	0x0800d7a0

08004a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d012      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a74:	4b65      	ldr	r3, [pc, #404]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4a64      	ldr	r2, [pc, #400]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a7a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004a7e:	6093      	str	r3, [r2, #8]
 8004a80:	4b62      	ldr	r3, [pc, #392]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	4960      	ldr	r1, [pc, #384]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8004a96:	2301      	movs	r3, #1
 8004a98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d017      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004aa6:	4b59      	ldr	r3, [pc, #356]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004aac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab4:	4955      	ldr	r1, [pc, #340]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ac4:	d101      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d017      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ae8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af0:	4946      	ldr	r1, [pc, #280]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b00:	d101      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8004b02:	2301      	movs	r3, #1
 8004b04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 808b 	beq.w	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b20:	4b3a      	ldr	r3, [pc, #232]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b24:	4a39      	ldr	r2, [pc, #228]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b2c:	4b37      	ldr	r3, [pc, #220]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b38:	4b35      	ldr	r3, [pc, #212]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a34      	ldr	r2, [pc, #208]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b44:	f7fd f8d4 	bl	8001cf0 <HAL_GetTick>
 8004b48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4c:	f7fd f8d0 	bl	8001cf0 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b64      	cmp	r3, #100	@ 0x64
 8004b58:	d901      	bls.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e2bc      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b6a:	4b28      	ldr	r3, [pc, #160]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d035      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d02e      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b88:	4b20      	ldr	r3, [pc, #128]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b92:	4b1e      	ldr	r3, [pc, #120]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b96:	4a1d      	ldr	r2, [pc, #116]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b9c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ba8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004baa:	4a18      	ldr	r2, [pc, #96]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bb0:	4b16      	ldr	r3, [pc, #88]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d114      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fd f898 	bl	8001cf0 <HAL_GetTick>
 8004bc0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc2:	e00a      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc4:	f7fd f894 	bl	8001cf0 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e27e      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bda:	4b0c      	ldr	r3, [pc, #48]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0ee      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bf2:	d111      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004bf4:	4b05      	ldr	r3, [pc, #20]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004c00:	4b04      	ldr	r3, [pc, #16]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c02:	400b      	ands	r3, r1
 8004c04:	4901      	ldr	r1, [pc, #4]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	608b      	str	r3, [r1, #8]
 8004c0a:	e00b      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40007000 	.word	0x40007000
 8004c14:	0ffffcff 	.word	0x0ffffcff
 8004c18:	4ba4      	ldr	r3, [pc, #656]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	4aa3      	ldr	r2, [pc, #652]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c1e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c22:	6093      	str	r3, [r2, #8]
 8004c24:	4ba1      	ldr	r3, [pc, #644]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c30:	499e      	ldr	r1, [pc, #632]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0310 	and.w	r3, r3, #16
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d010      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c42:	4b9a      	ldr	r3, [pc, #616]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c48:	4a98      	ldr	r2, [pc, #608]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c52:	4b96      	ldr	r3, [pc, #600]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c54:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5c:	4993      	ldr	r1, [pc, #588]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c70:	4b8e      	ldr	r3, [pc, #568]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c76:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c7e:	498b      	ldr	r1, [pc, #556]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c92:	4b86      	ldr	r3, [pc, #536]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca0:	4982      	ldr	r1, [pc, #520]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cb4:	4b7d      	ldr	r3, [pc, #500]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cc2:	497a      	ldr	r1, [pc, #488]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cd6:	4b75      	ldr	r3, [pc, #468]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cdc:	f023 0203 	bic.w	r2, r3, #3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce4:	4971      	ldr	r1, [pc, #452]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cf8:	4b6c      	ldr	r3, [pc, #432]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfe:	f023 020c 	bic.w	r2, r3, #12
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	4969      	ldr	r1, [pc, #420]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d1a:	4b64      	ldr	r3, [pc, #400]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d28:	4960      	ldr	r1, [pc, #384]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d3c:	4b5b      	ldr	r3, [pc, #364]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d4a:	4958      	ldr	r1, [pc, #352]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d5e:	4b53      	ldr	r3, [pc, #332]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d6c:	494f      	ldr	r1, [pc, #316]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d80:	4b4a      	ldr	r3, [pc, #296]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d8e:	4947      	ldr	r1, [pc, #284]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004da2:	4b42      	ldr	r3, [pc, #264]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db0:	493e      	ldr	r1, [pc, #248]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004dc4:	4b39      	ldr	r3, [pc, #228]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd2:	4936      	ldr	r1, [pc, #216]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d011      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004de6:	4b31      	ldr	r3, [pc, #196]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004df4:	492d      	ldr	r1, [pc, #180]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e04:	d101      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004e06:	2301      	movs	r3, #1
 8004e08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e16:	4b25      	ldr	r3, [pc, #148]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e24:	4921      	ldr	r1, [pc, #132]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e38:	4b1c      	ldr	r3, [pc, #112]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e46:	4919      	ldr	r1, [pc, #100]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e5a:	4b14      	ldr	r3, [pc, #80]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e60:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e68:	4910      	ldr	r1, [pc, #64]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d006      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 809d 	beq.w	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e84:	4b09      	ldr	r3, [pc, #36]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a08      	ldr	r2, [pc, #32]	@ (8004eac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004e8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e90:	f7fc ff2e 	bl	8001cf0 <HAL_GetTick>
 8004e94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e96:	e00b      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e98:	f7fc ff2a 	bl	8001cf0 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b64      	cmp	r3, #100	@ 0x64
 8004ea4:	d904      	bls.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e116      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004eaa:	bf00      	nop
 8004eac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eb0:	4b8b      	ldr	r3, [pc, #556]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1ed      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d017      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d113      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ed0:	4b83      	ldr	r3, [pc, #524]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ed6:	0e1b      	lsrs	r3, r3, #24
 8004ed8:	f003 030f 	and.w	r3, r3, #15
 8004edc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	019a      	lsls	r2, r3, #6
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	061b      	lsls	r3, r3, #24
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	071b      	lsls	r3, r3, #28
 8004ef0:	497b      	ldr	r1, [pc, #492]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d004      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f0c:	d00a      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d024      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f22:	d11f      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f24:	4b6e      	ldr	r3, [pc, #440]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f2a:	0f1b      	lsrs	r3, r3, #28
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	019a      	lsls	r2, r3, #6
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	061b      	lsls	r3, r3, #24
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	071b      	lsls	r3, r3, #28
 8004f44:	4966      	ldr	r1, [pc, #408]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f4c:	4b64      	ldr	r3, [pc, #400]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f52:	f023 021f 	bic.w	r2, r3, #31
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	4960      	ldr	r1, [pc, #384]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00d      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	019a      	lsls	r2, r3, #6
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	061b      	lsls	r3, r3, #24
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	071b      	lsls	r3, r3, #28
 8004f84:	4956      	ldr	r1, [pc, #344]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f8c:	4b54      	ldr	r3, [pc, #336]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a53      	ldr	r2, [pc, #332]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004f92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f98:	f7fc feaa 	bl	8001cf0 <HAL_GetTick>
 8004f9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fa0:	f7fc fea6 	bl	8001cf0 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b64      	cmp	r3, #100	@ 0x64
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e092      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0f0      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	f040 8088 	bne.w	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fc6:	4b46      	ldr	r3, [pc, #280]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a45      	ldr	r2, [pc, #276]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004fcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fd2:	f7fc fe8d 	bl	8001cf0 <HAL_GetTick>
 8004fd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fd8:	e008      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fda:	f7fc fe89 	bl	8001cf0 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b64      	cmp	r3, #100	@ 0x64
 8004fe6:	d901      	bls.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e075      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fec:	4b3c      	ldr	r3, [pc, #240]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ff8:	d0ef      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005016:	2b00      	cmp	r3, #0
 8005018:	d024      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501e:	2b00      	cmp	r3, #0
 8005020:	d120      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005022:	4b2f      	ldr	r3, [pc, #188]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005028:	0c1b      	lsrs	r3, r3, #16
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	019a      	lsls	r2, r3, #6
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	041b      	lsls	r3, r3, #16
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	061b      	lsls	r3, r3, #24
 8005042:	4927      	ldr	r1, [pc, #156]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800504a:	4b25      	ldr	r3, [pc, #148]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800504c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005050:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	3b01      	subs	r3, #1
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	4920      	ldr	r1, [pc, #128]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d018      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005074:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005078:	d113      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800507a:	4b19      	ldr	r3, [pc, #100]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005080:	0e1b      	lsrs	r3, r3, #24
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	019a      	lsls	r2, r3, #6
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	431a      	orrs	r2, r3
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	061b      	lsls	r3, r3, #24
 800509a:	4911      	ldr	r1, [pc, #68]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80050a2:	4b0f      	ldr	r3, [pc, #60]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a0e      	ldr	r2, [pc, #56]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ae:	f7fc fe1f 	bl	8001cf0 <HAL_GetTick>
 80050b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050b4:	e008      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050b6:	f7fc fe1b 	bl	8001cf0 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b64      	cmp	r3, #100	@ 0x64
 80050c2:	d901      	bls.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e007      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050c8:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050d4:	d1ef      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3720      	adds	r7, #32
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40023800 	.word	0x40023800

080050e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e09d      	b.n	8005232 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d108      	bne.n	8005110 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005106:	d009      	beq.n	800511c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	61da      	str	r2, [r3, #28]
 800510e:	e005      	b.n	800511c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fc fb98 	bl	800186c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005152:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800515c:	d902      	bls.n	8005164 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e002      	b.n	800516a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005164:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005168:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005172:	d007      	beq.n	8005184 <HAL_SPI_Init+0xa0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800517c:	d002      	beq.n	8005184 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c6:	ea42 0103 	orr.w	r1, r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	0c1b      	lsrs	r3, r3, #16
 80051e0:	f003 0204 	and.w	r2, r3, #4
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005200:	ea42 0103 	orr.w	r1, r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005220:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b088      	sub	sp, #32
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	603b      	str	r3, [r7, #0]
 8005246:	4613      	mov	r3, r2
 8005248:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_SPI_Transmit+0x22>
 8005258:	2302      	movs	r3, #2
 800525a:	e15f      	b.n	800551c <HAL_SPI_Transmit+0x2e2>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005264:	f7fc fd44 	bl	8001cf0 <HAL_GetTick>
 8005268:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b01      	cmp	r3, #1
 8005278:	d002      	beq.n	8005280 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800527a:	2302      	movs	r3, #2
 800527c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800527e:	e148      	b.n	8005512 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_SPI_Transmit+0x52>
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005290:	e13f      	b.n	8005512 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2203      	movs	r2, #3
 8005296:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	88fa      	ldrh	r2, [r7, #6]
 80052aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052dc:	d10f      	bne.n	80052fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005308:	2b40      	cmp	r3, #64	@ 0x40
 800530a:	d007      	beq.n	800531c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800531a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005324:	d94f      	bls.n	80053c6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_SPI_Transmit+0xfa>
 800532e:	8afb      	ldrh	r3, [r7, #22]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d142      	bne.n	80053ba <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005338:	881a      	ldrh	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005344:	1c9a      	adds	r2, r3, #2
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005358:	e02f      	b.n	80053ba <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b02      	cmp	r3, #2
 8005366:	d112      	bne.n	800538e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536c:	881a      	ldrh	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005378:	1c9a      	adds	r2, r3, #2
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800538c:	e015      	b.n	80053ba <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800538e:	f7fc fcaf 	bl	8001cf0 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d803      	bhi.n	80053a6 <HAL_SPI_Transmit+0x16c>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053a4:	d102      	bne.n	80053ac <HAL_SPI_Transmit+0x172>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d106      	bne.n	80053ba <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80053b8:	e0ab      	b.n	8005512 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1ca      	bne.n	800535a <HAL_SPI_Transmit+0x120>
 80053c4:	e080      	b.n	80054c8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_SPI_Transmit+0x19a>
 80053ce:	8afb      	ldrh	r3, [r7, #22]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d174      	bne.n	80054be <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d912      	bls.n	8005404 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e2:	881a      	ldrh	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ee:	1c9a      	adds	r2, r3, #2
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b02      	subs	r3, #2
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005402:	e05c      	b.n	80054be <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	330c      	adds	r3, #12
 800540e:	7812      	ldrb	r2, [r2, #0]
 8005410:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800542a:	e048      	b.n	80054be <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b02      	cmp	r3, #2
 8005438:	d12b      	bne.n	8005492 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800543e:	b29b      	uxth	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d912      	bls.n	800546a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005448:	881a      	ldrh	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005454:	1c9a      	adds	r2, r3, #2
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b02      	subs	r3, #2
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005468:	e029      	b.n	80054be <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	330c      	adds	r3, #12
 8005474:	7812      	ldrb	r2, [r2, #0]
 8005476:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005490:	e015      	b.n	80054be <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005492:	f7fc fc2d 	bl	8001cf0 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d803      	bhi.n	80054aa <HAL_SPI_Transmit+0x270>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054a8:	d102      	bne.n	80054b0 <HAL_SPI_Transmit+0x276>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d106      	bne.n	80054be <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80054bc:	e029      	b.n	8005512 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1b1      	bne.n	800542c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 fb69 	bl	8005ba4 <SPI_EndRxTxTransaction>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2220      	movs	r2, #32
 80054dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e003      	b.n	8005512 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800551a:	7ffb      	ldrb	r3, [r7, #31]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3720      	adds	r7, #32
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	@ 0x28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005532:	2301      	movs	r3, #1
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <HAL_SPI_TransmitReceive+0x26>
 8005546:	2302      	movs	r3, #2
 8005548:	e20a      	b.n	8005960 <HAL_SPI_TransmitReceive+0x43c>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005552:	f7fc fbcd 	bl	8001cf0 <HAL_GetTick>
 8005556:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800555e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005566:	887b      	ldrh	r3, [r7, #2]
 8005568:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800556a:	887b      	ldrh	r3, [r7, #2]
 800556c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800556e:	7efb      	ldrb	r3, [r7, #27]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d00e      	beq.n	8005592 <HAL_SPI_TransmitReceive+0x6e>
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800557a:	d106      	bne.n	800558a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d102      	bne.n	800558a <HAL_SPI_TransmitReceive+0x66>
 8005584:	7efb      	ldrb	r3, [r7, #27]
 8005586:	2b04      	cmp	r3, #4
 8005588:	d003      	beq.n	8005592 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800558a:	2302      	movs	r3, #2
 800558c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005590:	e1e0      	b.n	8005954 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_SPI_TransmitReceive+0x80>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_SPI_TransmitReceive+0x80>
 800559e:	887b      	ldrh	r3, [r7, #2]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d103      	bne.n	80055ac <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80055aa:	e1d3      	b.n	8005954 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d003      	beq.n	80055c0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2205      	movs	r2, #5
 80055bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	887a      	ldrh	r2, [r7, #2]
 80055d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	887a      	ldrh	r2, [r7, #2]
 80055d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	887a      	ldrh	r2, [r7, #2]
 80055e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	887a      	ldrh	r2, [r7, #2]
 80055ec:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005602:	d802      	bhi.n	800560a <HAL_SPI_TransmitReceive+0xe6>
 8005604:	8a3b      	ldrh	r3, [r7, #16]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d908      	bls.n	800561c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	e007      	b.n	800562c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800562a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005636:	2b40      	cmp	r3, #64	@ 0x40
 8005638:	d007      	beq.n	800564a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005648:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005652:	f240 8081 	bls.w	8005758 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_SPI_TransmitReceive+0x140>
 800565e:	8a7b      	ldrh	r3, [r7, #18]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d16d      	bne.n	8005740 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	881a      	ldrh	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005674:	1c9a      	adds	r2, r3, #2
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005688:	e05a      	b.n	8005740 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b02      	cmp	r3, #2
 8005696:	d11b      	bne.n	80056d0 <HAL_SPI_TransmitReceive+0x1ac>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800569c:	b29b      	uxth	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d016      	beq.n	80056d0 <HAL_SPI_TransmitReceive+0x1ac>
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d113      	bne.n	80056d0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ac:	881a      	ldrh	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b8:	1c9a      	adds	r2, r3, #2
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d11c      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x1f4>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d016      	beq.n	8005718 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68da      	ldr	r2, [r3, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f4:	b292      	uxth	r2, r2
 80056f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fc:	1c9a      	adds	r2, r3, #2
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005714:	2301      	movs	r3, #1
 8005716:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005718:	f7fc faea 	bl	8001cf0 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005724:	429a      	cmp	r2, r3
 8005726:	d80b      	bhi.n	8005740 <HAL_SPI_TransmitReceive+0x21c>
 8005728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800572e:	d007      	beq.n	8005740 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800573e:	e109      	b.n	8005954 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d19f      	bne.n	800568a <HAL_SPI_TransmitReceive+0x166>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d199      	bne.n	800568a <HAL_SPI_TransmitReceive+0x166>
 8005756:	e0e3      	b.n	8005920 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_SPI_TransmitReceive+0x244>
 8005760:	8a7b      	ldrh	r3, [r7, #18]
 8005762:	2b01      	cmp	r3, #1
 8005764:	f040 80cf 	bne.w	8005906 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b01      	cmp	r3, #1
 8005770:	d912      	bls.n	8005798 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005776:	881a      	ldrh	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005782:	1c9a      	adds	r2, r3, #2
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b02      	subs	r3, #2
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005796:	e0b6      	b.n	8005906 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	330c      	adds	r3, #12
 80057a2:	7812      	ldrb	r2, [r2, #0]
 80057a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057be:	e0a2      	b.n	8005906 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d134      	bne.n	8005838 <HAL_SPI_TransmitReceive+0x314>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d02f      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x314>
 80057d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d12c      	bne.n	8005838 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d912      	bls.n	800580e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ec:	881a      	ldrh	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f8:	1c9a      	adds	r2, r3, #2
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b02      	subs	r3, #2
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800580c:	e012      	b.n	8005834 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	7812      	ldrb	r2, [r2, #0]
 800581a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b01      	cmp	r3, #1
 8005844:	d148      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x3b4>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d042      	beq.n	80058d8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b01      	cmp	r3, #1
 800585c:	d923      	bls.n	80058a6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005868:	b292      	uxth	r2, r2
 800586a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005870:	1c9a      	adds	r2, r3, #2
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800587c:	b29b      	uxth	r3, r3
 800587e:	3b02      	subs	r3, #2
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	d81f      	bhi.n	80058d4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058a2:	605a      	str	r2, [r3, #4]
 80058a4:	e016      	b.n	80058d4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f103 020c 	add.w	r2, r3, #12
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b2:	7812      	ldrb	r2, [r2, #0]
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058d4:	2301      	movs	r3, #1
 80058d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058d8:	f7fc fa0a 	bl	8001cf0 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d803      	bhi.n	80058f0 <HAL_SPI_TransmitReceive+0x3cc>
 80058e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058ee:	d102      	bne.n	80058f6 <HAL_SPI_TransmitReceive+0x3d2>
 80058f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d107      	bne.n	8005906 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005904:	e026      	b.n	8005954 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	f47f af57 	bne.w	80057c0 <HAL_SPI_TransmitReceive+0x29c>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	f47f af50 	bne.w	80057c0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 f93d 	bl	8005ba4 <SPI_EndRxTxTransaction>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2220      	movs	r2, #32
 800593a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800594a:	e003      	b.n	8005954 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800595c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005960:	4618      	mov	r0, r3
 8005962:	3728      	adds	r7, #40	@ 0x28
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	4613      	mov	r3, r2
 8005976:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005978:	f7fc f9ba 	bl	8001cf0 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005980:	1a9b      	subs	r3, r3, r2
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	4413      	add	r3, r2
 8005986:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005988:	f7fc f9b2 	bl	8001cf0 <HAL_GetTick>
 800598c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800598e:	4b39      	ldr	r3, [pc, #228]	@ (8005a74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	015b      	lsls	r3, r3, #5
 8005994:	0d1b      	lsrs	r3, r3, #20
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	fb02 f303 	mul.w	r3, r2, r3
 800599c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800599e:	e054      	b.n	8005a4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059a6:	d050      	beq.n	8005a4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059a8:	f7fc f9a2 	bl	8001cf0 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d902      	bls.n	80059be <SPI_WaitFlagStateUntilTimeout+0x56>
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d13d      	bne.n	8005a3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80059cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059d6:	d111      	bne.n	80059fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059e0:	d004      	beq.n	80059ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ea:	d107      	bne.n	80059fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a04:	d10f      	bne.n	8005a26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e017      	b.n	8005a6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4013      	ands	r3, r2
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	bf0c      	ite	eq
 8005a5a:	2301      	moveq	r3, #1
 8005a5c:	2300      	movne	r3, #0
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d19b      	bne.n	80059a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3720      	adds	r7, #32
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000000 	.word	0x20000000

08005a78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	@ 0x28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a86:	2300      	movs	r3, #0
 8005a88:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a8a:	f7fc f931 	bl	8001cf0 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a92:	1a9b      	subs	r3, r3, r2
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	4413      	add	r3, r2
 8005a98:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005a9a:	f7fc f929 	bl	8001cf0 <HAL_GetTick>
 8005a9e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005aa8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ba0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	00da      	lsls	r2, r3, #3
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	0d1b      	lsrs	r3, r3, #20
 8005ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aba:	fb02 f303 	mul.w	r3, r2, r3
 8005abe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ac0:	e060      	b.n	8005b84 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ac8:	d107      	bne.n	8005ada <SPI_WaitFifoStateUntilTimeout+0x62>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d104      	bne.n	8005ada <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ae0:	d050      	beq.n	8005b84 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ae2:	f7fc f905 	bl	8001cf0 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d902      	bls.n	8005af8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d13d      	bne.n	8005b74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b10:	d111      	bne.n	8005b36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b1a:	d004      	beq.n	8005b26 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b24:	d107      	bne.n	8005b36 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b3e:	d10f      	bne.n	8005b60 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e010      	b.n	8005b96 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d196      	bne.n	8005ac2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3728      	adds	r7, #40	@ 0x28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000000 	.word	0x20000000

08005ba4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff ff5b 	bl	8005a78 <SPI_WaitFifoStateUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bcc:	f043 0220 	orr.w	r2, r3, #32
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e046      	b.n	8005c66 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005bd8:	4b25      	ldr	r3, [pc, #148]	@ (8005c70 <SPI_EndRxTxTransaction+0xcc>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a25      	ldr	r2, [pc, #148]	@ (8005c74 <SPI_EndRxTxTransaction+0xd0>)
 8005bde:	fba2 2303 	umull	r2, r3, r2, r3
 8005be2:	0d5b      	lsrs	r3, r3, #21
 8005be4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005be8:	fb02 f303 	mul.w	r3, r2, r3
 8005bec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bf6:	d112      	bne.n	8005c1e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	2180      	movs	r1, #128	@ 0x80
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7ff feb0 	bl	8005968 <SPI_WaitFlagStateUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d016      	beq.n	8005c3c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c12:	f043 0220 	orr.w	r2, r3, #32
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e023      	b.n	8005c66 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c34:	2b80      	cmp	r3, #128	@ 0x80
 8005c36:	d0f2      	beq.n	8005c1e <SPI_EndRxTxTransaction+0x7a>
 8005c38:	e000      	b.n	8005c3c <SPI_EndRxTxTransaction+0x98>
        break;
 8005c3a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff ff15 	bl	8005a78 <SPI_WaitFifoStateUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c58:	f043 0220 	orr.w	r2, r3, #32
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e000      	b.n	8005c66 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20000000 	.word	0x20000000
 8005c74:	165e9f81 	.word	0x165e9f81

08005c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e040      	b.n	8005d0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fb fe2a 	bl	80018f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2224      	movs	r2, #36	@ 0x24
 8005ca4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fb16 	bl	80062f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f8af 	bl	8005e28 <UART_SetConfig>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e01b      	b.n	8005d0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fb95 	bl	8006434 <UART_CheckIdleState>
 8005d0a:	4603      	mov	r3, r0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08a      	sub	sp, #40	@ 0x28
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	603b      	str	r3, [r7, #0]
 8005d20:	4613      	mov	r3, r2
 8005d22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d177      	bne.n	8005e1c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <HAL_UART_Transmit+0x24>
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e070      	b.n	8005e1e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2221      	movs	r2, #33	@ 0x21
 8005d48:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d4a:	f7fb ffd1 	bl	8001cf0 <HAL_GetTick>
 8005d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	88fa      	ldrh	r2, [r7, #6]
 8005d54:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	88fa      	ldrh	r2, [r7, #6]
 8005d5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d68:	d108      	bne.n	8005d7c <HAL_UART_Transmit+0x68>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d104      	bne.n	8005d7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	61bb      	str	r3, [r7, #24]
 8005d7a:	e003      	b.n	8005d84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d84:	e02f      	b.n	8005de6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2180      	movs	r1, #128	@ 0x80
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 fba6 	bl	80064e2 <UART_WaitOnFlagUntilTimeout>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d004      	beq.n	8005da6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e03b      	b.n	8005e1e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10b      	bne.n	8005dc4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	461a      	mov	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	3302      	adds	r3, #2
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	e007      	b.n	8005dd4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	781a      	ldrb	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1c9      	bne.n	8005d86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2140      	movs	r1, #64	@ 0x40
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 fb70 	bl	80064e2 <UART_WaitOnFlagUntilTimeout>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d004      	beq.n	8005e12 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e005      	b.n	8005e1e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2220      	movs	r2, #32
 8005e16:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e000      	b.n	8005e1e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005e1c:	2302      	movs	r3, #2
  }
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3720      	adds	r7, #32
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4ba6      	ldr	r3, [pc, #664]	@ (80060ec <UART_SetConfig+0x2c4>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6812      	ldr	r2, [r2, #0]
 8005e5a:	6979      	ldr	r1, [r7, #20]
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a94      	ldr	r2, [pc, #592]	@ (80060f0 <UART_SetConfig+0x2c8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d120      	bne.n	8005ee6 <UART_SetConfig+0xbe>
 8005ea4:	4b93      	ldr	r3, [pc, #588]	@ (80060f4 <UART_SetConfig+0x2cc>)
 8005ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d816      	bhi.n	8005ee0 <UART_SetConfig+0xb8>
 8005eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <UART_SetConfig+0x90>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005ec9 	.word	0x08005ec9
 8005ebc:	08005ed5 	.word	0x08005ed5
 8005ec0:	08005ecf 	.word	0x08005ecf
 8005ec4:	08005edb 	.word	0x08005edb
 8005ec8:	2301      	movs	r3, #1
 8005eca:	77fb      	strb	r3, [r7, #31]
 8005ecc:	e150      	b.n	8006170 <UART_SetConfig+0x348>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	77fb      	strb	r3, [r7, #31]
 8005ed2:	e14d      	b.n	8006170 <UART_SetConfig+0x348>
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e14a      	b.n	8006170 <UART_SetConfig+0x348>
 8005eda:	2308      	movs	r3, #8
 8005edc:	77fb      	strb	r3, [r7, #31]
 8005ede:	e147      	b.n	8006170 <UART_SetConfig+0x348>
 8005ee0:	2310      	movs	r3, #16
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e144      	b.n	8006170 <UART_SetConfig+0x348>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a83      	ldr	r2, [pc, #524]	@ (80060f8 <UART_SetConfig+0x2d0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d132      	bne.n	8005f56 <UART_SetConfig+0x12e>
 8005ef0:	4b80      	ldr	r3, [pc, #512]	@ (80060f4 <UART_SetConfig+0x2cc>)
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef6:	f003 030c 	and.w	r3, r3, #12
 8005efa:	2b0c      	cmp	r3, #12
 8005efc:	d828      	bhi.n	8005f50 <UART_SetConfig+0x128>
 8005efe:	a201      	add	r2, pc, #4	@ (adr r2, 8005f04 <UART_SetConfig+0xdc>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005f39 	.word	0x08005f39
 8005f08:	08005f51 	.word	0x08005f51
 8005f0c:	08005f51 	.word	0x08005f51
 8005f10:	08005f51 	.word	0x08005f51
 8005f14:	08005f45 	.word	0x08005f45
 8005f18:	08005f51 	.word	0x08005f51
 8005f1c:	08005f51 	.word	0x08005f51
 8005f20:	08005f51 	.word	0x08005f51
 8005f24:	08005f3f 	.word	0x08005f3f
 8005f28:	08005f51 	.word	0x08005f51
 8005f2c:	08005f51 	.word	0x08005f51
 8005f30:	08005f51 	.word	0x08005f51
 8005f34:	08005f4b 	.word	0x08005f4b
 8005f38:	2300      	movs	r3, #0
 8005f3a:	77fb      	strb	r3, [r7, #31]
 8005f3c:	e118      	b.n	8006170 <UART_SetConfig+0x348>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	77fb      	strb	r3, [r7, #31]
 8005f42:	e115      	b.n	8006170 <UART_SetConfig+0x348>
 8005f44:	2304      	movs	r3, #4
 8005f46:	77fb      	strb	r3, [r7, #31]
 8005f48:	e112      	b.n	8006170 <UART_SetConfig+0x348>
 8005f4a:	2308      	movs	r3, #8
 8005f4c:	77fb      	strb	r3, [r7, #31]
 8005f4e:	e10f      	b.n	8006170 <UART_SetConfig+0x348>
 8005f50:	2310      	movs	r3, #16
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	e10c      	b.n	8006170 <UART_SetConfig+0x348>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a68      	ldr	r2, [pc, #416]	@ (80060fc <UART_SetConfig+0x2d4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d120      	bne.n	8005fa2 <UART_SetConfig+0x17a>
 8005f60:	4b64      	ldr	r3, [pc, #400]	@ (80060f4 <UART_SetConfig+0x2cc>)
 8005f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f66:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f6a:	2b30      	cmp	r3, #48	@ 0x30
 8005f6c:	d013      	beq.n	8005f96 <UART_SetConfig+0x16e>
 8005f6e:	2b30      	cmp	r3, #48	@ 0x30
 8005f70:	d814      	bhi.n	8005f9c <UART_SetConfig+0x174>
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	d009      	beq.n	8005f8a <UART_SetConfig+0x162>
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d810      	bhi.n	8005f9c <UART_SetConfig+0x174>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <UART_SetConfig+0x15c>
 8005f7e:	2b10      	cmp	r3, #16
 8005f80:	d006      	beq.n	8005f90 <UART_SetConfig+0x168>
 8005f82:	e00b      	b.n	8005f9c <UART_SetConfig+0x174>
 8005f84:	2300      	movs	r3, #0
 8005f86:	77fb      	strb	r3, [r7, #31]
 8005f88:	e0f2      	b.n	8006170 <UART_SetConfig+0x348>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	77fb      	strb	r3, [r7, #31]
 8005f8e:	e0ef      	b.n	8006170 <UART_SetConfig+0x348>
 8005f90:	2304      	movs	r3, #4
 8005f92:	77fb      	strb	r3, [r7, #31]
 8005f94:	e0ec      	b.n	8006170 <UART_SetConfig+0x348>
 8005f96:	2308      	movs	r3, #8
 8005f98:	77fb      	strb	r3, [r7, #31]
 8005f9a:	e0e9      	b.n	8006170 <UART_SetConfig+0x348>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	77fb      	strb	r3, [r7, #31]
 8005fa0:	e0e6      	b.n	8006170 <UART_SetConfig+0x348>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a56      	ldr	r2, [pc, #344]	@ (8006100 <UART_SetConfig+0x2d8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d120      	bne.n	8005fee <UART_SetConfig+0x1c6>
 8005fac:	4b51      	ldr	r3, [pc, #324]	@ (80060f4 <UART_SetConfig+0x2cc>)
 8005fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005fb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fb8:	d013      	beq.n	8005fe2 <UART_SetConfig+0x1ba>
 8005fba:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fbc:	d814      	bhi.n	8005fe8 <UART_SetConfig+0x1c0>
 8005fbe:	2b80      	cmp	r3, #128	@ 0x80
 8005fc0:	d009      	beq.n	8005fd6 <UART_SetConfig+0x1ae>
 8005fc2:	2b80      	cmp	r3, #128	@ 0x80
 8005fc4:	d810      	bhi.n	8005fe8 <UART_SetConfig+0x1c0>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <UART_SetConfig+0x1a8>
 8005fca:	2b40      	cmp	r3, #64	@ 0x40
 8005fcc:	d006      	beq.n	8005fdc <UART_SetConfig+0x1b4>
 8005fce:	e00b      	b.n	8005fe8 <UART_SetConfig+0x1c0>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	77fb      	strb	r3, [r7, #31]
 8005fd4:	e0cc      	b.n	8006170 <UART_SetConfig+0x348>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	77fb      	strb	r3, [r7, #31]
 8005fda:	e0c9      	b.n	8006170 <UART_SetConfig+0x348>
 8005fdc:	2304      	movs	r3, #4
 8005fde:	77fb      	strb	r3, [r7, #31]
 8005fe0:	e0c6      	b.n	8006170 <UART_SetConfig+0x348>
 8005fe2:	2308      	movs	r3, #8
 8005fe4:	77fb      	strb	r3, [r7, #31]
 8005fe6:	e0c3      	b.n	8006170 <UART_SetConfig+0x348>
 8005fe8:	2310      	movs	r3, #16
 8005fea:	77fb      	strb	r3, [r7, #31]
 8005fec:	e0c0      	b.n	8006170 <UART_SetConfig+0x348>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a44      	ldr	r2, [pc, #272]	@ (8006104 <UART_SetConfig+0x2dc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d125      	bne.n	8006044 <UART_SetConfig+0x21c>
 8005ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80060f4 <UART_SetConfig+0x2cc>)
 8005ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006006:	d017      	beq.n	8006038 <UART_SetConfig+0x210>
 8006008:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800600c:	d817      	bhi.n	800603e <UART_SetConfig+0x216>
 800600e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006012:	d00b      	beq.n	800602c <UART_SetConfig+0x204>
 8006014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006018:	d811      	bhi.n	800603e <UART_SetConfig+0x216>
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <UART_SetConfig+0x1fe>
 800601e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006022:	d006      	beq.n	8006032 <UART_SetConfig+0x20a>
 8006024:	e00b      	b.n	800603e <UART_SetConfig+0x216>
 8006026:	2300      	movs	r3, #0
 8006028:	77fb      	strb	r3, [r7, #31]
 800602a:	e0a1      	b.n	8006170 <UART_SetConfig+0x348>
 800602c:	2302      	movs	r3, #2
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	e09e      	b.n	8006170 <UART_SetConfig+0x348>
 8006032:	2304      	movs	r3, #4
 8006034:	77fb      	strb	r3, [r7, #31]
 8006036:	e09b      	b.n	8006170 <UART_SetConfig+0x348>
 8006038:	2308      	movs	r3, #8
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e098      	b.n	8006170 <UART_SetConfig+0x348>
 800603e:	2310      	movs	r3, #16
 8006040:	77fb      	strb	r3, [r7, #31]
 8006042:	e095      	b.n	8006170 <UART_SetConfig+0x348>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a2f      	ldr	r2, [pc, #188]	@ (8006108 <UART_SetConfig+0x2e0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d125      	bne.n	800609a <UART_SetConfig+0x272>
 800604e:	4b29      	ldr	r3, [pc, #164]	@ (80060f4 <UART_SetConfig+0x2cc>)
 8006050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006054:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006058:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800605c:	d017      	beq.n	800608e <UART_SetConfig+0x266>
 800605e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006062:	d817      	bhi.n	8006094 <UART_SetConfig+0x26c>
 8006064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006068:	d00b      	beq.n	8006082 <UART_SetConfig+0x25a>
 800606a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800606e:	d811      	bhi.n	8006094 <UART_SetConfig+0x26c>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <UART_SetConfig+0x254>
 8006074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006078:	d006      	beq.n	8006088 <UART_SetConfig+0x260>
 800607a:	e00b      	b.n	8006094 <UART_SetConfig+0x26c>
 800607c:	2301      	movs	r3, #1
 800607e:	77fb      	strb	r3, [r7, #31]
 8006080:	e076      	b.n	8006170 <UART_SetConfig+0x348>
 8006082:	2302      	movs	r3, #2
 8006084:	77fb      	strb	r3, [r7, #31]
 8006086:	e073      	b.n	8006170 <UART_SetConfig+0x348>
 8006088:	2304      	movs	r3, #4
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e070      	b.n	8006170 <UART_SetConfig+0x348>
 800608e:	2308      	movs	r3, #8
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e06d      	b.n	8006170 <UART_SetConfig+0x348>
 8006094:	2310      	movs	r3, #16
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e06a      	b.n	8006170 <UART_SetConfig+0x348>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1b      	ldr	r2, [pc, #108]	@ (800610c <UART_SetConfig+0x2e4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d138      	bne.n	8006116 <UART_SetConfig+0x2ee>
 80060a4:	4b13      	ldr	r3, [pc, #76]	@ (80060f4 <UART_SetConfig+0x2cc>)
 80060a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80060ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060b2:	d017      	beq.n	80060e4 <UART_SetConfig+0x2bc>
 80060b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060b8:	d82a      	bhi.n	8006110 <UART_SetConfig+0x2e8>
 80060ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060be:	d00b      	beq.n	80060d8 <UART_SetConfig+0x2b0>
 80060c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060c4:	d824      	bhi.n	8006110 <UART_SetConfig+0x2e8>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <UART_SetConfig+0x2aa>
 80060ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ce:	d006      	beq.n	80060de <UART_SetConfig+0x2b6>
 80060d0:	e01e      	b.n	8006110 <UART_SetConfig+0x2e8>
 80060d2:	2300      	movs	r3, #0
 80060d4:	77fb      	strb	r3, [r7, #31]
 80060d6:	e04b      	b.n	8006170 <UART_SetConfig+0x348>
 80060d8:	2302      	movs	r3, #2
 80060da:	77fb      	strb	r3, [r7, #31]
 80060dc:	e048      	b.n	8006170 <UART_SetConfig+0x348>
 80060de:	2304      	movs	r3, #4
 80060e0:	77fb      	strb	r3, [r7, #31]
 80060e2:	e045      	b.n	8006170 <UART_SetConfig+0x348>
 80060e4:	2308      	movs	r3, #8
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e042      	b.n	8006170 <UART_SetConfig+0x348>
 80060ea:	bf00      	nop
 80060ec:	efff69f3 	.word	0xefff69f3
 80060f0:	40011000 	.word	0x40011000
 80060f4:	40023800 	.word	0x40023800
 80060f8:	40004400 	.word	0x40004400
 80060fc:	40004800 	.word	0x40004800
 8006100:	40004c00 	.word	0x40004c00
 8006104:	40005000 	.word	0x40005000
 8006108:	40011400 	.word	0x40011400
 800610c:	40007800 	.word	0x40007800
 8006110:	2310      	movs	r3, #16
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	e02c      	b.n	8006170 <UART_SetConfig+0x348>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a72      	ldr	r2, [pc, #456]	@ (80062e4 <UART_SetConfig+0x4bc>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d125      	bne.n	800616c <UART_SetConfig+0x344>
 8006120:	4b71      	ldr	r3, [pc, #452]	@ (80062e8 <UART_SetConfig+0x4c0>)
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006126:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800612a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800612e:	d017      	beq.n	8006160 <UART_SetConfig+0x338>
 8006130:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006134:	d817      	bhi.n	8006166 <UART_SetConfig+0x33e>
 8006136:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800613a:	d00b      	beq.n	8006154 <UART_SetConfig+0x32c>
 800613c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006140:	d811      	bhi.n	8006166 <UART_SetConfig+0x33e>
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <UART_SetConfig+0x326>
 8006146:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800614a:	d006      	beq.n	800615a <UART_SetConfig+0x332>
 800614c:	e00b      	b.n	8006166 <UART_SetConfig+0x33e>
 800614e:	2300      	movs	r3, #0
 8006150:	77fb      	strb	r3, [r7, #31]
 8006152:	e00d      	b.n	8006170 <UART_SetConfig+0x348>
 8006154:	2302      	movs	r3, #2
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	e00a      	b.n	8006170 <UART_SetConfig+0x348>
 800615a:	2304      	movs	r3, #4
 800615c:	77fb      	strb	r3, [r7, #31]
 800615e:	e007      	b.n	8006170 <UART_SetConfig+0x348>
 8006160:	2308      	movs	r3, #8
 8006162:	77fb      	strb	r3, [r7, #31]
 8006164:	e004      	b.n	8006170 <UART_SetConfig+0x348>
 8006166:	2310      	movs	r3, #16
 8006168:	77fb      	strb	r3, [r7, #31]
 800616a:	e001      	b.n	8006170 <UART_SetConfig+0x348>
 800616c:	2310      	movs	r3, #16
 800616e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006178:	d15b      	bne.n	8006232 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800617a:	7ffb      	ldrb	r3, [r7, #31]
 800617c:	2b08      	cmp	r3, #8
 800617e:	d828      	bhi.n	80061d2 <UART_SetConfig+0x3aa>
 8006180:	a201      	add	r2, pc, #4	@ (adr r2, 8006188 <UART_SetConfig+0x360>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061ad 	.word	0x080061ad
 800618c:	080061b5 	.word	0x080061b5
 8006190:	080061bd 	.word	0x080061bd
 8006194:	080061d3 	.word	0x080061d3
 8006198:	080061c3 	.word	0x080061c3
 800619c:	080061d3 	.word	0x080061d3
 80061a0:	080061d3 	.word	0x080061d3
 80061a4:	080061d3 	.word	0x080061d3
 80061a8:	080061cb 	.word	0x080061cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ac:	f7fe fc28 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 80061b0:	61b8      	str	r0, [r7, #24]
        break;
 80061b2:	e013      	b.n	80061dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061b4:	f7fe fc38 	bl	8004a28 <HAL_RCC_GetPCLK2Freq>
 80061b8:	61b8      	str	r0, [r7, #24]
        break;
 80061ba:	e00f      	b.n	80061dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061bc:	4b4b      	ldr	r3, [pc, #300]	@ (80062ec <UART_SetConfig+0x4c4>)
 80061be:	61bb      	str	r3, [r7, #24]
        break;
 80061c0:	e00c      	b.n	80061dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061c2:	f7fe fb0b 	bl	80047dc <HAL_RCC_GetSysClockFreq>
 80061c6:	61b8      	str	r0, [r7, #24]
        break;
 80061c8:	e008      	b.n	80061dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061ce:	61bb      	str	r3, [r7, #24]
        break;
 80061d0:	e004      	b.n	80061dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	77bb      	strb	r3, [r7, #30]
        break;
 80061da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d074      	beq.n	80062cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	005a      	lsls	r2, r3, #1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	085b      	lsrs	r3, r3, #1
 80061ec:	441a      	add	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2b0f      	cmp	r3, #15
 80061fc:	d916      	bls.n	800622c <UART_SetConfig+0x404>
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006204:	d212      	bcs.n	800622c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	b29b      	uxth	r3, r3
 800620a:	f023 030f 	bic.w	r3, r3, #15
 800620e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	085b      	lsrs	r3, r3, #1
 8006214:	b29b      	uxth	r3, r3
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	b29a      	uxth	r2, r3
 800621c:	89fb      	ldrh	r3, [r7, #14]
 800621e:	4313      	orrs	r3, r2
 8006220:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	89fa      	ldrh	r2, [r7, #14]
 8006228:	60da      	str	r2, [r3, #12]
 800622a:	e04f      	b.n	80062cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	77bb      	strb	r3, [r7, #30]
 8006230:	e04c      	b.n	80062cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006232:	7ffb      	ldrb	r3, [r7, #31]
 8006234:	2b08      	cmp	r3, #8
 8006236:	d828      	bhi.n	800628a <UART_SetConfig+0x462>
 8006238:	a201      	add	r2, pc, #4	@ (adr r2, 8006240 <UART_SetConfig+0x418>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	08006265 	.word	0x08006265
 8006244:	0800626d 	.word	0x0800626d
 8006248:	08006275 	.word	0x08006275
 800624c:	0800628b 	.word	0x0800628b
 8006250:	0800627b 	.word	0x0800627b
 8006254:	0800628b 	.word	0x0800628b
 8006258:	0800628b 	.word	0x0800628b
 800625c:	0800628b 	.word	0x0800628b
 8006260:	08006283 	.word	0x08006283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006264:	f7fe fbcc 	bl	8004a00 <HAL_RCC_GetPCLK1Freq>
 8006268:	61b8      	str	r0, [r7, #24]
        break;
 800626a:	e013      	b.n	8006294 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800626c:	f7fe fbdc 	bl	8004a28 <HAL_RCC_GetPCLK2Freq>
 8006270:	61b8      	str	r0, [r7, #24]
        break;
 8006272:	e00f      	b.n	8006294 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006274:	4b1d      	ldr	r3, [pc, #116]	@ (80062ec <UART_SetConfig+0x4c4>)
 8006276:	61bb      	str	r3, [r7, #24]
        break;
 8006278:	e00c      	b.n	8006294 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800627a:	f7fe faaf 	bl	80047dc <HAL_RCC_GetSysClockFreq>
 800627e:	61b8      	str	r0, [r7, #24]
        break;
 8006280:	e008      	b.n	8006294 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006286:	61bb      	str	r3, [r7, #24]
        break;
 8006288:	e004      	b.n	8006294 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	77bb      	strb	r3, [r7, #30]
        break;
 8006292:	bf00      	nop
    }

    if (pclk != 0U)
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d018      	beq.n	80062cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	085a      	lsrs	r2, r3, #1
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	441a      	add	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	2b0f      	cmp	r3, #15
 80062b2:	d909      	bls.n	80062c8 <UART_SetConfig+0x4a0>
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ba:	d205      	bcs.n	80062c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	b29a      	uxth	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60da      	str	r2, [r3, #12]
 80062c6:	e001      	b.n	80062cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80062d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3720      	adds	r7, #32
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	40007c00 	.word	0x40007c00
 80062e8:	40023800 	.word	0x40023800
 80062ec:	00f42400 	.word	0x00f42400

080062f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006384:	f003 0310 	and.w	r3, r3, #16
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01a      	beq.n	8006406 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ee:	d10a      	bne.n	8006406 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	605a      	str	r2, [r3, #4]
  }
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08c      	sub	sp, #48	@ 0x30
 8006438:	af02      	add	r7, sp, #8
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006444:	f7fb fc54 	bl	8001cf0 <HAL_GetTick>
 8006448:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b08      	cmp	r3, #8
 8006456:	d12e      	bne.n	80064b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006458:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	2200      	movs	r2, #0
 8006462:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f83b 	bl	80064e2 <UART_WaitOnFlagUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d021      	beq.n	80064b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006486:	623b      	str	r3, [r7, #32]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	61fb      	str	r3, [r7, #28]
 8006492:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	69b9      	ldr	r1, [r7, #24]
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	617b      	str	r3, [r7, #20]
   return(result);
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e6      	bne.n	8006472 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e011      	b.n	80064da <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2220      	movs	r2, #32
 80064ba:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2220      	movs	r2, #32
 80064c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3728      	adds	r7, #40	@ 0x28
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	603b      	str	r3, [r7, #0]
 80064ee:	4613      	mov	r3, r2
 80064f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f2:	e04f      	b.n	8006594 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064fa:	d04b      	beq.n	8006594 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064fc:	f7fb fbf8 	bl	8001cf0 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	429a      	cmp	r2, r3
 800650a:	d302      	bcc.n	8006512 <UART_WaitOnFlagUntilTimeout+0x30>
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e04e      	b.n	80065b4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d037      	beq.n	8006594 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b80      	cmp	r3, #128	@ 0x80
 8006528:	d034      	beq.n	8006594 <UART_WaitOnFlagUntilTimeout+0xb2>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b40      	cmp	r3, #64	@ 0x40
 800652e:	d031      	beq.n	8006594 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b08      	cmp	r3, #8
 800653c:	d110      	bne.n	8006560 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2208      	movs	r2, #8
 8006544:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 f838 	bl	80065bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2208      	movs	r2, #8
 8006550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e029      	b.n	80065b4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800656a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800656e:	d111      	bne.n	8006594 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006578:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 f81e 	bl	80065bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e00f      	b.n	80065b4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69da      	ldr	r2, [r3, #28]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4013      	ands	r3, r2
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	bf0c      	ite	eq
 80065a4:	2301      	moveq	r3, #1
 80065a6:	2300      	movne	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	461a      	mov	r2, r3
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d0a0      	beq.n	80064f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065bc:	b480      	push	{r7}
 80065be:	b095      	sub	sp, #84	@ 0x54
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80065e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e6      	bne.n	80065c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3308      	adds	r3, #8
 80065fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	61fb      	str	r3, [r7, #28]
   return(result);
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	f023 0301 	bic.w	r3, r3, #1
 800660c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3308      	adds	r3, #8
 8006614:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006616:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006618:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800661c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e5      	bne.n	80065f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800662e:	2b01      	cmp	r3, #1
 8006630:	d118      	bne.n	8006664 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	e853 3f00 	ldrex	r3, [r3]
 800663e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f023 0310 	bic.w	r3, r3, #16
 8006646:	647b      	str	r3, [r7, #68]	@ 0x44
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006650:	61bb      	str	r3, [r7, #24]
 8006652:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	6979      	ldr	r1, [r7, #20]
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	e841 2300 	strex	r3, r2, [r1]
 800665c:	613b      	str	r3, [r7, #16]
   return(result);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e6      	bne.n	8006632 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2220      	movs	r2, #32
 8006668:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006678:	bf00      	nop
 800667a:	3754      	adds	r7, #84	@ 0x54
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006688:	4904      	ldr	r1, [pc, #16]	@ (800669c <MX_FATFS_Init+0x18>)
 800668a:	4805      	ldr	r0, [pc, #20]	@ (80066a0 <MX_FATFS_Init+0x1c>)
 800668c:	f003 ff74 	bl	800a578 <FATFS_LinkDriver>
 8006690:	4603      	mov	r3, r0
 8006692:	461a      	mov	r2, r3
 8006694:	4b03      	ldr	r3, [pc, #12]	@ (80066a4 <MX_FATFS_Init+0x20>)
 8006696:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006698:	bf00      	nop
 800669a:	bd80      	pop	{r7, pc}
 800669c:	20000b70 	.word	0x20000b70
 80066a0:	2000000c 	.word	0x2000000c
 80066a4:	20000b6c 	.word	0x20000b6c

080066a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80066ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv); //ADD THIS LINE
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 f9d7 	bl	8006a78 <USER_SPI_initialize>
 80066ca:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fab5 	bl	8006c50 <USER_SPI_status>
 80066e6:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	607a      	str	r2, [r7, #4]
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	4603      	mov	r3, r0
 80066fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8006700:	7bf8      	ldrb	r0, [r7, #15]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	68b9      	ldr	r1, [r7, #8]
 8006708:	f000 fab8 	bl	8006c7c <USER_SPI_read>
 800670c:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	603b      	str	r3, [r7, #0]
 8006722:	4603      	mov	r3, r0
 8006724:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8006726:	7bf8      	ldrb	r0, [r7, #15]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	f000 fb0b 	bl	8006d48 <USER_SPI_write>
 8006732:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	603a      	str	r2, [r7, #0]
 8006746:	71fb      	strb	r3, [r7, #7]
 8006748:	460b      	mov	r3, r1
 800674a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800674c:	79b9      	ldrb	r1, [r7, #6]
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fb74 	bl	8006e40 <USER_SPI_ioctl>
 8006758:	4603      	mov	r3, r0
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800676c:	f7fb fac0 	bl	8001cf0 <HAL_GetTick>
 8006770:	4603      	mov	r3, r0
 8006772:	4a04      	ldr	r2, [pc, #16]	@ (8006784 <SPI_Timer_On+0x20>)
 8006774:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006776:	4a04      	ldr	r2, [pc, #16]	@ (8006788 <SPI_Timer_On+0x24>)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6013      	str	r3, [r2, #0]
}
 800677c:	bf00      	nop
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	20000b78 	.word	0x20000b78
 8006788:	20000b7c 	.word	0x20000b7c

0800678c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006790:	f7fb faae 	bl	8001cf0 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	4b06      	ldr	r3, [pc, #24]	@ (80067b0 <SPI_Timer_Status+0x24>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	1ad2      	subs	r2, r2, r3
 800679c:	4b05      	ldr	r3, [pc, #20]	@ (80067b4 <SPI_Timer_Status+0x28>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	bf34      	ite	cc
 80067a4:	2301      	movcc	r3, #1
 80067a6:	2300      	movcs	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20000b78 	.word	0x20000b78
 80067b4:	20000b7c 	.word	0x20000b7c

080067b8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af02      	add	r7, sp, #8
 80067be:	4603      	mov	r3, r0
 80067c0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80067c2:	f107 020f 	add.w	r2, r7, #15
 80067c6:	1df9      	adds	r1, r7, #7
 80067c8:	2332      	movs	r3, #50	@ 0x32
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	2301      	movs	r3, #1
 80067ce:	4804      	ldr	r0, [pc, #16]	@ (80067e0 <xchg_spi+0x28>)
 80067d0:	f7fe fea8 	bl	8005524 <HAL_SPI_TransmitReceive>
    return rxDat;
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000584 	.word	0x20000584

080067e4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80067e4:	b590      	push	{r4, r7, lr}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	e00a      	b.n	800680a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	18d4      	adds	r4, r2, r3
 80067fa:	20ff      	movs	r0, #255	@ 0xff
 80067fc:	f7ff ffdc 	bl	80067b8 <xchg_spi>
 8006800:	4603      	mov	r3, r0
 8006802:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3301      	adds	r3, #1
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d3f0      	bcc.n	80067f4 <rcvr_spi_multi+0x10>
	}
}
 8006812:	bf00      	nop
 8006814:	bf00      	nop
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	bd90      	pop	{r4, r7, pc}

0800681c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	b29a      	uxth	r2, r3
 800682a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	4803      	ldr	r0, [pc, #12]	@ (8006840 <xmit_spi_multi+0x24>)
 8006832:	f7fe fd02 	bl	800523a <HAL_SPI_Transmit>
}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000584 	.word	0x20000584

08006844 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800684c:	f7fb fa50 	bl	8001cf0 <HAL_GetTick>
 8006850:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006856:	20ff      	movs	r0, #255	@ 0xff
 8006858:	f7ff ffae 	bl	80067b8 <xchg_spi>
 800685c:	4603      	mov	r3, r0
 800685e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	2bff      	cmp	r3, #255	@ 0xff
 8006864:	d007      	beq.n	8006876 <wait_ready+0x32>
 8006866:	f7fb fa43 	bl	8001cf0 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	429a      	cmp	r2, r3
 8006874:	d8ef      	bhi.n	8006856 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	2bff      	cmp	r3, #255	@ 0xff
 800687a:	bf0c      	ite	eq
 800687c:	2301      	moveq	r3, #1
 800687e:	2300      	movne	r3, #0
 8006880:	b2db      	uxtb	r3, r3
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006890:	2201      	movs	r2, #1
 8006892:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006896:	4804      	ldr	r0, [pc, #16]	@ (80068a8 <despiselect+0x1c>)
 8006898:	f7fb fd38 	bl	800230c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800689c:	20ff      	movs	r0, #255	@ 0xff
 800689e:	f7ff ff8b 	bl	80067b8 <xchg_spi>

}
 80068a2:	bf00      	nop
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40020c00 	.word	0x40020c00

080068ac <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80068b0:	2200      	movs	r2, #0
 80068b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80068b6:	480a      	ldr	r0, [pc, #40]	@ (80068e0 <spiselect+0x34>)
 80068b8:	f7fb fd28 	bl	800230c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80068bc:	20ff      	movs	r0, #255	@ 0xff
 80068be:	f7ff ff7b 	bl	80067b8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80068c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80068c6:	f7ff ffbd 	bl	8006844 <wait_ready>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <spiselect+0x28>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e002      	b.n	80068da <spiselect+0x2e>

	despiselect();
 80068d4:	f7ff ffda 	bl	800688c <despiselect>
	return 0;	/* Timeout */
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	40020c00 	.word	0x40020c00

080068e4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80068ee:	20c8      	movs	r0, #200	@ 0xc8
 80068f0:	f7ff ff38 	bl	8006764 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80068f4:	20ff      	movs	r0, #255	@ 0xff
 80068f6:	f7ff ff5f 	bl	80067b8 <xchg_spi>
 80068fa:	4603      	mov	r3, r0
 80068fc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	2bff      	cmp	r3, #255	@ 0xff
 8006902:	d104      	bne.n	800690e <rcvr_datablock+0x2a>
 8006904:	f7ff ff42 	bl	800678c <SPI_Timer_Status>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1f2      	bne.n	80068f4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	2bfe      	cmp	r3, #254	@ 0xfe
 8006912:	d001      	beq.n	8006918 <rcvr_datablock+0x34>
 8006914:	2300      	movs	r3, #0
 8006916:	e00a      	b.n	800692e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff ff62 	bl	80067e4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006920:	20ff      	movs	r0, #255	@ 0xff
 8006922:	f7ff ff49 	bl	80067b8 <xchg_spi>
 8006926:	20ff      	movs	r0, #255	@ 0xff
 8006928:	f7ff ff46 	bl	80067b8 <xchg_spi>

	return 1;						/* Function succeeded */
 800692c:	2301      	movs	r3, #1
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b084      	sub	sp, #16
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	460b      	mov	r3, r1
 8006940:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006942:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006946:	f7ff ff7d 	bl	8006844 <wait_ready>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <xmit_datablock+0x1e>
 8006950:	2300      	movs	r3, #0
 8006952:	e01e      	b.n	8006992 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff ff2e 	bl	80067b8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	2bfd      	cmp	r3, #253	@ 0xfd
 8006960:	d016      	beq.n	8006990 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006962:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff ff58 	bl	800681c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800696c:	20ff      	movs	r0, #255	@ 0xff
 800696e:	f7ff ff23 	bl	80067b8 <xchg_spi>
 8006972:	20ff      	movs	r0, #255	@ 0xff
 8006974:	f7ff ff20 	bl	80067b8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006978:	20ff      	movs	r0, #255	@ 0xff
 800697a:	f7ff ff1d 	bl	80067b8 <xchg_spi>
 800697e:	4603      	mov	r3, r0
 8006980:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	f003 031f 	and.w	r3, r3, #31
 8006988:	2b05      	cmp	r3, #5
 800698a:	d001      	beq.n	8006990 <xmit_datablock+0x5a>
 800698c:	2300      	movs	r3, #0
 800698e:	e000      	b.n	8006992 <xmit_datablock+0x5c>
	}
	return 1;
 8006990:	2301      	movs	r3, #1
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	4603      	mov	r3, r0
 80069a2:	6039      	str	r1, [r7, #0]
 80069a4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80069a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	da0e      	bge.n	80069cc <send_cmd+0x32>
		cmd &= 0x7F;
 80069ae:	79fb      	ldrb	r3, [r7, #7]
 80069b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069b4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80069b6:	2100      	movs	r1, #0
 80069b8:	2037      	movs	r0, #55	@ 0x37
 80069ba:	f7ff ffee 	bl	800699a <send_cmd>
 80069be:	4603      	mov	r3, r0
 80069c0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80069c2:	7bbb      	ldrb	r3, [r7, #14]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d901      	bls.n	80069cc <send_cmd+0x32>
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	e051      	b.n	8006a70 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	2b0c      	cmp	r3, #12
 80069d0:	d008      	beq.n	80069e4 <send_cmd+0x4a>
		despiselect();
 80069d2:	f7ff ff5b 	bl	800688c <despiselect>
		if (!spiselect()) return 0xFF;
 80069d6:	f7ff ff69 	bl	80068ac <spiselect>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <send_cmd+0x4a>
 80069e0:	23ff      	movs	r3, #255	@ 0xff
 80069e2:	e045      	b.n	8006a70 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80069e4:	79fb      	ldrb	r3, [r7, #7]
 80069e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fee3 	bl	80067b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	0e1b      	lsrs	r3, r3, #24
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7ff fedd 	bl	80067b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	0c1b      	lsrs	r3, r3, #16
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff fed7 	bl	80067b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	0a1b      	lsrs	r3, r3, #8
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff fed1 	bl	80067b8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff fecc 	bl	80067b8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006a20:	2301      	movs	r3, #1
 8006a22:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <send_cmd+0x94>
 8006a2a:	2395      	movs	r3, #149	@ 0x95
 8006a2c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d101      	bne.n	8006a38 <send_cmd+0x9e>
 8006a34:	2387      	movs	r3, #135	@ 0x87
 8006a36:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff febc 	bl	80067b8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006a40:	79fb      	ldrb	r3, [r7, #7]
 8006a42:	2b0c      	cmp	r3, #12
 8006a44:	d102      	bne.n	8006a4c <send_cmd+0xb2>
 8006a46:	20ff      	movs	r0, #255	@ 0xff
 8006a48:	f7ff feb6 	bl	80067b8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006a4c:	230a      	movs	r3, #10
 8006a4e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006a50:	20ff      	movs	r0, #255	@ 0xff
 8006a52:	f7ff feb1 	bl	80067b8 <xchg_spi>
 8006a56:	4603      	mov	r3, r0
 8006a58:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006a5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	da05      	bge.n	8006a6e <send_cmd+0xd4>
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	73fb      	strb	r3, [r7, #15]
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1f0      	bne.n	8006a50 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006a6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006a78:	b590      	push	{r4, r7, lr}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	4603      	mov	r3, r0
 8006a80:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006a82:	79fb      	ldrb	r3, [r7, #7]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <USER_SPI_initialize+0x14>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e0d6      	b.n	8006c3a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006a8c:	4b6d      	ldr	r3, [pc, #436]	@ (8006c44 <USER_SPI_initialize+0x1cc>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <USER_SPI_initialize+0x2a>
 8006a9a:	4b6a      	ldr	r3, [pc, #424]	@ (8006c44 <USER_SPI_initialize+0x1cc>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	e0cb      	b.n	8006c3a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006aa2:	4b69      	ldr	r3, [pc, #420]	@ (8006c48 <USER_SPI_initialize+0x1d0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006aac:	4b66      	ldr	r3, [pc, #408]	@ (8006c48 <USER_SPI_initialize+0x1d0>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8006ab4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006ab6:	230a      	movs	r3, #10
 8006ab8:	73fb      	strb	r3, [r7, #15]
 8006aba:	e005      	b.n	8006ac8 <USER_SPI_initialize+0x50>
 8006abc:	20ff      	movs	r0, #255	@ 0xff
 8006abe:	f7ff fe7b 	bl	80067b8 <xchg_spi>
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	73fb      	strb	r3, [r7, #15]
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f6      	bne.n	8006abc <USER_SPI_initialize+0x44>

	ty = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	f7ff ff60 	bl	800699a <send_cmd>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	f040 808b 	bne.w	8006bf8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006ae2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006ae6:	f7ff fe3d 	bl	8006764 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006aea:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8006aee:	2008      	movs	r0, #8
 8006af0:	f7ff ff53 	bl	800699a <send_cmd>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d151      	bne.n	8006b9e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006afa:	2300      	movs	r3, #0
 8006afc:	73fb      	strb	r3, [r7, #15]
 8006afe:	e00d      	b.n	8006b1c <USER_SPI_initialize+0xa4>
 8006b00:	7bfc      	ldrb	r4, [r7, #15]
 8006b02:	20ff      	movs	r0, #255	@ 0xff
 8006b04:	f7ff fe58 	bl	80067b8 <xchg_spi>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f104 0310 	add.w	r3, r4, #16
 8006b10:	443b      	add	r3, r7
 8006b12:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	73fb      	strb	r3, [r7, #15]
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d9ee      	bls.n	8006b00 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006b22:	7abb      	ldrb	r3, [r7, #10]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d167      	bne.n	8006bf8 <USER_SPI_initialize+0x180>
 8006b28:	7afb      	ldrb	r3, [r7, #11]
 8006b2a:	2baa      	cmp	r3, #170	@ 0xaa
 8006b2c:	d164      	bne.n	8006bf8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006b2e:	bf00      	nop
 8006b30:	f7ff fe2c 	bl	800678c <SPI_Timer_Status>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d007      	beq.n	8006b4a <USER_SPI_initialize+0xd2>
 8006b3a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006b3e:	20a9      	movs	r0, #169	@ 0xa9
 8006b40:	f7ff ff2b 	bl	800699a <send_cmd>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f2      	bne.n	8006b30 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006b4a:	f7ff fe1f 	bl	800678c <SPI_Timer_Status>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d051      	beq.n	8006bf8 <USER_SPI_initialize+0x180>
 8006b54:	2100      	movs	r1, #0
 8006b56:	203a      	movs	r0, #58	@ 0x3a
 8006b58:	f7ff ff1f 	bl	800699a <send_cmd>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d14a      	bne.n	8006bf8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006b62:	2300      	movs	r3, #0
 8006b64:	73fb      	strb	r3, [r7, #15]
 8006b66:	e00d      	b.n	8006b84 <USER_SPI_initialize+0x10c>
 8006b68:	7bfc      	ldrb	r4, [r7, #15]
 8006b6a:	20ff      	movs	r0, #255	@ 0xff
 8006b6c:	f7ff fe24 	bl	80067b8 <xchg_spi>
 8006b70:	4603      	mov	r3, r0
 8006b72:	461a      	mov	r2, r3
 8006b74:	f104 0310 	add.w	r3, r4, #16
 8006b78:	443b      	add	r3, r7
 8006b7a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	3301      	adds	r3, #1
 8006b82:	73fb      	strb	r3, [r7, #15]
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d9ee      	bls.n	8006b68 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006b8a:	7a3b      	ldrb	r3, [r7, #8]
 8006b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <USER_SPI_initialize+0x120>
 8006b94:	230c      	movs	r3, #12
 8006b96:	e000      	b.n	8006b9a <USER_SPI_initialize+0x122>
 8006b98:	2304      	movs	r3, #4
 8006b9a:	737b      	strb	r3, [r7, #13]
 8006b9c:	e02c      	b.n	8006bf8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	20a9      	movs	r0, #169	@ 0xa9
 8006ba2:	f7ff fefa 	bl	800699a <send_cmd>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d804      	bhi.n	8006bb6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006bac:	2302      	movs	r3, #2
 8006bae:	737b      	strb	r3, [r7, #13]
 8006bb0:	23a9      	movs	r3, #169	@ 0xa9
 8006bb2:	73bb      	strb	r3, [r7, #14]
 8006bb4:	e003      	b.n	8006bbe <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	737b      	strb	r3, [r7, #13]
 8006bba:	2301      	movs	r3, #1
 8006bbc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006bbe:	bf00      	nop
 8006bc0:	f7ff fde4 	bl	800678c <SPI_Timer_Status>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <USER_SPI_initialize+0x162>
 8006bca:	7bbb      	ldrb	r3, [r7, #14]
 8006bcc:	2100      	movs	r1, #0
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff fee3 	bl	800699a <send_cmd>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1f2      	bne.n	8006bc0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006bda:	f7ff fdd7 	bl	800678c <SPI_Timer_Status>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d007      	beq.n	8006bf4 <USER_SPI_initialize+0x17c>
 8006be4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006be8:	2010      	movs	r0, #16
 8006bea:	f7ff fed6 	bl	800699a <send_cmd>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <USER_SPI_initialize+0x180>
				ty = 0;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006bf8:	4a14      	ldr	r2, [pc, #80]	@ (8006c4c <USER_SPI_initialize+0x1d4>)
 8006bfa:	7b7b      	ldrb	r3, [r7, #13]
 8006bfc:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006bfe:	f7ff fe45 	bl	800688c <despiselect>

	if (ty) {			/* OK */
 8006c02:	7b7b      	ldrb	r3, [r7, #13]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d012      	beq.n	8006c2e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006c08:	4b0f      	ldr	r3, [pc, #60]	@ (8006c48 <USER_SPI_initialize+0x1d0>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006c12:	4b0d      	ldr	r3, [pc, #52]	@ (8006c48 <USER_SPI_initialize+0x1d0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0210 	orr.w	r2, r2, #16
 8006c1a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006c1c:	4b09      	ldr	r3, [pc, #36]	@ (8006c44 <USER_SPI_initialize+0x1cc>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	f023 0301 	bic.w	r3, r3, #1
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	4b06      	ldr	r3, [pc, #24]	@ (8006c44 <USER_SPI_initialize+0x1cc>)
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	e002      	b.n	8006c34 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006c2e:	4b05      	ldr	r3, [pc, #20]	@ (8006c44 <USER_SPI_initialize+0x1cc>)
 8006c30:	2201      	movs	r2, #1
 8006c32:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006c34:	4b03      	ldr	r3, [pc, #12]	@ (8006c44 <USER_SPI_initialize+0x1cc>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	b2db      	uxtb	r3, r3
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd90      	pop	{r4, r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000020 	.word	0x20000020
 8006c48:	20000584 	.word	0x20000584
 8006c4c:	20000b74 	.word	0x20000b74

08006c50 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <USER_SPI_status+0x14>
 8006c60:	2301      	movs	r3, #1
 8006c62:	e002      	b.n	8006c6a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006c64:	4b04      	ldr	r3, [pc, #16]	@ (8006c78 <USER_SPI_status+0x28>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	b2db      	uxtb	r3, r3
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	20000020 	.word	0x20000020

08006c7c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60b9      	str	r1, [r7, #8]
 8006c84:	607a      	str	r2, [r7, #4]
 8006c86:	603b      	str	r3, [r7, #0]
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d102      	bne.n	8006c98 <USER_SPI_read+0x1c>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <USER_SPI_read+0x20>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	e04d      	b.n	8006d38 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006c9c:	4b28      	ldr	r3, [pc, #160]	@ (8006d40 <USER_SPI_read+0xc4>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <USER_SPI_read+0x32>
 8006caa:	2303      	movs	r3, #3
 8006cac:	e044      	b.n	8006d38 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006cae:	4b25      	ldr	r3, [pc, #148]	@ (8006d44 <USER_SPI_read+0xc8>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	f003 0308 	and.w	r3, r3, #8
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d102      	bne.n	8006cc0 <USER_SPI_read+0x44>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	025b      	lsls	r3, r3, #9
 8006cbe:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d111      	bne.n	8006cea <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	2011      	movs	r0, #17
 8006cca:	f7ff fe66 	bl	800699a <send_cmd>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d129      	bne.n	8006d28 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006cd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006cd8:	68b8      	ldr	r0, [r7, #8]
 8006cda:	f7ff fe03 	bl	80068e4 <rcvr_datablock>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d021      	beq.n	8006d28 <USER_SPI_read+0xac>
			count = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	e01e      	b.n	8006d28 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006cea:	6879      	ldr	r1, [r7, #4]
 8006cec:	2012      	movs	r0, #18
 8006cee:	f7ff fe54 	bl	800699a <send_cmd>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d117      	bne.n	8006d28 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006cf8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006cfc:	68b8      	ldr	r0, [r7, #8]
 8006cfe:	f7ff fdf1 	bl	80068e4 <rcvr_datablock>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00a      	beq.n	8006d1e <USER_SPI_read+0xa2>
				buff += 512;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006d0e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	603b      	str	r3, [r7, #0]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1ed      	bne.n	8006cf8 <USER_SPI_read+0x7c>
 8006d1c:	e000      	b.n	8006d20 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006d1e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006d20:	2100      	movs	r1, #0
 8006d22:	200c      	movs	r0, #12
 8006d24:	f7ff fe39 	bl	800699a <send_cmd>
		}
	}
	despiselect();
 8006d28:	f7ff fdb0 	bl	800688c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bf14      	ite	ne
 8006d32:	2301      	movne	r3, #1
 8006d34:	2300      	moveq	r3, #0
 8006d36:	b2db      	uxtb	r3, r3
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20000020 	.word	0x20000020
 8006d44:	20000b74 	.word	0x20000b74

08006d48 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	607a      	str	r2, [r7, #4]
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	4603      	mov	r3, r0
 8006d56:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d102      	bne.n	8006d64 <USER_SPI_write+0x1c>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <USER_SPI_write+0x20>
 8006d64:	2304      	movs	r3, #4
 8006d66:	e063      	b.n	8006e30 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006d68:	4b33      	ldr	r3, [pc, #204]	@ (8006e38 <USER_SPI_write+0xf0>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <USER_SPI_write+0x32>
 8006d76:	2303      	movs	r3, #3
 8006d78:	e05a      	b.n	8006e30 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8006e38 <USER_SPI_write+0xf0>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <USER_SPI_write+0x44>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e051      	b.n	8006e30 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006e3c <USER_SPI_write+0xf4>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	f003 0308 	and.w	r3, r3, #8
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d102      	bne.n	8006d9e <USER_SPI_write+0x56>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	025b      	lsls	r3, r3, #9
 8006d9c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d110      	bne.n	8006dc6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	2018      	movs	r0, #24
 8006da8:	f7ff fdf7 	bl	800699a <send_cmd>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d136      	bne.n	8006e20 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006db2:	21fe      	movs	r1, #254	@ 0xfe
 8006db4:	68b8      	ldr	r0, [r7, #8]
 8006db6:	f7ff fdbe 	bl	8006936 <xmit_datablock>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d02f      	beq.n	8006e20 <USER_SPI_write+0xd8>
			count = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	e02c      	b.n	8006e20 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8006e3c <USER_SPI_write+0xf4>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	f003 0306 	and.w	r3, r3, #6
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <USER_SPI_write+0x92>
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	2097      	movs	r0, #151	@ 0x97
 8006dd6:	f7ff fde0 	bl	800699a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006dda:	6879      	ldr	r1, [r7, #4]
 8006ddc:	2019      	movs	r0, #25
 8006dde:	f7ff fddc 	bl	800699a <send_cmd>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d11b      	bne.n	8006e20 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006de8:	21fc      	movs	r1, #252	@ 0xfc
 8006dea:	68b8      	ldr	r0, [r7, #8]
 8006dec:	f7ff fda3 	bl	8006936 <xmit_datablock>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <USER_SPI_write+0xc4>
				buff += 512;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006dfc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1ee      	bne.n	8006de8 <USER_SPI_write+0xa0>
 8006e0a:	e000      	b.n	8006e0e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006e0c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006e0e:	21fd      	movs	r1, #253	@ 0xfd
 8006e10:	2000      	movs	r0, #0
 8006e12:	f7ff fd90 	bl	8006936 <xmit_datablock>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <USER_SPI_write+0xd8>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006e20:	f7ff fd34 	bl	800688c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	bf14      	ite	ne
 8006e2a:	2301      	movne	r3, #1
 8006e2c:	2300      	moveq	r3, #0
 8006e2e:	b2db      	uxtb	r3, r3
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20000020 	.word	0x20000020
 8006e3c:	20000b74 	.word	0x20000b74

08006e40 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08c      	sub	sp, #48	@ 0x30
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4603      	mov	r3, r0
 8006e48:	603a      	str	r2, [r7, #0]
 8006e4a:	71fb      	strb	r3, [r7, #7]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <USER_SPI_ioctl+0x1a>
 8006e56:	2304      	movs	r3, #4
 8006e58:	e15a      	b.n	8007110 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006e5a:	4baf      	ldr	r3, [pc, #700]	@ (8007118 <USER_SPI_ioctl+0x2d8>)
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <USER_SPI_ioctl+0x2c>
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e151      	b.n	8007110 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8006e72:	79bb      	ldrb	r3, [r7, #6]
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	f200 8136 	bhi.w	80070e6 <USER_SPI_ioctl+0x2a6>
 8006e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e80 <USER_SPI_ioctl+0x40>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006e95 	.word	0x08006e95
 8006e84:	08006ea9 	.word	0x08006ea9
 8006e88:	080070e7 	.word	0x080070e7
 8006e8c:	08006f55 	.word	0x08006f55
 8006e90:	0800704b 	.word	0x0800704b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006e94:	f7ff fd0a 	bl	80068ac <spiselect>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 8127 	beq.w	80070ee <USER_SPI_ioctl+0x2ae>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006ea6:	e122      	b.n	80070ee <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	2009      	movs	r0, #9
 8006eac:	f7ff fd75 	bl	800699a <send_cmd>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f040 811d 	bne.w	80070f2 <USER_SPI_ioctl+0x2b2>
 8006eb8:	f107 030c 	add.w	r3, r7, #12
 8006ebc:	2110      	movs	r1, #16
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff fd10 	bl	80068e4 <rcvr_datablock>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 8113 	beq.w	80070f2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006ecc:	7b3b      	ldrb	r3, [r7, #12]
 8006ece:	099b      	lsrs	r3, r3, #6
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d111      	bne.n	8006efa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006ed6:	7d7b      	ldrb	r3, [r7, #21]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	7d3b      	ldrb	r3, [r7, #20]
 8006edc:	021b      	lsls	r3, r3, #8
 8006ede:	4413      	add	r3, r2
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	7cfb      	ldrb	r3, [r7, #19]
 8006ee4:	041b      	lsls	r3, r3, #16
 8006ee6:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8006eea:	4413      	add	r3, r2
 8006eec:	3301      	adds	r3, #1
 8006eee:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	029a      	lsls	r2, r3, #10
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	e028      	b.n	8006f4c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006efa:	7c7b      	ldrb	r3, [r7, #17]
 8006efc:	f003 030f 	and.w	r3, r3, #15
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	7dbb      	ldrb	r3, [r7, #22]
 8006f04:	09db      	lsrs	r3, r3, #7
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	4413      	add	r3, r2
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	7d7b      	ldrb	r3, [r7, #21]
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	f003 0306 	and.w	r3, r3, #6
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	4413      	add	r3, r2
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	3302      	adds	r3, #2
 8006f1e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006f22:	7d3b      	ldrb	r3, [r7, #20]
 8006f24:	099b      	lsrs	r3, r3, #6
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	7cfb      	ldrb	r3, [r7, #19]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	441a      	add	r2, r3
 8006f30:	7cbb      	ldrb	r3, [r7, #18]
 8006f32:	029b      	lsls	r3, r3, #10
 8006f34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f38:	4413      	add	r3, r2
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006f3e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f42:	3b09      	subs	r3, #9
 8006f44:	69fa      	ldr	r2, [r7, #28]
 8006f46:	409a      	lsls	r2, r3
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006f52:	e0ce      	b.n	80070f2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006f54:	4b71      	ldr	r3, [pc, #452]	@ (800711c <USER_SPI_ioctl+0x2dc>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d031      	beq.n	8006fc4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006f60:	2100      	movs	r1, #0
 8006f62:	208d      	movs	r0, #141	@ 0x8d
 8006f64:	f7ff fd19 	bl	800699a <send_cmd>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 80c3 	bne.w	80070f6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006f70:	20ff      	movs	r0, #255	@ 0xff
 8006f72:	f7ff fc21 	bl	80067b8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006f76:	f107 030c 	add.w	r3, r7, #12
 8006f7a:	2110      	movs	r1, #16
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff fcb1 	bl	80068e4 <rcvr_datablock>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 80b6 	beq.w	80070f6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006f8a:	2330      	movs	r3, #48	@ 0x30
 8006f8c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006f90:	e007      	b.n	8006fa2 <USER_SPI_ioctl+0x162>
 8006f92:	20ff      	movs	r0, #255	@ 0xff
 8006f94:	f7ff fc10 	bl	80067b8 <xchg_spi>
 8006f98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006fa2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f3      	bne.n	8006f92 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006faa:	7dbb      	ldrb	r3, [r7, #22]
 8006fac:	091b      	lsrs	r3, r3, #4
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	2310      	movs	r3, #16
 8006fb4:	fa03 f202 	lsl.w	r2, r3, r2
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006fc2:	e098      	b.n	80070f6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	2009      	movs	r0, #9
 8006fc8:	f7ff fce7 	bl	800699a <send_cmd>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f040 8091 	bne.w	80070f6 <USER_SPI_ioctl+0x2b6>
 8006fd4:	f107 030c 	add.w	r3, r7, #12
 8006fd8:	2110      	movs	r1, #16
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff fc82 	bl	80068e4 <rcvr_datablock>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 8087 	beq.w	80070f6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006fe8:	4b4c      	ldr	r3, [pc, #304]	@ (800711c <USER_SPI_ioctl+0x2dc>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d012      	beq.n	800701a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006ff4:	7dbb      	ldrb	r3, [r7, #22]
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8006ffc:	7dfa      	ldrb	r2, [r7, #23]
 8006ffe:	09d2      	lsrs	r2, r2, #7
 8007000:	b2d2      	uxtb	r2, r2
 8007002:	4413      	add	r3, r2
 8007004:	1c5a      	adds	r2, r3, #1
 8007006:	7e7b      	ldrb	r3, [r7, #25]
 8007008:	099b      	lsrs	r3, r3, #6
 800700a:	b2db      	uxtb	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	fa02 f303 	lsl.w	r3, r2, r3
 8007012:	461a      	mov	r2, r3
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	e013      	b.n	8007042 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800701a:	7dbb      	ldrb	r3, [r7, #22]
 800701c:	109b      	asrs	r3, r3, #2
 800701e:	b29b      	uxth	r3, r3
 8007020:	f003 031f 	and.w	r3, r3, #31
 8007024:	3301      	adds	r3, #1
 8007026:	7dfa      	ldrb	r2, [r7, #23]
 8007028:	00d2      	lsls	r2, r2, #3
 800702a:	f002 0218 	and.w	r2, r2, #24
 800702e:	7df9      	ldrb	r1, [r7, #23]
 8007030:	0949      	lsrs	r1, r1, #5
 8007032:	b2c9      	uxtb	r1, r1
 8007034:	440a      	add	r2, r1
 8007036:	3201      	adds	r2, #1
 8007038:	fb02 f303 	mul.w	r3, r2, r3
 800703c:	461a      	mov	r2, r3
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007048:	e055      	b.n	80070f6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800704a:	4b34      	ldr	r3, [pc, #208]	@ (800711c <USER_SPI_ioctl+0x2dc>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	f003 0306 	and.w	r3, r3, #6
 8007052:	2b00      	cmp	r3, #0
 8007054:	d051      	beq.n	80070fa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007056:	f107 020c 	add.w	r2, r7, #12
 800705a:	79fb      	ldrb	r3, [r7, #7]
 800705c:	210b      	movs	r1, #11
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff feee 	bl	8006e40 <USER_SPI_ioctl>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d149      	bne.n	80070fe <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800706a:	7b3b      	ldrb	r3, [r7, #12]
 800706c:	099b      	lsrs	r3, r3, #6
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d104      	bne.n	800707e <USER_SPI_ioctl+0x23e>
 8007074:	7dbb      	ldrb	r3, [r7, #22]
 8007076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800707a:	2b00      	cmp	r3, #0
 800707c:	d041      	beq.n	8007102 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	623b      	str	r3, [r7, #32]
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800708e:	4b23      	ldr	r3, [pc, #140]	@ (800711c <USER_SPI_ioctl+0x2dc>)
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	f003 0308 	and.w	r3, r3, #8
 8007096:	2b00      	cmp	r3, #0
 8007098:	d105      	bne.n	80070a6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800709a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709c:	025b      	lsls	r3, r3, #9
 800709e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a2:	025b      	lsls	r3, r3, #9
 80070a4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80070a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070a8:	2020      	movs	r0, #32
 80070aa:	f7ff fc76 	bl	800699a <send_cmd>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d128      	bne.n	8007106 <USER_SPI_ioctl+0x2c6>
 80070b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070b6:	2021      	movs	r0, #33	@ 0x21
 80070b8:	f7ff fc6f 	bl	800699a <send_cmd>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d121      	bne.n	8007106 <USER_SPI_ioctl+0x2c6>
 80070c2:	2100      	movs	r1, #0
 80070c4:	2026      	movs	r0, #38	@ 0x26
 80070c6:	f7ff fc68 	bl	800699a <send_cmd>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d11a      	bne.n	8007106 <USER_SPI_ioctl+0x2c6>
 80070d0:	f247 5030 	movw	r0, #30000	@ 0x7530
 80070d4:	f7ff fbb6 	bl	8006844 <wait_ready>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d013      	beq.n	8007106 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80070de:	2300      	movs	r3, #0
 80070e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80070e4:	e00f      	b.n	8007106 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80070e6:	2304      	movs	r3, #4
 80070e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80070ec:	e00c      	b.n	8007108 <USER_SPI_ioctl+0x2c8>
		break;
 80070ee:	bf00      	nop
 80070f0:	e00a      	b.n	8007108 <USER_SPI_ioctl+0x2c8>
		break;
 80070f2:	bf00      	nop
 80070f4:	e008      	b.n	8007108 <USER_SPI_ioctl+0x2c8>
		break;
 80070f6:	bf00      	nop
 80070f8:	e006      	b.n	8007108 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80070fa:	bf00      	nop
 80070fc:	e004      	b.n	8007108 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80070fe:	bf00      	nop
 8007100:	e002      	b.n	8007108 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007102:	bf00      	nop
 8007104:	e000      	b.n	8007108 <USER_SPI_ioctl+0x2c8>
		break;
 8007106:	bf00      	nop
	}

	despiselect();
 8007108:	f7ff fbc0 	bl	800688c <despiselect>

	return res;
 800710c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007110:	4618      	mov	r0, r3
 8007112:	3730      	adds	r7, #48	@ 0x30
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	20000020 	.word	0x20000020
 800711c:	20000b74 	.word	0x20000b74

08007120 <uart_error_handler>:


#include "erlog.h"

static void uart_error_handler()
{
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007124:	b672      	cpsid	i
}
 8007126:	bf00      	nop
	 __disable_irq();
	  while (1)
 8007128:	bf00      	nop
 800712a:	e7fd      	b.n	8007128 <uart_error_handler+0x8>

0800712c <uart_init>:
	  {
	  }
}
static void uart_init(UART_HandleTypeDef *huart3)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3->Instance = USART3;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a15      	ldr	r2, [pc, #84]	@ (800718c <uart_init+0x60>)
 8007138:	601a      	str	r2, [r3, #0]
  huart3->Init.BaudRate = 115200;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007140:	605a      	str	r2, [r3, #4]
  huart3->Init.WordLength = UART_WORDLENGTH_8B;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	609a      	str	r2, [r3, #8]
  huart3->Init.StopBits = UART_STOPBITS_1;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	60da      	str	r2, [r3, #12]
  huart3->Init.Parity = UART_PARITY_NONE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	611a      	str	r2, [r3, #16]
  huart3->Init.Mode = UART_MODE_TX_RX;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	220c      	movs	r2, #12
 8007158:	615a      	str	r2, [r3, #20]
  huart3->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	619a      	str	r2, [r3, #24]
  huart3->Init.OverSampling = UART_OVERSAMPLING_16;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	61da      	str	r2, [r3, #28]
  huart3->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	621a      	str	r2, [r3, #32]
  huart3->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart3) != HAL_OK)
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7fe fd80 	bl	8005c78 <HAL_UART_Init>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <uart_init+0x56>
  {
	  uart_error_handler();
 800717e:	f7ff ffcf 	bl	8007120 <uart_error_handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007182:	bf00      	nop
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	40004800 	.word	0x40004800

08007190 <erlog_init>:

void erlog_init(log_t *log_console, UART_HandleTypeDef *huart3)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
	log_console->uhart = huart3;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	601a      	str	r2, [r3, #0]
	log_console->msg_len = 0;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	809a      	strh	r2, [r3, #4]
	memset(log_console->msg, 0 , sizeof(log_console->msg_len));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3306      	adds	r3, #6
 80071aa:	2202      	movs	r2, #2
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f003 ff64 	bl	800b07c <memset>
	uart_init(log_console->uhart);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff ffb7 	bl	800712c <uart_init>
}
 80071be:	bf00      	nop
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <erlog_write>:

void erlog_write(log_t *log_console)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b082      	sub	sp, #8
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(log_console->uhart, (uint8_t *)log_console->msg, log_console->msg_len, HAL_MAX_DELAY);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	1d99      	adds	r1, r3, #6
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	889a      	ldrh	r2, [r3, #4]
 80071da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071de:	f7fe fd99 	bl	8005d14 <HAL_UART_Transmit>
}
 80071e2:	bf00      	nop
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <erlog_clear>:
void erlog_clear(log_t *log_console)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
	memset(log_console->msg , 0, sizeof(log_console->msg_len));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3306      	adds	r3, #6
 80071f6:	2202      	movs	r2, #2
 80071f8:	2100      	movs	r1, #0
 80071fa:	4618      	mov	r0, r3
 80071fc:	f003 ff3e 	bl	800b07c <memset>
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HighPassFilter_init>:
LowPassFilter low_pass_filter;
HighPassFilter high_pass_filter;
Differentiator differentiator;

/* High Pass Filter Functions */
void HighPassFilter_init(HighPassFilter* filter, float samples) {
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	ed87 0a00 	vstr	s0, [r7]
    filter->kX = expf(-1.0f / samples);
 8007214:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8007218:	edd7 7a00 	vldr	s15, [r7]
 800721c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007220:	eeb0 0a47 	vmov.f32	s0, s14
 8007224:	f006 f836 	bl	800d294 <expf>
 8007228:	eef0 7a40 	vmov.f32	s15, s0
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	edc3 7a00 	vstr	s15, [r3]
    filter->kA0 = (1.0f + filter->kX) / 2.0f;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	edd3 7a00 	vldr	s15, [r3]
 8007238:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800723c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007240:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8007244:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->kA1 = -filter->kA0;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	edd3 7a01 	vldr	s15, [r3, #4]
 8007254:	eef1 7a67 	vneg.f32	s15, s15
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->kB1 = filter->kX;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	60da      	str	r2, [r3, #12]
    filter->last_filter_value = 0.0;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f04f 0200 	mov.w	r2, #0
 800726c:	611a      	str	r2, [r3, #16]
    filter->last_raw_value = 0.0;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f04f 0200 	mov.w	r2, #0
 8007274:	615a      	str	r2, [r3, #20]
}
 8007276:	bf00      	nop
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <HighPassFilter_init_with_cutoff>:

void HighPassFilter_init_with_cutoff(HighPassFilter* filter, float cutoff, float sampling_frequency) {
 8007280:	b5b0      	push	{r4, r5, r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	ed87 0a02 	vstr	s0, [r7, #8]
 800728c:	edc7 0a01 	vstr	s1, [r7, #4]
    HighPassFilter_init(filter, sampling_frequency / (cutoff * 2.0 * M_PI));
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7f9 f981 	bl	8000598 <__aeabi_f2d>
 8007296:	4604      	mov	r4, r0
 8007298:	460d      	mov	r5, r1
 800729a:	68b8      	ldr	r0, [r7, #8]
 800729c:	f7f9 f97c 	bl	8000598 <__aeabi_f2d>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	f7f9 f81a 	bl	80002dc <__adddf3>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	4610      	mov	r0, r2
 80072ae:	4619      	mov	r1, r3
 80072b0:	a30d      	add	r3, pc, #52	@ (adr r3, 80072e8 <HighPassFilter_init_with_cutoff+0x68>)
 80072b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b6:	f7f9 f9c7 	bl	8000648 <__aeabi_dmul>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4620      	mov	r0, r4
 80072c0:	4629      	mov	r1, r5
 80072c2:	f7f9 faeb 	bl	800089c <__aeabi_ddiv>
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	4610      	mov	r0, r2
 80072cc:	4619      	mov	r1, r3
 80072ce:	f7f9 fc93 	bl	8000bf8 <__aeabi_d2f>
 80072d2:	4603      	mov	r3, r0
 80072d4:	ee00 3a10 	vmov	s0, r3
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f7ff ff95 	bl	8007208 <HighPassFilter_init>
}
 80072de:	bf00      	nop
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bdb0      	pop	{r4, r5, r7, pc}
 80072e6:	bf00      	nop
 80072e8:	54442d18 	.word	0x54442d18
 80072ec:	400921fb 	.word	0x400921fb

080072f0 <HighPassFilter_process>:

float HighPassFilter_process(HighPassFilter* filter, float value)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	ed87 0a00 	vstr	s0, [r7]
//    if (isnanf(filter->last_filter_value) || isnanf(filter->last_raw_value)) {
//        filter->last_filter_value = 0.0f;
//    } else {
        filter->last_filter_value = filter->kA0 * value + filter->kA1 * filter->last_raw_value + filter->kB1 * filter->last_filter_value;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8007302:	edd7 7a00 	vldr	s15, [r7]
 8007306:	ee27 7a27 	vmul.f32	s14, s14, s15
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	edd3 6a02 	vldr	s13, [r3, #8]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	edd3 7a05 	vldr	s15, [r3, #20]
 8007316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800731a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	edd3 6a03 	vldr	s13, [r3, #12]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	edd3 7a04 	vldr	s15, [r3, #16]
 800732a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800732e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	edc3 7a04 	vstr	s15, [r3, #16]
    //}
    filter->last_raw_value = value;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	615a      	str	r2, [r3, #20]
    return filter->last_filter_value;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	ee07 3a90 	vmov	s15, r3
}
 8007346:	eeb0 0a67 	vmov.f32	s0, s15
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HighPassFilter_reset>:

void HighPassFilter_reset(HighPassFilter* filter) {
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
    filter->last_raw_value = 0.0;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f04f 0200 	mov.w	r2, #0
 8007362:	615a      	str	r2, [r3, #20]
    filter->last_filter_value = 0.0;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f04f 0200 	mov.w	r2, #0
 800736a:	611a      	str	r2, [r3, #16]
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <LowPassFilter_init>:

/* Low Pass Filter Functions */
void LowPassFilter_init(LowPassFilter* filter, float samples) {
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	ed87 0a00 	vstr	s0, [r7]
    filter->kX = expf(-1.0f / samples);
 8007384:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8007388:	edd7 7a00 	vldr	s15, [r7]
 800738c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007390:	eeb0 0a47 	vmov.f32	s0, s14
 8007394:	f005 ff7e 	bl	800d294 <expf>
 8007398:	eef0 7a40 	vmov.f32	s15, s0
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	edc3 7a00 	vstr	s15, [r3]
    filter->kA0 = 1.0f - filter->kX;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	edd3 7a00 	vldr	s15, [r3]
 80073a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->kB1 = filter->kX;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	609a      	str	r2, [r3, #8]
    filter->last_value = 0.0;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f04f 0200 	mov.w	r2, #0
 80073c4:	60da      	str	r2, [r3, #12]
}
 80073c6:	bf00      	nop
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <LowPassFilter_init_with_cutoff>:

void LowPassFilter_init_with_cutoff(LowPassFilter* filter, float cutoff, float sampling_frequency) {
 80073d0:	b5b0      	push	{r4, r5, r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80073dc:	edc7 0a01 	vstr	s1, [r7, #4]
    LowPassFilter_init(filter, sampling_frequency / (cutoff * 2.0f * M_PI));
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7f9 f8d9 	bl	8000598 <__aeabi_f2d>
 80073e6:	4604      	mov	r4, r0
 80073e8:	460d      	mov	r5, r1
 80073ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80073ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80073f2:	ee17 0a90 	vmov	r0, s15
 80073f6:	f7f9 f8cf 	bl	8000598 <__aeabi_f2d>
 80073fa:	a30d      	add	r3, pc, #52	@ (adr r3, 8007430 <LowPassFilter_init_with_cutoff+0x60>)
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f7f9 f922 	bl	8000648 <__aeabi_dmul>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4620      	mov	r0, r4
 800740a:	4629      	mov	r1, r5
 800740c:	f7f9 fa46 	bl	800089c <__aeabi_ddiv>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	4610      	mov	r0, r2
 8007416:	4619      	mov	r1, r3
 8007418:	f7f9 fbee 	bl	8000bf8 <__aeabi_d2f>
 800741c:	4603      	mov	r3, r0
 800741e:	ee00 3a10 	vmov	s0, r3
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7ff ffa8 	bl	8007378 <LowPassFilter_init>
}
 8007428:	bf00      	nop
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bdb0      	pop	{r4, r5, r7, pc}
 8007430:	54442d18 	.word	0x54442d18
 8007434:	400921fb 	.word	0x400921fb

08007438 <LowPassFilter_process>:

float LowPassFilter_process(LowPassFilter* filter, float value) {
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	ed87 0a00 	vstr	s0, [r7]
    if (isnanf(filter->last_value)) {
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	edd3 7a03 	vldr	s15, [r3, #12]
 800744a:	eef4 7a67 	vcmp.f32	s15, s15
 800744e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007452:	d703      	bvc.n	800745c <LowPassFilter_process+0x24>
        filter->last_value = value;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	60da      	str	r2, [r3, #12]
 800745a:	e013      	b.n	8007484 <LowPassFilter_process+0x4c>
    } else {
        filter->last_value = filter->kA0 * value + filter->kB1 * filter->last_value;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007462:	edd7 7a00 	vldr	s15, [r7]
 8007466:	ee27 7a27 	vmul.f32	s14, s14, s15
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	edd3 6a02 	vldr	s13, [r3, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	edd3 7a03 	vldr	s15, [r3, #12]
 8007476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800747a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    return filter->last_value;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	ee07 3a90 	vmov	s15, r3
}
 800748c:	eeb0 0a67 	vmov.f32	s0, s15
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <LowPassFilter_reset>:

void LowPassFilter_reset(LowPassFilter* filter) {
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
    filter->last_value = 0.0;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f04f 0200 	mov.w	r2, #0
 80074a8:	60da      	str	r2, [r3, #12]
}
 80074aa:	bf00      	nop
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <Differentiator_init>:

/* Differentiator Functions */
void Differentiator_init(Differentiator* differentiator, float sampling_frequency) {
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	ed87 0a00 	vstr	s0, [r7]
    differentiator->kSamplingFrequency = sampling_frequency;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	601a      	str	r2, [r3, #0]
    differentiator->last_value = 0.0;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	605a      	str	r2, [r3, #4]
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <Differentiator_process>:

float Differentiator_process(Differentiator* differentiator, float value) {
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	ed87 0a00 	vstr	s0, [r7]
    float diff = (value - differentiator->last_value) * differentiator->kSamplingFrequency;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80074ee:	ed97 7a00 	vldr	s14, [r7]
 80074f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	edd3 7a00 	vldr	s15, [r3]
 80074fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007500:	edc7 7a03 	vstr	s15, [r7, #12]
    differentiator->last_value = value;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	605a      	str	r2, [r3, #4]
    return diff;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	ee07 3a90 	vmov	s15, r3
}
 8007510:	eeb0 0a67 	vmov.f32	s0, s15
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
	...

08007520 <processHeartBeat>:
uint8_t rateSpot = 0;   // Index for storing BPM readings
uint8_t rates[RATE_SIZE];  // Array to store BPM values


void processHeartBeat(float current_diff)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	ed87 0a01 	vstr	s0, [r7, #4]
	const float kEdgeThreshold = -1000.0;
 800752a:	4b45      	ldr	r3, [pc, #276]	@ (8007640 <processHeartBeat+0x120>)
 800752c:	613b      	str	r3, [r7, #16]
    uint32_t currentMillis = HAL_GetTick();  // Get current time in milliseconds
 800752e:	f7fa fbdf 	bl	8001cf0 <HAL_GetTick>
 8007532:	60f8      	str	r0, [r7, #12]
    delta = currentMillis - lastBeat;  // Calculate the time difference between current and last beat
 8007534:	4b43      	ldr	r3, [pc, #268]	@ (8007644 <processHeartBeat+0x124>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	4a42      	ldr	r2, [pc, #264]	@ (8007648 <processHeartBeat+0x128>)
 800753e:	6013      	str	r3, [r2, #0]
    lastBeat = currentMillis;          // Update the time of the last beat
 8007540:	4a40      	ldr	r2, [pc, #256]	@ (8007644 <processHeartBeat+0x124>)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6013      	str	r3, [r2, #0]

    beatsPerMinute = (60.0 / (delta / 1000.0));  // Calculate beats per minute
 8007546:	4b40      	ldr	r3, [pc, #256]	@ (8007648 <processHeartBeat+0x128>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4618      	mov	r0, r3
 800754c:	f7f9 f802 	bl	8000554 <__aeabi_ui2d>
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	4b3d      	ldr	r3, [pc, #244]	@ (800764c <processHeartBeat+0x12c>)
 8007556:	f7f9 f9a1 	bl	800089c <__aeabi_ddiv>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	f04f 0000 	mov.w	r0, #0
 8007562:	493b      	ldr	r1, [pc, #236]	@ (8007650 <processHeartBeat+0x130>)
 8007564:	f7f9 f99a 	bl	800089c <__aeabi_ddiv>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4610      	mov	r0, r2
 800756e:	4619      	mov	r1, r3
 8007570:	f7f9 fb42 	bl	8000bf8 <__aeabi_d2f>
 8007574:	4603      	mov	r3, r0
 8007576:	4a37      	ldr	r2, [pc, #220]	@ (8007654 <processHeartBeat+0x134>)
 8007578:	6013      	str	r3, [r2, #0]

    // Filter valid BPM values
    if (beatsPerMinute < 255 && beatsPerMinute > 20 && current_diff < kEdgeThreshold)
 800757a:	4b36      	ldr	r3, [pc, #216]	@ (8007654 <processHeartBeat+0x134>)
 800757c:	edd3 7a00 	vldr	s15, [r3]
 8007580:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8007658 <processHeartBeat+0x138>
 8007584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758c:	d400      	bmi.n	8007590 <processHeartBeat+0x70>
        {
            beatAvg += rates[x];
        }
        beatAvg /= RATE_SIZE;  // Compute the average BPM
    }
}
 800758e:	e053      	b.n	8007638 <processHeartBeat+0x118>
    if (beatsPerMinute < 255 && beatsPerMinute > 20 && current_diff < kEdgeThreshold)
 8007590:	4b30      	ldr	r3, [pc, #192]	@ (8007654 <processHeartBeat+0x134>)
 8007592:	edd3 7a00 	vldr	s15, [r3]
 8007596:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800759a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800759e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a2:	dc00      	bgt.n	80075a6 <processHeartBeat+0x86>
}
 80075a4:	e048      	b.n	8007638 <processHeartBeat+0x118>
    if (beatsPerMinute < 255 && beatsPerMinute > 20 && current_diff < kEdgeThreshold)
 80075a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80075aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80075ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b6:	d400      	bmi.n	80075ba <processHeartBeat+0x9a>
}
 80075b8:	e03e      	b.n	8007638 <processHeartBeat+0x118>
        rates[rateSpot++] = (uint8_t)beatsPerMinute;  // Store BPM in the array
 80075ba:	4b26      	ldr	r3, [pc, #152]	@ (8007654 <processHeartBeat+0x134>)
 80075bc:	edd3 7a00 	vldr	s15, [r3]
 80075c0:	4b26      	ldr	r3, [pc, #152]	@ (800765c <processHeartBeat+0x13c>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	b2d1      	uxtb	r1, r2
 80075c8:	4a24      	ldr	r2, [pc, #144]	@ (800765c <processHeartBeat+0x13c>)
 80075ca:	7011      	strb	r1, [r2, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d2:	edc7 7a00 	vstr	s15, [r7]
 80075d6:	783b      	ldrb	r3, [r7, #0]
 80075d8:	b2d9      	uxtb	r1, r3
 80075da:	4b21      	ldr	r3, [pc, #132]	@ (8007660 <processHeartBeat+0x140>)
 80075dc:	5499      	strb	r1, [r3, r2]
        rateSpot %= RATE_SIZE;  // Wrap the array index if it exceeds RATE_SIZE
 80075de:	4b1f      	ldr	r3, [pc, #124]	@ (800765c <processHeartBeat+0x13c>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	4b1c      	ldr	r3, [pc, #112]	@ (800765c <processHeartBeat+0x13c>)
 80075ea:	701a      	strb	r2, [r3, #0]
        beatAvg = 0;
 80075ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007664 <processHeartBeat+0x144>)
 80075ee:	f04f 0200 	mov.w	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]
        for (uint8_t x = 0; x < RATE_SIZE; x++)
 80075f4:	2300      	movs	r3, #0
 80075f6:	75fb      	strb	r3, [r7, #23]
 80075f8:	e011      	b.n	800761e <processHeartBeat+0xfe>
            beatAvg += rates[x];
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	4a18      	ldr	r2, [pc, #96]	@ (8007660 <processHeartBeat+0x140>)
 80075fe:	5cd3      	ldrb	r3, [r2, r3]
 8007600:	ee07 3a90 	vmov	s15, r3
 8007604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007608:	4b16      	ldr	r3, [pc, #88]	@ (8007664 <processHeartBeat+0x144>)
 800760a:	edd3 7a00 	vldr	s15, [r3]
 800760e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007612:	4b14      	ldr	r3, [pc, #80]	@ (8007664 <processHeartBeat+0x144>)
 8007614:	edc3 7a00 	vstr	s15, [r3]
        for (uint8_t x = 0; x < RATE_SIZE; x++)
 8007618:	7dfb      	ldrb	r3, [r7, #23]
 800761a:	3301      	adds	r3, #1
 800761c:	75fb      	strb	r3, [r7, #23]
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	2b03      	cmp	r3, #3
 8007622:	d9ea      	bls.n	80075fa <processHeartBeat+0xda>
        beatAvg /= RATE_SIZE;  // Compute the average BPM
 8007624:	4b0f      	ldr	r3, [pc, #60]	@ (8007664 <processHeartBeat+0x144>)
 8007626:	ed93 7a00 	vldr	s14, [r3]
 800762a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800762e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007632:	4b0c      	ldr	r3, [pc, #48]	@ (8007664 <processHeartBeat+0x144>)
 8007634:	edc3 7a00 	vstr	s15, [r3]
}
 8007638:	bf00      	nop
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	c47a0000 	.word	0xc47a0000
 8007644:	20000bb0 	.word	0x20000bb0
 8007648:	20000bb4 	.word	0x20000bb4
 800764c:	408f4000 	.word	0x408f4000
 8007650:	404e0000 	.word	0x404e0000
 8007654:	200005f0 	.word	0x200005f0
 8007658:	437f0000 	.word	0x437f0000
 800765c:	20000bb8 	.word	0x20000bb8
 8007660:	20000bbc 	.word	0x20000bbc
 8007664:	200005f4 	.word	0x200005f4

08007668 <checkbeat>:

bool checkbeat(int32_t sample)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
	// Averaging
	const float kSamplingFrequency = 400.0;
 8007670:	4b23      	ldr	r3, [pc, #140]	@ (8007700 <checkbeat+0x98>)
 8007672:	61fb      	str	r3, [r7, #28]

	// Filters
	float current_value = sample;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800767e:	edc7 7a06 	vstr	s15, [r7, #24]
	const float kLowPassCutoff = 5.0;
 8007682:	4b20      	ldr	r3, [pc, #128]	@ (8007704 <checkbeat+0x9c>)
 8007684:	617b      	str	r3, [r7, #20]
	const float kHighPassCutoff = 0.5;
 8007686:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800768a:	613b      	str	r3, [r7, #16]

	LowPassFilter_init_with_cutoff(&low_pass_filter, kLowPassCutoff, kSamplingFrequency);
 800768c:	edd7 0a07 	vldr	s1, [r7, #28]
 8007690:	ed97 0a05 	vldr	s0, [r7, #20]
 8007694:	481c      	ldr	r0, [pc, #112]	@ (8007708 <checkbeat+0xa0>)
 8007696:	f7ff fe9b 	bl	80073d0 <LowPassFilter_init_with_cutoff>
	HighPassFilter_init_with_cutoff(&high_pass_filter, kHighPassCutoff, kSamplingFrequency);
 800769a:	edd7 0a07 	vldr	s1, [r7, #28]
 800769e:	ed97 0a04 	vldr	s0, [r7, #16]
 80076a2:	481a      	ldr	r0, [pc, #104]	@ (800770c <checkbeat+0xa4>)
 80076a4:	f7ff fdec 	bl	8007280 <HighPassFilter_init_with_cutoff>
	Differentiator_init(&differentiator, kSamplingFrequency);  // Pass sampling frequency
 80076a8:	ed97 0a07 	vldr	s0, [r7, #28]
 80076ac:	4818      	ldr	r0, [pc, #96]	@ (8007710 <checkbeat+0xa8>)
 80076ae:	f7ff ff02 	bl	80074b6 <Differentiator_init>
	current_value = LowPassFilter_process(&low_pass_filter, current_value);
 80076b2:	ed97 0a06 	vldr	s0, [r7, #24]
 80076b6:	4814      	ldr	r0, [pc, #80]	@ (8007708 <checkbeat+0xa0>)
 80076b8:	f7ff febe 	bl	8007438 <LowPassFilter_process>
 80076bc:	ed87 0a06 	vstr	s0, [r7, #24]
	current_value = HighPassFilter_process(&high_pass_filter, current_value);
 80076c0:	ed97 0a06 	vldr	s0, [r7, #24]
 80076c4:	4811      	ldr	r0, [pc, #68]	@ (800770c <checkbeat+0xa4>)
 80076c6:	f7ff fe13 	bl	80072f0 <HighPassFilter_process>
 80076ca:	ed87 0a06 	vstr	s0, [r7, #24]
	float current_diff = Differentiator_process(&differentiator, current_value);
 80076ce:	ed97 0a06 	vldr	s0, [r7, #24]
 80076d2:	480f      	ldr	r0, [pc, #60]	@ (8007710 <checkbeat+0xa8>)
 80076d4:	f7ff ff02 	bl	80074dc <Differentiator_process>
 80076d8:	ed87 0a03 	vstr	s0, [r7, #12]

	if (current_diff > 0.0)
 80076dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80076e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e8:	dd05      	ble.n	80076f6 <checkbeat+0x8e>
	{
	    	processHeartBeat(current_diff);
 80076ea:	ed97 0a03 	vldr	s0, [r7, #12]
 80076ee:	f7ff ff17 	bl	8007520 <processHeartBeat>
	    	return true;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e000      	b.n	80076f8 <checkbeat+0x90>
	 }
   else
   {
	    	return false;
 80076f6:	2300      	movs	r3, #0
	}


}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3720      	adds	r7, #32
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	43c80000 	.word	0x43c80000
 8007704:	40a00000 	.word	0x40a00000
 8007708:	20000b80 	.word	0x20000b80
 800770c:	20000b90 	.word	0x20000b90
 8007710:	20000ba8 	.word	0x20000ba8

08007714 <i2c_error_Handler>:
uint8_t writePointer = 0;

extern float temp;

static void i2c_error_Handler(void)
{
 8007714:	b480      	push	{r7}
 8007716:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007718:	b672      	cpsid	i
}
 800771a:	bf00      	nop
  __disable_irq();
  while (1)
 800771c:	bf00      	nop
 800771e:	e7fd      	b.n	800771c <i2c_error_Handler+0x8>

08007720 <i2c_init>:
  {
  }
}
static void i2c_init(I2C_HandleTypeDef *hi2c1)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]

  /*PF0 & PF1 pins configured*/

  /* USER CODE BEGIN I2C1_Init 1 */
  hi2c1->Instance = I2C2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a1c      	ldr	r2, [pc, #112]	@ (800779c <i2c_init+0x7c>)
 800772c:	601a      	str	r2, [r3, #0]
  hi2c1->Init.Timing = 400000;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a1b      	ldr	r2, [pc, #108]	@ (80077a0 <i2c_init+0x80>)
 8007732:	605a      	str	r2, [r3, #4]
  hi2c1->Init.OwnAddress1 = 0;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	609a      	str	r2, [r3, #8]
  hi2c1->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	60da      	str	r2, [r3, #12]
  hi2c1->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	611a      	str	r2, [r3, #16]
  hi2c1->Init.OwnAddress2 = 0;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	615a      	str	r2, [r3, #20]
  hi2c1->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	619a      	str	r2, [r3, #24]
  hi2c1->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	61da      	str	r2, [r3, #28]
  hi2c1->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c1) != HAL_OK)
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fa fe06 	bl	8002370 <HAL_I2C_Init>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <i2c_init+0x4e>
  {
	  i2c_error_Handler();
 800776a:	f7ff ffd3 	bl	8007714 <i2c_error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800776e:	2100      	movs	r1, #0
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7fc fbfb 	bl	8003f6c <HAL_I2CEx_ConfigAnalogFilter>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <i2c_init+0x60>
  {
	  i2c_error_Handler();
 800777c:	f7ff ffca 	bl	8007714 <i2c_error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c1, 0) != HAL_OK)
 8007780:	2100      	movs	r1, #0
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7fc fc3d 	bl	8004002 <HAL_I2CEx_ConfigDigitalFilter>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <i2c_init+0x72>
  {
	  i2c_error_Handler();
 800778e:	f7ff ffc1 	bl	8007714 <i2c_error_Handler>
  }
  /* USER CODE END I2C1_Init 1 */

}
 8007792:	bf00      	nop
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	40005800 	.word	0x40005800
 80077a0:	00061a80 	.word	0x00061a80

080077a4 <max30102_init>:
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *i2chandler)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
	 obj->ui2c = i2chandler;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	601a      	str	r2, [r3, #0]
	 obj->intr_flag = 0;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
	 memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3304      	adds	r3, #4
 80077c0:	2280      	movs	r2, #128	@ 0x80
 80077c2:	2100      	movs	r1, #0
 80077c4:	4618      	mov	r0, r3
 80077c6:	f003 fc59 	bl	800b07c <memset>
	 memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3384      	adds	r3, #132	@ 0x84
 80077ce:	2280      	movs	r2, #128	@ 0x80
 80077d0:	2100      	movs	r1, #0
 80077d2:	4618      	mov	r0, r3
 80077d4:	f003 fc52 	bl	800b07c <memset>
	 i2c_init(obj->ui2c);  /*initialise the i2c peripheral for MAX3212*/
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4618      	mov	r0, r3
 80077de:	f7ff ff9f 	bl	8007720 <i2c_init>

}
 80077e2:	bf00      	nop
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <read_register>:
bool read_register(max30102_t *obj, uint8_t addr, uint8_t *value)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b08a      	sub	sp, #40	@ 0x28
 80077ee:	af04      	add	r7, sp, #16
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	460b      	mov	r3, r1
 80077f4:	607a      	str	r2, [r7, #4]
 80077f6:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_buff;
	uint8_t rx_address;
	rx_address = (MAX30102_I2C_ADDR << 1);
 80077f8:	23ae      	movs	r3, #174	@ 0xae
 80077fa:	75fb      	strb	r3, [r7, #23]
	if (HAL_I2C_Mem_Read(obj->ui2c, rx_address , addr, 1, &rx_buff, 1, 5000) == HAL_OK)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	7dfb      	ldrb	r3, [r7, #23]
 8007802:	b299      	uxth	r1, r3
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	b29a      	uxth	r2, r3
 8007808:	f241 3388 	movw	r3, #5000	@ 0x1388
 800780c:	9302      	str	r3, [sp, #8]
 800780e:	2301      	movs	r3, #1
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	f107 0316 	add.w	r3, r7, #22
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	2301      	movs	r3, #1
 800781a:	f7fb f967 	bl	8002aec <HAL_I2C_Mem_Read>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d104      	bne.n	800782e <read_register+0x44>
	{
		*value = rx_buff;
 8007824:	7dba      	ldrb	r2, [r7, #22]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	701a      	strb	r2, [r3, #0]
		return true;
 800782a:	2301      	movs	r3, #1
 800782c:	e000      	b.n	8007830 <read_register+0x46>
	}
	else
		return false;
 800782e:	2300      	movs	r3, #0

}
 8007830:	4618      	mov	r0, r3
 8007832:	3718      	adds	r7, #24
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <write_register>:
bool write_register(max30102_t *obj, uint8_t addr, uint8_t value)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b088      	sub	sp, #32
 800783c:	af04      	add	r7, sp, #16
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	70fb      	strb	r3, [r7, #3]
 8007844:	4613      	mov	r3, r2
 8007846:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_address;
	tx_address = (MAX30102_I2C_ADDR << 1);
 8007848:	23ae      	movs	r3, #174	@ 0xae
 800784a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(obj->ui2c, tx_address, addr, 1, &value, 1, 10000) == HAL_OK)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6818      	ldr	r0, [r3, #0]
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	b299      	uxth	r1, r3
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	b29a      	uxth	r2, r3
 8007858:	f242 7310 	movw	r3, #10000	@ 0x2710
 800785c:	9302      	str	r3, [sp, #8]
 800785e:	2301      	movs	r3, #1
 8007860:	9301      	str	r3, [sp, #4]
 8007862:	1cbb      	adds	r3, r7, #2
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	2301      	movs	r3, #1
 8007868:	f7fb f82c 	bl	80028c4 <HAL_I2C_Mem_Write>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <write_register+0x3e>
		return false;
 8007872:	2300      	movs	r3, #0
 8007874:	e000      	b.n	8007878 <write_register+0x40>
	else
		return true;
 8007876:	2301      	movs	r3, #1
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <bitMask>:
static void bitMask(max30102_t *obj, uint8_t reg, uint8_t mask, uint8_t thing)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	4608      	mov	r0, r1
 800788a:	4611      	mov	r1, r2
 800788c:	461a      	mov	r2, r3
 800788e:	4603      	mov	r3, r0
 8007890:	70fb      	strb	r3, [r7, #3]
 8007892:	460b      	mov	r3, r1
 8007894:	70bb      	strb	r3, [r7, #2]
 8007896:	4613      	mov	r3, r2
 8007898:	707b      	strb	r3, [r7, #1]
  // Grab current register context
  uint8_t originalContents = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	73fb      	strb	r3, [r7, #15]

  read_register(obj, reg, &originalContents);
 800789e:	f107 020f 	add.w	r2, r7, #15
 80078a2:	78fb      	ldrb	r3, [r7, #3]
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7ff ff9f 	bl	80077ea <read_register>

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;
 80078ac:	7bfa      	ldrb	r2, [r7, #15]
 80078ae:	78bb      	ldrb	r3, [r7, #2]
 80078b0:	4013      	ands	r3, r2
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	73fb      	strb	r3, [r7, #15]

  // Change contents
  write_register(obj, reg, originalContents | thing);
 80078b6:	7bfa      	ldrb	r2, [r7, #15]
 80078b8:	787b      	ldrb	r3, [r7, #1]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff ffb8 	bl	8007838 <write_register>
}
 80078c8:	bf00      	nop
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <max30102_enableDIETEMPRDY>:

void max30102_enableDIETEMPRDY(max30102_t *obj)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  bitMask(obj, MAX30102_INTENABLE2, MAX30102_INT_DIE_TEMP_RDY_MASK, MAX30102_INT_DIE_TEMP_RDY_ENABLE);
 80078d8:	22fd      	movs	r2, #253	@ 0xfd
 80078da:	2302      	movs	r3, #2
 80078dc:	2103      	movs	r1, #3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7ff ffce 	bl	8007880 <bitMask>
}
 80078e4:	bf00      	nop
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <max30102_clear_fifo>:
void max30102_disablePROXINT(max30102_t *obj) {
  bitMask(obj, MAX30102_INTENABLE1, MAX30102_INT_PROX_INT_MASK, MAX30102_INT_PROX_INT_DISABLE);
}

void max30102_clear_fifo(max30102_t *obj)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
    write_register(obj, MAX30102_FIFOWRITEPTR, 0);
 80078f4:	2200      	movs	r2, #0
 80078f6:	2104      	movs	r1, #4
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff ff9d 	bl	8007838 <write_register>
    write_register(obj, MAX30102_FIFOREADPTR, 0);
 80078fe:	2200      	movs	r2, #0
 8007900:	2106      	movs	r1, #6
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff ff98 	bl	8007838 <write_register>
    write_register(obj, MAX30102_FIFOOVERFLOW, 0);
 8007908:	2200      	movs	r2, #0
 800790a:	2105      	movs	r1, #5
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7ff ff93 	bl	8007838 <write_register>
}
 8007912:	bf00      	nop
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <max30102_set_fifoaverage>:

void max30102_set_fifoaverage(max30102_t *obj, uint8_t numberOfSamples)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b082      	sub	sp, #8
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	460b      	mov	r3, r1
 8007924:	70fb      	strb	r3, [r7, #3]
	bitMask(obj, MAX30102_FIFOCONFIG, MAX30102_SAMPLEAVG_MASK, numberOfSamples);
 8007926:	221f      	movs	r2, #31
 8007928:	78fb      	ldrb	r3, [r7, #3]
 800792a:	2108      	movs	r1, #8
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff ffa7 	bl	8007880 <bitMask>
}
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
	...

0800793c <max30102_readtemp>:

float max30102_readtemp(max30102_t *obj)
{
 800793c:	b5b0      	push	{r4, r5, r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]

  uint8_t response = 0;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]
  uint8_t tempInt = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	73bb      	strb	r3, [r7, #14]
  uint8_t tempFrac = 0;
 800794c:	2300      	movs	r3, #0
 800794e:	737b      	strb	r3, [r7, #13]

  write_register(obj, MAX30102_DIETEMPCONFIG, 0x01);
 8007950:	2201      	movs	r2, #1
 8007952:	2121      	movs	r1, #33	@ 0x21
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff ff6f 	bl	8007838 <write_register>

  do
  {
	  read_register(obj, MAX30102_INTSTAT2, &response);
 800795a:	f107 030f 	add.w	r3, r7, #15
 800795e:	461a      	mov	r2, r3
 8007960:	2101      	movs	r1, #1
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff ff41 	bl	80077ea <read_register>
	  HAL_Delay(1);
 8007968:	2001      	movs	r0, #1
 800796a:	f7fa f9cd 	bl	8001d08 <HAL_Delay>
  }while((response & MAX30102_INTENABLE1) == 0);
 800796e:	7bfb      	ldrb	r3, [r7, #15]
 8007970:	f003 0302 	and.w	r3, r3, #2
 8007974:	2b00      	cmp	r3, #0
 8007976:	d0f0      	beq.n	800795a <max30102_readtemp+0x1e>

  read_register(obj, MAX30102_DIETEMPINT, &tempInt);
 8007978:	f107 030e 	add.w	r3, r7, #14
 800797c:	461a      	mov	r2, r3
 800797e:	211f      	movs	r1, #31
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff ff32 	bl	80077ea <read_register>
  read_register(obj, MAX30102_DIETEMPFRAC, &tempFrac);
 8007986:	f107 030d 	add.w	r3, r7, #13
 800798a:	461a      	mov	r2, r3
 800798c:	2120      	movs	r1, #32
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7ff ff2b 	bl	80077ea <read_register>

  return (float)tempInt + ((float)tempFrac * 0.0625); // Step 3: Calculate temperature (datasheet pg. 23)
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	ee07 3a90 	vmov	s15, r3
 800799a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799e:	ee17 0a90 	vmov	r0, s15
 80079a2:	f7f8 fdf9 	bl	8000598 <__aeabi_f2d>
 80079a6:	4604      	mov	r4, r0
 80079a8:	460d      	mov	r5, r1
 80079aa:	7b7b      	ldrb	r3, [r7, #13]
 80079ac:	ee07 3a90 	vmov	s15, r3
 80079b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b4:	ee17 0a90 	vmov	r0, s15
 80079b8:	f7f8 fdee 	bl	8000598 <__aeabi_f2d>
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	4b0b      	ldr	r3, [pc, #44]	@ (80079f0 <max30102_readtemp+0xb4>)
 80079c2:	f7f8 fe41 	bl	8000648 <__aeabi_dmul>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4620      	mov	r0, r4
 80079cc:	4629      	mov	r1, r5
 80079ce:	f7f8 fc85 	bl	80002dc <__adddf3>
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	4610      	mov	r0, r2
 80079d8:	4619      	mov	r1, r3
 80079da:	f7f9 f90d 	bl	8000bf8 <__aeabi_d2f>
 80079de:	4603      	mov	r3, r0
 80079e0:	ee07 3a90 	vmov	s15, r3
}
 80079e4:	eeb0 0a67 	vmov.f32	s0, s15
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bdb0      	pop	{r4, r5, r7, pc}
 80079ee:	bf00      	nop
 80079f0:	3fb00000 	.word	0x3fb00000

080079f4 <max30102_setledmode>:

void max30102_setledmode(max30102_t *obj, uint8_t mode)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
  bitMask(obj, MAX30102_MODECONFIG, MAX30102_MODE_MASK, mode); // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	22f8      	movs	r2, #248	@ 0xf8
 8007a04:	2109      	movs	r1, #9
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7ff ff3a 	bl	8007880 <bitMask>
  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  // See datasheet, page 19
}
 8007a0c:	bf00      	nop
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <max30102_setadcrange>:

void max30102_setadcrange(max30102_t *obj, uint8_t adcRange)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70fb      	strb	r3, [r7, #3]
  bitMask(obj ,MAX30102_PARTICLECONFIG, MAX30102_ADCRANGE_MASK, adcRange); // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	229f      	movs	r2, #159	@ 0x9f
 8007a24:	210a      	movs	r1, #10
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7ff ff2a 	bl	8007880 <bitMask>
}
 8007a2c:	bf00      	nop
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <max30102_setsamplerate>:

void max30102_setsamplerate(max30102_t *obj, uint8_t sampleRate)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
  bitMask(obj, MAX30102_PARTICLECONFIG, MAX30102_SAMPLERATE_MASK, sampleRate); // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	22e3      	movs	r2, #227	@ 0xe3
 8007a44:	210a      	movs	r1, #10
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff ff1a 	bl	8007880 <bitMask>
}
 8007a4c:	bf00      	nop
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <max30102_setpulsewidth>:

void max30102_setpulsewidth(max30102_t *obj, uint8_t pulseWidth)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	70fb      	strb	r3, [r7, #3]
  bitMask(obj, MAX30102_PARTICLECONFIG, MAX30102_PULSEWIDTH_MASK, pulseWidth); // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	22fc      	movs	r2, #252	@ 0xfc
 8007a64:	210a      	movs	r1, #10
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff ff0a 	bl	8007880 <bitMask>
}
 8007a6c:	bf00      	nop
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <max30102_enableFIFORollover>:
void max30102_enableFIFORollover(max30102_t *obj)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  bitMask(obj, MAX30102_FIFOCONFIG, MAX30102_ROLLOVER_MASK, MAX30102_ROLLOVER_ENABLE);
 8007a7c:	22ef      	movs	r2, #239	@ 0xef
 8007a7e:	2310      	movs	r3, #16
 8007a80:	2108      	movs	r1, #8
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7ff fefc 	bl	8007880 <bitMask>
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <max30102_enableSlot>:

void max30102_enableSlot(max30102_t *obj , uint8_t slotNumber, uint8_t device)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	70fb      	strb	r3, [r7, #3]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	70bb      	strb	r3, [r7, #2]

  switch (slotNumber)
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	d82b      	bhi.n	8007b00 <max30102_enableSlot+0x70>
 8007aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab0 <max30102_enableSlot+0x20>)
 8007aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007ac1 	.word	0x08007ac1
 8007ab4:	08007acf 	.word	0x08007acf
 8007ab8:	08007ae1 	.word	0x08007ae1
 8007abc:	08007aef 	.word	0x08007aef
  {
    case (1):
      bitMask(obj, MAX30102_MULTILEDCONFIG1, MAX30102_SLOT1_MASK, device);
 8007ac0:	22f8      	movs	r2, #248	@ 0xf8
 8007ac2:	78bb      	ldrb	r3, [r7, #2]
 8007ac4:	2111      	movs	r1, #17
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff feda 	bl	8007880 <bitMask>
      break;
 8007acc:	e019      	b.n	8007b02 <max30102_enableSlot+0x72>
    case (2):
      bitMask(obj, MAX30102_MULTILEDCONFIG1, MAX30102_SLOT2_MASK, device << 4);
 8007ace:	228f      	movs	r2, #143	@ 0x8f
 8007ad0:	78bb      	ldrb	r3, [r7, #2]
 8007ad2:	011b      	lsls	r3, r3, #4
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2111      	movs	r1, #17
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff fed1 	bl	8007880 <bitMask>
      break;
 8007ade:	e010      	b.n	8007b02 <max30102_enableSlot+0x72>
    case (3):
      bitMask(obj, MAX30102_MULTILEDCONFIG2, MAX30102_SLOT3_MASK, device);
 8007ae0:	22f8      	movs	r2, #248	@ 0xf8
 8007ae2:	78bb      	ldrb	r3, [r7, #2]
 8007ae4:	2112      	movs	r1, #18
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff feca 	bl	8007880 <bitMask>
      break;
 8007aec:	e009      	b.n	8007b02 <max30102_enableSlot+0x72>
    case (4):
      bitMask(obj, MAX30102_MULTILEDCONFIG2, MAX30102_SLOT4_MASK, device << 4);
 8007aee:	228f      	movs	r2, #143	@ 0x8f
 8007af0:	78bb      	ldrb	r3, [r7, #2]
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2112      	movs	r1, #18
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff fec1 	bl	8007880 <bitMask>
      break;
 8007afe:	e000      	b.n	8007b02 <max30102_enableSlot+0x72>
    default:
      //Shouldn't be here!
      break;
 8007b00:	bf00      	nop
  }
}
 8007b02:	bf00      	nop
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop

08007b0c <max30102_set_pulseamplitude>:

void max30102_set_pulseamplitude(max30102_t *obj, uint8_t amplitude, max30102_colour_t colour_mode)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	70fb      	strb	r3, [r7, #3]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_val = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]
	switch(colour_mode)
 8007b20:	78bb      	ldrb	r3, [r7, #2]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d817      	bhi.n	8007b58 <max30102_set_pulseamplitude+0x4c>
 8007b28:	a201      	add	r2, pc, #4	@ (adr r2, 8007b30 <max30102_set_pulseamplitude+0x24>)
 8007b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2e:	bf00      	nop
 8007b30:	08007b41 	.word	0x08007b41
 8007b34:	08007b47 	.word	0x08007b47
 8007b38:	08007b4d 	.word	0x08007b4d
 8007b3c:	08007b53 	.word	0x08007b53
	{
		case RED_COLOUR:
		{
			reg_val = MAX30102_LED1_PULSEAMP;
 8007b40:	230c      	movs	r3, #12
 8007b42:	73fb      	strb	r3, [r7, #15]
			break;
 8007b44:	e008      	b.n	8007b58 <max30102_set_pulseamplitude+0x4c>
		}
		case GREEN_COLOUR:
		{
			reg_val = MAX30102_LED3_PULSEAMP;
 8007b46:	230e      	movs	r3, #14
 8007b48:	73fb      	strb	r3, [r7, #15]
			break;
 8007b4a:	e005      	b.n	8007b58 <max30102_set_pulseamplitude+0x4c>
		}
		case IR:
		{
			reg_val = MAX30102_LED2_PULSEAMP;
 8007b4c:	230d      	movs	r3, #13
 8007b4e:	73fb      	strb	r3, [r7, #15]
			break;
 8007b50:	e002      	b.n	8007b58 <max30102_set_pulseamplitude+0x4c>
		}
		case PROXIMITY:
		{
			reg_val = MAX30102_LED_PROX_AMP;
 8007b52:	2310      	movs	r3, #16
 8007b54:	73fb      	strb	r3, [r7, #15]
			break;
 8007b56:	bf00      	nop
		}
	}
	write_register(obj , reg_val , amplitude);
 8007b58:	78fa      	ldrb	r2, [r7, #3]
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff fe6a 	bl	8007838 <write_register>
}
 8007b64:	bf00      	nop
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <max30102_softReset>:

void max30102_softReset(max30102_t *obj)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
	uint8_t response = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	73fb      	strb	r3, [r7, #15]
	bitMask(obj, MAX30102_MODECONFIG, MAX30102_RESET_MASK, MAX30102_RESET);
 8007b78:	22bf      	movs	r2, #191	@ 0xbf
 8007b7a:	2340      	movs	r3, #64	@ 0x40
 8007b7c:	2109      	movs	r1, #9
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7ff fe7e 	bl	8007880 <bitMask>
	do
	  {
		  read_register(obj, MAX30102_MODECONFIG, &response);
 8007b84:	f107 030f 	add.w	r3, r7, #15
 8007b88:	461a      	mov	r2, r3
 8007b8a:	2109      	movs	r1, #9
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff fe2c 	bl	80077ea <read_register>
		  HAL_Delay(1);
 8007b92:	2001      	movs	r0, #1
 8007b94:	f7fa f8b8 	bl	8001d08 <HAL_Delay>
	  }while((response & MAX30102_RESET) != 0);
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	2240      	movs	r2, #64	@ 0x40
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1ef      	bne.n	8007b84 <max30102_softReset+0x18>

}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <max30102_checksamples>:




uint32_t max30102_checksamples(max30102_t *obj)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b08c      	sub	sp, #48	@ 0x30
 8007bb4:	af02      	add	r7, sp, #8
 8007bb6:	6078      	str	r0, [r7, #4]
	uint8_t command;
	int bytesLeftToRead = 0;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	627b      	str	r3, [r7, #36]	@ 0x24
	int toGet = 0;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	623b      	str	r3, [r7, #32]
	int numberOfSamples = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	61fb      	str	r3, [r7, #28]

    read_register(obj, MAX30102_FIFOREADPTR , &readPointer);
 8007bc4:	4a6b      	ldr	r2, [pc, #428]	@ (8007d74 <max30102_checksamples+0x1c4>)
 8007bc6:	2106      	movs	r1, #6
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff fe0e 	bl	80077ea <read_register>
    read_register(obj, MAX30102_FIFOWRITEPTR , &writePointer);
 8007bce:	4a6a      	ldr	r2, [pc, #424]	@ (8007d78 <max30102_checksamples+0x1c8>)
 8007bd0:	2104      	movs	r1, #4
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff fe09 	bl	80077ea <read_register>

  // Check if there is new data
  if (readPointer != writePointer)
 8007bd8:	4b66      	ldr	r3, [pc, #408]	@ (8007d74 <max30102_checksamples+0x1c4>)
 8007bda:	781a      	ldrb	r2, [r3, #0]
 8007bdc:	4b66      	ldr	r3, [pc, #408]	@ (8007d78 <max30102_checksamples+0x1c8>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	f000 80c1 	beq.w	8007d68 <max30102_checksamples+0x1b8>
  {
    numberOfSamples = writePointer - readPointer;
 8007be6:	4b64      	ldr	r3, [pc, #400]	@ (8007d78 <max30102_checksamples+0x1c8>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	4b61      	ldr	r3, [pc, #388]	@ (8007d74 <max30102_checksamples+0x1c4>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	61fb      	str	r3, [r7, #28]
    if (numberOfSamples < 0) numberOfSamples += 32; // Wrap around condition
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	da02      	bge.n	8007c00 <max30102_checksamples+0x50>
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	3320      	adds	r3, #32
 8007bfe:	61fb      	str	r3, [r7, #28]

    bytesLeftToRead = numberOfSamples * max30102_led_irg * 3;
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	4613      	mov	r3, r2
 8007c04:	00db      	lsls	r3, r3, #3
 8007c06:	4413      	add	r3, r2
 8007c08:	627b      	str	r3, [r7, #36]	@ 0x24
    command = MAX30102_FIFODATA;
 8007c0a:	2307      	movs	r3, #7
 8007c0c:	75fb      	strb	r3, [r7, #23]

    // Send the register address (FIFODATA) to read from
    HAL_I2C_Master_Transmit(obj->ui2c, MAX30102_I2C_ADDR << 1, &command, 1, HAL_MAX_DELAY);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	f107 0217 	add.w	r2, r7, #23
 8007c16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	21ae      	movs	r1, #174	@ 0xae
 8007c20:	f7fa fc42 	bl	80024a8 <HAL_I2C_Master_Transmit>

    while (bytesLeftToRead > 0)
 8007c24:	e09c      	b.n	8007d60 <max30102_checksamples+0x1b0>
    {
      toGet = bytesLeftToRead;
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	623b      	str	r3, [r7, #32]
      if (toGet > I2C_BUFFER_LENGTH)
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	dd01      	ble.n	8007c34 <max30102_checksamples+0x84>
      {
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (max30102_led_irg * 3)); // Trim to multiple of samples
 8007c30:	231b      	movs	r3, #27
 8007c32:	623b      	str	r3, [r7, #32]
      }

      bytesLeftToRead -= toGet;
 8007c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	627b      	str	r3, [r7, #36]	@ 0x24
      HAL_I2C_Master_Receive(obj->ui2c, MAX30102_I2C_ADDR << 1, dataBuffer, toGet, HAL_MAX_DELAY);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6818      	ldr	r0, [r3, #0]
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c48:	9200      	str	r2, [sp, #0]
 8007c4a:	4a4c      	ldr	r2, [pc, #304]	@ (8007d7c <max30102_checksamples+0x1cc>)
 8007c4c:	21ae      	movs	r1, #174	@ 0xae
 8007c4e:	f7fa fd43 	bl	80026d8 <HAL_I2C_Master_Receive>

      int index = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	61bb      	str	r3, [r7, #24]
      while (toGet > 0)
 8007c56:	e07f      	b.n	8007d58 <max30102_checksamples+0x1a8>
      {
        obj->_head++;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8007c5e:	3301      	adds	r3, #1
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184
        obj->_head = (obj->_head + 1) % STORAGE_SIZE;  // Wrap condition
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8007c6e:	3301      	adds	r3, #1
 8007c70:	425a      	negs	r2, r3
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	f002 0203 	and.w	r2, r2, #3
 8007c7a:	bf58      	it	pl
 8007c7c:	4253      	negpl	r3, r2
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

        uint8_t temp[sizeof(uint32_t)] = {0};
 8007c86:	2300      	movs	r3, #0
 8007c88:	613b      	str	r3, [r7, #16]
        uint32_t tempLong = 0;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60fb      	str	r3, [r7, #12]

        // Burst read three bytes for RED
        temp[2] = dataBuffer[index++];
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	61ba      	str	r2, [r7, #24]
 8007c94:	4a39      	ldr	r2, [pc, #228]	@ (8007d7c <max30102_checksamples+0x1cc>)
 8007c96:	5cd3      	ldrb	r3, [r2, r3]
 8007c98:	74bb      	strb	r3, [r7, #18]
        temp[1] = dataBuffer[index++];
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	61ba      	str	r2, [r7, #24]
 8007ca0:	4a36      	ldr	r2, [pc, #216]	@ (8007d7c <max30102_checksamples+0x1cc>)
 8007ca2:	5cd3      	ldrb	r3, [r2, r3]
 8007ca4:	747b      	strb	r3, [r7, #17]
        temp[0] = dataBuffer[index++];
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	1c5a      	adds	r2, r3, #1
 8007caa:	61ba      	str	r2, [r7, #24]
 8007cac:	4a33      	ldr	r2, [pc, #204]	@ (8007d7c <max30102_checksamples+0x1cc>)
 8007cae:	5cd3      	ldrb	r3, [r2, r3]
 8007cb0:	743b      	strb	r3, [r7, #16]

        memcpy(&tempLong, temp, sizeof(tempLong));
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	60fb      	str	r3, [r7, #12]
        tempLong &= 0x3FFFF; // Zero out all but 18 bits
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8007cbc:	60fb      	str	r3, [r7, #12]
        obj->_red_samples[obj->_head] = tempLong;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	3320      	adds	r3, #32
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	440b      	add	r3, r1
 8007cce:	605a      	str	r2, [r3, #4]

        if (max30102_led_irg > 1)
        {
          // Burst read three bytes for IR
          temp[2] = dataBuffer[index++];
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	61ba      	str	r2, [r7, #24]
 8007cd6:	4a29      	ldr	r2, [pc, #164]	@ (8007d7c <max30102_checksamples+0x1cc>)
 8007cd8:	5cd3      	ldrb	r3, [r2, r3]
 8007cda:	74bb      	strb	r3, [r7, #18]
          temp[1] = dataBuffer[index++];
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	61ba      	str	r2, [r7, #24]
 8007ce2:	4a26      	ldr	r2, [pc, #152]	@ (8007d7c <max30102_checksamples+0x1cc>)
 8007ce4:	5cd3      	ldrb	r3, [r2, r3]
 8007ce6:	747b      	strb	r3, [r7, #17]
          temp[0] = dataBuffer[index++];
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	61ba      	str	r2, [r7, #24]
 8007cee:	4a23      	ldr	r2, [pc, #140]	@ (8007d7c <max30102_checksamples+0x1cc>)
 8007cf0:	5cd3      	ldrb	r3, [r2, r3]
 8007cf2:	743b      	strb	r3, [r7, #16]
          memcpy(&tempLong, temp, sizeof(tempLong));
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	60fb      	str	r3, [r7, #12]
          tempLong &= 0x3FFFF;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8007cfe:	60fb      	str	r3, [r7, #12]
          obj->_ir_samples[obj->_head] = tempLong;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	6879      	ldr	r1, [r7, #4]
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	440b      	add	r3, r1
 8007d0e:	605a      	str	r2, [r3, #4]
        }

        if (max30102_led_irg > 2)
        {
          // Burst read three bytes for Green
          temp[2] = dataBuffer[index++];
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	61ba      	str	r2, [r7, #24]
 8007d16:	4a19      	ldr	r2, [pc, #100]	@ (8007d7c <max30102_checksamples+0x1cc>)
 8007d18:	5cd3      	ldrb	r3, [r2, r3]
 8007d1a:	74bb      	strb	r3, [r7, #18]
          temp[1] = dataBuffer[index++];
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	61ba      	str	r2, [r7, #24]
 8007d22:	4a16      	ldr	r2, [pc, #88]	@ (8007d7c <max30102_checksamples+0x1cc>)
 8007d24:	5cd3      	ldrb	r3, [r2, r3]
 8007d26:	747b      	strb	r3, [r7, #17]
          temp[0] = dataBuffer[index++];
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	61ba      	str	r2, [r7, #24]
 8007d2e:	4a13      	ldr	r2, [pc, #76]	@ (8007d7c <max30102_checksamples+0x1cc>)
 8007d30:	5cd3      	ldrb	r3, [r2, r3]
 8007d32:	743b      	strb	r3, [r7, #16]
          memcpy(&tempLong, temp, sizeof(tempLong));
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	60fb      	str	r3, [r7, #12]
          tempLong &= 0x3FFFF;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8007d3e:	60fb      	str	r3, [r7, #12]
          obj->_green[obj->_head] = tempLong;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	3340      	adds	r3, #64	@ 0x40
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	440b      	add	r3, r1
 8007d50:	605a      	str	r2, [r3, #4]
        }

        toGet -=max30102_led_irg * 3;
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	3b09      	subs	r3, #9
 8007d56:	623b      	str	r3, [r7, #32]
      while (toGet > 0)
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f73f af7c 	bgt.w	8007c58 <max30102_checksamples+0xa8>
    while (bytesLeftToRead > 0)
 8007d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f73f af5f 	bgt.w	8007c26 <max30102_checksamples+0x76>
      }
    }
  }
  return numberOfSamples;
 8007d68:	69fb      	ldr	r3, [r7, #28]

}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3728      	adds	r7, #40	@ 0x28
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20000be0 	.word	0x20000be0
 8007d78:	20000be1 	.word	0x20000be1
 8007d7c:	20000bc0 	.word	0x20000bc0

08007d80 <max30102_safeCheck>:

uint32_t max30102_safeCheck(max30102_t *obj)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	const uint8_t maxTimeToCheck = 250;
 8007d88:	23fa      	movs	r3, #250	@ 0xfa
 8007d8a:	73fb      	strb	r3, [r7, #15]
    uint32_t markTime = HAL_GetTick();  // Get the current system tick (in ms)
 8007d8c:	f7f9 ffb0 	bl	8001cf0 <HAL_GetTick>
 8007d90:	60b8      	str	r0, [r7, #8]

    while (1)
    {
        if (HAL_GetTick() - markTime > maxTimeToCheck)
 8007d92:	f7f9 ffad 	bl	8001cf0 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	1ad2      	subs	r2, r2, r3
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d901      	bls.n	8007da6 <max30102_safeCheck+0x26>
        {
            return false;  // Timeout occurred
 8007da2:	2300      	movs	r3, #0
 8007da4:	e011      	b.n	8007dca <max30102_safeCheck+0x4a>
        }

        if (max30102_checksamples(obj) == true)  // Check if new data is available (assuming `check()` is implemented elsewhere)
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7ff ff02 	bl	8007bb0 <max30102_checksamples>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d107      	bne.n	8007dc2 <max30102_safeCheck+0x42>
        {
        	return obj->_ir_samples[obj->_head];  // New data found
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4413      	add	r3, r2
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	e003      	b.n	8007dca <max30102_safeCheck+0x4a>
        }
        HAL_Delay(1);  // Delay for 1 millisecond
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	f7f9 ffa0 	bl	8001d08 <HAL_Delay>
        if (HAL_GetTick() - markTime > maxTimeToCheck)
 8007dc8:	e7e3      	b.n	8007d92 <max30102_safeCheck+0x12>
    }
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <EXTI_Init>:

/*
 * Temperature Interrupts
 */
void EXTI_Init(max30102_t *obj)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]

    HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 2);  // Set priority (lower number means higher priority)
 8007dda:	2202      	movs	r2, #2
 8007ddc:	2102      	movs	r1, #2
 8007dde:	2006      	movs	r0, #6
 8007de0:	f7fa f891 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);          // Enable EXTI line 0 interrupt
 8007de4:	2006      	movs	r0, #6
 8007de6:	f7fa f8aa 	bl	8001f3e <HAL_NVIC_EnableIRQ>
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <Spo2AvgProcess>:
    stat->sum = 0.0;
    stat->count = 0;
}

void Spo2AvgProcess(MinMaxAvgStatistic *stat, float value)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	ed87 0a00 	vstr	s0, [r7]
    if (isnan(stat->min))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	edd3 7a00 	vldr	s15, [r3]
 8007e04:	eef4 7a67 	vcmp.f32	s15, s15
 8007e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e0c:	d706      	bvc.n	8007e1c <Spo2AvgProcess+0x2a>
    {
        stat->min = value;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	601a      	str	r2, [r3, #0]
        stat->max = value;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	605a      	str	r2, [r3, #4]
 8007e1a:	e01b      	b.n	8007e54 <Spo2AvgProcess+0x62>
    }
    else
    {
        stat->min = fminf(stat->min, value);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	edd3 7a00 	vldr	s15, [r3]
 8007e22:	eef0 0a67 	vmov.f32	s1, s15
 8007e26:	ed97 0a00 	vldr	s0, [r7]
 8007e2a:	f005 fb5e 	bl	800d4ea <fminf>
 8007e2e:	eef0 7a40 	vmov.f32	s15, s0
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	edc3 7a00 	vstr	s15, [r3]
        stat->max = fmaxf(stat->max, value);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8007e3e:	eef0 0a67 	vmov.f32	s1, s15
 8007e42:	ed97 0a00 	vldr	s0, [r7]
 8007e46:	f005 fb33 	bl	800d4b0 <fmaxf>
 8007e4a:	eef0 7a40 	vmov.f32	s15, s0
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	edc3 7a01 	vstr	s15, [r3, #4]
    }
    stat->sum += value;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	ed93 7a02 	vldr	s14, [r3, #8]
 8007e5a:	edd7 7a00 	vldr	s15, [r7]
 8007e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	edc3 7a02 	vstr	s15, [r3, #8]
    stat->count++;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	60da      	str	r2, [r3, #12]
}
 8007e72:	bf00      	nop
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <average>:


float average(MinMaxAvgStatistic *stat)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
    return (stat->count > 0) ? stat->sum / stat->count : 0.0;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	dd0b      	ble.n	8007ea4 <average+0x28>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	ee07 3a90 	vmov	s15, r3
 8007e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007ea2:	e001      	b.n	8007ea8 <average+0x2c>
 8007ea4:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8007ebc <average+0x40>
 8007ea8:	eef0 7a66 	vmov.f32	s15, s13
}
 8007eac:	eeb0 0a67 	vmov.f32	s0, s15
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	00000000 	.word	0x00000000

08007ec0 <minimum>:


float minimum(MinMaxAvgStatistic *stat)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
    return stat->min;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	ee07 3a90 	vmov	s15, r3
}
 8007ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <maximum>:

float maximum(MinMaxAvgStatistic *stat)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
    return stat->max;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	ee07 3a90 	vmov	s15, r3
}
 8007eee:	eeb0 0a67 	vmov.f32	s0, s15
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <initMinMaxAvgStatistic>:


void initMinMaxAvgStatistic(MinMaxAvgStatistic *stat) {
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
    stat->min = 0.0;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f04f 0200 	mov.w	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]
    stat->max = 0.0;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f04f 0200 	mov.w	r2, #0
 8007f12:	605a      	str	r2, [r3, #4]
    stat->sum = 0.0;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f04f 0200 	mov.w	r2, #0
 8007f1a:	609a      	str	r2, [r3, #8]
    stat->count = 0;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	60da      	str	r2, [r3, #12]
}
 8007f22:	bf00      	nop
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
	...

08007f30 <Spo2AvgInit>:

void Spo2AvgInit(max30102_t *obj)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	ed2d 8b02 	vpush	{d8}
 8007f36:	b08a      	sub	sp, #40	@ 0x28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
	float rred , rir, r = 0;
 8007f3c:	f04f 0300 	mov.w	r3, #0
 8007f40:	627b      	str	r3, [r7, #36]	@ 0x24
	float sample[4];
	initMinMaxAvgStatistic(&stat_red);
 8007f42:	485a      	ldr	r0, [pc, #360]	@ (80080ac <Spo2AvgInit+0x17c>)
 8007f44:	f7ff ffda 	bl	8007efc <initMinMaxAvgStatistic>
	initMinMaxAvgStatistic(&stat_ir);
 8007f48:	4859      	ldr	r0, [pc, #356]	@ (80080b0 <Spo2AvgInit+0x180>)
 8007f4a:	f7ff ffd7 	bl	8007efc <initMinMaxAvgStatistic>

	sample[0] = LowPassFilter_process(&low_pass_filter, obj->_red_samples[0]);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f54:	ee07 3a90 	vmov	s15, r3
 8007f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8007f60:	4854      	ldr	r0, [pc, #336]	@ (80080b4 <Spo2AvgInit+0x184>)
 8007f62:	f7ff fa69 	bl	8007438 <LowPassFilter_process>
 8007f66:	eef0 7a40 	vmov.f32	s15, s0
 8007f6a:	edc7 7a03 	vstr	s15, [r7, #12]
	sample[1] = LowPassFilter_process(&low_pass_filter, obj->_red_samples[2]);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f74:	ee07 3a90 	vmov	s15, r3
 8007f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8007f80:	484c      	ldr	r0, [pc, #304]	@ (80080b4 <Spo2AvgInit+0x184>)
 8007f82:	f7ff fa59 	bl	8007438 <LowPassFilter_process>
 8007f86:	eef0 7a40 	vmov.f32	s15, s0
 8007f8a:	edc7 7a04 	vstr	s15, [r7, #16]
	sample[2] = LowPassFilter_process(&low_pass_filter, obj->_ir_samples[0]);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	ee07 3a90 	vmov	s15, r3
 8007f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8007f9e:	4845      	ldr	r0, [pc, #276]	@ (80080b4 <Spo2AvgInit+0x184>)
 8007fa0:	f7ff fa4a 	bl	8007438 <LowPassFilter_process>
 8007fa4:	eef0 7a40 	vmov.f32	s15, s0
 8007fa8:	edc7 7a05 	vstr	s15, [r7, #20]
	sample[3] = LowPassFilter_process(&low_pass_filter, obj->_ir_samples[2]);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	ee07 3a90 	vmov	s15, r3
 8007fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8007fbc:	483d      	ldr	r0, [pc, #244]	@ (80080b4 <Spo2AvgInit+0x184>)
 8007fbe:	f7ff fa3b 	bl	8007438 <LowPassFilter_process>
 8007fc2:	eef0 7a40 	vmov.f32	s15, s0
 8007fc6:	edc7 7a06 	vstr	s15, [r7, #24]


	Spo2AvgProcess(&stat_red, sample[0]);
 8007fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8007fce:	eeb0 0a67 	vmov.f32	s0, s15
 8007fd2:	4836      	ldr	r0, [pc, #216]	@ (80080ac <Spo2AvgInit+0x17c>)
 8007fd4:	f7ff ff0d 	bl	8007df2 <Spo2AvgProcess>
	Spo2AvgProcess(&stat_red, sample[1]);
 8007fd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8007fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8007fe0:	4832      	ldr	r0, [pc, #200]	@ (80080ac <Spo2AvgInit+0x17c>)
 8007fe2:	f7ff ff06 	bl	8007df2 <Spo2AvgProcess>
	Spo2AvgProcess(&stat_ir, sample[3]);
 8007fe6:	edd7 7a06 	vldr	s15, [r7, #24]
 8007fea:	eeb0 0a67 	vmov.f32	s0, s15
 8007fee:	4830      	ldr	r0, [pc, #192]	@ (80080b0 <Spo2AvgInit+0x180>)
 8007ff0:	f7ff feff 	bl	8007df2 <Spo2AvgProcess>
	Spo2AvgProcess(&stat_ir, sample[4]);
 8007ff4:	edd7 7a07 	vldr	s15, [r7, #28]
 8007ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8007ffc:	482c      	ldr	r0, [pc, #176]	@ (80080b0 <Spo2AvgInit+0x180>)
 8007ffe:	f7ff fef8 	bl	8007df2 <Spo2AvgProcess>

	rred = (maximum(&stat_red) - minimum(&stat_red)) / average(&stat_red);
 8008002:	482a      	ldr	r0, [pc, #168]	@ (80080ac <Spo2AvgInit+0x17c>)
 8008004:	f7ff ff6b 	bl	8007ede <maximum>
 8008008:	eeb0 8a40 	vmov.f32	s16, s0
 800800c:	4827      	ldr	r0, [pc, #156]	@ (80080ac <Spo2AvgInit+0x17c>)
 800800e:	f7ff ff57 	bl	8007ec0 <minimum>
 8008012:	eef0 7a40 	vmov.f32	s15, s0
 8008016:	ee38 8a67 	vsub.f32	s16, s16, s15
 800801a:	4824      	ldr	r0, [pc, #144]	@ (80080ac <Spo2AvgInit+0x17c>)
 800801c:	f7ff ff2e 	bl	8007e7c <average>
 8008020:	eeb0 7a40 	vmov.f32	s14, s0
 8008024:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8008028:	edc7 7a08 	vstr	s15, [r7, #32]
	rir = (maximum(&stat_ir) - minimum(&stat_ir)) / average(&stat_ir);
 800802c:	4820      	ldr	r0, [pc, #128]	@ (80080b0 <Spo2AvgInit+0x180>)
 800802e:	f7ff ff56 	bl	8007ede <maximum>
 8008032:	eeb0 8a40 	vmov.f32	s16, s0
 8008036:	481e      	ldr	r0, [pc, #120]	@ (80080b0 <Spo2AvgInit+0x180>)
 8008038:	f7ff ff42 	bl	8007ec0 <minimum>
 800803c:	eef0 7a40 	vmov.f32	s15, s0
 8008040:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008044:	481a      	ldr	r0, [pc, #104]	@ (80080b0 <Spo2AvgInit+0x180>)
 8008046:	f7ff ff19 	bl	8007e7c <average>
 800804a:	eeb0 7a40 	vmov.f32	s14, s0
 800804e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8008052:	edc7 7a07 	vstr	s15, [r7, #28]
	r = rred / rir;
 8008056:	edd7 6a08 	vldr	s13, [r7, #32]
 800805a:	ed97 7a07 	vldr	s14, [r7, #28]
 800805e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008062:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	spo2 = kSpO2_A * r * r + kSpO2_B * r + kSpO2_C;
 8008066:	4b14      	ldr	r3, [pc, #80]	@ (80080b8 <Spo2AvgInit+0x188>)
 8008068:	ed93 7a00 	vldr	s14, [r3]
 800806c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008070:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008074:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008078:	ee27 7a27 	vmul.f32	s14, s14, s15
 800807c:	4b0f      	ldr	r3, [pc, #60]	@ (80080bc <Spo2AvgInit+0x18c>)
 800807e:	edd3 6a00 	vldr	s13, [r3]
 8008082:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800808a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800808e:	4b0c      	ldr	r3, [pc, #48]	@ (80080c0 <Spo2AvgInit+0x190>)
 8008090:	edd3 7a00 	vldr	s15, [r3]
 8008094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008098:	4b0a      	ldr	r3, [pc, #40]	@ (80080c4 <Spo2AvgInit+0x194>)
 800809a:	edc3 7a00 	vstr	s15, [r3]
}
 800809e:	bf00      	nop
 80080a0:	3728      	adds	r7, #40	@ 0x28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	ecbd 8b02 	vpop	{d8}
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20000be4 	.word	0x20000be4
 80080b0:	20000bf4 	.word	0x20000bf4
 80080b4:	20000b80 	.word	0x20000b80
 80080b8:	20000024 	.word	0x20000024
 80080bc:	20000028 	.word	0x20000028
 80080c0:	2000002c 	.word	0x2000002c
 80080c4:	200005ec 	.word	0x200005ec

080080c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4603      	mov	r3, r0
 80080d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80080d2:	79fb      	ldrb	r3, [r7, #7]
 80080d4:	4a08      	ldr	r2, [pc, #32]	@ (80080f8 <disk_status+0x30>)
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	79fa      	ldrb	r2, [r7, #7]
 80080e0:	4905      	ldr	r1, [pc, #20]	@ (80080f8 <disk_status+0x30>)
 80080e2:	440a      	add	r2, r1
 80080e4:	7a12      	ldrb	r2, [r2, #8]
 80080e6:	4610      	mov	r0, r2
 80080e8:	4798      	blx	r3
 80080ea:	4603      	mov	r3, r0
 80080ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	20000c2c 	.word	0x20000c2c

080080fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800810a:	79fb      	ldrb	r3, [r7, #7]
 800810c:	4a0d      	ldr	r2, [pc, #52]	@ (8008144 <disk_initialize+0x48>)
 800810e:	5cd3      	ldrb	r3, [r2, r3]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d111      	bne.n	8008138 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	4a0b      	ldr	r2, [pc, #44]	@ (8008144 <disk_initialize+0x48>)
 8008118:	2101      	movs	r1, #1
 800811a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800811c:	79fb      	ldrb	r3, [r7, #7]
 800811e:	4a09      	ldr	r2, [pc, #36]	@ (8008144 <disk_initialize+0x48>)
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	79fa      	ldrb	r2, [r7, #7]
 800812a:	4906      	ldr	r1, [pc, #24]	@ (8008144 <disk_initialize+0x48>)
 800812c:	440a      	add	r2, r1
 800812e:	7a12      	ldrb	r2, [r2, #8]
 8008130:	4610      	mov	r0, r2
 8008132:	4798      	blx	r3
 8008134:	4603      	mov	r3, r0
 8008136:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20000c2c 	.word	0x20000c2c

08008148 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008148:	b590      	push	{r4, r7, lr}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	607a      	str	r2, [r7, #4]
 8008152:	603b      	str	r3, [r7, #0]
 8008154:	4603      	mov	r3, r0
 8008156:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	4a0a      	ldr	r2, [pc, #40]	@ (8008184 <disk_read+0x3c>)
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	689c      	ldr	r4, [r3, #8]
 8008164:	7bfb      	ldrb	r3, [r7, #15]
 8008166:	4a07      	ldr	r2, [pc, #28]	@ (8008184 <disk_read+0x3c>)
 8008168:	4413      	add	r3, r2
 800816a:	7a18      	ldrb	r0, [r3, #8]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	68b9      	ldr	r1, [r7, #8]
 8008172:	47a0      	blx	r4
 8008174:	4603      	mov	r3, r0
 8008176:	75fb      	strb	r3, [r7, #23]
  return res;
 8008178:	7dfb      	ldrb	r3, [r7, #23]
}
 800817a:	4618      	mov	r0, r3
 800817c:	371c      	adds	r7, #28
 800817e:	46bd      	mov	sp, r7
 8008180:	bd90      	pop	{r4, r7, pc}
 8008182:	bf00      	nop
 8008184:	20000c2c 	.word	0x20000c2c

08008188 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008188:	b590      	push	{r4, r7, lr}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	60b9      	str	r1, [r7, #8]
 8008190:	607a      	str	r2, [r7, #4]
 8008192:	603b      	str	r3, [r7, #0]
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	4a0a      	ldr	r2, [pc, #40]	@ (80081c4 <disk_write+0x3c>)
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	68dc      	ldr	r4, [r3, #12]
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	4a07      	ldr	r2, [pc, #28]	@ (80081c4 <disk_write+0x3c>)
 80081a8:	4413      	add	r3, r2
 80081aa:	7a18      	ldrb	r0, [r3, #8]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	68b9      	ldr	r1, [r7, #8]
 80081b2:	47a0      	blx	r4
 80081b4:	4603      	mov	r3, r0
 80081b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	371c      	adds	r7, #28
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd90      	pop	{r4, r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20000c2c 	.word	0x20000c2c

080081c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	4603      	mov	r3, r0
 80081d0:	603a      	str	r2, [r7, #0]
 80081d2:	71fb      	strb	r3, [r7, #7]
 80081d4:	460b      	mov	r3, r1
 80081d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	4a09      	ldr	r2, [pc, #36]	@ (8008200 <disk_ioctl+0x38>)
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4413      	add	r3, r2
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	79fa      	ldrb	r2, [r7, #7]
 80081e6:	4906      	ldr	r1, [pc, #24]	@ (8008200 <disk_ioctl+0x38>)
 80081e8:	440a      	add	r2, r1
 80081ea:	7a10      	ldrb	r0, [r2, #8]
 80081ec:	79b9      	ldrb	r1, [r7, #6]
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	4798      	blx	r3
 80081f2:	4603      	mov	r3, r0
 80081f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20000c2c 	.word	0x20000c2c

08008204 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3301      	adds	r3, #1
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008214:	89fb      	ldrh	r3, [r7, #14]
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	b21a      	sxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	b21b      	sxth	r3, r3
 8008220:	4313      	orrs	r3, r2
 8008222:	b21b      	sxth	r3, r3
 8008224:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008226:	89fb      	ldrh	r3, [r7, #14]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	3303      	adds	r3, #3
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	021b      	lsls	r3, r3, #8
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	3202      	adds	r2, #2
 800824c:	7812      	ldrb	r2, [r2, #0]
 800824e:	4313      	orrs	r3, r2
 8008250:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	3201      	adds	r2, #1
 800825a:	7812      	ldrb	r2, [r2, #0]
 800825c:	4313      	orrs	r3, r2
 800825e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	021b      	lsls	r3, r3, #8
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	7812      	ldrb	r2, [r2, #0]
 8008268:	4313      	orrs	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]
	return rv;
 800826c:	68fb      	ldr	r3, [r7, #12]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800827a:	b480      	push	{r7}
 800827c:	b083      	sub	sp, #12
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	460b      	mov	r3, r1
 8008284:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	887a      	ldrh	r2, [r7, #2]
 800828e:	b2d2      	uxtb	r2, r2
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	887b      	ldrh	r3, [r7, #2]
 8008294:	0a1b      	lsrs	r3, r3, #8
 8008296:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	607a      	str	r2, [r7, #4]
 800829e:	887a      	ldrh	r2, [r7, #2]
 80082a0:	b2d2      	uxtb	r2, r2
 80082a2:	701a      	strb	r2, [r3, #0]
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	1c5a      	adds	r2, r3, #1
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	b2d2      	uxtb	r2, r2
 80082c4:	701a      	strb	r2, [r3, #0]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	0a1b      	lsrs	r3, r3, #8
 80082ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	607a      	str	r2, [r7, #4]
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	b2d2      	uxtb	r2, r2
 80082d6:	701a      	strb	r2, [r3, #0]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	0a1b      	lsrs	r3, r3, #8
 80082dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	b2d2      	uxtb	r2, r2
 80082e8:	701a      	strb	r2, [r3, #0]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	0a1b      	lsrs	r3, r3, #8
 80082ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	607a      	str	r2, [r7, #4]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	b2d2      	uxtb	r2, r2
 80082fa:	701a      	strb	r2, [r3, #0]
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008308:	b480      	push	{r7}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00d      	beq.n	800833e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	1c53      	adds	r3, r2, #1
 8008326:	613b      	str	r3, [r7, #16]
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	1c59      	adds	r1, r3, #1
 800832c:	6179      	str	r1, [r7, #20]
 800832e:	7812      	ldrb	r2, [r2, #0]
 8008330:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	3b01      	subs	r3, #1
 8008336:	607b      	str	r3, [r7, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1f1      	bne.n	8008322 <mem_cpy+0x1a>
	}
}
 800833e:	bf00      	nop
 8008340:	371c      	adds	r7, #28
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800834a:	b480      	push	{r7}
 800834c:	b087      	sub	sp, #28
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	617a      	str	r2, [r7, #20]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	b2d2      	uxtb	r2, r2
 8008364:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3b01      	subs	r3, #1
 800836a:	607b      	str	r3, [r7, #4]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1f3      	bne.n	800835a <mem_set+0x10>
}
 8008372:	bf00      	nop
 8008374:	bf00      	nop
 8008376:	371c      	adds	r7, #28
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008380:	b480      	push	{r7}
 8008382:	b089      	sub	sp, #36	@ 0x24
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	61fb      	str	r3, [r7, #28]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	1c5a      	adds	r2, r3, #1
 800839c:	61fa      	str	r2, [r7, #28]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	4619      	mov	r1, r3
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	1c5a      	adds	r2, r3, #1
 80083a6:	61ba      	str	r2, [r7, #24]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	1acb      	subs	r3, r1, r3
 80083ac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	607b      	str	r3, [r7, #4]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <mem_cmp+0x40>
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0eb      	beq.n	8008398 <mem_cmp+0x18>

	return r;
 80083c0:	697b      	ldr	r3, [r7, #20]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3724      	adds	r7, #36	@ 0x24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80083ce:	b480      	push	{r7}
 80083d0:	b083      	sub	sp, #12
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80083d8:	e002      	b.n	80083e0 <chk_chr+0x12>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	3301      	adds	r3, #1
 80083de:	607b      	str	r3, [r7, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d005      	beq.n	80083f4 <chk_chr+0x26>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d1f2      	bne.n	80083da <chk_chr+0xc>
	return *str;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	781b      	ldrb	r3, [r3, #0]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800840e:	2300      	movs	r3, #0
 8008410:	60bb      	str	r3, [r7, #8]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	e029      	b.n	800846c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008418:	4a27      	ldr	r2, [pc, #156]	@ (80084b8 <chk_lock+0xb4>)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	4413      	add	r3, r2
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d01d      	beq.n	8008462 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008426:	4a24      	ldr	r2, [pc, #144]	@ (80084b8 <chk_lock+0xb4>)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	011b      	lsls	r3, r3, #4
 800842c:	4413      	add	r3, r2
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	429a      	cmp	r2, r3
 8008436:	d116      	bne.n	8008466 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008438:	4a1f      	ldr	r2, [pc, #124]	@ (80084b8 <chk_lock+0xb4>)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	011b      	lsls	r3, r3, #4
 800843e:	4413      	add	r3, r2
 8008440:	3304      	adds	r3, #4
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008448:	429a      	cmp	r2, r3
 800844a:	d10c      	bne.n	8008466 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800844c:	4a1a      	ldr	r2, [pc, #104]	@ (80084b8 <chk_lock+0xb4>)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	4413      	add	r3, r2
 8008454:	3308      	adds	r3, #8
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800845c:	429a      	cmp	r2, r3
 800845e:	d102      	bne.n	8008466 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008460:	e007      	b.n	8008472 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008462:	2301      	movs	r3, #1
 8008464:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	3301      	adds	r3, #1
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d9d2      	bls.n	8008418 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b02      	cmp	r3, #2
 8008476:	d109      	bne.n	800848c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d102      	bne.n	8008484 <chk_lock+0x80>
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b02      	cmp	r3, #2
 8008482:	d101      	bne.n	8008488 <chk_lock+0x84>
 8008484:	2300      	movs	r3, #0
 8008486:	e010      	b.n	80084aa <chk_lock+0xa6>
 8008488:	2312      	movs	r3, #18
 800848a:	e00e      	b.n	80084aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d108      	bne.n	80084a4 <chk_lock+0xa0>
 8008492:	4a09      	ldr	r2, [pc, #36]	@ (80084b8 <chk_lock+0xb4>)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	011b      	lsls	r3, r3, #4
 8008498:	4413      	add	r3, r2
 800849a:	330c      	adds	r3, #12
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084a2:	d101      	bne.n	80084a8 <chk_lock+0xa4>
 80084a4:	2310      	movs	r3, #16
 80084a6:	e000      	b.n	80084aa <chk_lock+0xa6>
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	20000c0c 	.word	0x20000c0c

080084bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80084c2:	2300      	movs	r3, #0
 80084c4:	607b      	str	r3, [r7, #4]
 80084c6:	e002      	b.n	80084ce <enq_lock+0x12>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3301      	adds	r3, #1
 80084cc:	607b      	str	r3, [r7, #4]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d806      	bhi.n	80084e2 <enq_lock+0x26>
 80084d4:	4a09      	ldr	r2, [pc, #36]	@ (80084fc <enq_lock+0x40>)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	4413      	add	r3, r2
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1f2      	bne.n	80084c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	bf14      	ite	ne
 80084e8:	2301      	movne	r3, #1
 80084ea:	2300      	moveq	r3, #0
 80084ec:	b2db      	uxtb	r3, r3
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	20000c0c 	.word	0x20000c0c

08008500 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800850a:	2300      	movs	r3, #0
 800850c:	60fb      	str	r3, [r7, #12]
 800850e:	e01f      	b.n	8008550 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008510:	4a41      	ldr	r2, [pc, #260]	@ (8008618 <inc_lock+0x118>)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	011b      	lsls	r3, r3, #4
 8008516:	4413      	add	r3, r2
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	429a      	cmp	r2, r3
 8008520:	d113      	bne.n	800854a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008522:	4a3d      	ldr	r2, [pc, #244]	@ (8008618 <inc_lock+0x118>)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	4413      	add	r3, r2
 800852a:	3304      	adds	r3, #4
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008532:	429a      	cmp	r2, r3
 8008534:	d109      	bne.n	800854a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008536:	4a38      	ldr	r2, [pc, #224]	@ (8008618 <inc_lock+0x118>)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	011b      	lsls	r3, r3, #4
 800853c:	4413      	add	r3, r2
 800853e:	3308      	adds	r3, #8
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008546:	429a      	cmp	r2, r3
 8008548:	d006      	beq.n	8008558 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	3301      	adds	r3, #1
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d9dc      	bls.n	8008510 <inc_lock+0x10>
 8008556:	e000      	b.n	800855a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008558:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b02      	cmp	r3, #2
 800855e:	d132      	bne.n	80085c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008560:	2300      	movs	r3, #0
 8008562:	60fb      	str	r3, [r7, #12]
 8008564:	e002      	b.n	800856c <inc_lock+0x6c>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3301      	adds	r3, #1
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d806      	bhi.n	8008580 <inc_lock+0x80>
 8008572:	4a29      	ldr	r2, [pc, #164]	@ (8008618 <inc_lock+0x118>)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	011b      	lsls	r3, r3, #4
 8008578:	4413      	add	r3, r2
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1f2      	bne.n	8008566 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b02      	cmp	r3, #2
 8008584:	d101      	bne.n	800858a <inc_lock+0x8a>
 8008586:	2300      	movs	r3, #0
 8008588:	e040      	b.n	800860c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	4922      	ldr	r1, [pc, #136]	@ (8008618 <inc_lock+0x118>)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	011b      	lsls	r3, r3, #4
 8008594:	440b      	add	r3, r1
 8008596:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	491e      	ldr	r1, [pc, #120]	@ (8008618 <inc_lock+0x118>)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	011b      	lsls	r3, r3, #4
 80085a2:	440b      	add	r3, r1
 80085a4:	3304      	adds	r3, #4
 80085a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	695a      	ldr	r2, [r3, #20]
 80085ac:	491a      	ldr	r1, [pc, #104]	@ (8008618 <inc_lock+0x118>)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	440b      	add	r3, r1
 80085b4:	3308      	adds	r3, #8
 80085b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80085b8:	4a17      	ldr	r2, [pc, #92]	@ (8008618 <inc_lock+0x118>)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	011b      	lsls	r3, r3, #4
 80085be:	4413      	add	r3, r2
 80085c0:	330c      	adds	r3, #12
 80085c2:	2200      	movs	r2, #0
 80085c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d009      	beq.n	80085e0 <inc_lock+0xe0>
 80085cc:	4a12      	ldr	r2, [pc, #72]	@ (8008618 <inc_lock+0x118>)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	4413      	add	r3, r2
 80085d4:	330c      	adds	r3, #12
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <inc_lock+0xe0>
 80085dc:	2300      	movs	r3, #0
 80085de:	e015      	b.n	800860c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d108      	bne.n	80085f8 <inc_lock+0xf8>
 80085e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008618 <inc_lock+0x118>)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	011b      	lsls	r3, r3, #4
 80085ec:	4413      	add	r3, r2
 80085ee:	330c      	adds	r3, #12
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	3301      	adds	r3, #1
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	e001      	b.n	80085fc <inc_lock+0xfc>
 80085f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085fc:	4906      	ldr	r1, [pc, #24]	@ (8008618 <inc_lock+0x118>)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	011b      	lsls	r3, r3, #4
 8008602:	440b      	add	r3, r1
 8008604:	330c      	adds	r3, #12
 8008606:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3301      	adds	r3, #1
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	20000c0c 	.word	0x20000c0c

0800861c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3b01      	subs	r3, #1
 8008628:	607b      	str	r3, [r7, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b01      	cmp	r3, #1
 800862e:	d825      	bhi.n	800867c <dec_lock+0x60>
		n = Files[i].ctr;
 8008630:	4a17      	ldr	r2, [pc, #92]	@ (8008690 <dec_lock+0x74>)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	4413      	add	r3, r2
 8008638:	330c      	adds	r3, #12
 800863a:	881b      	ldrh	r3, [r3, #0]
 800863c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800863e:	89fb      	ldrh	r3, [r7, #14]
 8008640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008644:	d101      	bne.n	800864a <dec_lock+0x2e>
 8008646:	2300      	movs	r3, #0
 8008648:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800864a:	89fb      	ldrh	r3, [r7, #14]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <dec_lock+0x3a>
 8008650:	89fb      	ldrh	r3, [r7, #14]
 8008652:	3b01      	subs	r3, #1
 8008654:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008656:	4a0e      	ldr	r2, [pc, #56]	@ (8008690 <dec_lock+0x74>)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	011b      	lsls	r3, r3, #4
 800865c:	4413      	add	r3, r2
 800865e:	330c      	adds	r3, #12
 8008660:	89fa      	ldrh	r2, [r7, #14]
 8008662:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008664:	89fb      	ldrh	r3, [r7, #14]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d105      	bne.n	8008676 <dec_lock+0x5a>
 800866a:	4a09      	ldr	r2, [pc, #36]	@ (8008690 <dec_lock+0x74>)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	011b      	lsls	r3, r3, #4
 8008670:	4413      	add	r3, r2
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	737b      	strb	r3, [r7, #13]
 800867a:	e001      	b.n	8008680 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800867c:	2302      	movs	r3, #2
 800867e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008680:	7b7b      	ldrb	r3, [r7, #13]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	20000c0c 	.word	0x20000c0c

08008694 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800869c:	2300      	movs	r3, #0
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	e010      	b.n	80086c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80086a2:	4a0d      	ldr	r2, [pc, #52]	@ (80086d8 <clear_lock+0x44>)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	011b      	lsls	r3, r3, #4
 80086a8:	4413      	add	r3, r2
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d105      	bne.n	80086be <clear_lock+0x2a>
 80086b2:	4a09      	ldr	r2, [pc, #36]	@ (80086d8 <clear_lock+0x44>)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	011b      	lsls	r3, r3, #4
 80086b8:	4413      	add	r3, r2
 80086ba:	2200      	movs	r2, #0
 80086bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3301      	adds	r3, #1
 80086c2:	60fb      	str	r3, [r7, #12]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d9eb      	bls.n	80086a2 <clear_lock+0xe>
	}
}
 80086ca:	bf00      	nop
 80086cc:	bf00      	nop
 80086ce:	3714      	adds	r7, #20
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	20000c0c 	.word	0x20000c0c

080086dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	78db      	ldrb	r3, [r3, #3]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d034      	beq.n	800875a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	7858      	ldrb	r0, [r3, #1]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008700:	2301      	movs	r3, #1
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	f7ff fd40 	bl	8008188 <disk_write>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <sync_window+0x38>
			res = FR_DISK_ERR;
 800870e:	2301      	movs	r3, #1
 8008710:	73fb      	strb	r3, [r7, #15]
 8008712:	e022      	b.n	800875a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	1ad2      	subs	r2, r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	429a      	cmp	r2, r3
 8008728:	d217      	bcs.n	800875a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	789b      	ldrb	r3, [r3, #2]
 800872e:	613b      	str	r3, [r7, #16]
 8008730:	e010      	b.n	8008754 <sync_window+0x78>
					wsect += fs->fsize;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	4413      	add	r3, r2
 800873a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	7858      	ldrb	r0, [r3, #1]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008746:	2301      	movs	r3, #1
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	f7ff fd1d 	bl	8008188 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	3b01      	subs	r3, #1
 8008752:	613b      	str	r3, [r7, #16]
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d8eb      	bhi.n	8008732 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800875a:	7bfb      	ldrb	r3, [r7, #15]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	429a      	cmp	r2, r3
 800877a:	d01b      	beq.n	80087b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7ff ffad 	bl	80086dc <sync_window>
 8008782:	4603      	mov	r3, r0
 8008784:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d113      	bne.n	80087b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	7858      	ldrb	r0, [r3, #1]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008796:	2301      	movs	r3, #1
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	f7ff fcd5 	bl	8008148 <disk_read>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d004      	beq.n	80087ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80087a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80087a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff ff87 	bl	80086dc <sync_window>
 80087ce:	4603      	mov	r3, r0
 80087d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d158      	bne.n	800888a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d148      	bne.n	8008872 <sync_fs+0xb2>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	791b      	ldrb	r3, [r3, #4]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d144      	bne.n	8008872 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3330      	adds	r3, #48	@ 0x30
 80087ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087f0:	2100      	movs	r1, #0
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7ff fda9 	bl	800834a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3330      	adds	r3, #48	@ 0x30
 80087fc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008800:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff fd38 	bl	800827a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3330      	adds	r3, #48	@ 0x30
 800880e:	4921      	ldr	r1, [pc, #132]	@ (8008894 <sync_fs+0xd4>)
 8008810:	4618      	mov	r0, r3
 8008812:	f7ff fd4d 	bl	80082b0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	3330      	adds	r3, #48	@ 0x30
 800881a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800881e:	491e      	ldr	r1, [pc, #120]	@ (8008898 <sync_fs+0xd8>)
 8008820:	4618      	mov	r0, r3
 8008822:	f7ff fd45 	bl	80082b0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3330      	adds	r3, #48	@ 0x30
 800882a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	4619      	mov	r1, r3
 8008834:	4610      	mov	r0, r2
 8008836:	f7ff fd3b 	bl	80082b0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	3330      	adds	r3, #48	@ 0x30
 800883e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	4619      	mov	r1, r3
 8008848:	4610      	mov	r0, r2
 800884a:	f7ff fd31 	bl	80082b0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	1c5a      	adds	r2, r3, #1
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	7858      	ldrb	r0, [r3, #1]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008866:	2301      	movs	r3, #1
 8008868:	f7ff fc8e 	bl	8008188 <disk_write>
			fs->fsi_flag = 0;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	785b      	ldrb	r3, [r3, #1]
 8008876:	2200      	movs	r2, #0
 8008878:	2100      	movs	r1, #0
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff fca4 	bl	80081c8 <disk_ioctl>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <sync_fs+0xca>
 8008886:	2301      	movs	r3, #1
 8008888:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800888a:	7bfb      	ldrb	r3, [r7, #15]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	41615252 	.word	0x41615252
 8008898:	61417272 	.word	0x61417272

0800889c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	3b02      	subs	r3, #2
 80088aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	3b02      	subs	r3, #2
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d301      	bcc.n	80088bc <clust2sect+0x20>
 80088b8:	2300      	movs	r3, #0
 80088ba:	e008      	b.n	80088ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	895b      	ldrh	r3, [r3, #10]
 80088c0:	461a      	mov	r2, r3
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	fb03 f202 	mul.w	r2, r3, r2
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088cc:	4413      	add	r3, r2
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b086      	sub	sp, #24
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d904      	bls.n	80088fa <get_fat+0x20>
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d302      	bcc.n	8008900 <get_fat+0x26>
		val = 1;	/* Internal error */
 80088fa:	2301      	movs	r3, #1
 80088fc:	617b      	str	r3, [r7, #20]
 80088fe:	e08e      	b.n	8008a1e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008900:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008904:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b03      	cmp	r3, #3
 800890c:	d061      	beq.n	80089d2 <get_fat+0xf8>
 800890e:	2b03      	cmp	r3, #3
 8008910:	dc7b      	bgt.n	8008a0a <get_fat+0x130>
 8008912:	2b01      	cmp	r3, #1
 8008914:	d002      	beq.n	800891c <get_fat+0x42>
 8008916:	2b02      	cmp	r3, #2
 8008918:	d041      	beq.n	800899e <get_fat+0xc4>
 800891a:	e076      	b.n	8008a0a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	085b      	lsrs	r3, r3, #1
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	4413      	add	r3, r2
 8008928:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	6a1a      	ldr	r2, [r3, #32]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	0a5b      	lsrs	r3, r3, #9
 8008932:	4413      	add	r3, r2
 8008934:	4619      	mov	r1, r3
 8008936:	6938      	ldr	r0, [r7, #16]
 8008938:	f7ff ff14 	bl	8008764 <move_window>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d166      	bne.n	8008a10 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	60fa      	str	r2, [r7, #12]
 8008948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	4413      	add	r3, r2
 8008950:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008954:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	6a1a      	ldr	r2, [r3, #32]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	0a5b      	lsrs	r3, r3, #9
 800895e:	4413      	add	r3, r2
 8008960:	4619      	mov	r1, r3
 8008962:	6938      	ldr	r0, [r7, #16]
 8008964:	f7ff fefe 	bl	8008764 <move_window>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d152      	bne.n	8008a14 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	4413      	add	r3, r2
 8008978:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800897c:	021b      	lsls	r3, r3, #8
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	4313      	orrs	r3, r2
 8008982:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <get_fat+0xba>
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	091b      	lsrs	r3, r3, #4
 8008992:	e002      	b.n	800899a <get_fat+0xc0>
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800899a:	617b      	str	r3, [r7, #20]
			break;
 800899c:	e03f      	b.n	8008a1e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	6a1a      	ldr	r2, [r3, #32]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	0a1b      	lsrs	r3, r3, #8
 80089a6:	4413      	add	r3, r2
 80089a8:	4619      	mov	r1, r3
 80089aa:	6938      	ldr	r0, [r7, #16]
 80089ac:	f7ff feda 	bl	8008764 <move_window>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d130      	bne.n	8008a18 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80089c4:	4413      	add	r3, r2
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7ff fc1c 	bl	8008204 <ld_word>
 80089cc:	4603      	mov	r3, r0
 80089ce:	617b      	str	r3, [r7, #20]
			break;
 80089d0:	e025      	b.n	8008a1e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	6a1a      	ldr	r2, [r3, #32]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	09db      	lsrs	r3, r3, #7
 80089da:	4413      	add	r3, r2
 80089dc:	4619      	mov	r1, r3
 80089de:	6938      	ldr	r0, [r7, #16]
 80089e0:	f7ff fec0 	bl	8008764 <move_window>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d118      	bne.n	8008a1c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80089f8:	4413      	add	r3, r2
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff fc1a 	bl	8008234 <ld_dword>
 8008a00:	4603      	mov	r3, r0
 8008a02:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008a06:	617b      	str	r3, [r7, #20]
			break;
 8008a08:	e009      	b.n	8008a1e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	617b      	str	r3, [r7, #20]
 8008a0e:	e006      	b.n	8008a1e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a10:	bf00      	nop
 8008a12:	e004      	b.n	8008a1e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a14:	bf00      	nop
 8008a16:	e002      	b.n	8008a1e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008a18:	bf00      	nop
 8008a1a:	e000      	b.n	8008a1e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008a1c:	bf00      	nop
		}
	}

	return val;
 8008a1e:	697b      	ldr	r3, [r7, #20]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008a28:	b590      	push	{r4, r7, lr}
 8008a2a:	b089      	sub	sp, #36	@ 0x24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008a34:	2302      	movs	r3, #2
 8008a36:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	f240 80d9 	bls.w	8008bf2 <put_fat+0x1ca>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	f080 80d3 	bcs.w	8008bf2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	2b03      	cmp	r3, #3
 8008a52:	f000 8096 	beq.w	8008b82 <put_fat+0x15a>
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	f300 80cb 	bgt.w	8008bf2 <put_fat+0x1ca>
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d002      	beq.n	8008a66 <put_fat+0x3e>
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d06e      	beq.n	8008b42 <put_fat+0x11a>
 8008a64:	e0c5      	b.n	8008bf2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	61bb      	str	r3, [r7, #24]
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	085b      	lsrs	r3, r3, #1
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	4413      	add	r3, r2
 8008a72:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a1a      	ldr	r2, [r3, #32]
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	0a5b      	lsrs	r3, r3, #9
 8008a7c:	4413      	add	r3, r2
 8008a7e:	4619      	mov	r1, r3
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f7ff fe6f 	bl	8008764 <move_window>
 8008a86:	4603      	mov	r3, r0
 8008a88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a8a:	7ffb      	ldrb	r3, [r7, #31]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f040 80a9 	bne.w	8008be4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	1c59      	adds	r1, r3, #1
 8008a9c:	61b9      	str	r1, [r7, #24]
 8008a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa2:	4413      	add	r3, r2
 8008aa4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00d      	beq.n	8008acc <put_fat+0xa4>
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	b25b      	sxtb	r3, r3
 8008ab6:	f003 030f 	and.w	r3, r3, #15
 8008aba:	b25a      	sxtb	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	011b      	lsls	r3, r3, #4
 8008ac2:	b25b      	sxtb	r3, r3
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	b25b      	sxtb	r3, r3
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	e001      	b.n	8008ad0 <put_fat+0xa8>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6a1a      	ldr	r2, [r3, #32]
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	0a5b      	lsrs	r3, r3, #9
 8008ae2:	4413      	add	r3, r2
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f7ff fe3c 	bl	8008764 <move_window>
 8008aec:	4603      	mov	r3, r0
 8008aee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008af0:	7ffb      	ldrb	r3, [r7, #31]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d178      	bne.n	8008be8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b02:	4413      	add	r3, r2
 8008b04:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <put_fat+0xf0>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	091b      	lsrs	r3, r3, #4
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	e00e      	b.n	8008b36 <put_fat+0x10e>
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	b25b      	sxtb	r3, r3
 8008b1e:	f023 030f 	bic.w	r3, r3, #15
 8008b22:	b25a      	sxtb	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	0a1b      	lsrs	r3, r3, #8
 8008b28:	b25b      	sxtb	r3, r3
 8008b2a:	f003 030f 	and.w	r3, r3, #15
 8008b2e:	b25b      	sxtb	r3, r3
 8008b30:	4313      	orrs	r3, r2
 8008b32:	b25b      	sxtb	r3, r3
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	70da      	strb	r2, [r3, #3]
			break;
 8008b40:	e057      	b.n	8008bf2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6a1a      	ldr	r2, [r3, #32]
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	0a1b      	lsrs	r3, r3, #8
 8008b4a:	4413      	add	r3, r2
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f7ff fe08 	bl	8008764 <move_window>
 8008b54:	4603      	mov	r3, r0
 8008b56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b58:	7ffb      	ldrb	r3, [r7, #31]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d146      	bne.n	8008bec <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008b6c:	4413      	add	r3, r2
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	b292      	uxth	r2, r2
 8008b72:	4611      	mov	r1, r2
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7ff fb80 	bl	800827a <st_word>
			fs->wflag = 1;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	70da      	strb	r2, [r3, #3]
			break;
 8008b80:	e037      	b.n	8008bf2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6a1a      	ldr	r2, [r3, #32]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	09db      	lsrs	r3, r3, #7
 8008b8a:	4413      	add	r3, r2
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f7ff fde8 	bl	8008764 <move_window>
 8008b94:	4603      	mov	r3, r0
 8008b96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b98:	7ffb      	ldrb	r3, [r7, #31]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d128      	bne.n	8008bf0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008bb2:	4413      	add	r3, r2
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff fb3d 	bl	8008234 <ld_dword>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008bc0:	4323      	orrs	r3, r4
 8008bc2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008bd2:	4413      	add	r3, r2
 8008bd4:	6879      	ldr	r1, [r7, #4]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7ff fb6a 	bl	80082b0 <st_dword>
			fs->wflag = 1;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	70da      	strb	r2, [r3, #3]
			break;
 8008be2:	e006      	b.n	8008bf2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008be4:	bf00      	nop
 8008be6:	e004      	b.n	8008bf2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008be8:	bf00      	nop
 8008bea:	e002      	b.n	8008bf2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008bec:	bf00      	nop
 8008bee:	e000      	b.n	8008bf2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008bf0:	bf00      	nop
		}
	}
	return res;
 8008bf2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3724      	adds	r7, #36	@ 0x24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd90      	pop	{r4, r7, pc}

08008bfc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d904      	bls.n	8008c22 <remove_chain+0x26>
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	695b      	ldr	r3, [r3, #20]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d301      	bcc.n	8008c26 <remove_chain+0x2a>
 8008c22:	2302      	movs	r3, #2
 8008c24:	e04b      	b.n	8008cbe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00c      	beq.n	8008c46 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008c2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c30:	6879      	ldr	r1, [r7, #4]
 8008c32:	69b8      	ldr	r0, [r7, #24]
 8008c34:	f7ff fef8 	bl	8008a28 <put_fat>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008c3c:	7ffb      	ldrb	r3, [r7, #31]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <remove_chain+0x4a>
 8008c42:	7ffb      	ldrb	r3, [r7, #31]
 8008c44:	e03b      	b.n	8008cbe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008c46:	68b9      	ldr	r1, [r7, #8]
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f7ff fe46 	bl	80088da <get_fat>
 8008c4e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d031      	beq.n	8008cba <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d101      	bne.n	8008c60 <remove_chain+0x64>
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	e02e      	b.n	8008cbe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c66:	d101      	bne.n	8008c6c <remove_chain+0x70>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e028      	b.n	8008cbe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	69b8      	ldr	r0, [r7, #24]
 8008c72:	f7ff fed9 	bl	8008a28 <put_fat>
 8008c76:	4603      	mov	r3, r0
 8008c78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008c7a:	7ffb      	ldrb	r3, [r7, #31]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d001      	beq.n	8008c84 <remove_chain+0x88>
 8008c80:	7ffb      	ldrb	r3, [r7, #31]
 8008c82:	e01c      	b.n	8008cbe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	691a      	ldr	r2, [r3, #16]
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	695b      	ldr	r3, [r3, #20]
 8008c8c:	3b02      	subs	r3, #2
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d20b      	bcs.n	8008caa <remove_chain+0xae>
			fs->free_clst++;
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	791b      	ldrb	r3, [r3, #4]
 8008ca0:	f043 0301 	orr.w	r3, r3, #1
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d3c6      	bcc.n	8008c46 <remove_chain+0x4a>
 8008cb8:	e000      	b.n	8008cbc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008cba:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3720      	adds	r7, #32
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b088      	sub	sp, #32
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10d      	bne.n	8008cf8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d004      	beq.n	8008cf2 <create_chain+0x2c>
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d31b      	bcc.n	8008d2a <create_chain+0x64>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	61bb      	str	r3, [r7, #24]
 8008cf6:	e018      	b.n	8008d2a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7ff fded 	bl	80088da <get_fat>
 8008d00:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d801      	bhi.n	8008d0c <create_chain+0x46>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e070      	b.n	8008dee <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d12:	d101      	bne.n	8008d18 <create_chain+0x52>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	e06a      	b.n	8008dee <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d201      	bcs.n	8008d26 <create_chain+0x60>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	e063      	b.n	8008dee <create_chain+0x128>
		scl = clst;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	3301      	adds	r3, #1
 8008d32:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	69fa      	ldr	r2, [r7, #28]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d307      	bcc.n	8008d4e <create_chain+0x88>
				ncl = 2;
 8008d3e:	2302      	movs	r3, #2
 8008d40:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008d42:	69fa      	ldr	r2, [r7, #28]
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d901      	bls.n	8008d4e <create_chain+0x88>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	e04f      	b.n	8008dee <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008d4e:	69f9      	ldr	r1, [r7, #28]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff fdc2 	bl	80088da <get_fat>
 8008d56:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00e      	beq.n	8008d7c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d003      	beq.n	8008d6c <create_chain+0xa6>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d6a:	d101      	bne.n	8008d70 <create_chain+0xaa>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	e03e      	b.n	8008dee <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008d70:	69fa      	ldr	r2, [r7, #28]
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d1da      	bne.n	8008d2e <create_chain+0x68>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	e038      	b.n	8008dee <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008d7c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008d7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d82:	69f9      	ldr	r1, [r7, #28]
 8008d84:	6938      	ldr	r0, [r7, #16]
 8008d86:	f7ff fe4f 	bl	8008a28 <put_fat>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d109      	bne.n	8008da8 <create_chain+0xe2>
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d006      	beq.n	8008da8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008d9a:	69fa      	ldr	r2, [r7, #28]
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6938      	ldr	r0, [r7, #16]
 8008da0:	f7ff fe42 	bl	8008a28 <put_fat>
 8008da4:	4603      	mov	r3, r0
 8008da6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008da8:	7dfb      	ldrb	r3, [r7, #23]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d116      	bne.n	8008ddc <create_chain+0x116>
		fs->last_clst = ncl;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	69fa      	ldr	r2, [r7, #28]
 8008db2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	691a      	ldr	r2, [r3, #16]
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	695b      	ldr	r3, [r3, #20]
 8008dbc:	3b02      	subs	r3, #2
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d804      	bhi.n	8008dcc <create_chain+0x106>
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	1e5a      	subs	r2, r3, #1
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	791b      	ldrb	r3, [r3, #4]
 8008dd0:	f043 0301 	orr.w	r3, r3, #1
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	711a      	strb	r2, [r3, #4]
 8008dda:	e007      	b.n	8008dec <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d102      	bne.n	8008de8 <create_chain+0x122>
 8008de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008de6:	e000      	b.n	8008dea <create_chain+0x124>
 8008de8:	2301      	movs	r3, #1
 8008dea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008dec:	69fb      	ldr	r3, [r7, #28]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3720      	adds	r7, #32
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b087      	sub	sp, #28
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e0a:	3304      	adds	r3, #4
 8008e0c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	0a5b      	lsrs	r3, r3, #9
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	8952      	ldrh	r2, [r2, #10]
 8008e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e1a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	1d1a      	adds	r2, r3, #4
 8008e20:	613a      	str	r2, [r7, #16]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d101      	bne.n	8008e30 <clmt_clust+0x3a>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	e010      	b.n	8008e52 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d307      	bcc.n	8008e48 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	3304      	adds	r3, #4
 8008e44:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e46:	e7e9      	b.n	8008e1c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008e48:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	4413      	add	r3, r2
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b086      	sub	sp, #24
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e74:	d204      	bcs.n	8008e80 <dir_sdi+0x22>
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	f003 031f 	and.w	r3, r3, #31
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008e80:	2302      	movs	r3, #2
 8008e82:	e063      	b.n	8008f4c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d106      	bne.n	8008ea4 <dir_sdi+0x46>
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d902      	bls.n	8008ea4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10c      	bne.n	8008ec4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	095b      	lsrs	r3, r3, #5
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	8912      	ldrh	r2, [r2, #8]
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d301      	bcc.n	8008eba <dir_sdi+0x5c>
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	e048      	b.n	8008f4c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	61da      	str	r2, [r3, #28]
 8008ec2:	e029      	b.n	8008f18 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	895b      	ldrh	r3, [r3, #10]
 8008ec8:	025b      	lsls	r3, r3, #9
 8008eca:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ecc:	e019      	b.n	8008f02 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6979      	ldr	r1, [r7, #20]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7ff fd01 	bl	80088da <get_fat>
 8008ed8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ee0:	d101      	bne.n	8008ee6 <dir_sdi+0x88>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e032      	b.n	8008f4c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d904      	bls.n	8008ef6 <dir_sdi+0x98>
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d301      	bcc.n	8008efa <dir_sdi+0x9c>
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	e028      	b.n	8008f4c <dir_sdi+0xee>
			ofs -= csz;
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d2e1      	bcs.n	8008ece <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008f0a:	6979      	ldr	r1, [r7, #20]
 8008f0c:	6938      	ldr	r0, [r7, #16]
 8008f0e:	f7ff fcc5 	bl	800889c <clust2sect>
 8008f12:	4602      	mov	r2, r0
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d101      	bne.n	8008f2a <dir_sdi+0xcc>
 8008f26:	2302      	movs	r3, #2
 8008f28:	e010      	b.n	8008f4c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	69da      	ldr	r2, [r3, #28]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	0a5b      	lsrs	r3, r3, #9
 8008f32:	441a      	add	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f44:	441a      	add	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	3320      	adds	r3, #32
 8008f6a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d003      	beq.n	8008f7c <dir_next+0x28>
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f7a:	d301      	bcc.n	8008f80 <dir_next+0x2c>
 8008f7c:	2304      	movs	r3, #4
 8008f7e:	e0aa      	b.n	80090d6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f040 8098 	bne.w	80090bc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	1c5a      	adds	r2, r3, #1
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10b      	bne.n	8008fb6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	095b      	lsrs	r3, r3, #5
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	8912      	ldrh	r2, [r2, #8]
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	f0c0 8088 	bcc.w	80090bc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	61da      	str	r2, [r3, #28]
 8008fb2:	2304      	movs	r3, #4
 8008fb4:	e08f      	b.n	80090d6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	0a5b      	lsrs	r3, r3, #9
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	8952      	ldrh	r2, [r2, #10]
 8008fbe:	3a01      	subs	r2, #1
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d17a      	bne.n	80090bc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	4610      	mov	r0, r2
 8008fd0:	f7ff fc83 	bl	80088da <get_fat>
 8008fd4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d801      	bhi.n	8008fe0 <dir_next+0x8c>
 8008fdc:	2302      	movs	r3, #2
 8008fde:	e07a      	b.n	80090d6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fe6:	d101      	bne.n	8008fec <dir_next+0x98>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e074      	b.n	80090d6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	695b      	ldr	r3, [r3, #20]
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d358      	bcc.n	80090a8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d104      	bne.n	8009006 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	61da      	str	r2, [r3, #28]
 8009002:	2304      	movs	r3, #4
 8009004:	e067      	b.n	80090d6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	f7ff fe59 	bl	8008cc6 <create_chain>
 8009014:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d101      	bne.n	8009020 <dir_next+0xcc>
 800901c:	2307      	movs	r3, #7
 800901e:	e05a      	b.n	80090d6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d101      	bne.n	800902a <dir_next+0xd6>
 8009026:	2302      	movs	r3, #2
 8009028:	e055      	b.n	80090d6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009030:	d101      	bne.n	8009036 <dir_next+0xe2>
 8009032:	2301      	movs	r3, #1
 8009034:	e04f      	b.n	80090d6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f7ff fb50 	bl	80086dc <sync_window>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <dir_next+0xf2>
 8009042:	2301      	movs	r3, #1
 8009044:	e047      	b.n	80090d6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3330      	adds	r3, #48	@ 0x30
 800904a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800904e:	2100      	movs	r1, #0
 8009050:	4618      	mov	r0, r3
 8009052:	f7ff f97a 	bl	800834a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009056:	2300      	movs	r3, #0
 8009058:	613b      	str	r3, [r7, #16]
 800905a:	6979      	ldr	r1, [r7, #20]
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f7ff fc1d 	bl	800889c <clust2sect>
 8009062:	4602      	mov	r2, r0
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009068:	e012      	b.n	8009090 <dir_next+0x13c>
						fs->wflag = 1;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2201      	movs	r2, #1
 800906e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f7ff fb33 	bl	80086dc <sync_window>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <dir_next+0x12c>
 800907c:	2301      	movs	r3, #1
 800907e:	e02a      	b.n	80090d6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	3301      	adds	r3, #1
 8009084:	613b      	str	r3, [r7, #16]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908a:	1c5a      	adds	r2, r3, #1
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	895b      	ldrh	r3, [r3, #10]
 8009094:	461a      	mov	r2, r3
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	4293      	cmp	r3, r2
 800909a:	d3e6      	bcc.n	800906a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	1ad2      	subs	r2, r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80090ae:	6979      	ldr	r1, [r7, #20]
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f7ff fbf3 	bl	800889c <clust2sect>
 80090b6:	4602      	mov	r2, r0
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ce:	441a      	add	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b086      	sub	sp, #24
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80090ee:	2100      	movs	r1, #0
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff feb4 	bl	8008e5e <dir_sdi>
 80090f6:	4603      	mov	r3, r0
 80090f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80090fa:	7dfb      	ldrb	r3, [r7, #23]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d12b      	bne.n	8009158 <dir_alloc+0x7a>
		n = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	4619      	mov	r1, r3
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f7ff fb2a 	bl	8008764 <move_window>
 8009110:	4603      	mov	r3, r0
 8009112:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009114:	7dfb      	ldrb	r3, [r7, #23]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d11d      	bne.n	8009156 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	2be5      	cmp	r3, #229	@ 0xe5
 8009122:	d004      	beq.n	800912e <dir_alloc+0x50>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a1b      	ldr	r3, [r3, #32]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d107      	bne.n	800913e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	3301      	adds	r3, #1
 8009132:	613b      	str	r3, [r7, #16]
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	429a      	cmp	r2, r3
 800913a:	d102      	bne.n	8009142 <dir_alloc+0x64>
 800913c:	e00c      	b.n	8009158 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800913e:	2300      	movs	r3, #0
 8009140:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009142:	2101      	movs	r1, #1
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff ff05 	bl	8008f54 <dir_next>
 800914a:	4603      	mov	r3, r0
 800914c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800914e:	7dfb      	ldrb	r3, [r7, #23]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0d7      	beq.n	8009104 <dir_alloc+0x26>
 8009154:	e000      	b.n	8009158 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009156:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	2b04      	cmp	r3, #4
 800915c:	d101      	bne.n	8009162 <dir_alloc+0x84>
 800915e:	2307      	movs	r3, #7
 8009160:	75fb      	strb	r3, [r7, #23]
	return res;
 8009162:	7dfb      	ldrb	r3, [r7, #23]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	331a      	adds	r3, #26
 800917a:	4618      	mov	r0, r3
 800917c:	f7ff f842 	bl	8008204 <ld_word>
 8009180:	4603      	mov	r3, r0
 8009182:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	2b03      	cmp	r3, #3
 800918a:	d109      	bne.n	80091a0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	3314      	adds	r3, #20
 8009190:	4618      	mov	r0, r3
 8009192:	f7ff f837 	bl	8008204 <ld_word>
 8009196:	4603      	mov	r3, r0
 8009198:	041b      	lsls	r3, r3, #16
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	4313      	orrs	r3, r2
 800919e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80091a0:	68fb      	ldr	r3, [r7, #12]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	331a      	adds	r3, #26
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	b292      	uxth	r2, r2
 80091be:	4611      	mov	r1, r2
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7ff f85a 	bl	800827a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d109      	bne.n	80091e2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	f103 0214 	add.w	r2, r3, #20
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	0c1b      	lsrs	r3, r3, #16
 80091d8:	b29b      	uxth	r3, r3
 80091da:	4619      	mov	r1, r3
 80091dc:	4610      	mov	r0, r2
 80091de:	f7ff f84c 	bl	800827a <st_word>
	}
}
 80091e2:	bf00      	nop
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b086      	sub	sp, #24
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80091f8:	2100      	movs	r1, #0
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff fe2f 	bl	8008e5e <dir_sdi>
 8009200:	4603      	mov	r3, r0
 8009202:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009204:	7dfb      	ldrb	r3, [r7, #23]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <dir_find+0x24>
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	e03e      	b.n	800928c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	4619      	mov	r1, r3
 8009214:	6938      	ldr	r0, [r7, #16]
 8009216:	f7ff faa5 	bl	8008764 <move_window>
 800921a:	4603      	mov	r3, r0
 800921c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800921e:	7dfb      	ldrb	r3, [r7, #23]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d12f      	bne.n	8009284 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800922c:	7bfb      	ldrb	r3, [r7, #15]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d102      	bne.n	8009238 <dir_find+0x4e>
 8009232:	2304      	movs	r3, #4
 8009234:	75fb      	strb	r3, [r7, #23]
 8009236:	e028      	b.n	800928a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a1b      	ldr	r3, [r3, #32]
 800923c:	330b      	adds	r3, #11
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009244:	b2da      	uxtb	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	330b      	adds	r3, #11
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	f003 0308 	and.w	r3, r3, #8
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10a      	bne.n	8009270 <dir_find+0x86>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a18      	ldr	r0, [r3, #32]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	3324      	adds	r3, #36	@ 0x24
 8009262:	220b      	movs	r2, #11
 8009264:	4619      	mov	r1, r3
 8009266:	f7ff f88b 	bl	8008380 <mem_cmp>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00b      	beq.n	8009288 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009270:	2100      	movs	r1, #0
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7ff fe6e 	bl	8008f54 <dir_next>
 8009278:	4603      	mov	r3, r0
 800927a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0c5      	beq.n	800920e <dir_find+0x24>
 8009282:	e002      	b.n	800928a <dir_find+0xa0>
		if (res != FR_OK) break;
 8009284:	bf00      	nop
 8009286:	e000      	b.n	800928a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009288:	bf00      	nop

	return res;
 800928a:	7dfb      	ldrb	r3, [r7, #23]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3718      	adds	r7, #24
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80092a2:	2101      	movs	r1, #1
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7ff ff1a 	bl	80090de <dir_alloc>
 80092aa:	4603      	mov	r3, r0
 80092ac:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d11c      	bne.n	80092ee <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	69db      	ldr	r3, [r3, #28]
 80092b8:	4619      	mov	r1, r3
 80092ba:	68b8      	ldr	r0, [r7, #8]
 80092bc:	f7ff fa52 	bl	8008764 <move_window>
 80092c0:	4603      	mov	r3, r0
 80092c2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d111      	bne.n	80092ee <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	2220      	movs	r2, #32
 80092d0:	2100      	movs	r1, #0
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7ff f839 	bl	800834a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a18      	ldr	r0, [r3, #32]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	3324      	adds	r3, #36	@ 0x24
 80092e0:	220b      	movs	r2, #11
 80092e2:	4619      	mov	r1, r3
 80092e4:	f7ff f810 	bl	8008308 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	2201      	movs	r2, #1
 80092ec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b088      	sub	sp, #32
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	3324      	adds	r3, #36	@ 0x24
 800930c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800930e:	220b      	movs	r2, #11
 8009310:	2120      	movs	r1, #32
 8009312:	68b8      	ldr	r0, [r7, #8]
 8009314:	f7ff f819 	bl	800834a <mem_set>
	si = i = 0; ni = 8;
 8009318:	2300      	movs	r3, #0
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	61fb      	str	r3, [r7, #28]
 8009320:	2308      	movs	r3, #8
 8009322:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	1c5a      	adds	r2, r3, #1
 8009328:	61fa      	str	r2, [r7, #28]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	4413      	add	r3, r2
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009332:	7efb      	ldrb	r3, [r7, #27]
 8009334:	2b20      	cmp	r3, #32
 8009336:	d94e      	bls.n	80093d6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009338:	7efb      	ldrb	r3, [r7, #27]
 800933a:	2b2f      	cmp	r3, #47	@ 0x2f
 800933c:	d006      	beq.n	800934c <create_name+0x54>
 800933e:	7efb      	ldrb	r3, [r7, #27]
 8009340:	2b5c      	cmp	r3, #92	@ 0x5c
 8009342:	d110      	bne.n	8009366 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009344:	e002      	b.n	800934c <create_name+0x54>
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	3301      	adds	r3, #1
 800934a:	61fb      	str	r3, [r7, #28]
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	4413      	add	r3, r2
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b2f      	cmp	r3, #47	@ 0x2f
 8009356:	d0f6      	beq.n	8009346 <create_name+0x4e>
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	4413      	add	r3, r2
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	2b5c      	cmp	r3, #92	@ 0x5c
 8009362:	d0f0      	beq.n	8009346 <create_name+0x4e>
			break;
 8009364:	e038      	b.n	80093d8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009366:	7efb      	ldrb	r3, [r7, #27]
 8009368:	2b2e      	cmp	r3, #46	@ 0x2e
 800936a:	d003      	beq.n	8009374 <create_name+0x7c>
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	429a      	cmp	r2, r3
 8009372:	d30c      	bcc.n	800938e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	2b0b      	cmp	r3, #11
 8009378:	d002      	beq.n	8009380 <create_name+0x88>
 800937a:	7efb      	ldrb	r3, [r7, #27]
 800937c:	2b2e      	cmp	r3, #46	@ 0x2e
 800937e:	d001      	beq.n	8009384 <create_name+0x8c>
 8009380:	2306      	movs	r3, #6
 8009382:	e044      	b.n	800940e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009384:	2308      	movs	r3, #8
 8009386:	613b      	str	r3, [r7, #16]
 8009388:	230b      	movs	r3, #11
 800938a:	617b      	str	r3, [r7, #20]
			continue;
 800938c:	e022      	b.n	80093d4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800938e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009392:	2b00      	cmp	r3, #0
 8009394:	da04      	bge.n	80093a0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009396:	7efb      	ldrb	r3, [r7, #27]
 8009398:	3b80      	subs	r3, #128	@ 0x80
 800939a:	4a1f      	ldr	r2, [pc, #124]	@ (8009418 <create_name+0x120>)
 800939c:	5cd3      	ldrb	r3, [r2, r3]
 800939e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80093a0:	7efb      	ldrb	r3, [r7, #27]
 80093a2:	4619      	mov	r1, r3
 80093a4:	481d      	ldr	r0, [pc, #116]	@ (800941c <create_name+0x124>)
 80093a6:	f7ff f812 	bl	80083ce <chk_chr>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <create_name+0xbc>
 80093b0:	2306      	movs	r3, #6
 80093b2:	e02c      	b.n	800940e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80093b4:	7efb      	ldrb	r3, [r7, #27]
 80093b6:	2b60      	cmp	r3, #96	@ 0x60
 80093b8:	d905      	bls.n	80093c6 <create_name+0xce>
 80093ba:	7efb      	ldrb	r3, [r7, #27]
 80093bc:	2b7a      	cmp	r3, #122	@ 0x7a
 80093be:	d802      	bhi.n	80093c6 <create_name+0xce>
 80093c0:	7efb      	ldrb	r3, [r7, #27]
 80093c2:	3b20      	subs	r3, #32
 80093c4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	613a      	str	r2, [r7, #16]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	4413      	add	r3, r2
 80093d0:	7efa      	ldrb	r2, [r7, #27]
 80093d2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80093d4:	e7a6      	b.n	8009324 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80093d6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	441a      	add	r2, r3
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <create_name+0xf4>
 80093e8:	2306      	movs	r3, #6
 80093ea:	e010      	b.n	800940e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2be5      	cmp	r3, #229	@ 0xe5
 80093f2:	d102      	bne.n	80093fa <create_name+0x102>
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2205      	movs	r2, #5
 80093f8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80093fa:	7efb      	ldrb	r3, [r7, #27]
 80093fc:	2b20      	cmp	r3, #32
 80093fe:	d801      	bhi.n	8009404 <create_name+0x10c>
 8009400:	2204      	movs	r2, #4
 8009402:	e000      	b.n	8009406 <create_name+0x10e>
 8009404:	2200      	movs	r2, #0
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	330b      	adds	r3, #11
 800940a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800940c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800940e:	4618      	mov	r0, r3
 8009410:	3720      	adds	r7, #32
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	0800d7a8 	.word	0x0800d7a8
 800941c:	0800d74c 	.word	0x0800d74c

08009420 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009434:	e002      	b.n	800943c <follow_path+0x1c>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	3301      	adds	r3, #1
 800943a:	603b      	str	r3, [r7, #0]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b2f      	cmp	r3, #47	@ 0x2f
 8009442:	d0f8      	beq.n	8009436 <follow_path+0x16>
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b5c      	cmp	r3, #92	@ 0x5c
 800944a:	d0f4      	beq.n	8009436 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	2200      	movs	r2, #0
 8009450:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	2b1f      	cmp	r3, #31
 8009458:	d80a      	bhi.n	8009470 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2280      	movs	r2, #128	@ 0x80
 800945e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009462:	2100      	movs	r1, #0
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7ff fcfa 	bl	8008e5e <dir_sdi>
 800946a:	4603      	mov	r3, r0
 800946c:	75fb      	strb	r3, [r7, #23]
 800946e:	e043      	b.n	80094f8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009470:	463b      	mov	r3, r7
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff ff3f 	bl	80092f8 <create_name>
 800947a:	4603      	mov	r3, r0
 800947c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800947e:	7dfb      	ldrb	r3, [r7, #23]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d134      	bne.n	80094ee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7ff feb0 	bl	80091ea <dir_find>
 800948a:	4603      	mov	r3, r0
 800948c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009494:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00a      	beq.n	80094b2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800949c:	7dfb      	ldrb	r3, [r7, #23]
 800949e:	2b04      	cmp	r3, #4
 80094a0:	d127      	bne.n	80094f2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80094a2:	7afb      	ldrb	r3, [r7, #11]
 80094a4:	f003 0304 	and.w	r3, r3, #4
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d122      	bne.n	80094f2 <follow_path+0xd2>
 80094ac:	2305      	movs	r3, #5
 80094ae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80094b0:	e01f      	b.n	80094f2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80094b2:	7afb      	ldrb	r3, [r7, #11]
 80094b4:	f003 0304 	and.w	r3, r3, #4
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d11c      	bne.n	80094f6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	799b      	ldrb	r3, [r3, #6]
 80094c0:	f003 0310 	and.w	r3, r3, #16
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d102      	bne.n	80094ce <follow_path+0xae>
				res = FR_NO_PATH; break;
 80094c8:	2305      	movs	r3, #5
 80094ca:	75fb      	strb	r3, [r7, #23]
 80094cc:	e014      	b.n	80094f8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094dc:	4413      	add	r3, r2
 80094de:	4619      	mov	r1, r3
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f7ff fe43 	bl	800916c <ld_clust>
 80094e6:	4602      	mov	r2, r0
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80094ec:	e7c0      	b.n	8009470 <follow_path+0x50>
			if (res != FR_OK) break;
 80094ee:	bf00      	nop
 80094f0:	e002      	b.n	80094f8 <follow_path+0xd8>
				break;
 80094f2:	bf00      	nop
 80094f4:	e000      	b.n	80094f8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80094f6:	bf00      	nop
			}
		}
	}

	return res;
 80094f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3718      	adds	r7, #24
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009502:	b480      	push	{r7}
 8009504:	b087      	sub	sp, #28
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800950a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800950e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d031      	beq.n	800957c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	617b      	str	r3, [r7, #20]
 800951e:	e002      	b.n	8009526 <get_ldnumber+0x24>
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	3301      	adds	r3, #1
 8009524:	617b      	str	r3, [r7, #20]
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	2b20      	cmp	r3, #32
 800952c:	d903      	bls.n	8009536 <get_ldnumber+0x34>
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b3a      	cmp	r3, #58	@ 0x3a
 8009534:	d1f4      	bne.n	8009520 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	2b3a      	cmp	r3, #58	@ 0x3a
 800953c:	d11c      	bne.n	8009578 <get_ldnumber+0x76>
			tp = *path;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	1c5a      	adds	r2, r3, #1
 8009548:	60fa      	str	r2, [r7, #12]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	3b30      	subs	r3, #48	@ 0x30
 800954e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	2b09      	cmp	r3, #9
 8009554:	d80e      	bhi.n	8009574 <get_ldnumber+0x72>
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	429a      	cmp	r2, r3
 800955c:	d10a      	bne.n	8009574 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d107      	bne.n	8009574 <get_ldnumber+0x72>
					vol = (int)i;
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	3301      	adds	r3, #1
 800956c:	617b      	str	r3, [r7, #20]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	e002      	b.n	800957e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009578:	2300      	movs	r3, #0
 800957a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800957c:	693b      	ldr	r3, [r7, #16]
}
 800957e:	4618      	mov	r0, r3
 8009580:	371c      	adds	r7, #28
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
	...

0800958c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	70da      	strb	r2, [r3, #3]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff f8dc 	bl	8008764 <move_window>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <check_fs+0x2a>
 80095b2:	2304      	movs	r3, #4
 80095b4:	e038      	b.n	8009628 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	3330      	adds	r3, #48	@ 0x30
 80095ba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe fe20 	bl	8008204 <ld_word>
 80095c4:	4603      	mov	r3, r0
 80095c6:	461a      	mov	r2, r3
 80095c8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d001      	beq.n	80095d4 <check_fs+0x48>
 80095d0:	2303      	movs	r3, #3
 80095d2:	e029      	b.n	8009628 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80095da:	2be9      	cmp	r3, #233	@ 0xe9
 80095dc:	d009      	beq.n	80095f2 <check_fs+0x66>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80095e4:	2beb      	cmp	r3, #235	@ 0xeb
 80095e6:	d11e      	bne.n	8009626 <check_fs+0x9a>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80095ee:	2b90      	cmp	r3, #144	@ 0x90
 80095f0:	d119      	bne.n	8009626 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	3330      	adds	r3, #48	@ 0x30
 80095f6:	3336      	adds	r3, #54	@ 0x36
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fe fe1b 	bl	8008234 <ld_dword>
 80095fe:	4603      	mov	r3, r0
 8009600:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009604:	4a0a      	ldr	r2, [pc, #40]	@ (8009630 <check_fs+0xa4>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d101      	bne.n	800960e <check_fs+0x82>
 800960a:	2300      	movs	r3, #0
 800960c:	e00c      	b.n	8009628 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3330      	adds	r3, #48	@ 0x30
 8009612:	3352      	adds	r3, #82	@ 0x52
 8009614:	4618      	mov	r0, r3
 8009616:	f7fe fe0d 	bl	8008234 <ld_dword>
 800961a:	4603      	mov	r3, r0
 800961c:	4a05      	ldr	r2, [pc, #20]	@ (8009634 <check_fs+0xa8>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d101      	bne.n	8009626 <check_fs+0x9a>
 8009622:	2300      	movs	r3, #0
 8009624:	e000      	b.n	8009628 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009626:	2302      	movs	r3, #2
}
 8009628:	4618      	mov	r0, r3
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	00544146 	.word	0x00544146
 8009634:	33544146 	.word	0x33544146

08009638 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b096      	sub	sp, #88	@ 0x58
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	4613      	mov	r3, r2
 8009644:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2200      	movs	r2, #0
 800964a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f7ff ff58 	bl	8009502 <get_ldnumber>
 8009652:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009656:	2b00      	cmp	r3, #0
 8009658:	da01      	bge.n	800965e <find_volume+0x26>
 800965a:	230b      	movs	r3, #11
 800965c:	e22d      	b.n	8009aba <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800965e:	4aa1      	ldr	r2, [pc, #644]	@ (80098e4 <find_volume+0x2ac>)
 8009660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009666:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <find_volume+0x3a>
 800966e:	230c      	movs	r3, #12
 8009670:	e223      	b.n	8009aba <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009676:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009678:	79fb      	ldrb	r3, [r7, #7]
 800967a:	f023 0301 	bic.w	r3, r3, #1
 800967e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d01a      	beq.n	80096be <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968a:	785b      	ldrb	r3, [r3, #1]
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe fd1b 	bl	80080c8 <disk_status>
 8009692:	4603      	mov	r3, r0
 8009694:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009698:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800969c:	f003 0301 	and.w	r3, r3, #1
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10c      	bne.n	80096be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80096a4:	79fb      	ldrb	r3, [r7, #7]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d007      	beq.n	80096ba <find_volume+0x82>
 80096aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80096ae:	f003 0304 	and.w	r3, r3, #4
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d001      	beq.n	80096ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80096b6:	230a      	movs	r3, #10
 80096b8:	e1ff      	b.n	8009aba <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80096ba:	2300      	movs	r3, #0
 80096bc:	e1fd      	b.n	8009aba <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80096be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c0:	2200      	movs	r2, #0
 80096c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80096c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80096cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ce:	785b      	ldrb	r3, [r3, #1]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7fe fd13 	bl	80080fc <disk_initialize>
 80096d6:	4603      	mov	r3, r0
 80096d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80096dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80096e0:	f003 0301 	and.w	r3, r3, #1
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80096e8:	2303      	movs	r3, #3
 80096ea:	e1e6      	b.n	8009aba <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80096ec:	79fb      	ldrb	r3, [r7, #7]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d007      	beq.n	8009702 <find_volume+0xca>
 80096f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80096f6:	f003 0304 	and.w	r3, r3, #4
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80096fe:	230a      	movs	r3, #10
 8009700:	e1db      	b.n	8009aba <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009706:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009708:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800970a:	f7ff ff3f 	bl	800958c <check_fs>
 800970e:	4603      	mov	r3, r0
 8009710:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009714:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009718:	2b02      	cmp	r3, #2
 800971a:	d149      	bne.n	80097b0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800971c:	2300      	movs	r3, #0
 800971e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009720:	e01e      	b.n	8009760 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009724:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800972a:	011b      	lsls	r3, r3, #4
 800972c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009730:	4413      	add	r3, r2
 8009732:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009736:	3304      	adds	r3, #4
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d006      	beq.n	800974c <find_volume+0x114>
 800973e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009740:	3308      	adds	r3, #8
 8009742:	4618      	mov	r0, r3
 8009744:	f7fe fd76 	bl	8008234 <ld_dword>
 8009748:	4602      	mov	r2, r0
 800974a:	e000      	b.n	800974e <find_volume+0x116>
 800974c:	2200      	movs	r2, #0
 800974e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	3358      	adds	r3, #88	@ 0x58
 8009754:	443b      	add	r3, r7
 8009756:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800975a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800975c:	3301      	adds	r3, #1
 800975e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009762:	2b03      	cmp	r3, #3
 8009764:	d9dd      	bls.n	8009722 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009766:	2300      	movs	r3, #0
 8009768:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800976a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <find_volume+0x13e>
 8009770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009772:	3b01      	subs	r3, #1
 8009774:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	3358      	adds	r3, #88	@ 0x58
 800977c:	443b      	add	r3, r7
 800977e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009782:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009786:	2b00      	cmp	r3, #0
 8009788:	d005      	beq.n	8009796 <find_volume+0x15e>
 800978a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800978c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800978e:	f7ff fefd 	bl	800958c <check_fs>
 8009792:	4603      	mov	r3, r0
 8009794:	e000      	b.n	8009798 <find_volume+0x160>
 8009796:	2303      	movs	r3, #3
 8009798:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800979c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d905      	bls.n	80097b0 <find_volume+0x178>
 80097a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097a6:	3301      	adds	r3, #1
 80097a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80097aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097ac:	2b03      	cmp	r3, #3
 80097ae:	d9e2      	bls.n	8009776 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80097b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80097b4:	2b04      	cmp	r3, #4
 80097b6:	d101      	bne.n	80097bc <find_volume+0x184>
 80097b8:	2301      	movs	r3, #1
 80097ba:	e17e      	b.n	8009aba <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80097bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d901      	bls.n	80097c8 <find_volume+0x190>
 80097c4:	230d      	movs	r3, #13
 80097c6:	e178      	b.n	8009aba <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80097c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ca:	3330      	adds	r3, #48	@ 0x30
 80097cc:	330b      	adds	r3, #11
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fe fd18 	bl	8008204 <ld_word>
 80097d4:	4603      	mov	r3, r0
 80097d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097da:	d001      	beq.n	80097e0 <find_volume+0x1a8>
 80097dc:	230d      	movs	r3, #13
 80097de:	e16c      	b.n	8009aba <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80097e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e2:	3330      	adds	r3, #48	@ 0x30
 80097e4:	3316      	adds	r3, #22
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe fd0c 	bl	8008204 <ld_word>
 80097ec:	4603      	mov	r3, r0
 80097ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80097f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d106      	bne.n	8009804 <find_volume+0x1cc>
 80097f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f8:	3330      	adds	r3, #48	@ 0x30
 80097fa:	3324      	adds	r3, #36	@ 0x24
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe fd19 	bl	8008234 <ld_dword>
 8009802:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009806:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009808:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800980a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009812:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009816:	789b      	ldrb	r3, [r3, #2]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d005      	beq.n	8009828 <find_volume+0x1f0>
 800981c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981e:	789b      	ldrb	r3, [r3, #2]
 8009820:	2b02      	cmp	r3, #2
 8009822:	d001      	beq.n	8009828 <find_volume+0x1f0>
 8009824:	230d      	movs	r3, #13
 8009826:	e148      	b.n	8009aba <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982a:	789b      	ldrb	r3, [r3, #2]
 800982c:	461a      	mov	r2, r3
 800982e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009830:	fb02 f303 	mul.w	r3, r2, r3
 8009834:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800983c:	461a      	mov	r2, r3
 800983e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009840:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009844:	895b      	ldrh	r3, [r3, #10]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d008      	beq.n	800985c <find_volume+0x224>
 800984a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984c:	895b      	ldrh	r3, [r3, #10]
 800984e:	461a      	mov	r2, r3
 8009850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009852:	895b      	ldrh	r3, [r3, #10]
 8009854:	3b01      	subs	r3, #1
 8009856:	4013      	ands	r3, r2
 8009858:	2b00      	cmp	r3, #0
 800985a:	d001      	beq.n	8009860 <find_volume+0x228>
 800985c:	230d      	movs	r3, #13
 800985e:	e12c      	b.n	8009aba <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009862:	3330      	adds	r3, #48	@ 0x30
 8009864:	3311      	adds	r3, #17
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe fccc 	bl	8008204 <ld_word>
 800986c:	4603      	mov	r3, r0
 800986e:	461a      	mov	r2, r3
 8009870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009872:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009876:	891b      	ldrh	r3, [r3, #8]
 8009878:	f003 030f 	and.w	r3, r3, #15
 800987c:	b29b      	uxth	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <find_volume+0x24e>
 8009882:	230d      	movs	r3, #13
 8009884:	e119      	b.n	8009aba <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009888:	3330      	adds	r3, #48	@ 0x30
 800988a:	3313      	adds	r3, #19
 800988c:	4618      	mov	r0, r3
 800988e:	f7fe fcb9 	bl	8008204 <ld_word>
 8009892:	4603      	mov	r3, r0
 8009894:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009898:	2b00      	cmp	r3, #0
 800989a:	d106      	bne.n	80098aa <find_volume+0x272>
 800989c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989e:	3330      	adds	r3, #48	@ 0x30
 80098a0:	3320      	adds	r3, #32
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fe fcc6 	bl	8008234 <ld_dword>
 80098a8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80098aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ac:	3330      	adds	r3, #48	@ 0x30
 80098ae:	330e      	adds	r3, #14
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fe fca7 	bl	8008204 <ld_word>
 80098b6:	4603      	mov	r3, r0
 80098b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80098ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d101      	bne.n	80098c4 <find_volume+0x28c>
 80098c0:	230d      	movs	r3, #13
 80098c2:	e0fa      	b.n	8009aba <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80098c4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80098c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098c8:	4413      	add	r3, r2
 80098ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098cc:	8912      	ldrh	r2, [r2, #8]
 80098ce:	0912      	lsrs	r2, r2, #4
 80098d0:	b292      	uxth	r2, r2
 80098d2:	4413      	add	r3, r2
 80098d4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80098d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098da:	429a      	cmp	r2, r3
 80098dc:	d204      	bcs.n	80098e8 <find_volume+0x2b0>
 80098de:	230d      	movs	r3, #13
 80098e0:	e0eb      	b.n	8009aba <find_volume+0x482>
 80098e2:	bf00      	nop
 80098e4:	20000c04 	.word	0x20000c04
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80098e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098f0:	8952      	ldrh	r2, [r2, #10]
 80098f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80098f6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80098f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d101      	bne.n	8009902 <find_volume+0x2ca>
 80098fe:	230d      	movs	r3, #13
 8009900:	e0db      	b.n	8009aba <find_volume+0x482>
		fmt = FS_FAT32;
 8009902:	2303      	movs	r3, #3
 8009904:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800990e:	4293      	cmp	r3, r2
 8009910:	d802      	bhi.n	8009918 <find_volume+0x2e0>
 8009912:	2302      	movs	r3, #2
 8009914:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800991e:	4293      	cmp	r3, r2
 8009920:	d802      	bhi.n	8009928 <find_volume+0x2f0>
 8009922:	2301      	movs	r3, #1
 8009924:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992a:	1c9a      	adds	r2, r3, #2
 800992c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800992e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009932:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009934:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009936:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009938:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800993a:	441a      	add	r2, r3
 800993c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009940:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009944:	441a      	add	r2, r3
 8009946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009948:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800994a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800994e:	2b03      	cmp	r3, #3
 8009950:	d11e      	bne.n	8009990 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009954:	3330      	adds	r3, #48	@ 0x30
 8009956:	332a      	adds	r3, #42	@ 0x2a
 8009958:	4618      	mov	r0, r3
 800995a:	f7fe fc53 	bl	8008204 <ld_word>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <find_volume+0x330>
 8009964:	230d      	movs	r3, #13
 8009966:	e0a8      	b.n	8009aba <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800996a:	891b      	ldrh	r3, [r3, #8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <find_volume+0x33c>
 8009970:	230d      	movs	r3, #13
 8009972:	e0a2      	b.n	8009aba <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009976:	3330      	adds	r3, #48	@ 0x30
 8009978:	332c      	adds	r3, #44	@ 0x2c
 800997a:	4618      	mov	r0, r3
 800997c:	f7fe fc5a 	bl	8008234 <ld_dword>
 8009980:	4602      	mov	r2, r0
 8009982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009984:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	647b      	str	r3, [r7, #68]	@ 0x44
 800998e:	e01f      	b.n	80099d0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009992:	891b      	ldrh	r3, [r3, #8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <find_volume+0x364>
 8009998:	230d      	movs	r3, #13
 800999a:	e08e      	b.n	8009aba <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800999c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999e:	6a1a      	ldr	r2, [r3, #32]
 80099a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099a2:	441a      	add	r2, r3
 80099a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80099a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d103      	bne.n	80099b8 <find_volume+0x380>
 80099b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	e00a      	b.n	80099ce <find_volume+0x396>
 80099b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ba:	695a      	ldr	r2, [r3, #20]
 80099bc:	4613      	mov	r3, r2
 80099be:	005b      	lsls	r3, r3, #1
 80099c0:	4413      	add	r3, r2
 80099c2:	085a      	lsrs	r2, r3, #1
 80099c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	f003 0301 	and.w	r3, r3, #1
 80099cc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80099ce:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80099d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d2:	699a      	ldr	r2, [r3, #24]
 80099d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099d6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80099da:	0a5b      	lsrs	r3, r3, #9
 80099dc:	429a      	cmp	r2, r3
 80099de:	d201      	bcs.n	80099e4 <find_volume+0x3ac>
 80099e0:	230d      	movs	r3, #13
 80099e2:	e06a      	b.n	8009aba <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80099e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099ea:	611a      	str	r2, [r3, #16]
 80099ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ee:	691a      	ldr	r2, [r3, #16]
 80099f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80099f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f6:	2280      	movs	r2, #128	@ 0x80
 80099f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80099fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80099fe:	2b03      	cmp	r3, #3
 8009a00:	d149      	bne.n	8009a96 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a04:	3330      	adds	r3, #48	@ 0x30
 8009a06:	3330      	adds	r3, #48	@ 0x30
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fe fbfb 	bl	8008204 <ld_word>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d140      	bne.n	8009a96 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a16:	3301      	adds	r3, #1
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009a1c:	f7fe fea2 	bl	8008764 <move_window>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d137      	bne.n	8009a96 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a28:	2200      	movs	r2, #0
 8009a2a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a2e:	3330      	adds	r3, #48	@ 0x30
 8009a30:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7fe fbe5 	bl	8008204 <ld_word>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d127      	bne.n	8009a96 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a48:	3330      	adds	r3, #48	@ 0x30
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fe fbf2 	bl	8008234 <ld_dword>
 8009a50:	4603      	mov	r3, r0
 8009a52:	4a1c      	ldr	r2, [pc, #112]	@ (8009ac4 <find_volume+0x48c>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d11e      	bne.n	8009a96 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5a:	3330      	adds	r3, #48	@ 0x30
 8009a5c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fe fbe7 	bl	8008234 <ld_dword>
 8009a66:	4603      	mov	r3, r0
 8009a68:	4a17      	ldr	r2, [pc, #92]	@ (8009ac8 <find_volume+0x490>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d113      	bne.n	8009a96 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a70:	3330      	adds	r3, #48	@ 0x30
 8009a72:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fe fbdc 	bl	8008234 <ld_dword>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a80:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a84:	3330      	adds	r3, #48	@ 0x30
 8009a86:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fe fbd2 	bl	8008234 <ld_dword>
 8009a90:	4602      	mov	r2, r0
 8009a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a94:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a98:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009a9c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8009acc <find_volume+0x494>)
 8009aa0:	881b      	ldrh	r3, [r3, #0]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	4b09      	ldr	r3, [pc, #36]	@ (8009acc <find_volume+0x494>)
 8009aa8:	801a      	strh	r2, [r3, #0]
 8009aaa:	4b08      	ldr	r3, [pc, #32]	@ (8009acc <find_volume+0x494>)
 8009aac:	881a      	ldrh	r2, [r3, #0]
 8009aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009ab2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ab4:	f7fe fdee 	bl	8008694 <clear_lock>
#endif
	return FR_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3758      	adds	r7, #88	@ 0x58
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	41615252 	.word	0x41615252
 8009ac8:	61417272 	.word	0x61417272
 8009acc:	20000c08 	.word	0x20000c08

08009ad0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009ada:	2309      	movs	r3, #9
 8009adc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d01c      	beq.n	8009b1e <validate+0x4e>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d018      	beq.n	8009b1e <validate+0x4e>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d013      	beq.n	8009b1e <validate+0x4e>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	889a      	ldrh	r2, [r3, #4]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	88db      	ldrh	r3, [r3, #6]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d10c      	bne.n	8009b1e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	785b      	ldrb	r3, [r3, #1]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe fadc 	bl	80080c8 <disk_status>
 8009b10:	4603      	mov	r3, r0
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d101      	bne.n	8009b1e <validate+0x4e>
			res = FR_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009b1e:	7bfb      	ldrb	r3, [r7, #15]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d102      	bne.n	8009b2a <validate+0x5a>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	e000      	b.n	8009b2c <validate+0x5c>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	683a      	ldr	r2, [r7, #0]
 8009b2e:	6013      	str	r3, [r2, #0]
	return res;
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b088      	sub	sp, #32
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	4613      	mov	r3, r2
 8009b48:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009b4e:	f107 0310 	add.w	r3, r7, #16
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7ff fcd5 	bl	8009502 <get_ldnumber>
 8009b58:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	da01      	bge.n	8009b64 <f_mount+0x28>
 8009b60:	230b      	movs	r3, #11
 8009b62:	e02b      	b.n	8009bbc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009b64:	4a17      	ldr	r2, [pc, #92]	@ (8009bc4 <f_mount+0x88>)
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b6c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d005      	beq.n	8009b80 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009b74:	69b8      	ldr	r0, [r7, #24]
 8009b76:	f7fe fd8d 	bl	8008694 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d002      	beq.n	8009b8c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	490d      	ldr	r1, [pc, #52]	@ (8009bc4 <f_mount+0x88>)
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d002      	beq.n	8009ba2 <f_mount+0x66>
 8009b9c:	79fb      	ldrb	r3, [r7, #7]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d001      	beq.n	8009ba6 <f_mount+0x6a>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	e00a      	b.n	8009bbc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009ba6:	f107 010c 	add.w	r1, r7, #12
 8009baa:	f107 0308 	add.w	r3, r7, #8
 8009bae:	2200      	movs	r2, #0
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7ff fd41 	bl	8009638 <find_volume>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3720      	adds	r7, #32
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20000c04 	.word	0x20000c04

08009bc8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b098      	sub	sp, #96	@ 0x60
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <f_open+0x18>
 8009bdc:	2309      	movs	r3, #9
 8009bde:	e1a9      	b.n	8009f34 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009be0:	79fb      	ldrb	r3, [r7, #7]
 8009be2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009be6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009be8:	79fa      	ldrb	r2, [r7, #7]
 8009bea:	f107 0110 	add.w	r1, r7, #16
 8009bee:	f107 0308 	add.w	r3, r7, #8
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7ff fd20 	bl	8009638 <find_volume>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f040 818d 	bne.w	8009f22 <f_open+0x35a>
		dj.obj.fs = fs;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	f107 0314 	add.w	r3, r7, #20
 8009c12:	4611      	mov	r1, r2
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff fc03 	bl	8009420 <follow_path>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009c20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d118      	bne.n	8009c5a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009c28:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c2c:	b25b      	sxtb	r3, r3
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	da03      	bge.n	8009c3a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009c32:	2306      	movs	r3, #6
 8009c34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009c38:	e00f      	b.n	8009c5a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009c3a:	79fb      	ldrb	r3, [r7, #7]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	bf8c      	ite	hi
 8009c40:	2301      	movhi	r3, #1
 8009c42:	2300      	movls	r3, #0
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	461a      	mov	r2, r3
 8009c48:	f107 0314 	add.w	r3, r7, #20
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fbd8 	bl	8008404 <chk_lock>
 8009c54:	4603      	mov	r3, r0
 8009c56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009c5a:	79fb      	ldrb	r3, [r7, #7]
 8009c5c:	f003 031c 	and.w	r3, r3, #28
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d07f      	beq.n	8009d64 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009c64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d017      	beq.n	8009c9c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009c6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c70:	2b04      	cmp	r3, #4
 8009c72:	d10e      	bne.n	8009c92 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009c74:	f7fe fc22 	bl	80084bc <enq_lock>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d006      	beq.n	8009c8c <f_open+0xc4>
 8009c7e:	f107 0314 	add.w	r3, r7, #20
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7ff fb06 	bl	8009294 <dir_register>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	e000      	b.n	8009c8e <f_open+0xc6>
 8009c8c:	2312      	movs	r3, #18
 8009c8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009c92:	79fb      	ldrb	r3, [r7, #7]
 8009c94:	f043 0308 	orr.w	r3, r3, #8
 8009c98:	71fb      	strb	r3, [r7, #7]
 8009c9a:	e010      	b.n	8009cbe <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009c9c:	7ebb      	ldrb	r3, [r7, #26]
 8009c9e:	f003 0311 	and.w	r3, r3, #17
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <f_open+0xe6>
					res = FR_DENIED;
 8009ca6:	2307      	movs	r3, #7
 8009ca8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009cac:	e007      	b.n	8009cbe <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009cae:	79fb      	ldrb	r3, [r7, #7]
 8009cb0:	f003 0304 	and.w	r3, r3, #4
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <f_open+0xf6>
 8009cb8:	2308      	movs	r3, #8
 8009cba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009cbe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d168      	bne.n	8009d98 <f_open+0x1d0>
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	f003 0308 	and.w	r3, r3, #8
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d063      	beq.n	8009d98 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009cd0:	f7fc fcea 	bl	80066a8 <get_fattime>
 8009cd4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cd8:	330e      	adds	r3, #14
 8009cda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fe fae7 	bl	80082b0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce4:	3316      	adds	r3, #22
 8009ce6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fe fae1 	bl	80082b0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf0:	330b      	adds	r3, #11
 8009cf2:	2220      	movs	r2, #32
 8009cf4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7ff fa35 	bl	800916c <ld_clust>
 8009d02:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009d08:	2200      	movs	r2, #0
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7ff fa4d 	bl	80091aa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d12:	331c      	adds	r3, #28
 8009d14:	2100      	movs	r1, #0
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe faca 	bl	80082b0 <st_dword>
					fs->wflag = 1;
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d037      	beq.n	8009d98 <f_open+0x1d0>
						dw = fs->winsect;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d2c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009d2e:	f107 0314 	add.w	r3, r7, #20
 8009d32:	2200      	movs	r2, #0
 8009d34:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe ff60 	bl	8008bfc <remove_chain>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009d42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d126      	bne.n	8009d98 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fe fd08 	bl	8008764 <move_window>
 8009d54:	4603      	mov	r3, r0
 8009d56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d5e:	3a01      	subs	r2, #1
 8009d60:	60da      	str	r2, [r3, #12]
 8009d62:	e019      	b.n	8009d98 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009d64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d115      	bne.n	8009d98 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009d6c:	7ebb      	ldrb	r3, [r7, #26]
 8009d6e:	f003 0310 	and.w	r3, r3, #16
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <f_open+0x1b6>
					res = FR_NO_FILE;
 8009d76:	2304      	movs	r3, #4
 8009d78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009d7c:	e00c      	b.n	8009d98 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009d7e:	79fb      	ldrb	r3, [r7, #7]
 8009d80:	f003 0302 	and.w	r3, r3, #2
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d007      	beq.n	8009d98 <f_open+0x1d0>
 8009d88:	7ebb      	ldrb	r3, [r7, #26]
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d002      	beq.n	8009d98 <f_open+0x1d0>
						res = FR_DENIED;
 8009d92:	2307      	movs	r3, #7
 8009d94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009d98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d126      	bne.n	8009dee <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009da0:	79fb      	ldrb	r3, [r7, #7]
 8009da2:	f003 0308 	and.w	r3, r3, #8
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d003      	beq.n	8009db2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009daa:	79fb      	ldrb	r3, [r7, #7]
 8009dac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009db0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009dba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009dc0:	79fb      	ldrb	r3, [r7, #7]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	bf8c      	ite	hi
 8009dc6:	2301      	movhi	r3, #1
 8009dc8:	2300      	movls	r3, #0
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	461a      	mov	r2, r3
 8009dce:	f107 0314 	add.w	r3, r7, #20
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fe fb93 	bl	8008500 <inc_lock>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d102      	bne.n	8009dee <f_open+0x226>
 8009de8:	2302      	movs	r3, #2
 8009dea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009dee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f040 8095 	bne.w	8009f22 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7ff f9b4 	bl	800916c <ld_clust>
 8009e04:	4602      	mov	r2, r0
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e0c:	331c      	adds	r3, #28
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fe fa10 	bl	8008234 <ld_dword>
 8009e14:	4602      	mov	r2, r0
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009e20:	693a      	ldr	r2, [r7, #16]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	88da      	ldrh	r2, [r3, #6]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	79fa      	ldrb	r2, [r7, #7]
 8009e32:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3330      	adds	r3, #48	@ 0x30
 8009e4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e4e:	2100      	movs	r1, #0
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fe fa7a 	bl	800834a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009e56:	79fb      	ldrb	r3, [r7, #7]
 8009e58:	f003 0320 	and.w	r3, r3, #32
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d060      	beq.n	8009f22 <f_open+0x35a>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d05c      	beq.n	8009f22 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	68da      	ldr	r2, [r3, #12]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	895b      	ldrh	r3, [r3, #10]
 8009e74:	025b      	lsls	r3, r3, #9
 8009e76:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e84:	e016      	b.n	8009eb4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fe fd25 	bl	80088da <get_fat>
 8009e90:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009e92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d802      	bhi.n	8009e9e <f_open+0x2d6>
 8009e98:	2302      	movs	r3, #2
 8009e9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009e9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ea4:	d102      	bne.n	8009eac <f_open+0x2e4>
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009eac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009eae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009eb4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d103      	bne.n	8009ec4 <f_open+0x2fc>
 8009ebc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d8e0      	bhi.n	8009e86 <f_open+0x2be>
				}
				fp->clust = clst;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ec8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009eca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d127      	bne.n	8009f22 <f_open+0x35a>
 8009ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d022      	beq.n	8009f22 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fe fcdb 	bl	800889c <clust2sect>
 8009ee6:	6478      	str	r0, [r7, #68]	@ 0x44
 8009ee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d103      	bne.n	8009ef6 <f_open+0x32e>
						res = FR_INT_ERR;
 8009eee:	2302      	movs	r3, #2
 8009ef0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009ef4:	e015      	b.n	8009f22 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ef8:	0a5a      	lsrs	r2, r3, #9
 8009efa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009efc:	441a      	add	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	7858      	ldrb	r0, [r3, #1]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6a1a      	ldr	r2, [r3, #32]
 8009f10:	2301      	movs	r3, #1
 8009f12:	f7fe f919 	bl	8008148 <disk_read>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <f_open+0x35a>
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009f22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d002      	beq.n	8009f30 <f_open+0x368>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009f30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3760      	adds	r7, #96	@ 0x60
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08c      	sub	sp, #48	@ 0x30
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	2200      	movs	r2, #0
 8009f52:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f107 0210 	add.w	r2, r7, #16
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7ff fdb7 	bl	8009ad0 <validate>
 8009f62:	4603      	mov	r3, r0
 8009f64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009f68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d107      	bne.n	8009f80 <f_write+0x44>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	7d5b      	ldrb	r3, [r3, #21]
 8009f74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009f78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d002      	beq.n	8009f86 <f_write+0x4a>
 8009f80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f84:	e14b      	b.n	800a21e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	7d1b      	ldrb	r3, [r3, #20]
 8009f8a:	f003 0302 	and.w	r3, r3, #2
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d101      	bne.n	8009f96 <f_write+0x5a>
 8009f92:	2307      	movs	r3, #7
 8009f94:	e143      	b.n	800a21e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	699a      	ldr	r2, [r3, #24]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	441a      	add	r2, r3
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	f080 812d 	bcs.w	800a202 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	43db      	mvns	r3, r3
 8009fae:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009fb0:	e127      	b.n	800a202 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f040 80e3 	bne.w	800a186 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	0a5b      	lsrs	r3, r3, #9
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	8952      	ldrh	r2, [r2, #10]
 8009fca:	3a01      	subs	r2, #1
 8009fcc:	4013      	ands	r3, r2
 8009fce:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d143      	bne.n	800a05e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	699b      	ldr	r3, [r3, #24]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10c      	bne.n	8009ff8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d11a      	bne.n	800a020 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2100      	movs	r1, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fe fe69 	bl	8008cc6 <create_chain>
 8009ff4:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009ff6:	e013      	b.n	800a020 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d007      	beq.n	800a010 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	4619      	mov	r1, r3
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f7fe fef5 	bl	8008df6 <clmt_clust>
 800a00c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a00e:	e007      	b.n	800a020 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	69db      	ldr	r3, [r3, #28]
 800a016:	4619      	mov	r1, r3
 800a018:	4610      	mov	r0, r2
 800a01a:	f7fe fe54 	bl	8008cc6 <create_chain>
 800a01e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a022:	2b00      	cmp	r3, #0
 800a024:	f000 80f2 	beq.w	800a20c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d104      	bne.n	800a038 <f_write+0xfc>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2202      	movs	r2, #2
 800a032:	755a      	strb	r2, [r3, #21]
 800a034:	2302      	movs	r3, #2
 800a036:	e0f2      	b.n	800a21e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a03e:	d104      	bne.n	800a04a <f_write+0x10e>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2201      	movs	r2, #1
 800a044:	755a      	strb	r2, [r3, #21]
 800a046:	2301      	movs	r3, #1
 800a048:	e0e9      	b.n	800a21e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a04e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d102      	bne.n	800a05e <f_write+0x122>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a05c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	7d1b      	ldrb	r3, [r3, #20]
 800a062:	b25b      	sxtb	r3, r3
 800a064:	2b00      	cmp	r3, #0
 800a066:	da18      	bge.n	800a09a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	7858      	ldrb	r0, [r3, #1]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6a1a      	ldr	r2, [r3, #32]
 800a076:	2301      	movs	r3, #1
 800a078:	f7fe f886 	bl	8008188 <disk_write>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d004      	beq.n	800a08c <f_write+0x150>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2201      	movs	r2, #1
 800a086:	755a      	strb	r2, [r3, #21]
 800a088:	2301      	movs	r3, #1
 800a08a:	e0c8      	b.n	800a21e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	7d1b      	ldrb	r3, [r3, #20]
 800a090:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a094:	b2da      	uxtb	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a09a:	693a      	ldr	r2, [r7, #16]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	69db      	ldr	r3, [r3, #28]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	4610      	mov	r0, r2
 800a0a4:	f7fe fbfa 	bl	800889c <clust2sect>
 800a0a8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d104      	bne.n	800a0ba <f_write+0x17e>
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2202      	movs	r2, #2
 800a0b4:	755a      	strb	r2, [r3, #21]
 800a0b6:	2302      	movs	r3, #2
 800a0b8:	e0b1      	b.n	800a21e <f_write+0x2e2>
			sect += csect;
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	4413      	add	r3, r2
 800a0c0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	0a5b      	lsrs	r3, r3, #9
 800a0c6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d03c      	beq.n	800a148 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a0ce:	69ba      	ldr	r2, [r7, #24]
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	8952      	ldrh	r2, [r2, #10]
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d905      	bls.n	800a0e8 <f_write+0x1ac>
					cc = fs->csize - csect;
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	895b      	ldrh	r3, [r3, #10]
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	7858      	ldrb	r0, [r3, #1]
 800a0ec:	6a3b      	ldr	r3, [r7, #32]
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	69f9      	ldr	r1, [r7, #28]
 800a0f2:	f7fe f849 	bl	8008188 <disk_write>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d004      	beq.n	800a106 <f_write+0x1ca>
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2201      	movs	r2, #1
 800a100:	755a      	strb	r2, [r3, #21]
 800a102:	2301      	movs	r3, #1
 800a104:	e08b      	b.n	800a21e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6a1a      	ldr	r2, [r3, #32]
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	6a3a      	ldr	r2, [r7, #32]
 800a110:	429a      	cmp	r2, r3
 800a112:	d915      	bls.n	800a140 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6a1a      	ldr	r2, [r3, #32]
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	025b      	lsls	r3, r3, #9
 800a124:	69fa      	ldr	r2, [r7, #28]
 800a126:	4413      	add	r3, r2
 800a128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a12c:	4619      	mov	r1, r3
 800a12e:	f7fe f8eb 	bl	8008308 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	7d1b      	ldrb	r3, [r3, #20]
 800a136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	025b      	lsls	r3, r3, #9
 800a144:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800a146:	e03f      	b.n	800a1c8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6a1b      	ldr	r3, [r3, #32]
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d016      	beq.n	800a180 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	699a      	ldr	r2, [r3, #24]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d210      	bcs.n	800a180 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	7858      	ldrb	r0, [r3, #1]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a168:	2301      	movs	r3, #1
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	f7fd ffec 	bl	8008148 <disk_read>
 800a170:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a172:	2b00      	cmp	r3, #0
 800a174:	d004      	beq.n	800a180 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2201      	movs	r2, #1
 800a17a:	755a      	strb	r2, [r3, #21]
 800a17c:	2301      	movs	r3, #1
 800a17e:	e04e      	b.n	800a21e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	697a      	ldr	r2, [r7, #20]
 800a184:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a192:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d901      	bls.n	800a1a0 <f_write+0x264>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ae:	4413      	add	r3, r2
 800a1b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1b2:	69f9      	ldr	r1, [r7, #28]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7fe f8a7 	bl	8008308 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	7d1b      	ldrb	r3, [r3, #20]
 800a1be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1c2:	b2da      	uxtb	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a1c8:	69fa      	ldr	r2, [r7, #28]
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1cc:	4413      	add	r3, r2
 800a1ce:	61fb      	str	r3, [r7, #28]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	699a      	ldr	r2, [r3, #24]
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d6:	441a      	add	r2, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	619a      	str	r2, [r3, #24]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	68da      	ldr	r2, [r3, #12]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	bf38      	it	cc
 800a1e8:	461a      	movcc	r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	60da      	str	r2, [r3, #12]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f4:	441a      	add	r2, r3
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	601a      	str	r2, [r3, #0]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	f47f aed4 	bne.w	8009fb2 <f_write+0x76>
 800a20a:	e000      	b.n	800a20e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a20c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	7d1b      	ldrb	r3, [r3, #20]
 800a212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a216:	b2da      	uxtb	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3730      	adds	r7, #48	@ 0x30
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b086      	sub	sp, #24
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f107 0208 	add.w	r2, r7, #8
 800a234:	4611      	mov	r1, r2
 800a236:	4618      	mov	r0, r3
 800a238:	f7ff fc4a 	bl	8009ad0 <validate>
 800a23c:	4603      	mov	r3, r0
 800a23e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a240:	7dfb      	ldrb	r3, [r7, #23]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d168      	bne.n	800a318 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	7d1b      	ldrb	r3, [r3, #20]
 800a24a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d062      	beq.n	800a318 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	7d1b      	ldrb	r3, [r3, #20]
 800a256:	b25b      	sxtb	r3, r3
 800a258:	2b00      	cmp	r3, #0
 800a25a:	da15      	bge.n	800a288 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	7858      	ldrb	r0, [r3, #1]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a1a      	ldr	r2, [r3, #32]
 800a26a:	2301      	movs	r3, #1
 800a26c:	f7fd ff8c 	bl	8008188 <disk_write>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d001      	beq.n	800a27a <f_sync+0x54>
 800a276:	2301      	movs	r3, #1
 800a278:	e04f      	b.n	800a31a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	7d1b      	ldrb	r3, [r3, #20]
 800a27e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a282:	b2da      	uxtb	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a288:	f7fc fa0e 	bl	80066a8 <get_fattime>
 800a28c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a294:	4619      	mov	r1, r3
 800a296:	4610      	mov	r0, r2
 800a298:	f7fe fa64 	bl	8008764 <move_window>
 800a29c:	4603      	mov	r3, r0
 800a29e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a2a0:	7dfb      	ldrb	r3, [r7, #23]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d138      	bne.n	800a318 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2aa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	330b      	adds	r3, #11
 800a2b0:	781a      	ldrb	r2, [r3, #0]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	330b      	adds	r3, #11
 800a2b6:	f042 0220 	orr.w	r2, r2, #32
 800a2ba:	b2d2      	uxtb	r2, r2
 800a2bc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6818      	ldr	r0, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	68f9      	ldr	r1, [r7, #12]
 800a2ca:	f7fe ff6e 	bl	80091aa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f103 021c 	add.w	r2, r3, #28
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	4610      	mov	r0, r2
 800a2dc:	f7fd ffe8 	bl	80082b0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	3316      	adds	r3, #22
 800a2e4:	6939      	ldr	r1, [r7, #16]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fd ffe2 	bl	80082b0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	3312      	adds	r3, #18
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fd ffc1 	bl	800827a <st_word>
					fs->wflag = 1;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	4618      	mov	r0, r3
 800a302:	f7fe fa5d 	bl	80087c0 <sync_fs>
 800a306:	4603      	mov	r3, r0
 800a308:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	7d1b      	ldrb	r3, [r3, #20]
 800a30e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a312:	b2da      	uxtb	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a318:	7dfb      	ldrb	r3, [r7, #23]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b084      	sub	sp, #16
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7ff ff7b 	bl	800a226 <f_sync>
 800a330:	4603      	mov	r3, r0
 800a332:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a334:	7bfb      	ldrb	r3, [r7, #15]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d118      	bne.n	800a36c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f107 0208 	add.w	r2, r7, #8
 800a340:	4611      	mov	r1, r2
 800a342:	4618      	mov	r0, r3
 800a344:	f7ff fbc4 	bl	8009ad0 <validate>
 800a348:	4603      	mov	r3, r0
 800a34a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10c      	bne.n	800a36c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	4618      	mov	r0, r3
 800a358:	f7fe f960 	bl	800861c <dec_lock>
 800a35c:	4603      	mov	r3, r0
 800a35e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a360:	7bfb      	ldrb	r3, [r7, #15]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d102      	bne.n	800a36c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b092      	sub	sp, #72	@ 0x48
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	60f8      	str	r0, [r7, #12]
 800a37e:	60b9      	str	r1, [r7, #8]
 800a380:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a382:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800a386:	f107 030c 	add.w	r3, r7, #12
 800a38a:	2200      	movs	r2, #0
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7ff f953 	bl	8009638 <find_volume>
 800a392:	4603      	mov	r3, r0
 800a394:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800a398:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f040 8099 	bne.w	800a4d4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a3a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3aa:	691a      	ldr	r2, [r3, #16]
 800a3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ae:	695b      	ldr	r3, [r3, #20]
 800a3b0:	3b02      	subs	r3, #2
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d804      	bhi.n	800a3c0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b8:	691a      	ldr	r2, [r3, #16]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	601a      	str	r2, [r3, #0]
 800a3be:	e089      	b.n	800a4d4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d128      	bne.n	800a41e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3d2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a3d4:	f107 0314 	add.w	r3, r7, #20
 800a3d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fe fa7d 	bl	80088da <get_fat>
 800a3e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3e8:	d103      	bne.n	800a3f2 <f_getfree+0x7c>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a3f0:	e063      	b.n	800a4ba <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d103      	bne.n	800a400 <f_getfree+0x8a>
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a3fe:	e05c      	b.n	800a4ba <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a402:	2b00      	cmp	r3, #0
 800a404:	d102      	bne.n	800a40c <f_getfree+0x96>
 800a406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a408:	3301      	adds	r3, #1
 800a40a:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800a40c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a40e:	3301      	adds	r3, #1
 800a410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a418:	429a      	cmp	r2, r3
 800a41a:	d3db      	bcc.n	800a3d4 <f_getfree+0x5e>
 800a41c:	e04d      	b.n	800a4ba <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a426:	6a1b      	ldr	r3, [r3, #32]
 800a428:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a42e:	2300      	movs	r3, #0
 800a430:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800a432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a434:	2b00      	cmp	r3, #0
 800a436:	d113      	bne.n	800a460 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a438:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43c:	1c5a      	adds	r2, r3, #1
 800a43e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a440:	4619      	mov	r1, r3
 800a442:	f7fe f98f 	bl	8008764 <move_window>
 800a446:	4603      	mov	r3, r0
 800a448:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800a44c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a450:	2b00      	cmp	r3, #0
 800a452:	d131      	bne.n	800a4b8 <f_getfree+0x142>
							p = fs->win;
 800a454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a456:	3330      	adds	r3, #48	@ 0x30
 800a458:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800a45a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a45e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	2b02      	cmp	r3, #2
 800a466:	d10f      	bne.n	800a488 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a468:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a46a:	f7fd fecb 	bl	8008204 <ld_word>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d102      	bne.n	800a47a <f_getfree+0x104>
 800a474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a476:	3301      	adds	r3, #1
 800a478:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800a47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47c:	3302      	adds	r3, #2
 800a47e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a482:	3b02      	subs	r3, #2
 800a484:	637b      	str	r3, [r7, #52]	@ 0x34
 800a486:	e010      	b.n	800a4aa <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a488:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a48a:	f7fd fed3 	bl	8008234 <ld_dword>
 800a48e:	4603      	mov	r3, r0
 800a490:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a494:	2b00      	cmp	r3, #0
 800a496:	d102      	bne.n	800a49e <f_getfree+0x128>
 800a498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a49a:	3301      	adds	r3, #1
 800a49c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800a49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a0:	3304      	adds	r3, #4
 800a4a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4a6:	3b04      	subs	r3, #4
 800a4a8:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800a4aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1bd      	bne.n	800a432 <f_getfree+0xbc>
 800a4b6:	e000      	b.n	800a4ba <f_getfree+0x144>
							if (res != FR_OK) break;
 800a4b8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4be:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4c4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c8:	791a      	ldrb	r2, [r3, #4]
 800a4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4cc:	f042 0201 	orr.w	r2, r2, #1
 800a4d0:	b2d2      	uxtb	r2, r2
 800a4d2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a4d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3748      	adds	r7, #72	@ 0x48
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b087      	sub	sp, #28
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a4f6:	4b1f      	ldr	r3, [pc, #124]	@ (800a574 <FATFS_LinkDriverEx+0x94>)
 800a4f8:	7a5b      	ldrb	r3, [r3, #9]
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d131      	bne.n	800a564 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a500:	4b1c      	ldr	r3, [pc, #112]	@ (800a574 <FATFS_LinkDriverEx+0x94>)
 800a502:	7a5b      	ldrb	r3, [r3, #9]
 800a504:	b2db      	uxtb	r3, r3
 800a506:	461a      	mov	r2, r3
 800a508:	4b1a      	ldr	r3, [pc, #104]	@ (800a574 <FATFS_LinkDriverEx+0x94>)
 800a50a:	2100      	movs	r1, #0
 800a50c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a50e:	4b19      	ldr	r3, [pc, #100]	@ (800a574 <FATFS_LinkDriverEx+0x94>)
 800a510:	7a5b      	ldrb	r3, [r3, #9]
 800a512:	b2db      	uxtb	r3, r3
 800a514:	4a17      	ldr	r2, [pc, #92]	@ (800a574 <FATFS_LinkDriverEx+0x94>)
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4413      	add	r3, r2
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a51e:	4b15      	ldr	r3, [pc, #84]	@ (800a574 <FATFS_LinkDriverEx+0x94>)
 800a520:	7a5b      	ldrb	r3, [r3, #9]
 800a522:	b2db      	uxtb	r3, r3
 800a524:	461a      	mov	r2, r3
 800a526:	4b13      	ldr	r3, [pc, #76]	@ (800a574 <FATFS_LinkDriverEx+0x94>)
 800a528:	4413      	add	r3, r2
 800a52a:	79fa      	ldrb	r2, [r7, #7]
 800a52c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a52e:	4b11      	ldr	r3, [pc, #68]	@ (800a574 <FATFS_LinkDriverEx+0x94>)
 800a530:	7a5b      	ldrb	r3, [r3, #9]
 800a532:	b2db      	uxtb	r3, r3
 800a534:	1c5a      	adds	r2, r3, #1
 800a536:	b2d1      	uxtb	r1, r2
 800a538:	4a0e      	ldr	r2, [pc, #56]	@ (800a574 <FATFS_LinkDriverEx+0x94>)
 800a53a:	7251      	strb	r1, [r2, #9]
 800a53c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a53e:	7dbb      	ldrb	r3, [r7, #22]
 800a540:	3330      	adds	r3, #48	@ 0x30
 800a542:	b2da      	uxtb	r2, r3
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	3301      	adds	r3, #1
 800a54c:	223a      	movs	r2, #58	@ 0x3a
 800a54e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	3302      	adds	r3, #2
 800a554:	222f      	movs	r2, #47	@ 0x2f
 800a556:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	3303      	adds	r3, #3
 800a55c:	2200      	movs	r2, #0
 800a55e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a560:	2300      	movs	r3, #0
 800a562:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a564:	7dfb      	ldrb	r3, [r7, #23]
}
 800a566:	4618      	mov	r0, r3
 800a568:	371c      	adds	r7, #28
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	20000c2c 	.word	0x20000c2c

0800a578 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a582:	2200      	movs	r2, #0
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff ffaa 	bl	800a4e0 <FATFS_LinkDriverEx>
 800a58c:	4603      	mov	r3, r0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <__cvt>:
 800a596:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a59a:	ec57 6b10 	vmov	r6, r7, d0
 800a59e:	2f00      	cmp	r7, #0
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	463b      	mov	r3, r7
 800a5a6:	bfbb      	ittet	lt
 800a5a8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a5ac:	461f      	movlt	r7, r3
 800a5ae:	2300      	movge	r3, #0
 800a5b0:	232d      	movlt	r3, #45	@ 0x2d
 800a5b2:	700b      	strb	r3, [r1, #0]
 800a5b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5b6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a5ba:	4691      	mov	r9, r2
 800a5bc:	f023 0820 	bic.w	r8, r3, #32
 800a5c0:	bfbc      	itt	lt
 800a5c2:	4632      	movlt	r2, r6
 800a5c4:	4616      	movlt	r6, r2
 800a5c6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a5ca:	d005      	beq.n	800a5d8 <__cvt+0x42>
 800a5cc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a5d0:	d100      	bne.n	800a5d4 <__cvt+0x3e>
 800a5d2:	3401      	adds	r4, #1
 800a5d4:	2102      	movs	r1, #2
 800a5d6:	e000      	b.n	800a5da <__cvt+0x44>
 800a5d8:	2103      	movs	r1, #3
 800a5da:	ab03      	add	r3, sp, #12
 800a5dc:	9301      	str	r3, [sp, #4]
 800a5de:	ab02      	add	r3, sp, #8
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	ec47 6b10 	vmov	d0, r6, r7
 800a5e6:	4653      	mov	r3, sl
 800a5e8:	4622      	mov	r2, r4
 800a5ea:	f000 fe09 	bl	800b200 <_dtoa_r>
 800a5ee:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	d119      	bne.n	800a62a <__cvt+0x94>
 800a5f6:	f019 0f01 	tst.w	r9, #1
 800a5fa:	d00e      	beq.n	800a61a <__cvt+0x84>
 800a5fc:	eb00 0904 	add.w	r9, r0, r4
 800a600:	2200      	movs	r2, #0
 800a602:	2300      	movs	r3, #0
 800a604:	4630      	mov	r0, r6
 800a606:	4639      	mov	r1, r7
 800a608:	f7f6 fa86 	bl	8000b18 <__aeabi_dcmpeq>
 800a60c:	b108      	cbz	r0, 800a612 <__cvt+0x7c>
 800a60e:	f8cd 900c 	str.w	r9, [sp, #12]
 800a612:	2230      	movs	r2, #48	@ 0x30
 800a614:	9b03      	ldr	r3, [sp, #12]
 800a616:	454b      	cmp	r3, r9
 800a618:	d31e      	bcc.n	800a658 <__cvt+0xc2>
 800a61a:	9b03      	ldr	r3, [sp, #12]
 800a61c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a61e:	1b5b      	subs	r3, r3, r5
 800a620:	4628      	mov	r0, r5
 800a622:	6013      	str	r3, [r2, #0]
 800a624:	b004      	add	sp, #16
 800a626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a62e:	eb00 0904 	add.w	r9, r0, r4
 800a632:	d1e5      	bne.n	800a600 <__cvt+0x6a>
 800a634:	7803      	ldrb	r3, [r0, #0]
 800a636:	2b30      	cmp	r3, #48	@ 0x30
 800a638:	d10a      	bne.n	800a650 <__cvt+0xba>
 800a63a:	2200      	movs	r2, #0
 800a63c:	2300      	movs	r3, #0
 800a63e:	4630      	mov	r0, r6
 800a640:	4639      	mov	r1, r7
 800a642:	f7f6 fa69 	bl	8000b18 <__aeabi_dcmpeq>
 800a646:	b918      	cbnz	r0, 800a650 <__cvt+0xba>
 800a648:	f1c4 0401 	rsb	r4, r4, #1
 800a64c:	f8ca 4000 	str.w	r4, [sl]
 800a650:	f8da 3000 	ldr.w	r3, [sl]
 800a654:	4499      	add	r9, r3
 800a656:	e7d3      	b.n	800a600 <__cvt+0x6a>
 800a658:	1c59      	adds	r1, r3, #1
 800a65a:	9103      	str	r1, [sp, #12]
 800a65c:	701a      	strb	r2, [r3, #0]
 800a65e:	e7d9      	b.n	800a614 <__cvt+0x7e>

0800a660 <__exponent>:
 800a660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a662:	2900      	cmp	r1, #0
 800a664:	bfba      	itte	lt
 800a666:	4249      	neglt	r1, r1
 800a668:	232d      	movlt	r3, #45	@ 0x2d
 800a66a:	232b      	movge	r3, #43	@ 0x2b
 800a66c:	2909      	cmp	r1, #9
 800a66e:	7002      	strb	r2, [r0, #0]
 800a670:	7043      	strb	r3, [r0, #1]
 800a672:	dd29      	ble.n	800a6c8 <__exponent+0x68>
 800a674:	f10d 0307 	add.w	r3, sp, #7
 800a678:	461d      	mov	r5, r3
 800a67a:	270a      	movs	r7, #10
 800a67c:	461a      	mov	r2, r3
 800a67e:	fbb1 f6f7 	udiv	r6, r1, r7
 800a682:	fb07 1416 	mls	r4, r7, r6, r1
 800a686:	3430      	adds	r4, #48	@ 0x30
 800a688:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a68c:	460c      	mov	r4, r1
 800a68e:	2c63      	cmp	r4, #99	@ 0x63
 800a690:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a694:	4631      	mov	r1, r6
 800a696:	dcf1      	bgt.n	800a67c <__exponent+0x1c>
 800a698:	3130      	adds	r1, #48	@ 0x30
 800a69a:	1e94      	subs	r4, r2, #2
 800a69c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a6a0:	1c41      	adds	r1, r0, #1
 800a6a2:	4623      	mov	r3, r4
 800a6a4:	42ab      	cmp	r3, r5
 800a6a6:	d30a      	bcc.n	800a6be <__exponent+0x5e>
 800a6a8:	f10d 0309 	add.w	r3, sp, #9
 800a6ac:	1a9b      	subs	r3, r3, r2
 800a6ae:	42ac      	cmp	r4, r5
 800a6b0:	bf88      	it	hi
 800a6b2:	2300      	movhi	r3, #0
 800a6b4:	3302      	adds	r3, #2
 800a6b6:	4403      	add	r3, r0
 800a6b8:	1a18      	subs	r0, r3, r0
 800a6ba:	b003      	add	sp, #12
 800a6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6be:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a6c2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a6c6:	e7ed      	b.n	800a6a4 <__exponent+0x44>
 800a6c8:	2330      	movs	r3, #48	@ 0x30
 800a6ca:	3130      	adds	r1, #48	@ 0x30
 800a6cc:	7083      	strb	r3, [r0, #2]
 800a6ce:	70c1      	strb	r1, [r0, #3]
 800a6d0:	1d03      	adds	r3, r0, #4
 800a6d2:	e7f1      	b.n	800a6b8 <__exponent+0x58>

0800a6d4 <_printf_float>:
 800a6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d8:	b08d      	sub	sp, #52	@ 0x34
 800a6da:	460c      	mov	r4, r1
 800a6dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a6e0:	4616      	mov	r6, r2
 800a6e2:	461f      	mov	r7, r3
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	f000 fcd1 	bl	800b08c <_localeconv_r>
 800a6ea:	6803      	ldr	r3, [r0, #0]
 800a6ec:	9304      	str	r3, [sp, #16]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7f5 fde6 	bl	80002c0 <strlen>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a6fc:	9005      	str	r0, [sp, #20]
 800a6fe:	3307      	adds	r3, #7
 800a700:	f023 0307 	bic.w	r3, r3, #7
 800a704:	f103 0208 	add.w	r2, r3, #8
 800a708:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a70c:	f8d4 b000 	ldr.w	fp, [r4]
 800a710:	f8c8 2000 	str.w	r2, [r8]
 800a714:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a718:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a71c:	9307      	str	r3, [sp, #28]
 800a71e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a722:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a72a:	4b9c      	ldr	r3, [pc, #624]	@ (800a99c <_printf_float+0x2c8>)
 800a72c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a730:	f7f6 fa24 	bl	8000b7c <__aeabi_dcmpun>
 800a734:	bb70      	cbnz	r0, 800a794 <_printf_float+0xc0>
 800a736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a73a:	4b98      	ldr	r3, [pc, #608]	@ (800a99c <_printf_float+0x2c8>)
 800a73c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a740:	f7f6 f9fe 	bl	8000b40 <__aeabi_dcmple>
 800a744:	bb30      	cbnz	r0, 800a794 <_printf_float+0xc0>
 800a746:	2200      	movs	r2, #0
 800a748:	2300      	movs	r3, #0
 800a74a:	4640      	mov	r0, r8
 800a74c:	4649      	mov	r1, r9
 800a74e:	f7f6 f9ed 	bl	8000b2c <__aeabi_dcmplt>
 800a752:	b110      	cbz	r0, 800a75a <_printf_float+0x86>
 800a754:	232d      	movs	r3, #45	@ 0x2d
 800a756:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a75a:	4a91      	ldr	r2, [pc, #580]	@ (800a9a0 <_printf_float+0x2cc>)
 800a75c:	4b91      	ldr	r3, [pc, #580]	@ (800a9a4 <_printf_float+0x2d0>)
 800a75e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a762:	bf94      	ite	ls
 800a764:	4690      	movls	r8, r2
 800a766:	4698      	movhi	r8, r3
 800a768:	2303      	movs	r3, #3
 800a76a:	6123      	str	r3, [r4, #16]
 800a76c:	f02b 0304 	bic.w	r3, fp, #4
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	f04f 0900 	mov.w	r9, #0
 800a776:	9700      	str	r7, [sp, #0]
 800a778:	4633      	mov	r3, r6
 800a77a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a77c:	4621      	mov	r1, r4
 800a77e:	4628      	mov	r0, r5
 800a780:	f000 f9d2 	bl	800ab28 <_printf_common>
 800a784:	3001      	adds	r0, #1
 800a786:	f040 808d 	bne.w	800a8a4 <_printf_float+0x1d0>
 800a78a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a78e:	b00d      	add	sp, #52	@ 0x34
 800a790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a794:	4642      	mov	r2, r8
 800a796:	464b      	mov	r3, r9
 800a798:	4640      	mov	r0, r8
 800a79a:	4649      	mov	r1, r9
 800a79c:	f7f6 f9ee 	bl	8000b7c <__aeabi_dcmpun>
 800a7a0:	b140      	cbz	r0, 800a7b4 <_printf_float+0xe0>
 800a7a2:	464b      	mov	r3, r9
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	bfbc      	itt	lt
 800a7a8:	232d      	movlt	r3, #45	@ 0x2d
 800a7aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a7ae:	4a7e      	ldr	r2, [pc, #504]	@ (800a9a8 <_printf_float+0x2d4>)
 800a7b0:	4b7e      	ldr	r3, [pc, #504]	@ (800a9ac <_printf_float+0x2d8>)
 800a7b2:	e7d4      	b.n	800a75e <_printf_float+0x8a>
 800a7b4:	6863      	ldr	r3, [r4, #4]
 800a7b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a7ba:	9206      	str	r2, [sp, #24]
 800a7bc:	1c5a      	adds	r2, r3, #1
 800a7be:	d13b      	bne.n	800a838 <_printf_float+0x164>
 800a7c0:	2306      	movs	r3, #6
 800a7c2:	6063      	str	r3, [r4, #4]
 800a7c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	6022      	str	r2, [r4, #0]
 800a7cc:	9303      	str	r3, [sp, #12]
 800a7ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800a7d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a7d4:	ab09      	add	r3, sp, #36	@ 0x24
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	6861      	ldr	r1, [r4, #4]
 800a7da:	ec49 8b10 	vmov	d0, r8, r9
 800a7de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f7ff fed7 	bl	800a596 <__cvt>
 800a7e8:	9b06      	ldr	r3, [sp, #24]
 800a7ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a7ec:	2b47      	cmp	r3, #71	@ 0x47
 800a7ee:	4680      	mov	r8, r0
 800a7f0:	d129      	bne.n	800a846 <_printf_float+0x172>
 800a7f2:	1cc8      	adds	r0, r1, #3
 800a7f4:	db02      	blt.n	800a7fc <_printf_float+0x128>
 800a7f6:	6863      	ldr	r3, [r4, #4]
 800a7f8:	4299      	cmp	r1, r3
 800a7fa:	dd41      	ble.n	800a880 <_printf_float+0x1ac>
 800a7fc:	f1aa 0a02 	sub.w	sl, sl, #2
 800a800:	fa5f fa8a 	uxtb.w	sl, sl
 800a804:	3901      	subs	r1, #1
 800a806:	4652      	mov	r2, sl
 800a808:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a80c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a80e:	f7ff ff27 	bl	800a660 <__exponent>
 800a812:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a814:	1813      	adds	r3, r2, r0
 800a816:	2a01      	cmp	r2, #1
 800a818:	4681      	mov	r9, r0
 800a81a:	6123      	str	r3, [r4, #16]
 800a81c:	dc02      	bgt.n	800a824 <_printf_float+0x150>
 800a81e:	6822      	ldr	r2, [r4, #0]
 800a820:	07d2      	lsls	r2, r2, #31
 800a822:	d501      	bpl.n	800a828 <_printf_float+0x154>
 800a824:	3301      	adds	r3, #1
 800a826:	6123      	str	r3, [r4, #16]
 800a828:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d0a2      	beq.n	800a776 <_printf_float+0xa2>
 800a830:	232d      	movs	r3, #45	@ 0x2d
 800a832:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a836:	e79e      	b.n	800a776 <_printf_float+0xa2>
 800a838:	9a06      	ldr	r2, [sp, #24]
 800a83a:	2a47      	cmp	r2, #71	@ 0x47
 800a83c:	d1c2      	bne.n	800a7c4 <_printf_float+0xf0>
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1c0      	bne.n	800a7c4 <_printf_float+0xf0>
 800a842:	2301      	movs	r3, #1
 800a844:	e7bd      	b.n	800a7c2 <_printf_float+0xee>
 800a846:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a84a:	d9db      	bls.n	800a804 <_printf_float+0x130>
 800a84c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a850:	d118      	bne.n	800a884 <_printf_float+0x1b0>
 800a852:	2900      	cmp	r1, #0
 800a854:	6863      	ldr	r3, [r4, #4]
 800a856:	dd0b      	ble.n	800a870 <_printf_float+0x19c>
 800a858:	6121      	str	r1, [r4, #16]
 800a85a:	b913      	cbnz	r3, 800a862 <_printf_float+0x18e>
 800a85c:	6822      	ldr	r2, [r4, #0]
 800a85e:	07d0      	lsls	r0, r2, #31
 800a860:	d502      	bpl.n	800a868 <_printf_float+0x194>
 800a862:	3301      	adds	r3, #1
 800a864:	440b      	add	r3, r1
 800a866:	6123      	str	r3, [r4, #16]
 800a868:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a86a:	f04f 0900 	mov.w	r9, #0
 800a86e:	e7db      	b.n	800a828 <_printf_float+0x154>
 800a870:	b913      	cbnz	r3, 800a878 <_printf_float+0x1a4>
 800a872:	6822      	ldr	r2, [r4, #0]
 800a874:	07d2      	lsls	r2, r2, #31
 800a876:	d501      	bpl.n	800a87c <_printf_float+0x1a8>
 800a878:	3302      	adds	r3, #2
 800a87a:	e7f4      	b.n	800a866 <_printf_float+0x192>
 800a87c:	2301      	movs	r3, #1
 800a87e:	e7f2      	b.n	800a866 <_printf_float+0x192>
 800a880:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a886:	4299      	cmp	r1, r3
 800a888:	db05      	blt.n	800a896 <_printf_float+0x1c2>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	6121      	str	r1, [r4, #16]
 800a88e:	07d8      	lsls	r0, r3, #31
 800a890:	d5ea      	bpl.n	800a868 <_printf_float+0x194>
 800a892:	1c4b      	adds	r3, r1, #1
 800a894:	e7e7      	b.n	800a866 <_printf_float+0x192>
 800a896:	2900      	cmp	r1, #0
 800a898:	bfd4      	ite	le
 800a89a:	f1c1 0202 	rsble	r2, r1, #2
 800a89e:	2201      	movgt	r2, #1
 800a8a0:	4413      	add	r3, r2
 800a8a2:	e7e0      	b.n	800a866 <_printf_float+0x192>
 800a8a4:	6823      	ldr	r3, [r4, #0]
 800a8a6:	055a      	lsls	r2, r3, #21
 800a8a8:	d407      	bmi.n	800a8ba <_printf_float+0x1e6>
 800a8aa:	6923      	ldr	r3, [r4, #16]
 800a8ac:	4642      	mov	r2, r8
 800a8ae:	4631      	mov	r1, r6
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	47b8      	blx	r7
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	d12b      	bne.n	800a910 <_printf_float+0x23c>
 800a8b8:	e767      	b.n	800a78a <_printf_float+0xb6>
 800a8ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a8be:	f240 80dd 	bls.w	800aa7c <_printf_float+0x3a8>
 800a8c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	f7f6 f925 	bl	8000b18 <__aeabi_dcmpeq>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d033      	beq.n	800a93a <_printf_float+0x266>
 800a8d2:	4a37      	ldr	r2, [pc, #220]	@ (800a9b0 <_printf_float+0x2dc>)
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	4631      	mov	r1, r6
 800a8d8:	4628      	mov	r0, r5
 800a8da:	47b8      	blx	r7
 800a8dc:	3001      	adds	r0, #1
 800a8de:	f43f af54 	beq.w	800a78a <_printf_float+0xb6>
 800a8e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a8e6:	4543      	cmp	r3, r8
 800a8e8:	db02      	blt.n	800a8f0 <_printf_float+0x21c>
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	07d8      	lsls	r0, r3, #31
 800a8ee:	d50f      	bpl.n	800a910 <_printf_float+0x23c>
 800a8f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8f4:	4631      	mov	r1, r6
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	47b8      	blx	r7
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	f43f af45 	beq.w	800a78a <_printf_float+0xb6>
 800a900:	f04f 0900 	mov.w	r9, #0
 800a904:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a908:	f104 0a1a 	add.w	sl, r4, #26
 800a90c:	45c8      	cmp	r8, r9
 800a90e:	dc09      	bgt.n	800a924 <_printf_float+0x250>
 800a910:	6823      	ldr	r3, [r4, #0]
 800a912:	079b      	lsls	r3, r3, #30
 800a914:	f100 8103 	bmi.w	800ab1e <_printf_float+0x44a>
 800a918:	68e0      	ldr	r0, [r4, #12]
 800a91a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a91c:	4298      	cmp	r0, r3
 800a91e:	bfb8      	it	lt
 800a920:	4618      	movlt	r0, r3
 800a922:	e734      	b.n	800a78e <_printf_float+0xba>
 800a924:	2301      	movs	r3, #1
 800a926:	4652      	mov	r2, sl
 800a928:	4631      	mov	r1, r6
 800a92a:	4628      	mov	r0, r5
 800a92c:	47b8      	blx	r7
 800a92e:	3001      	adds	r0, #1
 800a930:	f43f af2b 	beq.w	800a78a <_printf_float+0xb6>
 800a934:	f109 0901 	add.w	r9, r9, #1
 800a938:	e7e8      	b.n	800a90c <_printf_float+0x238>
 800a93a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	dc39      	bgt.n	800a9b4 <_printf_float+0x2e0>
 800a940:	4a1b      	ldr	r2, [pc, #108]	@ (800a9b0 <_printf_float+0x2dc>)
 800a942:	2301      	movs	r3, #1
 800a944:	4631      	mov	r1, r6
 800a946:	4628      	mov	r0, r5
 800a948:	47b8      	blx	r7
 800a94a:	3001      	adds	r0, #1
 800a94c:	f43f af1d 	beq.w	800a78a <_printf_float+0xb6>
 800a950:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a954:	ea59 0303 	orrs.w	r3, r9, r3
 800a958:	d102      	bne.n	800a960 <_printf_float+0x28c>
 800a95a:	6823      	ldr	r3, [r4, #0]
 800a95c:	07d9      	lsls	r1, r3, #31
 800a95e:	d5d7      	bpl.n	800a910 <_printf_float+0x23c>
 800a960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a964:	4631      	mov	r1, r6
 800a966:	4628      	mov	r0, r5
 800a968:	47b8      	blx	r7
 800a96a:	3001      	adds	r0, #1
 800a96c:	f43f af0d 	beq.w	800a78a <_printf_float+0xb6>
 800a970:	f04f 0a00 	mov.w	sl, #0
 800a974:	f104 0b1a 	add.w	fp, r4, #26
 800a978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a97a:	425b      	negs	r3, r3
 800a97c:	4553      	cmp	r3, sl
 800a97e:	dc01      	bgt.n	800a984 <_printf_float+0x2b0>
 800a980:	464b      	mov	r3, r9
 800a982:	e793      	b.n	800a8ac <_printf_float+0x1d8>
 800a984:	2301      	movs	r3, #1
 800a986:	465a      	mov	r2, fp
 800a988:	4631      	mov	r1, r6
 800a98a:	4628      	mov	r0, r5
 800a98c:	47b8      	blx	r7
 800a98e:	3001      	adds	r0, #1
 800a990:	f43f aefb 	beq.w	800a78a <_printf_float+0xb6>
 800a994:	f10a 0a01 	add.w	sl, sl, #1
 800a998:	e7ee      	b.n	800a978 <_printf_float+0x2a4>
 800a99a:	bf00      	nop
 800a99c:	7fefffff 	.word	0x7fefffff
 800a9a0:	0800d828 	.word	0x0800d828
 800a9a4:	0800d82c 	.word	0x0800d82c
 800a9a8:	0800d830 	.word	0x0800d830
 800a9ac:	0800d834 	.word	0x0800d834
 800a9b0:	0800d838 	.word	0x0800d838
 800a9b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a9ba:	4553      	cmp	r3, sl
 800a9bc:	bfa8      	it	ge
 800a9be:	4653      	movge	r3, sl
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	4699      	mov	r9, r3
 800a9c4:	dc36      	bgt.n	800aa34 <_printf_float+0x360>
 800a9c6:	f04f 0b00 	mov.w	fp, #0
 800a9ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9ce:	f104 021a 	add.w	r2, r4, #26
 800a9d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9d4:	9306      	str	r3, [sp, #24]
 800a9d6:	eba3 0309 	sub.w	r3, r3, r9
 800a9da:	455b      	cmp	r3, fp
 800a9dc:	dc31      	bgt.n	800aa42 <_printf_float+0x36e>
 800a9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9e0:	459a      	cmp	sl, r3
 800a9e2:	dc3a      	bgt.n	800aa5a <_printf_float+0x386>
 800a9e4:	6823      	ldr	r3, [r4, #0]
 800a9e6:	07da      	lsls	r2, r3, #31
 800a9e8:	d437      	bmi.n	800aa5a <_printf_float+0x386>
 800a9ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ec:	ebaa 0903 	sub.w	r9, sl, r3
 800a9f0:	9b06      	ldr	r3, [sp, #24]
 800a9f2:	ebaa 0303 	sub.w	r3, sl, r3
 800a9f6:	4599      	cmp	r9, r3
 800a9f8:	bfa8      	it	ge
 800a9fa:	4699      	movge	r9, r3
 800a9fc:	f1b9 0f00 	cmp.w	r9, #0
 800aa00:	dc33      	bgt.n	800aa6a <_printf_float+0x396>
 800aa02:	f04f 0800 	mov.w	r8, #0
 800aa06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa0a:	f104 0b1a 	add.w	fp, r4, #26
 800aa0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa10:	ebaa 0303 	sub.w	r3, sl, r3
 800aa14:	eba3 0309 	sub.w	r3, r3, r9
 800aa18:	4543      	cmp	r3, r8
 800aa1a:	f77f af79 	ble.w	800a910 <_printf_float+0x23c>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	465a      	mov	r2, fp
 800aa22:	4631      	mov	r1, r6
 800aa24:	4628      	mov	r0, r5
 800aa26:	47b8      	blx	r7
 800aa28:	3001      	adds	r0, #1
 800aa2a:	f43f aeae 	beq.w	800a78a <_printf_float+0xb6>
 800aa2e:	f108 0801 	add.w	r8, r8, #1
 800aa32:	e7ec      	b.n	800aa0e <_printf_float+0x33a>
 800aa34:	4642      	mov	r2, r8
 800aa36:	4631      	mov	r1, r6
 800aa38:	4628      	mov	r0, r5
 800aa3a:	47b8      	blx	r7
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	d1c2      	bne.n	800a9c6 <_printf_float+0x2f2>
 800aa40:	e6a3      	b.n	800a78a <_printf_float+0xb6>
 800aa42:	2301      	movs	r3, #1
 800aa44:	4631      	mov	r1, r6
 800aa46:	4628      	mov	r0, r5
 800aa48:	9206      	str	r2, [sp, #24]
 800aa4a:	47b8      	blx	r7
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	f43f ae9c 	beq.w	800a78a <_printf_float+0xb6>
 800aa52:	9a06      	ldr	r2, [sp, #24]
 800aa54:	f10b 0b01 	add.w	fp, fp, #1
 800aa58:	e7bb      	b.n	800a9d2 <_printf_float+0x2fe>
 800aa5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa5e:	4631      	mov	r1, r6
 800aa60:	4628      	mov	r0, r5
 800aa62:	47b8      	blx	r7
 800aa64:	3001      	adds	r0, #1
 800aa66:	d1c0      	bne.n	800a9ea <_printf_float+0x316>
 800aa68:	e68f      	b.n	800a78a <_printf_float+0xb6>
 800aa6a:	9a06      	ldr	r2, [sp, #24]
 800aa6c:	464b      	mov	r3, r9
 800aa6e:	4442      	add	r2, r8
 800aa70:	4631      	mov	r1, r6
 800aa72:	4628      	mov	r0, r5
 800aa74:	47b8      	blx	r7
 800aa76:	3001      	adds	r0, #1
 800aa78:	d1c3      	bne.n	800aa02 <_printf_float+0x32e>
 800aa7a:	e686      	b.n	800a78a <_printf_float+0xb6>
 800aa7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa80:	f1ba 0f01 	cmp.w	sl, #1
 800aa84:	dc01      	bgt.n	800aa8a <_printf_float+0x3b6>
 800aa86:	07db      	lsls	r3, r3, #31
 800aa88:	d536      	bpl.n	800aaf8 <_printf_float+0x424>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	4642      	mov	r2, r8
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4628      	mov	r0, r5
 800aa92:	47b8      	blx	r7
 800aa94:	3001      	adds	r0, #1
 800aa96:	f43f ae78 	beq.w	800a78a <_printf_float+0xb6>
 800aa9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa9e:	4631      	mov	r1, r6
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	47b8      	blx	r7
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	f43f ae70 	beq.w	800a78a <_printf_float+0xb6>
 800aaaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aaae:	2200      	movs	r2, #0
 800aab0:	2300      	movs	r3, #0
 800aab2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800aab6:	f7f6 f82f 	bl	8000b18 <__aeabi_dcmpeq>
 800aaba:	b9c0      	cbnz	r0, 800aaee <_printf_float+0x41a>
 800aabc:	4653      	mov	r3, sl
 800aabe:	f108 0201 	add.w	r2, r8, #1
 800aac2:	4631      	mov	r1, r6
 800aac4:	4628      	mov	r0, r5
 800aac6:	47b8      	blx	r7
 800aac8:	3001      	adds	r0, #1
 800aaca:	d10c      	bne.n	800aae6 <_printf_float+0x412>
 800aacc:	e65d      	b.n	800a78a <_printf_float+0xb6>
 800aace:	2301      	movs	r3, #1
 800aad0:	465a      	mov	r2, fp
 800aad2:	4631      	mov	r1, r6
 800aad4:	4628      	mov	r0, r5
 800aad6:	47b8      	blx	r7
 800aad8:	3001      	adds	r0, #1
 800aada:	f43f ae56 	beq.w	800a78a <_printf_float+0xb6>
 800aade:	f108 0801 	add.w	r8, r8, #1
 800aae2:	45d0      	cmp	r8, sl
 800aae4:	dbf3      	blt.n	800aace <_printf_float+0x3fa>
 800aae6:	464b      	mov	r3, r9
 800aae8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aaec:	e6df      	b.n	800a8ae <_printf_float+0x1da>
 800aaee:	f04f 0800 	mov.w	r8, #0
 800aaf2:	f104 0b1a 	add.w	fp, r4, #26
 800aaf6:	e7f4      	b.n	800aae2 <_printf_float+0x40e>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	4642      	mov	r2, r8
 800aafc:	e7e1      	b.n	800aac2 <_printf_float+0x3ee>
 800aafe:	2301      	movs	r3, #1
 800ab00:	464a      	mov	r2, r9
 800ab02:	4631      	mov	r1, r6
 800ab04:	4628      	mov	r0, r5
 800ab06:	47b8      	blx	r7
 800ab08:	3001      	adds	r0, #1
 800ab0a:	f43f ae3e 	beq.w	800a78a <_printf_float+0xb6>
 800ab0e:	f108 0801 	add.w	r8, r8, #1
 800ab12:	68e3      	ldr	r3, [r4, #12]
 800ab14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab16:	1a5b      	subs	r3, r3, r1
 800ab18:	4543      	cmp	r3, r8
 800ab1a:	dcf0      	bgt.n	800aafe <_printf_float+0x42a>
 800ab1c:	e6fc      	b.n	800a918 <_printf_float+0x244>
 800ab1e:	f04f 0800 	mov.w	r8, #0
 800ab22:	f104 0919 	add.w	r9, r4, #25
 800ab26:	e7f4      	b.n	800ab12 <_printf_float+0x43e>

0800ab28 <_printf_common>:
 800ab28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab2c:	4616      	mov	r6, r2
 800ab2e:	4698      	mov	r8, r3
 800ab30:	688a      	ldr	r2, [r1, #8]
 800ab32:	690b      	ldr	r3, [r1, #16]
 800ab34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	bfb8      	it	lt
 800ab3c:	4613      	movlt	r3, r2
 800ab3e:	6033      	str	r3, [r6, #0]
 800ab40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab44:	4607      	mov	r7, r0
 800ab46:	460c      	mov	r4, r1
 800ab48:	b10a      	cbz	r2, 800ab4e <_printf_common+0x26>
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	6033      	str	r3, [r6, #0]
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	0699      	lsls	r1, r3, #26
 800ab52:	bf42      	ittt	mi
 800ab54:	6833      	ldrmi	r3, [r6, #0]
 800ab56:	3302      	addmi	r3, #2
 800ab58:	6033      	strmi	r3, [r6, #0]
 800ab5a:	6825      	ldr	r5, [r4, #0]
 800ab5c:	f015 0506 	ands.w	r5, r5, #6
 800ab60:	d106      	bne.n	800ab70 <_printf_common+0x48>
 800ab62:	f104 0a19 	add.w	sl, r4, #25
 800ab66:	68e3      	ldr	r3, [r4, #12]
 800ab68:	6832      	ldr	r2, [r6, #0]
 800ab6a:	1a9b      	subs	r3, r3, r2
 800ab6c:	42ab      	cmp	r3, r5
 800ab6e:	dc26      	bgt.n	800abbe <_printf_common+0x96>
 800ab70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab74:	6822      	ldr	r2, [r4, #0]
 800ab76:	3b00      	subs	r3, #0
 800ab78:	bf18      	it	ne
 800ab7a:	2301      	movne	r3, #1
 800ab7c:	0692      	lsls	r2, r2, #26
 800ab7e:	d42b      	bmi.n	800abd8 <_printf_common+0xb0>
 800ab80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab84:	4641      	mov	r1, r8
 800ab86:	4638      	mov	r0, r7
 800ab88:	47c8      	blx	r9
 800ab8a:	3001      	adds	r0, #1
 800ab8c:	d01e      	beq.n	800abcc <_printf_common+0xa4>
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	6922      	ldr	r2, [r4, #16]
 800ab92:	f003 0306 	and.w	r3, r3, #6
 800ab96:	2b04      	cmp	r3, #4
 800ab98:	bf02      	ittt	eq
 800ab9a:	68e5      	ldreq	r5, [r4, #12]
 800ab9c:	6833      	ldreq	r3, [r6, #0]
 800ab9e:	1aed      	subeq	r5, r5, r3
 800aba0:	68a3      	ldr	r3, [r4, #8]
 800aba2:	bf0c      	ite	eq
 800aba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aba8:	2500      	movne	r5, #0
 800abaa:	4293      	cmp	r3, r2
 800abac:	bfc4      	itt	gt
 800abae:	1a9b      	subgt	r3, r3, r2
 800abb0:	18ed      	addgt	r5, r5, r3
 800abb2:	2600      	movs	r6, #0
 800abb4:	341a      	adds	r4, #26
 800abb6:	42b5      	cmp	r5, r6
 800abb8:	d11a      	bne.n	800abf0 <_printf_common+0xc8>
 800abba:	2000      	movs	r0, #0
 800abbc:	e008      	b.n	800abd0 <_printf_common+0xa8>
 800abbe:	2301      	movs	r3, #1
 800abc0:	4652      	mov	r2, sl
 800abc2:	4641      	mov	r1, r8
 800abc4:	4638      	mov	r0, r7
 800abc6:	47c8      	blx	r9
 800abc8:	3001      	adds	r0, #1
 800abca:	d103      	bne.n	800abd4 <_printf_common+0xac>
 800abcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abd4:	3501      	adds	r5, #1
 800abd6:	e7c6      	b.n	800ab66 <_printf_common+0x3e>
 800abd8:	18e1      	adds	r1, r4, r3
 800abda:	1c5a      	adds	r2, r3, #1
 800abdc:	2030      	movs	r0, #48	@ 0x30
 800abde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800abe2:	4422      	add	r2, r4
 800abe4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800abe8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800abec:	3302      	adds	r3, #2
 800abee:	e7c7      	b.n	800ab80 <_printf_common+0x58>
 800abf0:	2301      	movs	r3, #1
 800abf2:	4622      	mov	r2, r4
 800abf4:	4641      	mov	r1, r8
 800abf6:	4638      	mov	r0, r7
 800abf8:	47c8      	blx	r9
 800abfa:	3001      	adds	r0, #1
 800abfc:	d0e6      	beq.n	800abcc <_printf_common+0xa4>
 800abfe:	3601      	adds	r6, #1
 800ac00:	e7d9      	b.n	800abb6 <_printf_common+0x8e>
	...

0800ac04 <_printf_i>:
 800ac04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac08:	7e0f      	ldrb	r7, [r1, #24]
 800ac0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac0c:	2f78      	cmp	r7, #120	@ 0x78
 800ac0e:	4691      	mov	r9, r2
 800ac10:	4680      	mov	r8, r0
 800ac12:	460c      	mov	r4, r1
 800ac14:	469a      	mov	sl, r3
 800ac16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac1a:	d807      	bhi.n	800ac2c <_printf_i+0x28>
 800ac1c:	2f62      	cmp	r7, #98	@ 0x62
 800ac1e:	d80a      	bhi.n	800ac36 <_printf_i+0x32>
 800ac20:	2f00      	cmp	r7, #0
 800ac22:	f000 80d2 	beq.w	800adca <_printf_i+0x1c6>
 800ac26:	2f58      	cmp	r7, #88	@ 0x58
 800ac28:	f000 80b9 	beq.w	800ad9e <_printf_i+0x19a>
 800ac2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac34:	e03a      	b.n	800acac <_printf_i+0xa8>
 800ac36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac3a:	2b15      	cmp	r3, #21
 800ac3c:	d8f6      	bhi.n	800ac2c <_printf_i+0x28>
 800ac3e:	a101      	add	r1, pc, #4	@ (adr r1, 800ac44 <_printf_i+0x40>)
 800ac40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac44:	0800ac9d 	.word	0x0800ac9d
 800ac48:	0800acb1 	.word	0x0800acb1
 800ac4c:	0800ac2d 	.word	0x0800ac2d
 800ac50:	0800ac2d 	.word	0x0800ac2d
 800ac54:	0800ac2d 	.word	0x0800ac2d
 800ac58:	0800ac2d 	.word	0x0800ac2d
 800ac5c:	0800acb1 	.word	0x0800acb1
 800ac60:	0800ac2d 	.word	0x0800ac2d
 800ac64:	0800ac2d 	.word	0x0800ac2d
 800ac68:	0800ac2d 	.word	0x0800ac2d
 800ac6c:	0800ac2d 	.word	0x0800ac2d
 800ac70:	0800adb1 	.word	0x0800adb1
 800ac74:	0800acdb 	.word	0x0800acdb
 800ac78:	0800ad6b 	.word	0x0800ad6b
 800ac7c:	0800ac2d 	.word	0x0800ac2d
 800ac80:	0800ac2d 	.word	0x0800ac2d
 800ac84:	0800add3 	.word	0x0800add3
 800ac88:	0800ac2d 	.word	0x0800ac2d
 800ac8c:	0800acdb 	.word	0x0800acdb
 800ac90:	0800ac2d 	.word	0x0800ac2d
 800ac94:	0800ac2d 	.word	0x0800ac2d
 800ac98:	0800ad73 	.word	0x0800ad73
 800ac9c:	6833      	ldr	r3, [r6, #0]
 800ac9e:	1d1a      	adds	r2, r3, #4
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	6032      	str	r2, [r6, #0]
 800aca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aca8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800acac:	2301      	movs	r3, #1
 800acae:	e09d      	b.n	800adec <_printf_i+0x1e8>
 800acb0:	6833      	ldr	r3, [r6, #0]
 800acb2:	6820      	ldr	r0, [r4, #0]
 800acb4:	1d19      	adds	r1, r3, #4
 800acb6:	6031      	str	r1, [r6, #0]
 800acb8:	0606      	lsls	r6, r0, #24
 800acba:	d501      	bpl.n	800acc0 <_printf_i+0xbc>
 800acbc:	681d      	ldr	r5, [r3, #0]
 800acbe:	e003      	b.n	800acc8 <_printf_i+0xc4>
 800acc0:	0645      	lsls	r5, r0, #25
 800acc2:	d5fb      	bpl.n	800acbc <_printf_i+0xb8>
 800acc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800acc8:	2d00      	cmp	r5, #0
 800acca:	da03      	bge.n	800acd4 <_printf_i+0xd0>
 800accc:	232d      	movs	r3, #45	@ 0x2d
 800acce:	426d      	negs	r5, r5
 800acd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acd4:	4859      	ldr	r0, [pc, #356]	@ (800ae3c <_printf_i+0x238>)
 800acd6:	230a      	movs	r3, #10
 800acd8:	e011      	b.n	800acfe <_printf_i+0xfa>
 800acda:	6821      	ldr	r1, [r4, #0]
 800acdc:	6833      	ldr	r3, [r6, #0]
 800acde:	0608      	lsls	r0, r1, #24
 800ace0:	f853 5b04 	ldr.w	r5, [r3], #4
 800ace4:	d402      	bmi.n	800acec <_printf_i+0xe8>
 800ace6:	0649      	lsls	r1, r1, #25
 800ace8:	bf48      	it	mi
 800acea:	b2ad      	uxthmi	r5, r5
 800acec:	2f6f      	cmp	r7, #111	@ 0x6f
 800acee:	4853      	ldr	r0, [pc, #332]	@ (800ae3c <_printf_i+0x238>)
 800acf0:	6033      	str	r3, [r6, #0]
 800acf2:	bf14      	ite	ne
 800acf4:	230a      	movne	r3, #10
 800acf6:	2308      	moveq	r3, #8
 800acf8:	2100      	movs	r1, #0
 800acfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800acfe:	6866      	ldr	r6, [r4, #4]
 800ad00:	60a6      	str	r6, [r4, #8]
 800ad02:	2e00      	cmp	r6, #0
 800ad04:	bfa2      	ittt	ge
 800ad06:	6821      	ldrge	r1, [r4, #0]
 800ad08:	f021 0104 	bicge.w	r1, r1, #4
 800ad0c:	6021      	strge	r1, [r4, #0]
 800ad0e:	b90d      	cbnz	r5, 800ad14 <_printf_i+0x110>
 800ad10:	2e00      	cmp	r6, #0
 800ad12:	d04b      	beq.n	800adac <_printf_i+0x1a8>
 800ad14:	4616      	mov	r6, r2
 800ad16:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad1a:	fb03 5711 	mls	r7, r3, r1, r5
 800ad1e:	5dc7      	ldrb	r7, [r0, r7]
 800ad20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad24:	462f      	mov	r7, r5
 800ad26:	42bb      	cmp	r3, r7
 800ad28:	460d      	mov	r5, r1
 800ad2a:	d9f4      	bls.n	800ad16 <_printf_i+0x112>
 800ad2c:	2b08      	cmp	r3, #8
 800ad2e:	d10b      	bne.n	800ad48 <_printf_i+0x144>
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	07df      	lsls	r7, r3, #31
 800ad34:	d508      	bpl.n	800ad48 <_printf_i+0x144>
 800ad36:	6923      	ldr	r3, [r4, #16]
 800ad38:	6861      	ldr	r1, [r4, #4]
 800ad3a:	4299      	cmp	r1, r3
 800ad3c:	bfde      	ittt	le
 800ad3e:	2330      	movle	r3, #48	@ 0x30
 800ad40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad44:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ad48:	1b92      	subs	r2, r2, r6
 800ad4a:	6122      	str	r2, [r4, #16]
 800ad4c:	f8cd a000 	str.w	sl, [sp]
 800ad50:	464b      	mov	r3, r9
 800ad52:	aa03      	add	r2, sp, #12
 800ad54:	4621      	mov	r1, r4
 800ad56:	4640      	mov	r0, r8
 800ad58:	f7ff fee6 	bl	800ab28 <_printf_common>
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	d14a      	bne.n	800adf6 <_printf_i+0x1f2>
 800ad60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad64:	b004      	add	sp, #16
 800ad66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	f043 0320 	orr.w	r3, r3, #32
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	4833      	ldr	r0, [pc, #204]	@ (800ae40 <_printf_i+0x23c>)
 800ad74:	2778      	movs	r7, #120	@ 0x78
 800ad76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	6831      	ldr	r1, [r6, #0]
 800ad7e:	061f      	lsls	r7, r3, #24
 800ad80:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad84:	d402      	bmi.n	800ad8c <_printf_i+0x188>
 800ad86:	065f      	lsls	r7, r3, #25
 800ad88:	bf48      	it	mi
 800ad8a:	b2ad      	uxthmi	r5, r5
 800ad8c:	6031      	str	r1, [r6, #0]
 800ad8e:	07d9      	lsls	r1, r3, #31
 800ad90:	bf44      	itt	mi
 800ad92:	f043 0320 	orrmi.w	r3, r3, #32
 800ad96:	6023      	strmi	r3, [r4, #0]
 800ad98:	b11d      	cbz	r5, 800ada2 <_printf_i+0x19e>
 800ad9a:	2310      	movs	r3, #16
 800ad9c:	e7ac      	b.n	800acf8 <_printf_i+0xf4>
 800ad9e:	4827      	ldr	r0, [pc, #156]	@ (800ae3c <_printf_i+0x238>)
 800ada0:	e7e9      	b.n	800ad76 <_printf_i+0x172>
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	f023 0320 	bic.w	r3, r3, #32
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	e7f6      	b.n	800ad9a <_printf_i+0x196>
 800adac:	4616      	mov	r6, r2
 800adae:	e7bd      	b.n	800ad2c <_printf_i+0x128>
 800adb0:	6833      	ldr	r3, [r6, #0]
 800adb2:	6825      	ldr	r5, [r4, #0]
 800adb4:	6961      	ldr	r1, [r4, #20]
 800adb6:	1d18      	adds	r0, r3, #4
 800adb8:	6030      	str	r0, [r6, #0]
 800adba:	062e      	lsls	r6, r5, #24
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	d501      	bpl.n	800adc4 <_printf_i+0x1c0>
 800adc0:	6019      	str	r1, [r3, #0]
 800adc2:	e002      	b.n	800adca <_printf_i+0x1c6>
 800adc4:	0668      	lsls	r0, r5, #25
 800adc6:	d5fb      	bpl.n	800adc0 <_printf_i+0x1bc>
 800adc8:	8019      	strh	r1, [r3, #0]
 800adca:	2300      	movs	r3, #0
 800adcc:	6123      	str	r3, [r4, #16]
 800adce:	4616      	mov	r6, r2
 800add0:	e7bc      	b.n	800ad4c <_printf_i+0x148>
 800add2:	6833      	ldr	r3, [r6, #0]
 800add4:	1d1a      	adds	r2, r3, #4
 800add6:	6032      	str	r2, [r6, #0]
 800add8:	681e      	ldr	r6, [r3, #0]
 800adda:	6862      	ldr	r2, [r4, #4]
 800addc:	2100      	movs	r1, #0
 800adde:	4630      	mov	r0, r6
 800ade0:	f7f5 fa1e 	bl	8000220 <memchr>
 800ade4:	b108      	cbz	r0, 800adea <_printf_i+0x1e6>
 800ade6:	1b80      	subs	r0, r0, r6
 800ade8:	6060      	str	r0, [r4, #4]
 800adea:	6863      	ldr	r3, [r4, #4]
 800adec:	6123      	str	r3, [r4, #16]
 800adee:	2300      	movs	r3, #0
 800adf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adf4:	e7aa      	b.n	800ad4c <_printf_i+0x148>
 800adf6:	6923      	ldr	r3, [r4, #16]
 800adf8:	4632      	mov	r2, r6
 800adfa:	4649      	mov	r1, r9
 800adfc:	4640      	mov	r0, r8
 800adfe:	47d0      	blx	sl
 800ae00:	3001      	adds	r0, #1
 800ae02:	d0ad      	beq.n	800ad60 <_printf_i+0x15c>
 800ae04:	6823      	ldr	r3, [r4, #0]
 800ae06:	079b      	lsls	r3, r3, #30
 800ae08:	d413      	bmi.n	800ae32 <_printf_i+0x22e>
 800ae0a:	68e0      	ldr	r0, [r4, #12]
 800ae0c:	9b03      	ldr	r3, [sp, #12]
 800ae0e:	4298      	cmp	r0, r3
 800ae10:	bfb8      	it	lt
 800ae12:	4618      	movlt	r0, r3
 800ae14:	e7a6      	b.n	800ad64 <_printf_i+0x160>
 800ae16:	2301      	movs	r3, #1
 800ae18:	4632      	mov	r2, r6
 800ae1a:	4649      	mov	r1, r9
 800ae1c:	4640      	mov	r0, r8
 800ae1e:	47d0      	blx	sl
 800ae20:	3001      	adds	r0, #1
 800ae22:	d09d      	beq.n	800ad60 <_printf_i+0x15c>
 800ae24:	3501      	adds	r5, #1
 800ae26:	68e3      	ldr	r3, [r4, #12]
 800ae28:	9903      	ldr	r1, [sp, #12]
 800ae2a:	1a5b      	subs	r3, r3, r1
 800ae2c:	42ab      	cmp	r3, r5
 800ae2e:	dcf2      	bgt.n	800ae16 <_printf_i+0x212>
 800ae30:	e7eb      	b.n	800ae0a <_printf_i+0x206>
 800ae32:	2500      	movs	r5, #0
 800ae34:	f104 0619 	add.w	r6, r4, #25
 800ae38:	e7f5      	b.n	800ae26 <_printf_i+0x222>
 800ae3a:	bf00      	nop
 800ae3c:	0800d83a 	.word	0x0800d83a
 800ae40:	0800d84b 	.word	0x0800d84b

0800ae44 <siprintf>:
 800ae44:	b40e      	push	{r1, r2, r3}
 800ae46:	b500      	push	{lr}
 800ae48:	b09c      	sub	sp, #112	@ 0x70
 800ae4a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ae4c:	9002      	str	r0, [sp, #8]
 800ae4e:	9006      	str	r0, [sp, #24]
 800ae50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ae54:	4809      	ldr	r0, [pc, #36]	@ (800ae7c <siprintf+0x38>)
 800ae56:	9107      	str	r1, [sp, #28]
 800ae58:	9104      	str	r1, [sp, #16]
 800ae5a:	4909      	ldr	r1, [pc, #36]	@ (800ae80 <siprintf+0x3c>)
 800ae5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae60:	9105      	str	r1, [sp, #20]
 800ae62:	6800      	ldr	r0, [r0, #0]
 800ae64:	9301      	str	r3, [sp, #4]
 800ae66:	a902      	add	r1, sp, #8
 800ae68:	f000 ffea 	bl	800be40 <_svfiprintf_r>
 800ae6c:	9b02      	ldr	r3, [sp, #8]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	701a      	strb	r2, [r3, #0]
 800ae72:	b01c      	add	sp, #112	@ 0x70
 800ae74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae78:	b003      	add	sp, #12
 800ae7a:	4770      	bx	lr
 800ae7c:	2000003c 	.word	0x2000003c
 800ae80:	ffff0208 	.word	0xffff0208

0800ae84 <std>:
 800ae84:	2300      	movs	r3, #0
 800ae86:	b510      	push	{r4, lr}
 800ae88:	4604      	mov	r4, r0
 800ae8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ae8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae92:	6083      	str	r3, [r0, #8]
 800ae94:	8181      	strh	r1, [r0, #12]
 800ae96:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae98:	81c2      	strh	r2, [r0, #14]
 800ae9a:	6183      	str	r3, [r0, #24]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	2208      	movs	r2, #8
 800aea0:	305c      	adds	r0, #92	@ 0x5c
 800aea2:	f000 f8eb 	bl	800b07c <memset>
 800aea6:	4b0d      	ldr	r3, [pc, #52]	@ (800aedc <std+0x58>)
 800aea8:	6263      	str	r3, [r4, #36]	@ 0x24
 800aeaa:	4b0d      	ldr	r3, [pc, #52]	@ (800aee0 <std+0x5c>)
 800aeac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aeae:	4b0d      	ldr	r3, [pc, #52]	@ (800aee4 <std+0x60>)
 800aeb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aeb2:	4b0d      	ldr	r3, [pc, #52]	@ (800aee8 <std+0x64>)
 800aeb4:	6323      	str	r3, [r4, #48]	@ 0x30
 800aeb6:	4b0d      	ldr	r3, [pc, #52]	@ (800aeec <std+0x68>)
 800aeb8:	6224      	str	r4, [r4, #32]
 800aeba:	429c      	cmp	r4, r3
 800aebc:	d006      	beq.n	800aecc <std+0x48>
 800aebe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aec2:	4294      	cmp	r4, r2
 800aec4:	d002      	beq.n	800aecc <std+0x48>
 800aec6:	33d0      	adds	r3, #208	@ 0xd0
 800aec8:	429c      	cmp	r4, r3
 800aeca:	d105      	bne.n	800aed8 <std+0x54>
 800aecc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aed4:	f000 b908 	b.w	800b0e8 <__retarget_lock_init_recursive>
 800aed8:	bd10      	pop	{r4, pc}
 800aeda:	bf00      	nop
 800aedc:	0800ca01 	.word	0x0800ca01
 800aee0:	0800ca23 	.word	0x0800ca23
 800aee4:	0800ca5b 	.word	0x0800ca5b
 800aee8:	0800ca7f 	.word	0x0800ca7f
 800aeec:	20000c38 	.word	0x20000c38

0800aef0 <stdio_exit_handler>:
 800aef0:	4a02      	ldr	r2, [pc, #8]	@ (800aefc <stdio_exit_handler+0xc>)
 800aef2:	4903      	ldr	r1, [pc, #12]	@ (800af00 <stdio_exit_handler+0x10>)
 800aef4:	4803      	ldr	r0, [pc, #12]	@ (800af04 <stdio_exit_handler+0x14>)
 800aef6:	f000 b869 	b.w	800afcc <_fwalk_sglue>
 800aefa:	bf00      	nop
 800aefc:	20000030 	.word	0x20000030
 800af00:	0800c295 	.word	0x0800c295
 800af04:	20000040 	.word	0x20000040

0800af08 <cleanup_stdio>:
 800af08:	6841      	ldr	r1, [r0, #4]
 800af0a:	4b0c      	ldr	r3, [pc, #48]	@ (800af3c <cleanup_stdio+0x34>)
 800af0c:	4299      	cmp	r1, r3
 800af0e:	b510      	push	{r4, lr}
 800af10:	4604      	mov	r4, r0
 800af12:	d001      	beq.n	800af18 <cleanup_stdio+0x10>
 800af14:	f001 f9be 	bl	800c294 <_fflush_r>
 800af18:	68a1      	ldr	r1, [r4, #8]
 800af1a:	4b09      	ldr	r3, [pc, #36]	@ (800af40 <cleanup_stdio+0x38>)
 800af1c:	4299      	cmp	r1, r3
 800af1e:	d002      	beq.n	800af26 <cleanup_stdio+0x1e>
 800af20:	4620      	mov	r0, r4
 800af22:	f001 f9b7 	bl	800c294 <_fflush_r>
 800af26:	68e1      	ldr	r1, [r4, #12]
 800af28:	4b06      	ldr	r3, [pc, #24]	@ (800af44 <cleanup_stdio+0x3c>)
 800af2a:	4299      	cmp	r1, r3
 800af2c:	d004      	beq.n	800af38 <cleanup_stdio+0x30>
 800af2e:	4620      	mov	r0, r4
 800af30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af34:	f001 b9ae 	b.w	800c294 <_fflush_r>
 800af38:	bd10      	pop	{r4, pc}
 800af3a:	bf00      	nop
 800af3c:	20000c38 	.word	0x20000c38
 800af40:	20000ca0 	.word	0x20000ca0
 800af44:	20000d08 	.word	0x20000d08

0800af48 <global_stdio_init.part.0>:
 800af48:	b510      	push	{r4, lr}
 800af4a:	4b0b      	ldr	r3, [pc, #44]	@ (800af78 <global_stdio_init.part.0+0x30>)
 800af4c:	4c0b      	ldr	r4, [pc, #44]	@ (800af7c <global_stdio_init.part.0+0x34>)
 800af4e:	4a0c      	ldr	r2, [pc, #48]	@ (800af80 <global_stdio_init.part.0+0x38>)
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	4620      	mov	r0, r4
 800af54:	2200      	movs	r2, #0
 800af56:	2104      	movs	r1, #4
 800af58:	f7ff ff94 	bl	800ae84 <std>
 800af5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af60:	2201      	movs	r2, #1
 800af62:	2109      	movs	r1, #9
 800af64:	f7ff ff8e 	bl	800ae84 <std>
 800af68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af6c:	2202      	movs	r2, #2
 800af6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af72:	2112      	movs	r1, #18
 800af74:	f7ff bf86 	b.w	800ae84 <std>
 800af78:	20000d70 	.word	0x20000d70
 800af7c:	20000c38 	.word	0x20000c38
 800af80:	0800aef1 	.word	0x0800aef1

0800af84 <__sfp_lock_acquire>:
 800af84:	4801      	ldr	r0, [pc, #4]	@ (800af8c <__sfp_lock_acquire+0x8>)
 800af86:	f000 b8b0 	b.w	800b0ea <__retarget_lock_acquire_recursive>
 800af8a:	bf00      	nop
 800af8c:	20000d75 	.word	0x20000d75

0800af90 <__sfp_lock_release>:
 800af90:	4801      	ldr	r0, [pc, #4]	@ (800af98 <__sfp_lock_release+0x8>)
 800af92:	f000 b8ab 	b.w	800b0ec <__retarget_lock_release_recursive>
 800af96:	bf00      	nop
 800af98:	20000d75 	.word	0x20000d75

0800af9c <__sinit>:
 800af9c:	b510      	push	{r4, lr}
 800af9e:	4604      	mov	r4, r0
 800afa0:	f7ff fff0 	bl	800af84 <__sfp_lock_acquire>
 800afa4:	6a23      	ldr	r3, [r4, #32]
 800afa6:	b11b      	cbz	r3, 800afb0 <__sinit+0x14>
 800afa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afac:	f7ff bff0 	b.w	800af90 <__sfp_lock_release>
 800afb0:	4b04      	ldr	r3, [pc, #16]	@ (800afc4 <__sinit+0x28>)
 800afb2:	6223      	str	r3, [r4, #32]
 800afb4:	4b04      	ldr	r3, [pc, #16]	@ (800afc8 <__sinit+0x2c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1f5      	bne.n	800afa8 <__sinit+0xc>
 800afbc:	f7ff ffc4 	bl	800af48 <global_stdio_init.part.0>
 800afc0:	e7f2      	b.n	800afa8 <__sinit+0xc>
 800afc2:	bf00      	nop
 800afc4:	0800af09 	.word	0x0800af09
 800afc8:	20000d70 	.word	0x20000d70

0800afcc <_fwalk_sglue>:
 800afcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afd0:	4607      	mov	r7, r0
 800afd2:	4688      	mov	r8, r1
 800afd4:	4614      	mov	r4, r2
 800afd6:	2600      	movs	r6, #0
 800afd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afdc:	f1b9 0901 	subs.w	r9, r9, #1
 800afe0:	d505      	bpl.n	800afee <_fwalk_sglue+0x22>
 800afe2:	6824      	ldr	r4, [r4, #0]
 800afe4:	2c00      	cmp	r4, #0
 800afe6:	d1f7      	bne.n	800afd8 <_fwalk_sglue+0xc>
 800afe8:	4630      	mov	r0, r6
 800afea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afee:	89ab      	ldrh	r3, [r5, #12]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d907      	bls.n	800b004 <_fwalk_sglue+0x38>
 800aff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aff8:	3301      	adds	r3, #1
 800affa:	d003      	beq.n	800b004 <_fwalk_sglue+0x38>
 800affc:	4629      	mov	r1, r5
 800affe:	4638      	mov	r0, r7
 800b000:	47c0      	blx	r8
 800b002:	4306      	orrs	r6, r0
 800b004:	3568      	adds	r5, #104	@ 0x68
 800b006:	e7e9      	b.n	800afdc <_fwalk_sglue+0x10>

0800b008 <_vsniprintf_r>:
 800b008:	b530      	push	{r4, r5, lr}
 800b00a:	4614      	mov	r4, r2
 800b00c:	2c00      	cmp	r4, #0
 800b00e:	b09b      	sub	sp, #108	@ 0x6c
 800b010:	4605      	mov	r5, r0
 800b012:	461a      	mov	r2, r3
 800b014:	da05      	bge.n	800b022 <_vsniprintf_r+0x1a>
 800b016:	238b      	movs	r3, #139	@ 0x8b
 800b018:	6003      	str	r3, [r0, #0]
 800b01a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b01e:	b01b      	add	sp, #108	@ 0x6c
 800b020:	bd30      	pop	{r4, r5, pc}
 800b022:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b026:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b02a:	bf14      	ite	ne
 800b02c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b030:	4623      	moveq	r3, r4
 800b032:	9302      	str	r3, [sp, #8]
 800b034:	9305      	str	r3, [sp, #20]
 800b036:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b03a:	9100      	str	r1, [sp, #0]
 800b03c:	9104      	str	r1, [sp, #16]
 800b03e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b042:	4669      	mov	r1, sp
 800b044:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b046:	f000 fefb 	bl	800be40 <_svfiprintf_r>
 800b04a:	1c43      	adds	r3, r0, #1
 800b04c:	bfbc      	itt	lt
 800b04e:	238b      	movlt	r3, #139	@ 0x8b
 800b050:	602b      	strlt	r3, [r5, #0]
 800b052:	2c00      	cmp	r4, #0
 800b054:	d0e3      	beq.n	800b01e <_vsniprintf_r+0x16>
 800b056:	9b00      	ldr	r3, [sp, #0]
 800b058:	2200      	movs	r2, #0
 800b05a:	701a      	strb	r2, [r3, #0]
 800b05c:	e7df      	b.n	800b01e <_vsniprintf_r+0x16>
	...

0800b060 <vsniprintf>:
 800b060:	b507      	push	{r0, r1, r2, lr}
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	4613      	mov	r3, r2
 800b066:	460a      	mov	r2, r1
 800b068:	4601      	mov	r1, r0
 800b06a:	4803      	ldr	r0, [pc, #12]	@ (800b078 <vsniprintf+0x18>)
 800b06c:	6800      	ldr	r0, [r0, #0]
 800b06e:	f7ff ffcb 	bl	800b008 <_vsniprintf_r>
 800b072:	b003      	add	sp, #12
 800b074:	f85d fb04 	ldr.w	pc, [sp], #4
 800b078:	2000003c 	.word	0x2000003c

0800b07c <memset>:
 800b07c:	4402      	add	r2, r0
 800b07e:	4603      	mov	r3, r0
 800b080:	4293      	cmp	r3, r2
 800b082:	d100      	bne.n	800b086 <memset+0xa>
 800b084:	4770      	bx	lr
 800b086:	f803 1b01 	strb.w	r1, [r3], #1
 800b08a:	e7f9      	b.n	800b080 <memset+0x4>

0800b08c <_localeconv_r>:
 800b08c:	4800      	ldr	r0, [pc, #0]	@ (800b090 <_localeconv_r+0x4>)
 800b08e:	4770      	bx	lr
 800b090:	2000017c 	.word	0x2000017c

0800b094 <__errno>:
 800b094:	4b01      	ldr	r3, [pc, #4]	@ (800b09c <__errno+0x8>)
 800b096:	6818      	ldr	r0, [r3, #0]
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	2000003c 	.word	0x2000003c

0800b0a0 <__libc_init_array>:
 800b0a0:	b570      	push	{r4, r5, r6, lr}
 800b0a2:	4d0d      	ldr	r5, [pc, #52]	@ (800b0d8 <__libc_init_array+0x38>)
 800b0a4:	4c0d      	ldr	r4, [pc, #52]	@ (800b0dc <__libc_init_array+0x3c>)
 800b0a6:	1b64      	subs	r4, r4, r5
 800b0a8:	10a4      	asrs	r4, r4, #2
 800b0aa:	2600      	movs	r6, #0
 800b0ac:	42a6      	cmp	r6, r4
 800b0ae:	d109      	bne.n	800b0c4 <__libc_init_array+0x24>
 800b0b0:	4d0b      	ldr	r5, [pc, #44]	@ (800b0e0 <__libc_init_array+0x40>)
 800b0b2:	4c0c      	ldr	r4, [pc, #48]	@ (800b0e4 <__libc_init_array+0x44>)
 800b0b4:	f002 fa78 	bl	800d5a8 <_init>
 800b0b8:	1b64      	subs	r4, r4, r5
 800b0ba:	10a4      	asrs	r4, r4, #2
 800b0bc:	2600      	movs	r6, #0
 800b0be:	42a6      	cmp	r6, r4
 800b0c0:	d105      	bne.n	800b0ce <__libc_init_array+0x2e>
 800b0c2:	bd70      	pop	{r4, r5, r6, pc}
 800b0c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0c8:	4798      	blx	r3
 800b0ca:	3601      	adds	r6, #1
 800b0cc:	e7ee      	b.n	800b0ac <__libc_init_array+0xc>
 800b0ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0d2:	4798      	blx	r3
 800b0d4:	3601      	adds	r6, #1
 800b0d6:	e7f2      	b.n	800b0be <__libc_init_array+0x1e>
 800b0d8:	0800dbb8 	.word	0x0800dbb8
 800b0dc:	0800dbb8 	.word	0x0800dbb8
 800b0e0:	0800dbb8 	.word	0x0800dbb8
 800b0e4:	0800dbbc 	.word	0x0800dbbc

0800b0e8 <__retarget_lock_init_recursive>:
 800b0e8:	4770      	bx	lr

0800b0ea <__retarget_lock_acquire_recursive>:
 800b0ea:	4770      	bx	lr

0800b0ec <__retarget_lock_release_recursive>:
 800b0ec:	4770      	bx	lr

0800b0ee <quorem>:
 800b0ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f2:	6903      	ldr	r3, [r0, #16]
 800b0f4:	690c      	ldr	r4, [r1, #16]
 800b0f6:	42a3      	cmp	r3, r4
 800b0f8:	4607      	mov	r7, r0
 800b0fa:	db7e      	blt.n	800b1fa <quorem+0x10c>
 800b0fc:	3c01      	subs	r4, #1
 800b0fe:	f101 0814 	add.w	r8, r1, #20
 800b102:	00a3      	lsls	r3, r4, #2
 800b104:	f100 0514 	add.w	r5, r0, #20
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b10e:	9301      	str	r3, [sp, #4]
 800b110:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b114:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b118:	3301      	adds	r3, #1
 800b11a:	429a      	cmp	r2, r3
 800b11c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b120:	fbb2 f6f3 	udiv	r6, r2, r3
 800b124:	d32e      	bcc.n	800b184 <quorem+0x96>
 800b126:	f04f 0a00 	mov.w	sl, #0
 800b12a:	46c4      	mov	ip, r8
 800b12c:	46ae      	mov	lr, r5
 800b12e:	46d3      	mov	fp, sl
 800b130:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b134:	b298      	uxth	r0, r3
 800b136:	fb06 a000 	mla	r0, r6, r0, sl
 800b13a:	0c02      	lsrs	r2, r0, #16
 800b13c:	0c1b      	lsrs	r3, r3, #16
 800b13e:	fb06 2303 	mla	r3, r6, r3, r2
 800b142:	f8de 2000 	ldr.w	r2, [lr]
 800b146:	b280      	uxth	r0, r0
 800b148:	b292      	uxth	r2, r2
 800b14a:	1a12      	subs	r2, r2, r0
 800b14c:	445a      	add	r2, fp
 800b14e:	f8de 0000 	ldr.w	r0, [lr]
 800b152:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b156:	b29b      	uxth	r3, r3
 800b158:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b15c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b160:	b292      	uxth	r2, r2
 800b162:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b166:	45e1      	cmp	r9, ip
 800b168:	f84e 2b04 	str.w	r2, [lr], #4
 800b16c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b170:	d2de      	bcs.n	800b130 <quorem+0x42>
 800b172:	9b00      	ldr	r3, [sp, #0]
 800b174:	58eb      	ldr	r3, [r5, r3]
 800b176:	b92b      	cbnz	r3, 800b184 <quorem+0x96>
 800b178:	9b01      	ldr	r3, [sp, #4]
 800b17a:	3b04      	subs	r3, #4
 800b17c:	429d      	cmp	r5, r3
 800b17e:	461a      	mov	r2, r3
 800b180:	d32f      	bcc.n	800b1e2 <quorem+0xf4>
 800b182:	613c      	str	r4, [r7, #16]
 800b184:	4638      	mov	r0, r7
 800b186:	f001 fb33 	bl	800c7f0 <__mcmp>
 800b18a:	2800      	cmp	r0, #0
 800b18c:	db25      	blt.n	800b1da <quorem+0xec>
 800b18e:	4629      	mov	r1, r5
 800b190:	2000      	movs	r0, #0
 800b192:	f858 2b04 	ldr.w	r2, [r8], #4
 800b196:	f8d1 c000 	ldr.w	ip, [r1]
 800b19a:	fa1f fe82 	uxth.w	lr, r2
 800b19e:	fa1f f38c 	uxth.w	r3, ip
 800b1a2:	eba3 030e 	sub.w	r3, r3, lr
 800b1a6:	4403      	add	r3, r0
 800b1a8:	0c12      	lsrs	r2, r2, #16
 800b1aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b1ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1b8:	45c1      	cmp	r9, r8
 800b1ba:	f841 3b04 	str.w	r3, [r1], #4
 800b1be:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b1c2:	d2e6      	bcs.n	800b192 <quorem+0xa4>
 800b1c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1cc:	b922      	cbnz	r2, 800b1d8 <quorem+0xea>
 800b1ce:	3b04      	subs	r3, #4
 800b1d0:	429d      	cmp	r5, r3
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	d30b      	bcc.n	800b1ee <quorem+0x100>
 800b1d6:	613c      	str	r4, [r7, #16]
 800b1d8:	3601      	adds	r6, #1
 800b1da:	4630      	mov	r0, r6
 800b1dc:	b003      	add	sp, #12
 800b1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e2:	6812      	ldr	r2, [r2, #0]
 800b1e4:	3b04      	subs	r3, #4
 800b1e6:	2a00      	cmp	r2, #0
 800b1e8:	d1cb      	bne.n	800b182 <quorem+0x94>
 800b1ea:	3c01      	subs	r4, #1
 800b1ec:	e7c6      	b.n	800b17c <quorem+0x8e>
 800b1ee:	6812      	ldr	r2, [r2, #0]
 800b1f0:	3b04      	subs	r3, #4
 800b1f2:	2a00      	cmp	r2, #0
 800b1f4:	d1ef      	bne.n	800b1d6 <quorem+0xe8>
 800b1f6:	3c01      	subs	r4, #1
 800b1f8:	e7ea      	b.n	800b1d0 <quorem+0xe2>
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	e7ee      	b.n	800b1dc <quorem+0xee>
	...

0800b200 <_dtoa_r>:
 800b200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b204:	69c7      	ldr	r7, [r0, #28]
 800b206:	b099      	sub	sp, #100	@ 0x64
 800b208:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b20c:	ec55 4b10 	vmov	r4, r5, d0
 800b210:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b212:	9109      	str	r1, [sp, #36]	@ 0x24
 800b214:	4683      	mov	fp, r0
 800b216:	920e      	str	r2, [sp, #56]	@ 0x38
 800b218:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b21a:	b97f      	cbnz	r7, 800b23c <_dtoa_r+0x3c>
 800b21c:	2010      	movs	r0, #16
 800b21e:	f000 ff0b 	bl	800c038 <malloc>
 800b222:	4602      	mov	r2, r0
 800b224:	f8cb 001c 	str.w	r0, [fp, #28]
 800b228:	b920      	cbnz	r0, 800b234 <_dtoa_r+0x34>
 800b22a:	4ba7      	ldr	r3, [pc, #668]	@ (800b4c8 <_dtoa_r+0x2c8>)
 800b22c:	21ef      	movs	r1, #239	@ 0xef
 800b22e:	48a7      	ldr	r0, [pc, #668]	@ (800b4cc <_dtoa_r+0x2cc>)
 800b230:	f001 fcd6 	bl	800cbe0 <__assert_func>
 800b234:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b238:	6007      	str	r7, [r0, #0]
 800b23a:	60c7      	str	r7, [r0, #12]
 800b23c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b240:	6819      	ldr	r1, [r3, #0]
 800b242:	b159      	cbz	r1, 800b25c <_dtoa_r+0x5c>
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	604a      	str	r2, [r1, #4]
 800b248:	2301      	movs	r3, #1
 800b24a:	4093      	lsls	r3, r2
 800b24c:	608b      	str	r3, [r1, #8]
 800b24e:	4658      	mov	r0, fp
 800b250:	f001 f894 	bl	800c37c <_Bfree>
 800b254:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]
 800b25c:	1e2b      	subs	r3, r5, #0
 800b25e:	bfb9      	ittee	lt
 800b260:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b264:	9303      	strlt	r3, [sp, #12]
 800b266:	2300      	movge	r3, #0
 800b268:	6033      	strge	r3, [r6, #0]
 800b26a:	9f03      	ldr	r7, [sp, #12]
 800b26c:	4b98      	ldr	r3, [pc, #608]	@ (800b4d0 <_dtoa_r+0x2d0>)
 800b26e:	bfbc      	itt	lt
 800b270:	2201      	movlt	r2, #1
 800b272:	6032      	strlt	r2, [r6, #0]
 800b274:	43bb      	bics	r3, r7
 800b276:	d112      	bne.n	800b29e <_dtoa_r+0x9e>
 800b278:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b27a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b27e:	6013      	str	r3, [r2, #0]
 800b280:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b284:	4323      	orrs	r3, r4
 800b286:	f000 854d 	beq.w	800bd24 <_dtoa_r+0xb24>
 800b28a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b28c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b4e4 <_dtoa_r+0x2e4>
 800b290:	2b00      	cmp	r3, #0
 800b292:	f000 854f 	beq.w	800bd34 <_dtoa_r+0xb34>
 800b296:	f10a 0303 	add.w	r3, sl, #3
 800b29a:	f000 bd49 	b.w	800bd30 <_dtoa_r+0xb30>
 800b29e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	ec51 0b17 	vmov	r0, r1, d7
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b2ae:	f7f5 fc33 	bl	8000b18 <__aeabi_dcmpeq>
 800b2b2:	4680      	mov	r8, r0
 800b2b4:	b158      	cbz	r0, 800b2ce <_dtoa_r+0xce>
 800b2b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	6013      	str	r3, [r2, #0]
 800b2bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b2be:	b113      	cbz	r3, 800b2c6 <_dtoa_r+0xc6>
 800b2c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b2c2:	4b84      	ldr	r3, [pc, #528]	@ (800b4d4 <_dtoa_r+0x2d4>)
 800b2c4:	6013      	str	r3, [r2, #0]
 800b2c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b4e8 <_dtoa_r+0x2e8>
 800b2ca:	f000 bd33 	b.w	800bd34 <_dtoa_r+0xb34>
 800b2ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b2d2:	aa16      	add	r2, sp, #88	@ 0x58
 800b2d4:	a917      	add	r1, sp, #92	@ 0x5c
 800b2d6:	4658      	mov	r0, fp
 800b2d8:	f001 fb3a 	bl	800c950 <__d2b>
 800b2dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b2e0:	4681      	mov	r9, r0
 800b2e2:	2e00      	cmp	r6, #0
 800b2e4:	d077      	beq.n	800b3d6 <_dtoa_r+0x1d6>
 800b2e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b2ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b2f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b2fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b300:	4619      	mov	r1, r3
 800b302:	2200      	movs	r2, #0
 800b304:	4b74      	ldr	r3, [pc, #464]	@ (800b4d8 <_dtoa_r+0x2d8>)
 800b306:	f7f4 ffe7 	bl	80002d8 <__aeabi_dsub>
 800b30a:	a369      	add	r3, pc, #420	@ (adr r3, 800b4b0 <_dtoa_r+0x2b0>)
 800b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b310:	f7f5 f99a 	bl	8000648 <__aeabi_dmul>
 800b314:	a368      	add	r3, pc, #416	@ (adr r3, 800b4b8 <_dtoa_r+0x2b8>)
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	f7f4 ffdf 	bl	80002dc <__adddf3>
 800b31e:	4604      	mov	r4, r0
 800b320:	4630      	mov	r0, r6
 800b322:	460d      	mov	r5, r1
 800b324:	f7f5 f926 	bl	8000574 <__aeabi_i2d>
 800b328:	a365      	add	r3, pc, #404	@ (adr r3, 800b4c0 <_dtoa_r+0x2c0>)
 800b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32e:	f7f5 f98b 	bl	8000648 <__aeabi_dmul>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	4620      	mov	r0, r4
 800b338:	4629      	mov	r1, r5
 800b33a:	f7f4 ffcf 	bl	80002dc <__adddf3>
 800b33e:	4604      	mov	r4, r0
 800b340:	460d      	mov	r5, r1
 800b342:	f7f5 fc31 	bl	8000ba8 <__aeabi_d2iz>
 800b346:	2200      	movs	r2, #0
 800b348:	4607      	mov	r7, r0
 800b34a:	2300      	movs	r3, #0
 800b34c:	4620      	mov	r0, r4
 800b34e:	4629      	mov	r1, r5
 800b350:	f7f5 fbec 	bl	8000b2c <__aeabi_dcmplt>
 800b354:	b140      	cbz	r0, 800b368 <_dtoa_r+0x168>
 800b356:	4638      	mov	r0, r7
 800b358:	f7f5 f90c 	bl	8000574 <__aeabi_i2d>
 800b35c:	4622      	mov	r2, r4
 800b35e:	462b      	mov	r3, r5
 800b360:	f7f5 fbda 	bl	8000b18 <__aeabi_dcmpeq>
 800b364:	b900      	cbnz	r0, 800b368 <_dtoa_r+0x168>
 800b366:	3f01      	subs	r7, #1
 800b368:	2f16      	cmp	r7, #22
 800b36a:	d851      	bhi.n	800b410 <_dtoa_r+0x210>
 800b36c:	4b5b      	ldr	r3, [pc, #364]	@ (800b4dc <_dtoa_r+0x2dc>)
 800b36e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b37a:	f7f5 fbd7 	bl	8000b2c <__aeabi_dcmplt>
 800b37e:	2800      	cmp	r0, #0
 800b380:	d048      	beq.n	800b414 <_dtoa_r+0x214>
 800b382:	3f01      	subs	r7, #1
 800b384:	2300      	movs	r3, #0
 800b386:	9312      	str	r3, [sp, #72]	@ 0x48
 800b388:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b38a:	1b9b      	subs	r3, r3, r6
 800b38c:	1e5a      	subs	r2, r3, #1
 800b38e:	bf44      	itt	mi
 800b390:	f1c3 0801 	rsbmi	r8, r3, #1
 800b394:	2300      	movmi	r3, #0
 800b396:	9208      	str	r2, [sp, #32]
 800b398:	bf54      	ite	pl
 800b39a:	f04f 0800 	movpl.w	r8, #0
 800b39e:	9308      	strmi	r3, [sp, #32]
 800b3a0:	2f00      	cmp	r7, #0
 800b3a2:	db39      	blt.n	800b418 <_dtoa_r+0x218>
 800b3a4:	9b08      	ldr	r3, [sp, #32]
 800b3a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b3a8:	443b      	add	r3, r7
 800b3aa:	9308      	str	r3, [sp, #32]
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3b2:	2b09      	cmp	r3, #9
 800b3b4:	d864      	bhi.n	800b480 <_dtoa_r+0x280>
 800b3b6:	2b05      	cmp	r3, #5
 800b3b8:	bfc4      	itt	gt
 800b3ba:	3b04      	subgt	r3, #4
 800b3bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3c0:	f1a3 0302 	sub.w	r3, r3, #2
 800b3c4:	bfcc      	ite	gt
 800b3c6:	2400      	movgt	r4, #0
 800b3c8:	2401      	movle	r4, #1
 800b3ca:	2b03      	cmp	r3, #3
 800b3cc:	d863      	bhi.n	800b496 <_dtoa_r+0x296>
 800b3ce:	e8df f003 	tbb	[pc, r3]
 800b3d2:	372a      	.short	0x372a
 800b3d4:	5535      	.short	0x5535
 800b3d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b3da:	441e      	add	r6, r3
 800b3dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b3e0:	2b20      	cmp	r3, #32
 800b3e2:	bfc1      	itttt	gt
 800b3e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b3e8:	409f      	lslgt	r7, r3
 800b3ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b3ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b3f2:	bfd6      	itet	le
 800b3f4:	f1c3 0320 	rsble	r3, r3, #32
 800b3f8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b3fc:	fa04 f003 	lslle.w	r0, r4, r3
 800b400:	f7f5 f8a8 	bl	8000554 <__aeabi_ui2d>
 800b404:	2201      	movs	r2, #1
 800b406:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b40a:	3e01      	subs	r6, #1
 800b40c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b40e:	e777      	b.n	800b300 <_dtoa_r+0x100>
 800b410:	2301      	movs	r3, #1
 800b412:	e7b8      	b.n	800b386 <_dtoa_r+0x186>
 800b414:	9012      	str	r0, [sp, #72]	@ 0x48
 800b416:	e7b7      	b.n	800b388 <_dtoa_r+0x188>
 800b418:	427b      	negs	r3, r7
 800b41a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b41c:	2300      	movs	r3, #0
 800b41e:	eba8 0807 	sub.w	r8, r8, r7
 800b422:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b424:	e7c4      	b.n	800b3b0 <_dtoa_r+0x1b0>
 800b426:	2300      	movs	r3, #0
 800b428:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b42a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	dc35      	bgt.n	800b49c <_dtoa_r+0x29c>
 800b430:	2301      	movs	r3, #1
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	9307      	str	r3, [sp, #28]
 800b436:	461a      	mov	r2, r3
 800b438:	920e      	str	r2, [sp, #56]	@ 0x38
 800b43a:	e00b      	b.n	800b454 <_dtoa_r+0x254>
 800b43c:	2301      	movs	r3, #1
 800b43e:	e7f3      	b.n	800b428 <_dtoa_r+0x228>
 800b440:	2300      	movs	r3, #0
 800b442:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b446:	18fb      	adds	r3, r7, r3
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	3301      	adds	r3, #1
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	9307      	str	r3, [sp, #28]
 800b450:	bfb8      	it	lt
 800b452:	2301      	movlt	r3, #1
 800b454:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b458:	2100      	movs	r1, #0
 800b45a:	2204      	movs	r2, #4
 800b45c:	f102 0514 	add.w	r5, r2, #20
 800b460:	429d      	cmp	r5, r3
 800b462:	d91f      	bls.n	800b4a4 <_dtoa_r+0x2a4>
 800b464:	6041      	str	r1, [r0, #4]
 800b466:	4658      	mov	r0, fp
 800b468:	f000 ff48 	bl	800c2fc <_Balloc>
 800b46c:	4682      	mov	sl, r0
 800b46e:	2800      	cmp	r0, #0
 800b470:	d13c      	bne.n	800b4ec <_dtoa_r+0x2ec>
 800b472:	4b1b      	ldr	r3, [pc, #108]	@ (800b4e0 <_dtoa_r+0x2e0>)
 800b474:	4602      	mov	r2, r0
 800b476:	f240 11af 	movw	r1, #431	@ 0x1af
 800b47a:	e6d8      	b.n	800b22e <_dtoa_r+0x2e>
 800b47c:	2301      	movs	r3, #1
 800b47e:	e7e0      	b.n	800b442 <_dtoa_r+0x242>
 800b480:	2401      	movs	r4, #1
 800b482:	2300      	movs	r3, #0
 800b484:	9309      	str	r3, [sp, #36]	@ 0x24
 800b486:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b488:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	9307      	str	r3, [sp, #28]
 800b490:	2200      	movs	r2, #0
 800b492:	2312      	movs	r3, #18
 800b494:	e7d0      	b.n	800b438 <_dtoa_r+0x238>
 800b496:	2301      	movs	r3, #1
 800b498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b49a:	e7f5      	b.n	800b488 <_dtoa_r+0x288>
 800b49c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	9307      	str	r3, [sp, #28]
 800b4a2:	e7d7      	b.n	800b454 <_dtoa_r+0x254>
 800b4a4:	3101      	adds	r1, #1
 800b4a6:	0052      	lsls	r2, r2, #1
 800b4a8:	e7d8      	b.n	800b45c <_dtoa_r+0x25c>
 800b4aa:	bf00      	nop
 800b4ac:	f3af 8000 	nop.w
 800b4b0:	636f4361 	.word	0x636f4361
 800b4b4:	3fd287a7 	.word	0x3fd287a7
 800b4b8:	8b60c8b3 	.word	0x8b60c8b3
 800b4bc:	3fc68a28 	.word	0x3fc68a28
 800b4c0:	509f79fb 	.word	0x509f79fb
 800b4c4:	3fd34413 	.word	0x3fd34413
 800b4c8:	0800d869 	.word	0x0800d869
 800b4cc:	0800d880 	.word	0x0800d880
 800b4d0:	7ff00000 	.word	0x7ff00000
 800b4d4:	0800d839 	.word	0x0800d839
 800b4d8:	3ff80000 	.word	0x3ff80000
 800b4dc:	0800d988 	.word	0x0800d988
 800b4e0:	0800d8d8 	.word	0x0800d8d8
 800b4e4:	0800d865 	.word	0x0800d865
 800b4e8:	0800d838 	.word	0x0800d838
 800b4ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b4f0:	6018      	str	r0, [r3, #0]
 800b4f2:	9b07      	ldr	r3, [sp, #28]
 800b4f4:	2b0e      	cmp	r3, #14
 800b4f6:	f200 80a4 	bhi.w	800b642 <_dtoa_r+0x442>
 800b4fa:	2c00      	cmp	r4, #0
 800b4fc:	f000 80a1 	beq.w	800b642 <_dtoa_r+0x442>
 800b500:	2f00      	cmp	r7, #0
 800b502:	dd33      	ble.n	800b56c <_dtoa_r+0x36c>
 800b504:	4bad      	ldr	r3, [pc, #692]	@ (800b7bc <_dtoa_r+0x5bc>)
 800b506:	f007 020f 	and.w	r2, r7, #15
 800b50a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b50e:	ed93 7b00 	vldr	d7, [r3]
 800b512:	05f8      	lsls	r0, r7, #23
 800b514:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b518:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b51c:	d516      	bpl.n	800b54c <_dtoa_r+0x34c>
 800b51e:	4ba8      	ldr	r3, [pc, #672]	@ (800b7c0 <_dtoa_r+0x5c0>)
 800b520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b524:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b528:	f7f5 f9b8 	bl	800089c <__aeabi_ddiv>
 800b52c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b530:	f004 040f 	and.w	r4, r4, #15
 800b534:	2603      	movs	r6, #3
 800b536:	4da2      	ldr	r5, [pc, #648]	@ (800b7c0 <_dtoa_r+0x5c0>)
 800b538:	b954      	cbnz	r4, 800b550 <_dtoa_r+0x350>
 800b53a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b53e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b542:	f7f5 f9ab 	bl	800089c <__aeabi_ddiv>
 800b546:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b54a:	e028      	b.n	800b59e <_dtoa_r+0x39e>
 800b54c:	2602      	movs	r6, #2
 800b54e:	e7f2      	b.n	800b536 <_dtoa_r+0x336>
 800b550:	07e1      	lsls	r1, r4, #31
 800b552:	d508      	bpl.n	800b566 <_dtoa_r+0x366>
 800b554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b558:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b55c:	f7f5 f874 	bl	8000648 <__aeabi_dmul>
 800b560:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b564:	3601      	adds	r6, #1
 800b566:	1064      	asrs	r4, r4, #1
 800b568:	3508      	adds	r5, #8
 800b56a:	e7e5      	b.n	800b538 <_dtoa_r+0x338>
 800b56c:	f000 80d2 	beq.w	800b714 <_dtoa_r+0x514>
 800b570:	427c      	negs	r4, r7
 800b572:	4b92      	ldr	r3, [pc, #584]	@ (800b7bc <_dtoa_r+0x5bc>)
 800b574:	4d92      	ldr	r5, [pc, #584]	@ (800b7c0 <_dtoa_r+0x5c0>)
 800b576:	f004 020f 	and.w	r2, r4, #15
 800b57a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b582:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b586:	f7f5 f85f 	bl	8000648 <__aeabi_dmul>
 800b58a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b58e:	1124      	asrs	r4, r4, #4
 800b590:	2300      	movs	r3, #0
 800b592:	2602      	movs	r6, #2
 800b594:	2c00      	cmp	r4, #0
 800b596:	f040 80b2 	bne.w	800b6fe <_dtoa_r+0x4fe>
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1d3      	bne.n	800b546 <_dtoa_r+0x346>
 800b59e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b5a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 80b7 	beq.w	800b718 <_dtoa_r+0x518>
 800b5aa:	4b86      	ldr	r3, [pc, #536]	@ (800b7c4 <_dtoa_r+0x5c4>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	f7f5 fabb 	bl	8000b2c <__aeabi_dcmplt>
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	f000 80ae 	beq.w	800b718 <_dtoa_r+0x518>
 800b5bc:	9b07      	ldr	r3, [sp, #28]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f000 80aa 	beq.w	800b718 <_dtoa_r+0x518>
 800b5c4:	9b00      	ldr	r3, [sp, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	dd37      	ble.n	800b63a <_dtoa_r+0x43a>
 800b5ca:	1e7b      	subs	r3, r7, #1
 800b5cc:	9304      	str	r3, [sp, #16]
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	4b7d      	ldr	r3, [pc, #500]	@ (800b7c8 <_dtoa_r+0x5c8>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	f7f5 f837 	bl	8000648 <__aeabi_dmul>
 800b5da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5de:	9c00      	ldr	r4, [sp, #0]
 800b5e0:	3601      	adds	r6, #1
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f7f4 ffc6 	bl	8000574 <__aeabi_i2d>
 800b5e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5ec:	f7f5 f82c 	bl	8000648 <__aeabi_dmul>
 800b5f0:	4b76      	ldr	r3, [pc, #472]	@ (800b7cc <_dtoa_r+0x5cc>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f7f4 fe72 	bl	80002dc <__adddf3>
 800b5f8:	4605      	mov	r5, r0
 800b5fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b5fe:	2c00      	cmp	r4, #0
 800b600:	f040 808d 	bne.w	800b71e <_dtoa_r+0x51e>
 800b604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b608:	4b71      	ldr	r3, [pc, #452]	@ (800b7d0 <_dtoa_r+0x5d0>)
 800b60a:	2200      	movs	r2, #0
 800b60c:	f7f4 fe64 	bl	80002d8 <__aeabi_dsub>
 800b610:	4602      	mov	r2, r0
 800b612:	460b      	mov	r3, r1
 800b614:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b618:	462a      	mov	r2, r5
 800b61a:	4633      	mov	r3, r6
 800b61c:	f7f5 faa4 	bl	8000b68 <__aeabi_dcmpgt>
 800b620:	2800      	cmp	r0, #0
 800b622:	f040 828b 	bne.w	800bb3c <_dtoa_r+0x93c>
 800b626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b62a:	462a      	mov	r2, r5
 800b62c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b630:	f7f5 fa7c 	bl	8000b2c <__aeabi_dcmplt>
 800b634:	2800      	cmp	r0, #0
 800b636:	f040 8128 	bne.w	800b88a <_dtoa_r+0x68a>
 800b63a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b63e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b642:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b644:	2b00      	cmp	r3, #0
 800b646:	f2c0 815a 	blt.w	800b8fe <_dtoa_r+0x6fe>
 800b64a:	2f0e      	cmp	r7, #14
 800b64c:	f300 8157 	bgt.w	800b8fe <_dtoa_r+0x6fe>
 800b650:	4b5a      	ldr	r3, [pc, #360]	@ (800b7bc <_dtoa_r+0x5bc>)
 800b652:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b656:	ed93 7b00 	vldr	d7, [r3]
 800b65a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	ed8d 7b00 	vstr	d7, [sp]
 800b662:	da03      	bge.n	800b66c <_dtoa_r+0x46c>
 800b664:	9b07      	ldr	r3, [sp, #28]
 800b666:	2b00      	cmp	r3, #0
 800b668:	f340 8101 	ble.w	800b86e <_dtoa_r+0x66e>
 800b66c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b670:	4656      	mov	r6, sl
 800b672:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b676:	4620      	mov	r0, r4
 800b678:	4629      	mov	r1, r5
 800b67a:	f7f5 f90f 	bl	800089c <__aeabi_ddiv>
 800b67e:	f7f5 fa93 	bl	8000ba8 <__aeabi_d2iz>
 800b682:	4680      	mov	r8, r0
 800b684:	f7f4 ff76 	bl	8000574 <__aeabi_i2d>
 800b688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b68c:	f7f4 ffdc 	bl	8000648 <__aeabi_dmul>
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	4620      	mov	r0, r4
 800b696:	4629      	mov	r1, r5
 800b698:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b69c:	f7f4 fe1c 	bl	80002d8 <__aeabi_dsub>
 800b6a0:	f806 4b01 	strb.w	r4, [r6], #1
 800b6a4:	9d07      	ldr	r5, [sp, #28]
 800b6a6:	eba6 040a 	sub.w	r4, r6, sl
 800b6aa:	42a5      	cmp	r5, r4
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	f040 8117 	bne.w	800b8e2 <_dtoa_r+0x6e2>
 800b6b4:	f7f4 fe12 	bl	80002dc <__adddf3>
 800b6b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6bc:	4604      	mov	r4, r0
 800b6be:	460d      	mov	r5, r1
 800b6c0:	f7f5 fa52 	bl	8000b68 <__aeabi_dcmpgt>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	f040 80f9 	bne.w	800b8bc <_dtoa_r+0x6bc>
 800b6ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	4629      	mov	r1, r5
 800b6d2:	f7f5 fa21 	bl	8000b18 <__aeabi_dcmpeq>
 800b6d6:	b118      	cbz	r0, 800b6e0 <_dtoa_r+0x4e0>
 800b6d8:	f018 0f01 	tst.w	r8, #1
 800b6dc:	f040 80ee 	bne.w	800b8bc <_dtoa_r+0x6bc>
 800b6e0:	4649      	mov	r1, r9
 800b6e2:	4658      	mov	r0, fp
 800b6e4:	f000 fe4a 	bl	800c37c <_Bfree>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	7033      	strb	r3, [r6, #0]
 800b6ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b6ee:	3701      	adds	r7, #1
 800b6f0:	601f      	str	r7, [r3, #0]
 800b6f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f000 831d 	beq.w	800bd34 <_dtoa_r+0xb34>
 800b6fa:	601e      	str	r6, [r3, #0]
 800b6fc:	e31a      	b.n	800bd34 <_dtoa_r+0xb34>
 800b6fe:	07e2      	lsls	r2, r4, #31
 800b700:	d505      	bpl.n	800b70e <_dtoa_r+0x50e>
 800b702:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b706:	f7f4 ff9f 	bl	8000648 <__aeabi_dmul>
 800b70a:	3601      	adds	r6, #1
 800b70c:	2301      	movs	r3, #1
 800b70e:	1064      	asrs	r4, r4, #1
 800b710:	3508      	adds	r5, #8
 800b712:	e73f      	b.n	800b594 <_dtoa_r+0x394>
 800b714:	2602      	movs	r6, #2
 800b716:	e742      	b.n	800b59e <_dtoa_r+0x39e>
 800b718:	9c07      	ldr	r4, [sp, #28]
 800b71a:	9704      	str	r7, [sp, #16]
 800b71c:	e761      	b.n	800b5e2 <_dtoa_r+0x3e2>
 800b71e:	4b27      	ldr	r3, [pc, #156]	@ (800b7bc <_dtoa_r+0x5bc>)
 800b720:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b722:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b726:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b72a:	4454      	add	r4, sl
 800b72c:	2900      	cmp	r1, #0
 800b72e:	d053      	beq.n	800b7d8 <_dtoa_r+0x5d8>
 800b730:	4928      	ldr	r1, [pc, #160]	@ (800b7d4 <_dtoa_r+0x5d4>)
 800b732:	2000      	movs	r0, #0
 800b734:	f7f5 f8b2 	bl	800089c <__aeabi_ddiv>
 800b738:	4633      	mov	r3, r6
 800b73a:	462a      	mov	r2, r5
 800b73c:	f7f4 fdcc 	bl	80002d8 <__aeabi_dsub>
 800b740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b744:	4656      	mov	r6, sl
 800b746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b74a:	f7f5 fa2d 	bl	8000ba8 <__aeabi_d2iz>
 800b74e:	4605      	mov	r5, r0
 800b750:	f7f4 ff10 	bl	8000574 <__aeabi_i2d>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b75c:	f7f4 fdbc 	bl	80002d8 <__aeabi_dsub>
 800b760:	3530      	adds	r5, #48	@ 0x30
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b76a:	f806 5b01 	strb.w	r5, [r6], #1
 800b76e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b772:	f7f5 f9db 	bl	8000b2c <__aeabi_dcmplt>
 800b776:	2800      	cmp	r0, #0
 800b778:	d171      	bne.n	800b85e <_dtoa_r+0x65e>
 800b77a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b77e:	4911      	ldr	r1, [pc, #68]	@ (800b7c4 <_dtoa_r+0x5c4>)
 800b780:	2000      	movs	r0, #0
 800b782:	f7f4 fda9 	bl	80002d8 <__aeabi_dsub>
 800b786:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b78a:	f7f5 f9cf 	bl	8000b2c <__aeabi_dcmplt>
 800b78e:	2800      	cmp	r0, #0
 800b790:	f040 8095 	bne.w	800b8be <_dtoa_r+0x6be>
 800b794:	42a6      	cmp	r6, r4
 800b796:	f43f af50 	beq.w	800b63a <_dtoa_r+0x43a>
 800b79a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b79e:	4b0a      	ldr	r3, [pc, #40]	@ (800b7c8 <_dtoa_r+0x5c8>)
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f7f4 ff51 	bl	8000648 <__aeabi_dmul>
 800b7a6:	4b08      	ldr	r3, [pc, #32]	@ (800b7c8 <_dtoa_r+0x5c8>)
 800b7a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7b2:	f7f4 ff49 	bl	8000648 <__aeabi_dmul>
 800b7b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7ba:	e7c4      	b.n	800b746 <_dtoa_r+0x546>
 800b7bc:	0800d988 	.word	0x0800d988
 800b7c0:	0800d960 	.word	0x0800d960
 800b7c4:	3ff00000 	.word	0x3ff00000
 800b7c8:	40240000 	.word	0x40240000
 800b7cc:	401c0000 	.word	0x401c0000
 800b7d0:	40140000 	.word	0x40140000
 800b7d4:	3fe00000 	.word	0x3fe00000
 800b7d8:	4631      	mov	r1, r6
 800b7da:	4628      	mov	r0, r5
 800b7dc:	f7f4 ff34 	bl	8000648 <__aeabi_dmul>
 800b7e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b7e4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b7e6:	4656      	mov	r6, sl
 800b7e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7ec:	f7f5 f9dc 	bl	8000ba8 <__aeabi_d2iz>
 800b7f0:	4605      	mov	r5, r0
 800b7f2:	f7f4 febf 	bl	8000574 <__aeabi_i2d>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7fe:	f7f4 fd6b 	bl	80002d8 <__aeabi_dsub>
 800b802:	3530      	adds	r5, #48	@ 0x30
 800b804:	f806 5b01 	strb.w	r5, [r6], #1
 800b808:	4602      	mov	r2, r0
 800b80a:	460b      	mov	r3, r1
 800b80c:	42a6      	cmp	r6, r4
 800b80e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b812:	f04f 0200 	mov.w	r2, #0
 800b816:	d124      	bne.n	800b862 <_dtoa_r+0x662>
 800b818:	4bac      	ldr	r3, [pc, #688]	@ (800bacc <_dtoa_r+0x8cc>)
 800b81a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b81e:	f7f4 fd5d 	bl	80002dc <__adddf3>
 800b822:	4602      	mov	r2, r0
 800b824:	460b      	mov	r3, r1
 800b826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b82a:	f7f5 f99d 	bl	8000b68 <__aeabi_dcmpgt>
 800b82e:	2800      	cmp	r0, #0
 800b830:	d145      	bne.n	800b8be <_dtoa_r+0x6be>
 800b832:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b836:	49a5      	ldr	r1, [pc, #660]	@ (800bacc <_dtoa_r+0x8cc>)
 800b838:	2000      	movs	r0, #0
 800b83a:	f7f4 fd4d 	bl	80002d8 <__aeabi_dsub>
 800b83e:	4602      	mov	r2, r0
 800b840:	460b      	mov	r3, r1
 800b842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b846:	f7f5 f971 	bl	8000b2c <__aeabi_dcmplt>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	f43f aef5 	beq.w	800b63a <_dtoa_r+0x43a>
 800b850:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b852:	1e73      	subs	r3, r6, #1
 800b854:	9315      	str	r3, [sp, #84]	@ 0x54
 800b856:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b85a:	2b30      	cmp	r3, #48	@ 0x30
 800b85c:	d0f8      	beq.n	800b850 <_dtoa_r+0x650>
 800b85e:	9f04      	ldr	r7, [sp, #16]
 800b860:	e73e      	b.n	800b6e0 <_dtoa_r+0x4e0>
 800b862:	4b9b      	ldr	r3, [pc, #620]	@ (800bad0 <_dtoa_r+0x8d0>)
 800b864:	f7f4 fef0 	bl	8000648 <__aeabi_dmul>
 800b868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b86c:	e7bc      	b.n	800b7e8 <_dtoa_r+0x5e8>
 800b86e:	d10c      	bne.n	800b88a <_dtoa_r+0x68a>
 800b870:	4b98      	ldr	r3, [pc, #608]	@ (800bad4 <_dtoa_r+0x8d4>)
 800b872:	2200      	movs	r2, #0
 800b874:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b878:	f7f4 fee6 	bl	8000648 <__aeabi_dmul>
 800b87c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b880:	f7f5 f968 	bl	8000b54 <__aeabi_dcmpge>
 800b884:	2800      	cmp	r0, #0
 800b886:	f000 8157 	beq.w	800bb38 <_dtoa_r+0x938>
 800b88a:	2400      	movs	r4, #0
 800b88c:	4625      	mov	r5, r4
 800b88e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b890:	43db      	mvns	r3, r3
 800b892:	9304      	str	r3, [sp, #16]
 800b894:	4656      	mov	r6, sl
 800b896:	2700      	movs	r7, #0
 800b898:	4621      	mov	r1, r4
 800b89a:	4658      	mov	r0, fp
 800b89c:	f000 fd6e 	bl	800c37c <_Bfree>
 800b8a0:	2d00      	cmp	r5, #0
 800b8a2:	d0dc      	beq.n	800b85e <_dtoa_r+0x65e>
 800b8a4:	b12f      	cbz	r7, 800b8b2 <_dtoa_r+0x6b2>
 800b8a6:	42af      	cmp	r7, r5
 800b8a8:	d003      	beq.n	800b8b2 <_dtoa_r+0x6b2>
 800b8aa:	4639      	mov	r1, r7
 800b8ac:	4658      	mov	r0, fp
 800b8ae:	f000 fd65 	bl	800c37c <_Bfree>
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	4658      	mov	r0, fp
 800b8b6:	f000 fd61 	bl	800c37c <_Bfree>
 800b8ba:	e7d0      	b.n	800b85e <_dtoa_r+0x65e>
 800b8bc:	9704      	str	r7, [sp, #16]
 800b8be:	4633      	mov	r3, r6
 800b8c0:	461e      	mov	r6, r3
 800b8c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8c6:	2a39      	cmp	r2, #57	@ 0x39
 800b8c8:	d107      	bne.n	800b8da <_dtoa_r+0x6da>
 800b8ca:	459a      	cmp	sl, r3
 800b8cc:	d1f8      	bne.n	800b8c0 <_dtoa_r+0x6c0>
 800b8ce:	9a04      	ldr	r2, [sp, #16]
 800b8d0:	3201      	adds	r2, #1
 800b8d2:	9204      	str	r2, [sp, #16]
 800b8d4:	2230      	movs	r2, #48	@ 0x30
 800b8d6:	f88a 2000 	strb.w	r2, [sl]
 800b8da:	781a      	ldrb	r2, [r3, #0]
 800b8dc:	3201      	adds	r2, #1
 800b8de:	701a      	strb	r2, [r3, #0]
 800b8e0:	e7bd      	b.n	800b85e <_dtoa_r+0x65e>
 800b8e2:	4b7b      	ldr	r3, [pc, #492]	@ (800bad0 <_dtoa_r+0x8d0>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f7f4 feaf 	bl	8000648 <__aeabi_dmul>
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	460d      	mov	r5, r1
 800b8f2:	f7f5 f911 	bl	8000b18 <__aeabi_dcmpeq>
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	f43f aebb 	beq.w	800b672 <_dtoa_r+0x472>
 800b8fc:	e6f0      	b.n	800b6e0 <_dtoa_r+0x4e0>
 800b8fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b900:	2a00      	cmp	r2, #0
 800b902:	f000 80db 	beq.w	800babc <_dtoa_r+0x8bc>
 800b906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b908:	2a01      	cmp	r2, #1
 800b90a:	f300 80bf 	bgt.w	800ba8c <_dtoa_r+0x88c>
 800b90e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b910:	2a00      	cmp	r2, #0
 800b912:	f000 80b7 	beq.w	800ba84 <_dtoa_r+0x884>
 800b916:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b91a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b91c:	4646      	mov	r6, r8
 800b91e:	9a08      	ldr	r2, [sp, #32]
 800b920:	2101      	movs	r1, #1
 800b922:	441a      	add	r2, r3
 800b924:	4658      	mov	r0, fp
 800b926:	4498      	add	r8, r3
 800b928:	9208      	str	r2, [sp, #32]
 800b92a:	f000 fddb 	bl	800c4e4 <__i2b>
 800b92e:	4605      	mov	r5, r0
 800b930:	b15e      	cbz	r6, 800b94a <_dtoa_r+0x74a>
 800b932:	9b08      	ldr	r3, [sp, #32]
 800b934:	2b00      	cmp	r3, #0
 800b936:	dd08      	ble.n	800b94a <_dtoa_r+0x74a>
 800b938:	42b3      	cmp	r3, r6
 800b93a:	9a08      	ldr	r2, [sp, #32]
 800b93c:	bfa8      	it	ge
 800b93e:	4633      	movge	r3, r6
 800b940:	eba8 0803 	sub.w	r8, r8, r3
 800b944:	1af6      	subs	r6, r6, r3
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	9308      	str	r3, [sp, #32]
 800b94a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b94c:	b1f3      	cbz	r3, 800b98c <_dtoa_r+0x78c>
 800b94e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 80b7 	beq.w	800bac4 <_dtoa_r+0x8c4>
 800b956:	b18c      	cbz	r4, 800b97c <_dtoa_r+0x77c>
 800b958:	4629      	mov	r1, r5
 800b95a:	4622      	mov	r2, r4
 800b95c:	4658      	mov	r0, fp
 800b95e:	f000 fe81 	bl	800c664 <__pow5mult>
 800b962:	464a      	mov	r2, r9
 800b964:	4601      	mov	r1, r0
 800b966:	4605      	mov	r5, r0
 800b968:	4658      	mov	r0, fp
 800b96a:	f000 fdd1 	bl	800c510 <__multiply>
 800b96e:	4649      	mov	r1, r9
 800b970:	9004      	str	r0, [sp, #16]
 800b972:	4658      	mov	r0, fp
 800b974:	f000 fd02 	bl	800c37c <_Bfree>
 800b978:	9b04      	ldr	r3, [sp, #16]
 800b97a:	4699      	mov	r9, r3
 800b97c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b97e:	1b1a      	subs	r2, r3, r4
 800b980:	d004      	beq.n	800b98c <_dtoa_r+0x78c>
 800b982:	4649      	mov	r1, r9
 800b984:	4658      	mov	r0, fp
 800b986:	f000 fe6d 	bl	800c664 <__pow5mult>
 800b98a:	4681      	mov	r9, r0
 800b98c:	2101      	movs	r1, #1
 800b98e:	4658      	mov	r0, fp
 800b990:	f000 fda8 	bl	800c4e4 <__i2b>
 800b994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b996:	4604      	mov	r4, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f000 81cf 	beq.w	800bd3c <_dtoa_r+0xb3c>
 800b99e:	461a      	mov	r2, r3
 800b9a0:	4601      	mov	r1, r0
 800b9a2:	4658      	mov	r0, fp
 800b9a4:	f000 fe5e 	bl	800c664 <__pow5mult>
 800b9a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	f300 8095 	bgt.w	800badc <_dtoa_r+0x8dc>
 800b9b2:	9b02      	ldr	r3, [sp, #8]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f040 8087 	bne.w	800bac8 <_dtoa_r+0x8c8>
 800b9ba:	9b03      	ldr	r3, [sp, #12]
 800b9bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f040 8089 	bne.w	800bad8 <_dtoa_r+0x8d8>
 800b9c6:	9b03      	ldr	r3, [sp, #12]
 800b9c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9cc:	0d1b      	lsrs	r3, r3, #20
 800b9ce:	051b      	lsls	r3, r3, #20
 800b9d0:	b12b      	cbz	r3, 800b9de <_dtoa_r+0x7de>
 800b9d2:	9b08      	ldr	r3, [sp, #32]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	9308      	str	r3, [sp, #32]
 800b9d8:	f108 0801 	add.w	r8, r8, #1
 800b9dc:	2301      	movs	r3, #1
 800b9de:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f000 81b0 	beq.w	800bd48 <_dtoa_r+0xb48>
 800b9e8:	6923      	ldr	r3, [r4, #16]
 800b9ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9ee:	6918      	ldr	r0, [r3, #16]
 800b9f0:	f000 fd2c 	bl	800c44c <__hi0bits>
 800b9f4:	f1c0 0020 	rsb	r0, r0, #32
 800b9f8:	9b08      	ldr	r3, [sp, #32]
 800b9fa:	4418      	add	r0, r3
 800b9fc:	f010 001f 	ands.w	r0, r0, #31
 800ba00:	d077      	beq.n	800baf2 <_dtoa_r+0x8f2>
 800ba02:	f1c0 0320 	rsb	r3, r0, #32
 800ba06:	2b04      	cmp	r3, #4
 800ba08:	dd6b      	ble.n	800bae2 <_dtoa_r+0x8e2>
 800ba0a:	9b08      	ldr	r3, [sp, #32]
 800ba0c:	f1c0 001c 	rsb	r0, r0, #28
 800ba10:	4403      	add	r3, r0
 800ba12:	4480      	add	r8, r0
 800ba14:	4406      	add	r6, r0
 800ba16:	9308      	str	r3, [sp, #32]
 800ba18:	f1b8 0f00 	cmp.w	r8, #0
 800ba1c:	dd05      	ble.n	800ba2a <_dtoa_r+0x82a>
 800ba1e:	4649      	mov	r1, r9
 800ba20:	4642      	mov	r2, r8
 800ba22:	4658      	mov	r0, fp
 800ba24:	f000 fe78 	bl	800c718 <__lshift>
 800ba28:	4681      	mov	r9, r0
 800ba2a:	9b08      	ldr	r3, [sp, #32]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	dd05      	ble.n	800ba3c <_dtoa_r+0x83c>
 800ba30:	4621      	mov	r1, r4
 800ba32:	461a      	mov	r2, r3
 800ba34:	4658      	mov	r0, fp
 800ba36:	f000 fe6f 	bl	800c718 <__lshift>
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d059      	beq.n	800baf6 <_dtoa_r+0x8f6>
 800ba42:	4621      	mov	r1, r4
 800ba44:	4648      	mov	r0, r9
 800ba46:	f000 fed3 	bl	800c7f0 <__mcmp>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	da53      	bge.n	800baf6 <_dtoa_r+0x8f6>
 800ba4e:	1e7b      	subs	r3, r7, #1
 800ba50:	9304      	str	r3, [sp, #16]
 800ba52:	4649      	mov	r1, r9
 800ba54:	2300      	movs	r3, #0
 800ba56:	220a      	movs	r2, #10
 800ba58:	4658      	mov	r0, fp
 800ba5a:	f000 fcb1 	bl	800c3c0 <__multadd>
 800ba5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba60:	4681      	mov	r9, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f000 8172 	beq.w	800bd4c <_dtoa_r+0xb4c>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	220a      	movs	r2, #10
 800ba6e:	4658      	mov	r0, fp
 800ba70:	f000 fca6 	bl	800c3c0 <__multadd>
 800ba74:	9b00      	ldr	r3, [sp, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	4605      	mov	r5, r0
 800ba7a:	dc67      	bgt.n	800bb4c <_dtoa_r+0x94c>
 800ba7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	dc41      	bgt.n	800bb06 <_dtoa_r+0x906>
 800ba82:	e063      	b.n	800bb4c <_dtoa_r+0x94c>
 800ba84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ba8a:	e746      	b.n	800b91a <_dtoa_r+0x71a>
 800ba8c:	9b07      	ldr	r3, [sp, #28]
 800ba8e:	1e5c      	subs	r4, r3, #1
 800ba90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba92:	42a3      	cmp	r3, r4
 800ba94:	bfbf      	itttt	lt
 800ba96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ba98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ba9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ba9c:	1ae3      	sublt	r3, r4, r3
 800ba9e:	bfb4      	ite	lt
 800baa0:	18d2      	addlt	r2, r2, r3
 800baa2:	1b1c      	subge	r4, r3, r4
 800baa4:	9b07      	ldr	r3, [sp, #28]
 800baa6:	bfbc      	itt	lt
 800baa8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800baaa:	2400      	movlt	r4, #0
 800baac:	2b00      	cmp	r3, #0
 800baae:	bfb5      	itete	lt
 800bab0:	eba8 0603 	sublt.w	r6, r8, r3
 800bab4:	9b07      	ldrge	r3, [sp, #28]
 800bab6:	2300      	movlt	r3, #0
 800bab8:	4646      	movge	r6, r8
 800baba:	e730      	b.n	800b91e <_dtoa_r+0x71e>
 800babc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800babe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bac0:	4646      	mov	r6, r8
 800bac2:	e735      	b.n	800b930 <_dtoa_r+0x730>
 800bac4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bac6:	e75c      	b.n	800b982 <_dtoa_r+0x782>
 800bac8:	2300      	movs	r3, #0
 800baca:	e788      	b.n	800b9de <_dtoa_r+0x7de>
 800bacc:	3fe00000 	.word	0x3fe00000
 800bad0:	40240000 	.word	0x40240000
 800bad4:	40140000 	.word	0x40140000
 800bad8:	9b02      	ldr	r3, [sp, #8]
 800bada:	e780      	b.n	800b9de <_dtoa_r+0x7de>
 800badc:	2300      	movs	r3, #0
 800bade:	930a      	str	r3, [sp, #40]	@ 0x28
 800bae0:	e782      	b.n	800b9e8 <_dtoa_r+0x7e8>
 800bae2:	d099      	beq.n	800ba18 <_dtoa_r+0x818>
 800bae4:	9a08      	ldr	r2, [sp, #32]
 800bae6:	331c      	adds	r3, #28
 800bae8:	441a      	add	r2, r3
 800baea:	4498      	add	r8, r3
 800baec:	441e      	add	r6, r3
 800baee:	9208      	str	r2, [sp, #32]
 800baf0:	e792      	b.n	800ba18 <_dtoa_r+0x818>
 800baf2:	4603      	mov	r3, r0
 800baf4:	e7f6      	b.n	800bae4 <_dtoa_r+0x8e4>
 800baf6:	9b07      	ldr	r3, [sp, #28]
 800baf8:	9704      	str	r7, [sp, #16]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	dc20      	bgt.n	800bb40 <_dtoa_r+0x940>
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	dd1e      	ble.n	800bb44 <_dtoa_r+0x944>
 800bb06:	9b00      	ldr	r3, [sp, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f47f aec0 	bne.w	800b88e <_dtoa_r+0x68e>
 800bb0e:	4621      	mov	r1, r4
 800bb10:	2205      	movs	r2, #5
 800bb12:	4658      	mov	r0, fp
 800bb14:	f000 fc54 	bl	800c3c0 <__multadd>
 800bb18:	4601      	mov	r1, r0
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	4648      	mov	r0, r9
 800bb1e:	f000 fe67 	bl	800c7f0 <__mcmp>
 800bb22:	2800      	cmp	r0, #0
 800bb24:	f77f aeb3 	ble.w	800b88e <_dtoa_r+0x68e>
 800bb28:	4656      	mov	r6, sl
 800bb2a:	2331      	movs	r3, #49	@ 0x31
 800bb2c:	f806 3b01 	strb.w	r3, [r6], #1
 800bb30:	9b04      	ldr	r3, [sp, #16]
 800bb32:	3301      	adds	r3, #1
 800bb34:	9304      	str	r3, [sp, #16]
 800bb36:	e6ae      	b.n	800b896 <_dtoa_r+0x696>
 800bb38:	9c07      	ldr	r4, [sp, #28]
 800bb3a:	9704      	str	r7, [sp, #16]
 800bb3c:	4625      	mov	r5, r4
 800bb3e:	e7f3      	b.n	800bb28 <_dtoa_r+0x928>
 800bb40:	9b07      	ldr	r3, [sp, #28]
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f000 8104 	beq.w	800bd54 <_dtoa_r+0xb54>
 800bb4c:	2e00      	cmp	r6, #0
 800bb4e:	dd05      	ble.n	800bb5c <_dtoa_r+0x95c>
 800bb50:	4629      	mov	r1, r5
 800bb52:	4632      	mov	r2, r6
 800bb54:	4658      	mov	r0, fp
 800bb56:	f000 fddf 	bl	800c718 <__lshift>
 800bb5a:	4605      	mov	r5, r0
 800bb5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d05a      	beq.n	800bc18 <_dtoa_r+0xa18>
 800bb62:	6869      	ldr	r1, [r5, #4]
 800bb64:	4658      	mov	r0, fp
 800bb66:	f000 fbc9 	bl	800c2fc <_Balloc>
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	b928      	cbnz	r0, 800bb7a <_dtoa_r+0x97a>
 800bb6e:	4b84      	ldr	r3, [pc, #528]	@ (800bd80 <_dtoa_r+0xb80>)
 800bb70:	4602      	mov	r2, r0
 800bb72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb76:	f7ff bb5a 	b.w	800b22e <_dtoa_r+0x2e>
 800bb7a:	692a      	ldr	r2, [r5, #16]
 800bb7c:	3202      	adds	r2, #2
 800bb7e:	0092      	lsls	r2, r2, #2
 800bb80:	f105 010c 	add.w	r1, r5, #12
 800bb84:	300c      	adds	r0, #12
 800bb86:	f001 f81d 	bl	800cbc4 <memcpy>
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	4631      	mov	r1, r6
 800bb8e:	4658      	mov	r0, fp
 800bb90:	f000 fdc2 	bl	800c718 <__lshift>
 800bb94:	f10a 0301 	add.w	r3, sl, #1
 800bb98:	9307      	str	r3, [sp, #28]
 800bb9a:	9b00      	ldr	r3, [sp, #0]
 800bb9c:	4453      	add	r3, sl
 800bb9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bba0:	9b02      	ldr	r3, [sp, #8]
 800bba2:	f003 0301 	and.w	r3, r3, #1
 800bba6:	462f      	mov	r7, r5
 800bba8:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbaa:	4605      	mov	r5, r0
 800bbac:	9b07      	ldr	r3, [sp, #28]
 800bbae:	4621      	mov	r1, r4
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	4648      	mov	r0, r9
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	f7ff fa9a 	bl	800b0ee <quorem>
 800bbba:	4639      	mov	r1, r7
 800bbbc:	9002      	str	r0, [sp, #8]
 800bbbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bbc2:	4648      	mov	r0, r9
 800bbc4:	f000 fe14 	bl	800c7f0 <__mcmp>
 800bbc8:	462a      	mov	r2, r5
 800bbca:	9008      	str	r0, [sp, #32]
 800bbcc:	4621      	mov	r1, r4
 800bbce:	4658      	mov	r0, fp
 800bbd0:	f000 fe2a 	bl	800c828 <__mdiff>
 800bbd4:	68c2      	ldr	r2, [r0, #12]
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	bb02      	cbnz	r2, 800bc1c <_dtoa_r+0xa1c>
 800bbda:	4601      	mov	r1, r0
 800bbdc:	4648      	mov	r0, r9
 800bbde:	f000 fe07 	bl	800c7f0 <__mcmp>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	4631      	mov	r1, r6
 800bbe6:	4658      	mov	r0, fp
 800bbe8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bbea:	f000 fbc7 	bl	800c37c <_Bfree>
 800bbee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbf2:	9e07      	ldr	r6, [sp, #28]
 800bbf4:	ea43 0102 	orr.w	r1, r3, r2
 800bbf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbfa:	4319      	orrs	r1, r3
 800bbfc:	d110      	bne.n	800bc20 <_dtoa_r+0xa20>
 800bbfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc02:	d029      	beq.n	800bc58 <_dtoa_r+0xa58>
 800bc04:	9b08      	ldr	r3, [sp, #32]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	dd02      	ble.n	800bc10 <_dtoa_r+0xa10>
 800bc0a:	9b02      	ldr	r3, [sp, #8]
 800bc0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bc10:	9b00      	ldr	r3, [sp, #0]
 800bc12:	f883 8000 	strb.w	r8, [r3]
 800bc16:	e63f      	b.n	800b898 <_dtoa_r+0x698>
 800bc18:	4628      	mov	r0, r5
 800bc1a:	e7bb      	b.n	800bb94 <_dtoa_r+0x994>
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	e7e1      	b.n	800bbe4 <_dtoa_r+0x9e4>
 800bc20:	9b08      	ldr	r3, [sp, #32]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	db04      	blt.n	800bc30 <_dtoa_r+0xa30>
 800bc26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc28:	430b      	orrs	r3, r1
 800bc2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc2c:	430b      	orrs	r3, r1
 800bc2e:	d120      	bne.n	800bc72 <_dtoa_r+0xa72>
 800bc30:	2a00      	cmp	r2, #0
 800bc32:	dded      	ble.n	800bc10 <_dtoa_r+0xa10>
 800bc34:	4649      	mov	r1, r9
 800bc36:	2201      	movs	r2, #1
 800bc38:	4658      	mov	r0, fp
 800bc3a:	f000 fd6d 	bl	800c718 <__lshift>
 800bc3e:	4621      	mov	r1, r4
 800bc40:	4681      	mov	r9, r0
 800bc42:	f000 fdd5 	bl	800c7f0 <__mcmp>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	dc03      	bgt.n	800bc52 <_dtoa_r+0xa52>
 800bc4a:	d1e1      	bne.n	800bc10 <_dtoa_r+0xa10>
 800bc4c:	f018 0f01 	tst.w	r8, #1
 800bc50:	d0de      	beq.n	800bc10 <_dtoa_r+0xa10>
 800bc52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc56:	d1d8      	bne.n	800bc0a <_dtoa_r+0xa0a>
 800bc58:	9a00      	ldr	r2, [sp, #0]
 800bc5a:	2339      	movs	r3, #57	@ 0x39
 800bc5c:	7013      	strb	r3, [r2, #0]
 800bc5e:	4633      	mov	r3, r6
 800bc60:	461e      	mov	r6, r3
 800bc62:	3b01      	subs	r3, #1
 800bc64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc68:	2a39      	cmp	r2, #57	@ 0x39
 800bc6a:	d052      	beq.n	800bd12 <_dtoa_r+0xb12>
 800bc6c:	3201      	adds	r2, #1
 800bc6e:	701a      	strb	r2, [r3, #0]
 800bc70:	e612      	b.n	800b898 <_dtoa_r+0x698>
 800bc72:	2a00      	cmp	r2, #0
 800bc74:	dd07      	ble.n	800bc86 <_dtoa_r+0xa86>
 800bc76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc7a:	d0ed      	beq.n	800bc58 <_dtoa_r+0xa58>
 800bc7c:	9a00      	ldr	r2, [sp, #0]
 800bc7e:	f108 0301 	add.w	r3, r8, #1
 800bc82:	7013      	strb	r3, [r2, #0]
 800bc84:	e608      	b.n	800b898 <_dtoa_r+0x698>
 800bc86:	9b07      	ldr	r3, [sp, #28]
 800bc88:	9a07      	ldr	r2, [sp, #28]
 800bc8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bc8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d028      	beq.n	800bce6 <_dtoa_r+0xae6>
 800bc94:	4649      	mov	r1, r9
 800bc96:	2300      	movs	r3, #0
 800bc98:	220a      	movs	r2, #10
 800bc9a:	4658      	mov	r0, fp
 800bc9c:	f000 fb90 	bl	800c3c0 <__multadd>
 800bca0:	42af      	cmp	r7, r5
 800bca2:	4681      	mov	r9, r0
 800bca4:	f04f 0300 	mov.w	r3, #0
 800bca8:	f04f 020a 	mov.w	r2, #10
 800bcac:	4639      	mov	r1, r7
 800bcae:	4658      	mov	r0, fp
 800bcb0:	d107      	bne.n	800bcc2 <_dtoa_r+0xac2>
 800bcb2:	f000 fb85 	bl	800c3c0 <__multadd>
 800bcb6:	4607      	mov	r7, r0
 800bcb8:	4605      	mov	r5, r0
 800bcba:	9b07      	ldr	r3, [sp, #28]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	9307      	str	r3, [sp, #28]
 800bcc0:	e774      	b.n	800bbac <_dtoa_r+0x9ac>
 800bcc2:	f000 fb7d 	bl	800c3c0 <__multadd>
 800bcc6:	4629      	mov	r1, r5
 800bcc8:	4607      	mov	r7, r0
 800bcca:	2300      	movs	r3, #0
 800bccc:	220a      	movs	r2, #10
 800bcce:	4658      	mov	r0, fp
 800bcd0:	f000 fb76 	bl	800c3c0 <__multadd>
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	e7f0      	b.n	800bcba <_dtoa_r+0xaba>
 800bcd8:	9b00      	ldr	r3, [sp, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	bfcc      	ite	gt
 800bcde:	461e      	movgt	r6, r3
 800bce0:	2601      	movle	r6, #1
 800bce2:	4456      	add	r6, sl
 800bce4:	2700      	movs	r7, #0
 800bce6:	4649      	mov	r1, r9
 800bce8:	2201      	movs	r2, #1
 800bcea:	4658      	mov	r0, fp
 800bcec:	f000 fd14 	bl	800c718 <__lshift>
 800bcf0:	4621      	mov	r1, r4
 800bcf2:	4681      	mov	r9, r0
 800bcf4:	f000 fd7c 	bl	800c7f0 <__mcmp>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	dcb0      	bgt.n	800bc5e <_dtoa_r+0xa5e>
 800bcfc:	d102      	bne.n	800bd04 <_dtoa_r+0xb04>
 800bcfe:	f018 0f01 	tst.w	r8, #1
 800bd02:	d1ac      	bne.n	800bc5e <_dtoa_r+0xa5e>
 800bd04:	4633      	mov	r3, r6
 800bd06:	461e      	mov	r6, r3
 800bd08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd0c:	2a30      	cmp	r2, #48	@ 0x30
 800bd0e:	d0fa      	beq.n	800bd06 <_dtoa_r+0xb06>
 800bd10:	e5c2      	b.n	800b898 <_dtoa_r+0x698>
 800bd12:	459a      	cmp	sl, r3
 800bd14:	d1a4      	bne.n	800bc60 <_dtoa_r+0xa60>
 800bd16:	9b04      	ldr	r3, [sp, #16]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	9304      	str	r3, [sp, #16]
 800bd1c:	2331      	movs	r3, #49	@ 0x31
 800bd1e:	f88a 3000 	strb.w	r3, [sl]
 800bd22:	e5b9      	b.n	800b898 <_dtoa_r+0x698>
 800bd24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bd84 <_dtoa_r+0xb84>
 800bd2a:	b11b      	cbz	r3, 800bd34 <_dtoa_r+0xb34>
 800bd2c:	f10a 0308 	add.w	r3, sl, #8
 800bd30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bd32:	6013      	str	r3, [r2, #0]
 800bd34:	4650      	mov	r0, sl
 800bd36:	b019      	add	sp, #100	@ 0x64
 800bd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	f77f ae37 	ble.w	800b9b2 <_dtoa_r+0x7b2>
 800bd44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd46:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd48:	2001      	movs	r0, #1
 800bd4a:	e655      	b.n	800b9f8 <_dtoa_r+0x7f8>
 800bd4c:	9b00      	ldr	r3, [sp, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f77f aed6 	ble.w	800bb00 <_dtoa_r+0x900>
 800bd54:	4656      	mov	r6, sl
 800bd56:	4621      	mov	r1, r4
 800bd58:	4648      	mov	r0, r9
 800bd5a:	f7ff f9c8 	bl	800b0ee <quorem>
 800bd5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bd62:	f806 8b01 	strb.w	r8, [r6], #1
 800bd66:	9b00      	ldr	r3, [sp, #0]
 800bd68:	eba6 020a 	sub.w	r2, r6, sl
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	ddb3      	ble.n	800bcd8 <_dtoa_r+0xad8>
 800bd70:	4649      	mov	r1, r9
 800bd72:	2300      	movs	r3, #0
 800bd74:	220a      	movs	r2, #10
 800bd76:	4658      	mov	r0, fp
 800bd78:	f000 fb22 	bl	800c3c0 <__multadd>
 800bd7c:	4681      	mov	r9, r0
 800bd7e:	e7ea      	b.n	800bd56 <_dtoa_r+0xb56>
 800bd80:	0800d8d8 	.word	0x0800d8d8
 800bd84:	0800d85c 	.word	0x0800d85c

0800bd88 <__ssputs_r>:
 800bd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd8c:	688e      	ldr	r6, [r1, #8]
 800bd8e:	461f      	mov	r7, r3
 800bd90:	42be      	cmp	r6, r7
 800bd92:	680b      	ldr	r3, [r1, #0]
 800bd94:	4682      	mov	sl, r0
 800bd96:	460c      	mov	r4, r1
 800bd98:	4690      	mov	r8, r2
 800bd9a:	d82d      	bhi.n	800bdf8 <__ssputs_r+0x70>
 800bd9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bda0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bda4:	d026      	beq.n	800bdf4 <__ssputs_r+0x6c>
 800bda6:	6965      	ldr	r5, [r4, #20]
 800bda8:	6909      	ldr	r1, [r1, #16]
 800bdaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdae:	eba3 0901 	sub.w	r9, r3, r1
 800bdb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdb6:	1c7b      	adds	r3, r7, #1
 800bdb8:	444b      	add	r3, r9
 800bdba:	106d      	asrs	r5, r5, #1
 800bdbc:	429d      	cmp	r5, r3
 800bdbe:	bf38      	it	cc
 800bdc0:	461d      	movcc	r5, r3
 800bdc2:	0553      	lsls	r3, r2, #21
 800bdc4:	d527      	bpl.n	800be16 <__ssputs_r+0x8e>
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	f000 f960 	bl	800c08c <_malloc_r>
 800bdcc:	4606      	mov	r6, r0
 800bdce:	b360      	cbz	r0, 800be2a <__ssputs_r+0xa2>
 800bdd0:	6921      	ldr	r1, [r4, #16]
 800bdd2:	464a      	mov	r2, r9
 800bdd4:	f000 fef6 	bl	800cbc4 <memcpy>
 800bdd8:	89a3      	ldrh	r3, [r4, #12]
 800bdda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bdde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bde2:	81a3      	strh	r3, [r4, #12]
 800bde4:	6126      	str	r6, [r4, #16]
 800bde6:	6165      	str	r5, [r4, #20]
 800bde8:	444e      	add	r6, r9
 800bdea:	eba5 0509 	sub.w	r5, r5, r9
 800bdee:	6026      	str	r6, [r4, #0]
 800bdf0:	60a5      	str	r5, [r4, #8]
 800bdf2:	463e      	mov	r6, r7
 800bdf4:	42be      	cmp	r6, r7
 800bdf6:	d900      	bls.n	800bdfa <__ssputs_r+0x72>
 800bdf8:	463e      	mov	r6, r7
 800bdfa:	6820      	ldr	r0, [r4, #0]
 800bdfc:	4632      	mov	r2, r6
 800bdfe:	4641      	mov	r1, r8
 800be00:	f000 fe6f 	bl	800cae2 <memmove>
 800be04:	68a3      	ldr	r3, [r4, #8]
 800be06:	1b9b      	subs	r3, r3, r6
 800be08:	60a3      	str	r3, [r4, #8]
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	4433      	add	r3, r6
 800be0e:	6023      	str	r3, [r4, #0]
 800be10:	2000      	movs	r0, #0
 800be12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be16:	462a      	mov	r2, r5
 800be18:	f000 fe35 	bl	800ca86 <_realloc_r>
 800be1c:	4606      	mov	r6, r0
 800be1e:	2800      	cmp	r0, #0
 800be20:	d1e0      	bne.n	800bde4 <__ssputs_r+0x5c>
 800be22:	6921      	ldr	r1, [r4, #16]
 800be24:	4650      	mov	r0, sl
 800be26:	f000 ff0d 	bl	800cc44 <_free_r>
 800be2a:	230c      	movs	r3, #12
 800be2c:	f8ca 3000 	str.w	r3, [sl]
 800be30:	89a3      	ldrh	r3, [r4, #12]
 800be32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be36:	81a3      	strh	r3, [r4, #12]
 800be38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be3c:	e7e9      	b.n	800be12 <__ssputs_r+0x8a>
	...

0800be40 <_svfiprintf_r>:
 800be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be44:	4698      	mov	r8, r3
 800be46:	898b      	ldrh	r3, [r1, #12]
 800be48:	061b      	lsls	r3, r3, #24
 800be4a:	b09d      	sub	sp, #116	@ 0x74
 800be4c:	4607      	mov	r7, r0
 800be4e:	460d      	mov	r5, r1
 800be50:	4614      	mov	r4, r2
 800be52:	d510      	bpl.n	800be76 <_svfiprintf_r+0x36>
 800be54:	690b      	ldr	r3, [r1, #16]
 800be56:	b973      	cbnz	r3, 800be76 <_svfiprintf_r+0x36>
 800be58:	2140      	movs	r1, #64	@ 0x40
 800be5a:	f000 f917 	bl	800c08c <_malloc_r>
 800be5e:	6028      	str	r0, [r5, #0]
 800be60:	6128      	str	r0, [r5, #16]
 800be62:	b930      	cbnz	r0, 800be72 <_svfiprintf_r+0x32>
 800be64:	230c      	movs	r3, #12
 800be66:	603b      	str	r3, [r7, #0]
 800be68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be6c:	b01d      	add	sp, #116	@ 0x74
 800be6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be72:	2340      	movs	r3, #64	@ 0x40
 800be74:	616b      	str	r3, [r5, #20]
 800be76:	2300      	movs	r3, #0
 800be78:	9309      	str	r3, [sp, #36]	@ 0x24
 800be7a:	2320      	movs	r3, #32
 800be7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be80:	f8cd 800c 	str.w	r8, [sp, #12]
 800be84:	2330      	movs	r3, #48	@ 0x30
 800be86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c024 <_svfiprintf_r+0x1e4>
 800be8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be8e:	f04f 0901 	mov.w	r9, #1
 800be92:	4623      	mov	r3, r4
 800be94:	469a      	mov	sl, r3
 800be96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be9a:	b10a      	cbz	r2, 800bea0 <_svfiprintf_r+0x60>
 800be9c:	2a25      	cmp	r2, #37	@ 0x25
 800be9e:	d1f9      	bne.n	800be94 <_svfiprintf_r+0x54>
 800bea0:	ebba 0b04 	subs.w	fp, sl, r4
 800bea4:	d00b      	beq.n	800bebe <_svfiprintf_r+0x7e>
 800bea6:	465b      	mov	r3, fp
 800bea8:	4622      	mov	r2, r4
 800beaa:	4629      	mov	r1, r5
 800beac:	4638      	mov	r0, r7
 800beae:	f7ff ff6b 	bl	800bd88 <__ssputs_r>
 800beb2:	3001      	adds	r0, #1
 800beb4:	f000 80a7 	beq.w	800c006 <_svfiprintf_r+0x1c6>
 800beb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800beba:	445a      	add	r2, fp
 800bebc:	9209      	str	r2, [sp, #36]	@ 0x24
 800bebe:	f89a 3000 	ldrb.w	r3, [sl]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 809f 	beq.w	800c006 <_svfiprintf_r+0x1c6>
 800bec8:	2300      	movs	r3, #0
 800beca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bed2:	f10a 0a01 	add.w	sl, sl, #1
 800bed6:	9304      	str	r3, [sp, #16]
 800bed8:	9307      	str	r3, [sp, #28]
 800beda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bede:	931a      	str	r3, [sp, #104]	@ 0x68
 800bee0:	4654      	mov	r4, sl
 800bee2:	2205      	movs	r2, #5
 800bee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bee8:	484e      	ldr	r0, [pc, #312]	@ (800c024 <_svfiprintf_r+0x1e4>)
 800beea:	f7f4 f999 	bl	8000220 <memchr>
 800beee:	9a04      	ldr	r2, [sp, #16]
 800bef0:	b9d8      	cbnz	r0, 800bf2a <_svfiprintf_r+0xea>
 800bef2:	06d0      	lsls	r0, r2, #27
 800bef4:	bf44      	itt	mi
 800bef6:	2320      	movmi	r3, #32
 800bef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800befc:	0711      	lsls	r1, r2, #28
 800befe:	bf44      	itt	mi
 800bf00:	232b      	movmi	r3, #43	@ 0x2b
 800bf02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf06:	f89a 3000 	ldrb.w	r3, [sl]
 800bf0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf0c:	d015      	beq.n	800bf3a <_svfiprintf_r+0xfa>
 800bf0e:	9a07      	ldr	r2, [sp, #28]
 800bf10:	4654      	mov	r4, sl
 800bf12:	2000      	movs	r0, #0
 800bf14:	f04f 0c0a 	mov.w	ip, #10
 800bf18:	4621      	mov	r1, r4
 800bf1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf1e:	3b30      	subs	r3, #48	@ 0x30
 800bf20:	2b09      	cmp	r3, #9
 800bf22:	d94b      	bls.n	800bfbc <_svfiprintf_r+0x17c>
 800bf24:	b1b0      	cbz	r0, 800bf54 <_svfiprintf_r+0x114>
 800bf26:	9207      	str	r2, [sp, #28]
 800bf28:	e014      	b.n	800bf54 <_svfiprintf_r+0x114>
 800bf2a:	eba0 0308 	sub.w	r3, r0, r8
 800bf2e:	fa09 f303 	lsl.w	r3, r9, r3
 800bf32:	4313      	orrs	r3, r2
 800bf34:	9304      	str	r3, [sp, #16]
 800bf36:	46a2      	mov	sl, r4
 800bf38:	e7d2      	b.n	800bee0 <_svfiprintf_r+0xa0>
 800bf3a:	9b03      	ldr	r3, [sp, #12]
 800bf3c:	1d19      	adds	r1, r3, #4
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	9103      	str	r1, [sp, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	bfbb      	ittet	lt
 800bf46:	425b      	neglt	r3, r3
 800bf48:	f042 0202 	orrlt.w	r2, r2, #2
 800bf4c:	9307      	strge	r3, [sp, #28]
 800bf4e:	9307      	strlt	r3, [sp, #28]
 800bf50:	bfb8      	it	lt
 800bf52:	9204      	strlt	r2, [sp, #16]
 800bf54:	7823      	ldrb	r3, [r4, #0]
 800bf56:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf58:	d10a      	bne.n	800bf70 <_svfiprintf_r+0x130>
 800bf5a:	7863      	ldrb	r3, [r4, #1]
 800bf5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf5e:	d132      	bne.n	800bfc6 <_svfiprintf_r+0x186>
 800bf60:	9b03      	ldr	r3, [sp, #12]
 800bf62:	1d1a      	adds	r2, r3, #4
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	9203      	str	r2, [sp, #12]
 800bf68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf6c:	3402      	adds	r4, #2
 800bf6e:	9305      	str	r3, [sp, #20]
 800bf70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c034 <_svfiprintf_r+0x1f4>
 800bf74:	7821      	ldrb	r1, [r4, #0]
 800bf76:	2203      	movs	r2, #3
 800bf78:	4650      	mov	r0, sl
 800bf7a:	f7f4 f951 	bl	8000220 <memchr>
 800bf7e:	b138      	cbz	r0, 800bf90 <_svfiprintf_r+0x150>
 800bf80:	9b04      	ldr	r3, [sp, #16]
 800bf82:	eba0 000a 	sub.w	r0, r0, sl
 800bf86:	2240      	movs	r2, #64	@ 0x40
 800bf88:	4082      	lsls	r2, r0
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	3401      	adds	r4, #1
 800bf8e:	9304      	str	r3, [sp, #16]
 800bf90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf94:	4824      	ldr	r0, [pc, #144]	@ (800c028 <_svfiprintf_r+0x1e8>)
 800bf96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf9a:	2206      	movs	r2, #6
 800bf9c:	f7f4 f940 	bl	8000220 <memchr>
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	d036      	beq.n	800c012 <_svfiprintf_r+0x1d2>
 800bfa4:	4b21      	ldr	r3, [pc, #132]	@ (800c02c <_svfiprintf_r+0x1ec>)
 800bfa6:	bb1b      	cbnz	r3, 800bff0 <_svfiprintf_r+0x1b0>
 800bfa8:	9b03      	ldr	r3, [sp, #12]
 800bfaa:	3307      	adds	r3, #7
 800bfac:	f023 0307 	bic.w	r3, r3, #7
 800bfb0:	3308      	adds	r3, #8
 800bfb2:	9303      	str	r3, [sp, #12]
 800bfb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfb6:	4433      	add	r3, r6
 800bfb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfba:	e76a      	b.n	800be92 <_svfiprintf_r+0x52>
 800bfbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfc0:	460c      	mov	r4, r1
 800bfc2:	2001      	movs	r0, #1
 800bfc4:	e7a8      	b.n	800bf18 <_svfiprintf_r+0xd8>
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	3401      	adds	r4, #1
 800bfca:	9305      	str	r3, [sp, #20]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	f04f 0c0a 	mov.w	ip, #10
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfd8:	3a30      	subs	r2, #48	@ 0x30
 800bfda:	2a09      	cmp	r2, #9
 800bfdc:	d903      	bls.n	800bfe6 <_svfiprintf_r+0x1a6>
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d0c6      	beq.n	800bf70 <_svfiprintf_r+0x130>
 800bfe2:	9105      	str	r1, [sp, #20]
 800bfe4:	e7c4      	b.n	800bf70 <_svfiprintf_r+0x130>
 800bfe6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfea:	4604      	mov	r4, r0
 800bfec:	2301      	movs	r3, #1
 800bfee:	e7f0      	b.n	800bfd2 <_svfiprintf_r+0x192>
 800bff0:	ab03      	add	r3, sp, #12
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	462a      	mov	r2, r5
 800bff6:	4b0e      	ldr	r3, [pc, #56]	@ (800c030 <_svfiprintf_r+0x1f0>)
 800bff8:	a904      	add	r1, sp, #16
 800bffa:	4638      	mov	r0, r7
 800bffc:	f7fe fb6a 	bl	800a6d4 <_printf_float>
 800c000:	1c42      	adds	r2, r0, #1
 800c002:	4606      	mov	r6, r0
 800c004:	d1d6      	bne.n	800bfb4 <_svfiprintf_r+0x174>
 800c006:	89ab      	ldrh	r3, [r5, #12]
 800c008:	065b      	lsls	r3, r3, #25
 800c00a:	f53f af2d 	bmi.w	800be68 <_svfiprintf_r+0x28>
 800c00e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c010:	e72c      	b.n	800be6c <_svfiprintf_r+0x2c>
 800c012:	ab03      	add	r3, sp, #12
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	462a      	mov	r2, r5
 800c018:	4b05      	ldr	r3, [pc, #20]	@ (800c030 <_svfiprintf_r+0x1f0>)
 800c01a:	a904      	add	r1, sp, #16
 800c01c:	4638      	mov	r0, r7
 800c01e:	f7fe fdf1 	bl	800ac04 <_printf_i>
 800c022:	e7ed      	b.n	800c000 <_svfiprintf_r+0x1c0>
 800c024:	0800d8e9 	.word	0x0800d8e9
 800c028:	0800d8f3 	.word	0x0800d8f3
 800c02c:	0800a6d5 	.word	0x0800a6d5
 800c030:	0800bd89 	.word	0x0800bd89
 800c034:	0800d8ef 	.word	0x0800d8ef

0800c038 <malloc>:
 800c038:	4b02      	ldr	r3, [pc, #8]	@ (800c044 <malloc+0xc>)
 800c03a:	4601      	mov	r1, r0
 800c03c:	6818      	ldr	r0, [r3, #0]
 800c03e:	f000 b825 	b.w	800c08c <_malloc_r>
 800c042:	bf00      	nop
 800c044:	2000003c 	.word	0x2000003c

0800c048 <sbrk_aligned>:
 800c048:	b570      	push	{r4, r5, r6, lr}
 800c04a:	4e0f      	ldr	r6, [pc, #60]	@ (800c088 <sbrk_aligned+0x40>)
 800c04c:	460c      	mov	r4, r1
 800c04e:	6831      	ldr	r1, [r6, #0]
 800c050:	4605      	mov	r5, r0
 800c052:	b911      	cbnz	r1, 800c05a <sbrk_aligned+0x12>
 800c054:	f000 fd94 	bl	800cb80 <_sbrk_r>
 800c058:	6030      	str	r0, [r6, #0]
 800c05a:	4621      	mov	r1, r4
 800c05c:	4628      	mov	r0, r5
 800c05e:	f000 fd8f 	bl	800cb80 <_sbrk_r>
 800c062:	1c43      	adds	r3, r0, #1
 800c064:	d103      	bne.n	800c06e <sbrk_aligned+0x26>
 800c066:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c06a:	4620      	mov	r0, r4
 800c06c:	bd70      	pop	{r4, r5, r6, pc}
 800c06e:	1cc4      	adds	r4, r0, #3
 800c070:	f024 0403 	bic.w	r4, r4, #3
 800c074:	42a0      	cmp	r0, r4
 800c076:	d0f8      	beq.n	800c06a <sbrk_aligned+0x22>
 800c078:	1a21      	subs	r1, r4, r0
 800c07a:	4628      	mov	r0, r5
 800c07c:	f000 fd80 	bl	800cb80 <_sbrk_r>
 800c080:	3001      	adds	r0, #1
 800c082:	d1f2      	bne.n	800c06a <sbrk_aligned+0x22>
 800c084:	e7ef      	b.n	800c066 <sbrk_aligned+0x1e>
 800c086:	bf00      	nop
 800c088:	20000d78 	.word	0x20000d78

0800c08c <_malloc_r>:
 800c08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c090:	1ccd      	adds	r5, r1, #3
 800c092:	f025 0503 	bic.w	r5, r5, #3
 800c096:	3508      	adds	r5, #8
 800c098:	2d0c      	cmp	r5, #12
 800c09a:	bf38      	it	cc
 800c09c:	250c      	movcc	r5, #12
 800c09e:	2d00      	cmp	r5, #0
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	db01      	blt.n	800c0a8 <_malloc_r+0x1c>
 800c0a4:	42a9      	cmp	r1, r5
 800c0a6:	d904      	bls.n	800c0b2 <_malloc_r+0x26>
 800c0a8:	230c      	movs	r3, #12
 800c0aa:	6033      	str	r3, [r6, #0]
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c188 <_malloc_r+0xfc>
 800c0b6:	f000 f915 	bl	800c2e4 <__malloc_lock>
 800c0ba:	f8d8 3000 	ldr.w	r3, [r8]
 800c0be:	461c      	mov	r4, r3
 800c0c0:	bb44      	cbnz	r4, 800c114 <_malloc_r+0x88>
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	f7ff ffbf 	bl	800c048 <sbrk_aligned>
 800c0ca:	1c43      	adds	r3, r0, #1
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	d158      	bne.n	800c182 <_malloc_r+0xf6>
 800c0d0:	f8d8 4000 	ldr.w	r4, [r8]
 800c0d4:	4627      	mov	r7, r4
 800c0d6:	2f00      	cmp	r7, #0
 800c0d8:	d143      	bne.n	800c162 <_malloc_r+0xd6>
 800c0da:	2c00      	cmp	r4, #0
 800c0dc:	d04b      	beq.n	800c176 <_malloc_r+0xea>
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	4639      	mov	r1, r7
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	eb04 0903 	add.w	r9, r4, r3
 800c0e8:	f000 fd4a 	bl	800cb80 <_sbrk_r>
 800c0ec:	4581      	cmp	r9, r0
 800c0ee:	d142      	bne.n	800c176 <_malloc_r+0xea>
 800c0f0:	6821      	ldr	r1, [r4, #0]
 800c0f2:	1a6d      	subs	r5, r5, r1
 800c0f4:	4629      	mov	r1, r5
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	f7ff ffa6 	bl	800c048 <sbrk_aligned>
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	d03a      	beq.n	800c176 <_malloc_r+0xea>
 800c100:	6823      	ldr	r3, [r4, #0]
 800c102:	442b      	add	r3, r5
 800c104:	6023      	str	r3, [r4, #0]
 800c106:	f8d8 3000 	ldr.w	r3, [r8]
 800c10a:	685a      	ldr	r2, [r3, #4]
 800c10c:	bb62      	cbnz	r2, 800c168 <_malloc_r+0xdc>
 800c10e:	f8c8 7000 	str.w	r7, [r8]
 800c112:	e00f      	b.n	800c134 <_malloc_r+0xa8>
 800c114:	6822      	ldr	r2, [r4, #0]
 800c116:	1b52      	subs	r2, r2, r5
 800c118:	d420      	bmi.n	800c15c <_malloc_r+0xd0>
 800c11a:	2a0b      	cmp	r2, #11
 800c11c:	d917      	bls.n	800c14e <_malloc_r+0xc2>
 800c11e:	1961      	adds	r1, r4, r5
 800c120:	42a3      	cmp	r3, r4
 800c122:	6025      	str	r5, [r4, #0]
 800c124:	bf18      	it	ne
 800c126:	6059      	strne	r1, [r3, #4]
 800c128:	6863      	ldr	r3, [r4, #4]
 800c12a:	bf08      	it	eq
 800c12c:	f8c8 1000 	streq.w	r1, [r8]
 800c130:	5162      	str	r2, [r4, r5]
 800c132:	604b      	str	r3, [r1, #4]
 800c134:	4630      	mov	r0, r6
 800c136:	f000 f8db 	bl	800c2f0 <__malloc_unlock>
 800c13a:	f104 000b 	add.w	r0, r4, #11
 800c13e:	1d23      	adds	r3, r4, #4
 800c140:	f020 0007 	bic.w	r0, r0, #7
 800c144:	1ac2      	subs	r2, r0, r3
 800c146:	bf1c      	itt	ne
 800c148:	1a1b      	subne	r3, r3, r0
 800c14a:	50a3      	strne	r3, [r4, r2]
 800c14c:	e7af      	b.n	800c0ae <_malloc_r+0x22>
 800c14e:	6862      	ldr	r2, [r4, #4]
 800c150:	42a3      	cmp	r3, r4
 800c152:	bf0c      	ite	eq
 800c154:	f8c8 2000 	streq.w	r2, [r8]
 800c158:	605a      	strne	r2, [r3, #4]
 800c15a:	e7eb      	b.n	800c134 <_malloc_r+0xa8>
 800c15c:	4623      	mov	r3, r4
 800c15e:	6864      	ldr	r4, [r4, #4]
 800c160:	e7ae      	b.n	800c0c0 <_malloc_r+0x34>
 800c162:	463c      	mov	r4, r7
 800c164:	687f      	ldr	r7, [r7, #4]
 800c166:	e7b6      	b.n	800c0d6 <_malloc_r+0x4a>
 800c168:	461a      	mov	r2, r3
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	42a3      	cmp	r3, r4
 800c16e:	d1fb      	bne.n	800c168 <_malloc_r+0xdc>
 800c170:	2300      	movs	r3, #0
 800c172:	6053      	str	r3, [r2, #4]
 800c174:	e7de      	b.n	800c134 <_malloc_r+0xa8>
 800c176:	230c      	movs	r3, #12
 800c178:	6033      	str	r3, [r6, #0]
 800c17a:	4630      	mov	r0, r6
 800c17c:	f000 f8b8 	bl	800c2f0 <__malloc_unlock>
 800c180:	e794      	b.n	800c0ac <_malloc_r+0x20>
 800c182:	6005      	str	r5, [r0, #0]
 800c184:	e7d6      	b.n	800c134 <_malloc_r+0xa8>
 800c186:	bf00      	nop
 800c188:	20000d7c 	.word	0x20000d7c

0800c18c <__sflush_r>:
 800c18c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c194:	0716      	lsls	r6, r2, #28
 800c196:	4605      	mov	r5, r0
 800c198:	460c      	mov	r4, r1
 800c19a:	d454      	bmi.n	800c246 <__sflush_r+0xba>
 800c19c:	684b      	ldr	r3, [r1, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	dc02      	bgt.n	800c1a8 <__sflush_r+0x1c>
 800c1a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	dd48      	ble.n	800c23a <__sflush_r+0xae>
 800c1a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1aa:	2e00      	cmp	r6, #0
 800c1ac:	d045      	beq.n	800c23a <__sflush_r+0xae>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c1b4:	682f      	ldr	r7, [r5, #0]
 800c1b6:	6a21      	ldr	r1, [r4, #32]
 800c1b8:	602b      	str	r3, [r5, #0]
 800c1ba:	d030      	beq.n	800c21e <__sflush_r+0x92>
 800c1bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c1be:	89a3      	ldrh	r3, [r4, #12]
 800c1c0:	0759      	lsls	r1, r3, #29
 800c1c2:	d505      	bpl.n	800c1d0 <__sflush_r+0x44>
 800c1c4:	6863      	ldr	r3, [r4, #4]
 800c1c6:	1ad2      	subs	r2, r2, r3
 800c1c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c1ca:	b10b      	cbz	r3, 800c1d0 <__sflush_r+0x44>
 800c1cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c1ce:	1ad2      	subs	r2, r2, r3
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1d4:	6a21      	ldr	r1, [r4, #32]
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	47b0      	blx	r6
 800c1da:	1c43      	adds	r3, r0, #1
 800c1dc:	89a3      	ldrh	r3, [r4, #12]
 800c1de:	d106      	bne.n	800c1ee <__sflush_r+0x62>
 800c1e0:	6829      	ldr	r1, [r5, #0]
 800c1e2:	291d      	cmp	r1, #29
 800c1e4:	d82b      	bhi.n	800c23e <__sflush_r+0xb2>
 800c1e6:	4a2a      	ldr	r2, [pc, #168]	@ (800c290 <__sflush_r+0x104>)
 800c1e8:	410a      	asrs	r2, r1
 800c1ea:	07d6      	lsls	r6, r2, #31
 800c1ec:	d427      	bmi.n	800c23e <__sflush_r+0xb2>
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	6062      	str	r2, [r4, #4]
 800c1f2:	04d9      	lsls	r1, r3, #19
 800c1f4:	6922      	ldr	r2, [r4, #16]
 800c1f6:	6022      	str	r2, [r4, #0]
 800c1f8:	d504      	bpl.n	800c204 <__sflush_r+0x78>
 800c1fa:	1c42      	adds	r2, r0, #1
 800c1fc:	d101      	bne.n	800c202 <__sflush_r+0x76>
 800c1fe:	682b      	ldr	r3, [r5, #0]
 800c200:	b903      	cbnz	r3, 800c204 <__sflush_r+0x78>
 800c202:	6560      	str	r0, [r4, #84]	@ 0x54
 800c204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c206:	602f      	str	r7, [r5, #0]
 800c208:	b1b9      	cbz	r1, 800c23a <__sflush_r+0xae>
 800c20a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c20e:	4299      	cmp	r1, r3
 800c210:	d002      	beq.n	800c218 <__sflush_r+0x8c>
 800c212:	4628      	mov	r0, r5
 800c214:	f000 fd16 	bl	800cc44 <_free_r>
 800c218:	2300      	movs	r3, #0
 800c21a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c21c:	e00d      	b.n	800c23a <__sflush_r+0xae>
 800c21e:	2301      	movs	r3, #1
 800c220:	4628      	mov	r0, r5
 800c222:	47b0      	blx	r6
 800c224:	4602      	mov	r2, r0
 800c226:	1c50      	adds	r0, r2, #1
 800c228:	d1c9      	bne.n	800c1be <__sflush_r+0x32>
 800c22a:	682b      	ldr	r3, [r5, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d0c6      	beq.n	800c1be <__sflush_r+0x32>
 800c230:	2b1d      	cmp	r3, #29
 800c232:	d001      	beq.n	800c238 <__sflush_r+0xac>
 800c234:	2b16      	cmp	r3, #22
 800c236:	d11e      	bne.n	800c276 <__sflush_r+0xea>
 800c238:	602f      	str	r7, [r5, #0]
 800c23a:	2000      	movs	r0, #0
 800c23c:	e022      	b.n	800c284 <__sflush_r+0xf8>
 800c23e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c242:	b21b      	sxth	r3, r3
 800c244:	e01b      	b.n	800c27e <__sflush_r+0xf2>
 800c246:	690f      	ldr	r7, [r1, #16]
 800c248:	2f00      	cmp	r7, #0
 800c24a:	d0f6      	beq.n	800c23a <__sflush_r+0xae>
 800c24c:	0793      	lsls	r3, r2, #30
 800c24e:	680e      	ldr	r6, [r1, #0]
 800c250:	bf08      	it	eq
 800c252:	694b      	ldreq	r3, [r1, #20]
 800c254:	600f      	str	r7, [r1, #0]
 800c256:	bf18      	it	ne
 800c258:	2300      	movne	r3, #0
 800c25a:	eba6 0807 	sub.w	r8, r6, r7
 800c25e:	608b      	str	r3, [r1, #8]
 800c260:	f1b8 0f00 	cmp.w	r8, #0
 800c264:	dde9      	ble.n	800c23a <__sflush_r+0xae>
 800c266:	6a21      	ldr	r1, [r4, #32]
 800c268:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c26a:	4643      	mov	r3, r8
 800c26c:	463a      	mov	r2, r7
 800c26e:	4628      	mov	r0, r5
 800c270:	47b0      	blx	r6
 800c272:	2800      	cmp	r0, #0
 800c274:	dc08      	bgt.n	800c288 <__sflush_r+0xfc>
 800c276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c27a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c27e:	81a3      	strh	r3, [r4, #12]
 800c280:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c288:	4407      	add	r7, r0
 800c28a:	eba8 0800 	sub.w	r8, r8, r0
 800c28e:	e7e7      	b.n	800c260 <__sflush_r+0xd4>
 800c290:	dfbffffe 	.word	0xdfbffffe

0800c294 <_fflush_r>:
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	690b      	ldr	r3, [r1, #16]
 800c298:	4605      	mov	r5, r0
 800c29a:	460c      	mov	r4, r1
 800c29c:	b913      	cbnz	r3, 800c2a4 <_fflush_r+0x10>
 800c29e:	2500      	movs	r5, #0
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	b118      	cbz	r0, 800c2ae <_fflush_r+0x1a>
 800c2a6:	6a03      	ldr	r3, [r0, #32]
 800c2a8:	b90b      	cbnz	r3, 800c2ae <_fflush_r+0x1a>
 800c2aa:	f7fe fe77 	bl	800af9c <__sinit>
 800c2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d0f3      	beq.n	800c29e <_fflush_r+0xa>
 800c2b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c2b8:	07d0      	lsls	r0, r2, #31
 800c2ba:	d404      	bmi.n	800c2c6 <_fflush_r+0x32>
 800c2bc:	0599      	lsls	r1, r3, #22
 800c2be:	d402      	bmi.n	800c2c6 <_fflush_r+0x32>
 800c2c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2c2:	f7fe ff12 	bl	800b0ea <__retarget_lock_acquire_recursive>
 800c2c6:	4628      	mov	r0, r5
 800c2c8:	4621      	mov	r1, r4
 800c2ca:	f7ff ff5f 	bl	800c18c <__sflush_r>
 800c2ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c2d0:	07da      	lsls	r2, r3, #31
 800c2d2:	4605      	mov	r5, r0
 800c2d4:	d4e4      	bmi.n	800c2a0 <_fflush_r+0xc>
 800c2d6:	89a3      	ldrh	r3, [r4, #12]
 800c2d8:	059b      	lsls	r3, r3, #22
 800c2da:	d4e1      	bmi.n	800c2a0 <_fflush_r+0xc>
 800c2dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2de:	f7fe ff05 	bl	800b0ec <__retarget_lock_release_recursive>
 800c2e2:	e7dd      	b.n	800c2a0 <_fflush_r+0xc>

0800c2e4 <__malloc_lock>:
 800c2e4:	4801      	ldr	r0, [pc, #4]	@ (800c2ec <__malloc_lock+0x8>)
 800c2e6:	f7fe bf00 	b.w	800b0ea <__retarget_lock_acquire_recursive>
 800c2ea:	bf00      	nop
 800c2ec:	20000d74 	.word	0x20000d74

0800c2f0 <__malloc_unlock>:
 800c2f0:	4801      	ldr	r0, [pc, #4]	@ (800c2f8 <__malloc_unlock+0x8>)
 800c2f2:	f7fe befb 	b.w	800b0ec <__retarget_lock_release_recursive>
 800c2f6:	bf00      	nop
 800c2f8:	20000d74 	.word	0x20000d74

0800c2fc <_Balloc>:
 800c2fc:	b570      	push	{r4, r5, r6, lr}
 800c2fe:	69c6      	ldr	r6, [r0, #28]
 800c300:	4604      	mov	r4, r0
 800c302:	460d      	mov	r5, r1
 800c304:	b976      	cbnz	r6, 800c324 <_Balloc+0x28>
 800c306:	2010      	movs	r0, #16
 800c308:	f7ff fe96 	bl	800c038 <malloc>
 800c30c:	4602      	mov	r2, r0
 800c30e:	61e0      	str	r0, [r4, #28]
 800c310:	b920      	cbnz	r0, 800c31c <_Balloc+0x20>
 800c312:	4b18      	ldr	r3, [pc, #96]	@ (800c374 <_Balloc+0x78>)
 800c314:	4818      	ldr	r0, [pc, #96]	@ (800c378 <_Balloc+0x7c>)
 800c316:	216b      	movs	r1, #107	@ 0x6b
 800c318:	f000 fc62 	bl	800cbe0 <__assert_func>
 800c31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c320:	6006      	str	r6, [r0, #0]
 800c322:	60c6      	str	r6, [r0, #12]
 800c324:	69e6      	ldr	r6, [r4, #28]
 800c326:	68f3      	ldr	r3, [r6, #12]
 800c328:	b183      	cbz	r3, 800c34c <_Balloc+0x50>
 800c32a:	69e3      	ldr	r3, [r4, #28]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c332:	b9b8      	cbnz	r0, 800c364 <_Balloc+0x68>
 800c334:	2101      	movs	r1, #1
 800c336:	fa01 f605 	lsl.w	r6, r1, r5
 800c33a:	1d72      	adds	r2, r6, #5
 800c33c:	0092      	lsls	r2, r2, #2
 800c33e:	4620      	mov	r0, r4
 800c340:	f000 fc6c 	bl	800cc1c <_calloc_r>
 800c344:	b160      	cbz	r0, 800c360 <_Balloc+0x64>
 800c346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c34a:	e00e      	b.n	800c36a <_Balloc+0x6e>
 800c34c:	2221      	movs	r2, #33	@ 0x21
 800c34e:	2104      	movs	r1, #4
 800c350:	4620      	mov	r0, r4
 800c352:	f000 fc63 	bl	800cc1c <_calloc_r>
 800c356:	69e3      	ldr	r3, [r4, #28]
 800c358:	60f0      	str	r0, [r6, #12]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1e4      	bne.n	800c32a <_Balloc+0x2e>
 800c360:	2000      	movs	r0, #0
 800c362:	bd70      	pop	{r4, r5, r6, pc}
 800c364:	6802      	ldr	r2, [r0, #0]
 800c366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c36a:	2300      	movs	r3, #0
 800c36c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c370:	e7f7      	b.n	800c362 <_Balloc+0x66>
 800c372:	bf00      	nop
 800c374:	0800d869 	.word	0x0800d869
 800c378:	0800d8fa 	.word	0x0800d8fa

0800c37c <_Bfree>:
 800c37c:	b570      	push	{r4, r5, r6, lr}
 800c37e:	69c6      	ldr	r6, [r0, #28]
 800c380:	4605      	mov	r5, r0
 800c382:	460c      	mov	r4, r1
 800c384:	b976      	cbnz	r6, 800c3a4 <_Bfree+0x28>
 800c386:	2010      	movs	r0, #16
 800c388:	f7ff fe56 	bl	800c038 <malloc>
 800c38c:	4602      	mov	r2, r0
 800c38e:	61e8      	str	r0, [r5, #28]
 800c390:	b920      	cbnz	r0, 800c39c <_Bfree+0x20>
 800c392:	4b09      	ldr	r3, [pc, #36]	@ (800c3b8 <_Bfree+0x3c>)
 800c394:	4809      	ldr	r0, [pc, #36]	@ (800c3bc <_Bfree+0x40>)
 800c396:	218f      	movs	r1, #143	@ 0x8f
 800c398:	f000 fc22 	bl	800cbe0 <__assert_func>
 800c39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3a0:	6006      	str	r6, [r0, #0]
 800c3a2:	60c6      	str	r6, [r0, #12]
 800c3a4:	b13c      	cbz	r4, 800c3b6 <_Bfree+0x3a>
 800c3a6:	69eb      	ldr	r3, [r5, #28]
 800c3a8:	6862      	ldr	r2, [r4, #4]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3b0:	6021      	str	r1, [r4, #0]
 800c3b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3b6:	bd70      	pop	{r4, r5, r6, pc}
 800c3b8:	0800d869 	.word	0x0800d869
 800c3bc:	0800d8fa 	.word	0x0800d8fa

0800c3c0 <__multadd>:
 800c3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c4:	690d      	ldr	r5, [r1, #16]
 800c3c6:	4607      	mov	r7, r0
 800c3c8:	460c      	mov	r4, r1
 800c3ca:	461e      	mov	r6, r3
 800c3cc:	f101 0c14 	add.w	ip, r1, #20
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	f8dc 3000 	ldr.w	r3, [ip]
 800c3d6:	b299      	uxth	r1, r3
 800c3d8:	fb02 6101 	mla	r1, r2, r1, r6
 800c3dc:	0c1e      	lsrs	r6, r3, #16
 800c3de:	0c0b      	lsrs	r3, r1, #16
 800c3e0:	fb02 3306 	mla	r3, r2, r6, r3
 800c3e4:	b289      	uxth	r1, r1
 800c3e6:	3001      	adds	r0, #1
 800c3e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c3ec:	4285      	cmp	r5, r0
 800c3ee:	f84c 1b04 	str.w	r1, [ip], #4
 800c3f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c3f6:	dcec      	bgt.n	800c3d2 <__multadd+0x12>
 800c3f8:	b30e      	cbz	r6, 800c43e <__multadd+0x7e>
 800c3fa:	68a3      	ldr	r3, [r4, #8]
 800c3fc:	42ab      	cmp	r3, r5
 800c3fe:	dc19      	bgt.n	800c434 <__multadd+0x74>
 800c400:	6861      	ldr	r1, [r4, #4]
 800c402:	4638      	mov	r0, r7
 800c404:	3101      	adds	r1, #1
 800c406:	f7ff ff79 	bl	800c2fc <_Balloc>
 800c40a:	4680      	mov	r8, r0
 800c40c:	b928      	cbnz	r0, 800c41a <__multadd+0x5a>
 800c40e:	4602      	mov	r2, r0
 800c410:	4b0c      	ldr	r3, [pc, #48]	@ (800c444 <__multadd+0x84>)
 800c412:	480d      	ldr	r0, [pc, #52]	@ (800c448 <__multadd+0x88>)
 800c414:	21ba      	movs	r1, #186	@ 0xba
 800c416:	f000 fbe3 	bl	800cbe0 <__assert_func>
 800c41a:	6922      	ldr	r2, [r4, #16]
 800c41c:	3202      	adds	r2, #2
 800c41e:	f104 010c 	add.w	r1, r4, #12
 800c422:	0092      	lsls	r2, r2, #2
 800c424:	300c      	adds	r0, #12
 800c426:	f000 fbcd 	bl	800cbc4 <memcpy>
 800c42a:	4621      	mov	r1, r4
 800c42c:	4638      	mov	r0, r7
 800c42e:	f7ff ffa5 	bl	800c37c <_Bfree>
 800c432:	4644      	mov	r4, r8
 800c434:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c438:	3501      	adds	r5, #1
 800c43a:	615e      	str	r6, [r3, #20]
 800c43c:	6125      	str	r5, [r4, #16]
 800c43e:	4620      	mov	r0, r4
 800c440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c444:	0800d8d8 	.word	0x0800d8d8
 800c448:	0800d8fa 	.word	0x0800d8fa

0800c44c <__hi0bits>:
 800c44c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c450:	4603      	mov	r3, r0
 800c452:	bf36      	itet	cc
 800c454:	0403      	lslcc	r3, r0, #16
 800c456:	2000      	movcs	r0, #0
 800c458:	2010      	movcc	r0, #16
 800c45a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c45e:	bf3c      	itt	cc
 800c460:	021b      	lslcc	r3, r3, #8
 800c462:	3008      	addcc	r0, #8
 800c464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c468:	bf3c      	itt	cc
 800c46a:	011b      	lslcc	r3, r3, #4
 800c46c:	3004      	addcc	r0, #4
 800c46e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c472:	bf3c      	itt	cc
 800c474:	009b      	lslcc	r3, r3, #2
 800c476:	3002      	addcc	r0, #2
 800c478:	2b00      	cmp	r3, #0
 800c47a:	db05      	blt.n	800c488 <__hi0bits+0x3c>
 800c47c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c480:	f100 0001 	add.w	r0, r0, #1
 800c484:	bf08      	it	eq
 800c486:	2020      	moveq	r0, #32
 800c488:	4770      	bx	lr

0800c48a <__lo0bits>:
 800c48a:	6803      	ldr	r3, [r0, #0]
 800c48c:	4602      	mov	r2, r0
 800c48e:	f013 0007 	ands.w	r0, r3, #7
 800c492:	d00b      	beq.n	800c4ac <__lo0bits+0x22>
 800c494:	07d9      	lsls	r1, r3, #31
 800c496:	d421      	bmi.n	800c4dc <__lo0bits+0x52>
 800c498:	0798      	lsls	r0, r3, #30
 800c49a:	bf49      	itett	mi
 800c49c:	085b      	lsrmi	r3, r3, #1
 800c49e:	089b      	lsrpl	r3, r3, #2
 800c4a0:	2001      	movmi	r0, #1
 800c4a2:	6013      	strmi	r3, [r2, #0]
 800c4a4:	bf5c      	itt	pl
 800c4a6:	6013      	strpl	r3, [r2, #0]
 800c4a8:	2002      	movpl	r0, #2
 800c4aa:	4770      	bx	lr
 800c4ac:	b299      	uxth	r1, r3
 800c4ae:	b909      	cbnz	r1, 800c4b4 <__lo0bits+0x2a>
 800c4b0:	0c1b      	lsrs	r3, r3, #16
 800c4b2:	2010      	movs	r0, #16
 800c4b4:	b2d9      	uxtb	r1, r3
 800c4b6:	b909      	cbnz	r1, 800c4bc <__lo0bits+0x32>
 800c4b8:	3008      	adds	r0, #8
 800c4ba:	0a1b      	lsrs	r3, r3, #8
 800c4bc:	0719      	lsls	r1, r3, #28
 800c4be:	bf04      	itt	eq
 800c4c0:	091b      	lsreq	r3, r3, #4
 800c4c2:	3004      	addeq	r0, #4
 800c4c4:	0799      	lsls	r1, r3, #30
 800c4c6:	bf04      	itt	eq
 800c4c8:	089b      	lsreq	r3, r3, #2
 800c4ca:	3002      	addeq	r0, #2
 800c4cc:	07d9      	lsls	r1, r3, #31
 800c4ce:	d403      	bmi.n	800c4d8 <__lo0bits+0x4e>
 800c4d0:	085b      	lsrs	r3, r3, #1
 800c4d2:	f100 0001 	add.w	r0, r0, #1
 800c4d6:	d003      	beq.n	800c4e0 <__lo0bits+0x56>
 800c4d8:	6013      	str	r3, [r2, #0]
 800c4da:	4770      	bx	lr
 800c4dc:	2000      	movs	r0, #0
 800c4de:	4770      	bx	lr
 800c4e0:	2020      	movs	r0, #32
 800c4e2:	4770      	bx	lr

0800c4e4 <__i2b>:
 800c4e4:	b510      	push	{r4, lr}
 800c4e6:	460c      	mov	r4, r1
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	f7ff ff07 	bl	800c2fc <_Balloc>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	b928      	cbnz	r0, 800c4fe <__i2b+0x1a>
 800c4f2:	4b05      	ldr	r3, [pc, #20]	@ (800c508 <__i2b+0x24>)
 800c4f4:	4805      	ldr	r0, [pc, #20]	@ (800c50c <__i2b+0x28>)
 800c4f6:	f240 1145 	movw	r1, #325	@ 0x145
 800c4fa:	f000 fb71 	bl	800cbe0 <__assert_func>
 800c4fe:	2301      	movs	r3, #1
 800c500:	6144      	str	r4, [r0, #20]
 800c502:	6103      	str	r3, [r0, #16]
 800c504:	bd10      	pop	{r4, pc}
 800c506:	bf00      	nop
 800c508:	0800d8d8 	.word	0x0800d8d8
 800c50c:	0800d8fa 	.word	0x0800d8fa

0800c510 <__multiply>:
 800c510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c514:	4614      	mov	r4, r2
 800c516:	690a      	ldr	r2, [r1, #16]
 800c518:	6923      	ldr	r3, [r4, #16]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	bfa8      	it	ge
 800c51e:	4623      	movge	r3, r4
 800c520:	460f      	mov	r7, r1
 800c522:	bfa4      	itt	ge
 800c524:	460c      	movge	r4, r1
 800c526:	461f      	movge	r7, r3
 800c528:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c52c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c530:	68a3      	ldr	r3, [r4, #8]
 800c532:	6861      	ldr	r1, [r4, #4]
 800c534:	eb0a 0609 	add.w	r6, sl, r9
 800c538:	42b3      	cmp	r3, r6
 800c53a:	b085      	sub	sp, #20
 800c53c:	bfb8      	it	lt
 800c53e:	3101      	addlt	r1, #1
 800c540:	f7ff fedc 	bl	800c2fc <_Balloc>
 800c544:	b930      	cbnz	r0, 800c554 <__multiply+0x44>
 800c546:	4602      	mov	r2, r0
 800c548:	4b44      	ldr	r3, [pc, #272]	@ (800c65c <__multiply+0x14c>)
 800c54a:	4845      	ldr	r0, [pc, #276]	@ (800c660 <__multiply+0x150>)
 800c54c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c550:	f000 fb46 	bl	800cbe0 <__assert_func>
 800c554:	f100 0514 	add.w	r5, r0, #20
 800c558:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c55c:	462b      	mov	r3, r5
 800c55e:	2200      	movs	r2, #0
 800c560:	4543      	cmp	r3, r8
 800c562:	d321      	bcc.n	800c5a8 <__multiply+0x98>
 800c564:	f107 0114 	add.w	r1, r7, #20
 800c568:	f104 0214 	add.w	r2, r4, #20
 800c56c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c570:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c574:	9302      	str	r3, [sp, #8]
 800c576:	1b13      	subs	r3, r2, r4
 800c578:	3b15      	subs	r3, #21
 800c57a:	f023 0303 	bic.w	r3, r3, #3
 800c57e:	3304      	adds	r3, #4
 800c580:	f104 0715 	add.w	r7, r4, #21
 800c584:	42ba      	cmp	r2, r7
 800c586:	bf38      	it	cc
 800c588:	2304      	movcc	r3, #4
 800c58a:	9301      	str	r3, [sp, #4]
 800c58c:	9b02      	ldr	r3, [sp, #8]
 800c58e:	9103      	str	r1, [sp, #12]
 800c590:	428b      	cmp	r3, r1
 800c592:	d80c      	bhi.n	800c5ae <__multiply+0x9e>
 800c594:	2e00      	cmp	r6, #0
 800c596:	dd03      	ble.n	800c5a0 <__multiply+0x90>
 800c598:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d05b      	beq.n	800c658 <__multiply+0x148>
 800c5a0:	6106      	str	r6, [r0, #16]
 800c5a2:	b005      	add	sp, #20
 800c5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a8:	f843 2b04 	str.w	r2, [r3], #4
 800c5ac:	e7d8      	b.n	800c560 <__multiply+0x50>
 800c5ae:	f8b1 a000 	ldrh.w	sl, [r1]
 800c5b2:	f1ba 0f00 	cmp.w	sl, #0
 800c5b6:	d024      	beq.n	800c602 <__multiply+0xf2>
 800c5b8:	f104 0e14 	add.w	lr, r4, #20
 800c5bc:	46a9      	mov	r9, r5
 800c5be:	f04f 0c00 	mov.w	ip, #0
 800c5c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c5c6:	f8d9 3000 	ldr.w	r3, [r9]
 800c5ca:	fa1f fb87 	uxth.w	fp, r7
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	fb0a 330b 	mla	r3, sl, fp, r3
 800c5d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c5d8:	f8d9 7000 	ldr.w	r7, [r9]
 800c5dc:	4463      	add	r3, ip
 800c5de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c5e2:	fb0a c70b 	mla	r7, sl, fp, ip
 800c5e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c5f0:	4572      	cmp	r2, lr
 800c5f2:	f849 3b04 	str.w	r3, [r9], #4
 800c5f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c5fa:	d8e2      	bhi.n	800c5c2 <__multiply+0xb2>
 800c5fc:	9b01      	ldr	r3, [sp, #4]
 800c5fe:	f845 c003 	str.w	ip, [r5, r3]
 800c602:	9b03      	ldr	r3, [sp, #12]
 800c604:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c608:	3104      	adds	r1, #4
 800c60a:	f1b9 0f00 	cmp.w	r9, #0
 800c60e:	d021      	beq.n	800c654 <__multiply+0x144>
 800c610:	682b      	ldr	r3, [r5, #0]
 800c612:	f104 0c14 	add.w	ip, r4, #20
 800c616:	46ae      	mov	lr, r5
 800c618:	f04f 0a00 	mov.w	sl, #0
 800c61c:	f8bc b000 	ldrh.w	fp, [ip]
 800c620:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c624:	fb09 770b 	mla	r7, r9, fp, r7
 800c628:	4457      	add	r7, sl
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c630:	f84e 3b04 	str.w	r3, [lr], #4
 800c634:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c638:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c63c:	f8be 3000 	ldrh.w	r3, [lr]
 800c640:	fb09 330a 	mla	r3, r9, sl, r3
 800c644:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c648:	4562      	cmp	r2, ip
 800c64a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c64e:	d8e5      	bhi.n	800c61c <__multiply+0x10c>
 800c650:	9f01      	ldr	r7, [sp, #4]
 800c652:	51eb      	str	r3, [r5, r7]
 800c654:	3504      	adds	r5, #4
 800c656:	e799      	b.n	800c58c <__multiply+0x7c>
 800c658:	3e01      	subs	r6, #1
 800c65a:	e79b      	b.n	800c594 <__multiply+0x84>
 800c65c:	0800d8d8 	.word	0x0800d8d8
 800c660:	0800d8fa 	.word	0x0800d8fa

0800c664 <__pow5mult>:
 800c664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c668:	4615      	mov	r5, r2
 800c66a:	f012 0203 	ands.w	r2, r2, #3
 800c66e:	4607      	mov	r7, r0
 800c670:	460e      	mov	r6, r1
 800c672:	d007      	beq.n	800c684 <__pow5mult+0x20>
 800c674:	4c25      	ldr	r4, [pc, #148]	@ (800c70c <__pow5mult+0xa8>)
 800c676:	3a01      	subs	r2, #1
 800c678:	2300      	movs	r3, #0
 800c67a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c67e:	f7ff fe9f 	bl	800c3c0 <__multadd>
 800c682:	4606      	mov	r6, r0
 800c684:	10ad      	asrs	r5, r5, #2
 800c686:	d03d      	beq.n	800c704 <__pow5mult+0xa0>
 800c688:	69fc      	ldr	r4, [r7, #28]
 800c68a:	b97c      	cbnz	r4, 800c6ac <__pow5mult+0x48>
 800c68c:	2010      	movs	r0, #16
 800c68e:	f7ff fcd3 	bl	800c038 <malloc>
 800c692:	4602      	mov	r2, r0
 800c694:	61f8      	str	r0, [r7, #28]
 800c696:	b928      	cbnz	r0, 800c6a4 <__pow5mult+0x40>
 800c698:	4b1d      	ldr	r3, [pc, #116]	@ (800c710 <__pow5mult+0xac>)
 800c69a:	481e      	ldr	r0, [pc, #120]	@ (800c714 <__pow5mult+0xb0>)
 800c69c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c6a0:	f000 fa9e 	bl	800cbe0 <__assert_func>
 800c6a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6a8:	6004      	str	r4, [r0, #0]
 800c6aa:	60c4      	str	r4, [r0, #12]
 800c6ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c6b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c6b4:	b94c      	cbnz	r4, 800c6ca <__pow5mult+0x66>
 800c6b6:	f240 2171 	movw	r1, #625	@ 0x271
 800c6ba:	4638      	mov	r0, r7
 800c6bc:	f7ff ff12 	bl	800c4e4 <__i2b>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	6003      	str	r3, [r0, #0]
 800c6ca:	f04f 0900 	mov.w	r9, #0
 800c6ce:	07eb      	lsls	r3, r5, #31
 800c6d0:	d50a      	bpl.n	800c6e8 <__pow5mult+0x84>
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	4622      	mov	r2, r4
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	f7ff ff1a 	bl	800c510 <__multiply>
 800c6dc:	4631      	mov	r1, r6
 800c6de:	4680      	mov	r8, r0
 800c6e0:	4638      	mov	r0, r7
 800c6e2:	f7ff fe4b 	bl	800c37c <_Bfree>
 800c6e6:	4646      	mov	r6, r8
 800c6e8:	106d      	asrs	r5, r5, #1
 800c6ea:	d00b      	beq.n	800c704 <__pow5mult+0xa0>
 800c6ec:	6820      	ldr	r0, [r4, #0]
 800c6ee:	b938      	cbnz	r0, 800c700 <__pow5mult+0x9c>
 800c6f0:	4622      	mov	r2, r4
 800c6f2:	4621      	mov	r1, r4
 800c6f4:	4638      	mov	r0, r7
 800c6f6:	f7ff ff0b 	bl	800c510 <__multiply>
 800c6fa:	6020      	str	r0, [r4, #0]
 800c6fc:	f8c0 9000 	str.w	r9, [r0]
 800c700:	4604      	mov	r4, r0
 800c702:	e7e4      	b.n	800c6ce <__pow5mult+0x6a>
 800c704:	4630      	mov	r0, r6
 800c706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c70a:	bf00      	nop
 800c70c:	0800d954 	.word	0x0800d954
 800c710:	0800d869 	.word	0x0800d869
 800c714:	0800d8fa 	.word	0x0800d8fa

0800c718 <__lshift>:
 800c718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c71c:	460c      	mov	r4, r1
 800c71e:	6849      	ldr	r1, [r1, #4]
 800c720:	6923      	ldr	r3, [r4, #16]
 800c722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c726:	68a3      	ldr	r3, [r4, #8]
 800c728:	4607      	mov	r7, r0
 800c72a:	4691      	mov	r9, r2
 800c72c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c730:	f108 0601 	add.w	r6, r8, #1
 800c734:	42b3      	cmp	r3, r6
 800c736:	db0b      	blt.n	800c750 <__lshift+0x38>
 800c738:	4638      	mov	r0, r7
 800c73a:	f7ff fddf 	bl	800c2fc <_Balloc>
 800c73e:	4605      	mov	r5, r0
 800c740:	b948      	cbnz	r0, 800c756 <__lshift+0x3e>
 800c742:	4602      	mov	r2, r0
 800c744:	4b28      	ldr	r3, [pc, #160]	@ (800c7e8 <__lshift+0xd0>)
 800c746:	4829      	ldr	r0, [pc, #164]	@ (800c7ec <__lshift+0xd4>)
 800c748:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c74c:	f000 fa48 	bl	800cbe0 <__assert_func>
 800c750:	3101      	adds	r1, #1
 800c752:	005b      	lsls	r3, r3, #1
 800c754:	e7ee      	b.n	800c734 <__lshift+0x1c>
 800c756:	2300      	movs	r3, #0
 800c758:	f100 0114 	add.w	r1, r0, #20
 800c75c:	f100 0210 	add.w	r2, r0, #16
 800c760:	4618      	mov	r0, r3
 800c762:	4553      	cmp	r3, sl
 800c764:	db33      	blt.n	800c7ce <__lshift+0xb6>
 800c766:	6920      	ldr	r0, [r4, #16]
 800c768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c76c:	f104 0314 	add.w	r3, r4, #20
 800c770:	f019 091f 	ands.w	r9, r9, #31
 800c774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c778:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c77c:	d02b      	beq.n	800c7d6 <__lshift+0xbe>
 800c77e:	f1c9 0e20 	rsb	lr, r9, #32
 800c782:	468a      	mov	sl, r1
 800c784:	2200      	movs	r2, #0
 800c786:	6818      	ldr	r0, [r3, #0]
 800c788:	fa00 f009 	lsl.w	r0, r0, r9
 800c78c:	4310      	orrs	r0, r2
 800c78e:	f84a 0b04 	str.w	r0, [sl], #4
 800c792:	f853 2b04 	ldr.w	r2, [r3], #4
 800c796:	459c      	cmp	ip, r3
 800c798:	fa22 f20e 	lsr.w	r2, r2, lr
 800c79c:	d8f3      	bhi.n	800c786 <__lshift+0x6e>
 800c79e:	ebac 0304 	sub.w	r3, ip, r4
 800c7a2:	3b15      	subs	r3, #21
 800c7a4:	f023 0303 	bic.w	r3, r3, #3
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	f104 0015 	add.w	r0, r4, #21
 800c7ae:	4584      	cmp	ip, r0
 800c7b0:	bf38      	it	cc
 800c7b2:	2304      	movcc	r3, #4
 800c7b4:	50ca      	str	r2, [r1, r3]
 800c7b6:	b10a      	cbz	r2, 800c7bc <__lshift+0xa4>
 800c7b8:	f108 0602 	add.w	r6, r8, #2
 800c7bc:	3e01      	subs	r6, #1
 800c7be:	4638      	mov	r0, r7
 800c7c0:	612e      	str	r6, [r5, #16]
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	f7ff fdda 	bl	800c37c <_Bfree>
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	e7c5      	b.n	800c762 <__lshift+0x4a>
 800c7d6:	3904      	subs	r1, #4
 800c7d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c7e0:	459c      	cmp	ip, r3
 800c7e2:	d8f9      	bhi.n	800c7d8 <__lshift+0xc0>
 800c7e4:	e7ea      	b.n	800c7bc <__lshift+0xa4>
 800c7e6:	bf00      	nop
 800c7e8:	0800d8d8 	.word	0x0800d8d8
 800c7ec:	0800d8fa 	.word	0x0800d8fa

0800c7f0 <__mcmp>:
 800c7f0:	690a      	ldr	r2, [r1, #16]
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	6900      	ldr	r0, [r0, #16]
 800c7f6:	1a80      	subs	r0, r0, r2
 800c7f8:	b530      	push	{r4, r5, lr}
 800c7fa:	d10e      	bne.n	800c81a <__mcmp+0x2a>
 800c7fc:	3314      	adds	r3, #20
 800c7fe:	3114      	adds	r1, #20
 800c800:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c804:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c808:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c80c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c810:	4295      	cmp	r5, r2
 800c812:	d003      	beq.n	800c81c <__mcmp+0x2c>
 800c814:	d205      	bcs.n	800c822 <__mcmp+0x32>
 800c816:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c81a:	bd30      	pop	{r4, r5, pc}
 800c81c:	42a3      	cmp	r3, r4
 800c81e:	d3f3      	bcc.n	800c808 <__mcmp+0x18>
 800c820:	e7fb      	b.n	800c81a <__mcmp+0x2a>
 800c822:	2001      	movs	r0, #1
 800c824:	e7f9      	b.n	800c81a <__mcmp+0x2a>
	...

0800c828 <__mdiff>:
 800c828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82c:	4689      	mov	r9, r1
 800c82e:	4606      	mov	r6, r0
 800c830:	4611      	mov	r1, r2
 800c832:	4648      	mov	r0, r9
 800c834:	4614      	mov	r4, r2
 800c836:	f7ff ffdb 	bl	800c7f0 <__mcmp>
 800c83a:	1e05      	subs	r5, r0, #0
 800c83c:	d112      	bne.n	800c864 <__mdiff+0x3c>
 800c83e:	4629      	mov	r1, r5
 800c840:	4630      	mov	r0, r6
 800c842:	f7ff fd5b 	bl	800c2fc <_Balloc>
 800c846:	4602      	mov	r2, r0
 800c848:	b928      	cbnz	r0, 800c856 <__mdiff+0x2e>
 800c84a:	4b3f      	ldr	r3, [pc, #252]	@ (800c948 <__mdiff+0x120>)
 800c84c:	f240 2137 	movw	r1, #567	@ 0x237
 800c850:	483e      	ldr	r0, [pc, #248]	@ (800c94c <__mdiff+0x124>)
 800c852:	f000 f9c5 	bl	800cbe0 <__assert_func>
 800c856:	2301      	movs	r3, #1
 800c858:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c85c:	4610      	mov	r0, r2
 800c85e:	b003      	add	sp, #12
 800c860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c864:	bfbc      	itt	lt
 800c866:	464b      	movlt	r3, r9
 800c868:	46a1      	movlt	r9, r4
 800c86a:	4630      	mov	r0, r6
 800c86c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c870:	bfba      	itte	lt
 800c872:	461c      	movlt	r4, r3
 800c874:	2501      	movlt	r5, #1
 800c876:	2500      	movge	r5, #0
 800c878:	f7ff fd40 	bl	800c2fc <_Balloc>
 800c87c:	4602      	mov	r2, r0
 800c87e:	b918      	cbnz	r0, 800c888 <__mdiff+0x60>
 800c880:	4b31      	ldr	r3, [pc, #196]	@ (800c948 <__mdiff+0x120>)
 800c882:	f240 2145 	movw	r1, #581	@ 0x245
 800c886:	e7e3      	b.n	800c850 <__mdiff+0x28>
 800c888:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c88c:	6926      	ldr	r6, [r4, #16]
 800c88e:	60c5      	str	r5, [r0, #12]
 800c890:	f109 0310 	add.w	r3, r9, #16
 800c894:	f109 0514 	add.w	r5, r9, #20
 800c898:	f104 0e14 	add.w	lr, r4, #20
 800c89c:	f100 0b14 	add.w	fp, r0, #20
 800c8a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c8a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c8a8:	9301      	str	r3, [sp, #4]
 800c8aa:	46d9      	mov	r9, fp
 800c8ac:	f04f 0c00 	mov.w	ip, #0
 800c8b0:	9b01      	ldr	r3, [sp, #4]
 800c8b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c8b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c8ba:	9301      	str	r3, [sp, #4]
 800c8bc:	fa1f f38a 	uxth.w	r3, sl
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	b283      	uxth	r3, r0
 800c8c4:	1acb      	subs	r3, r1, r3
 800c8c6:	0c00      	lsrs	r0, r0, #16
 800c8c8:	4463      	add	r3, ip
 800c8ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c8ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c8d8:	4576      	cmp	r6, lr
 800c8da:	f849 3b04 	str.w	r3, [r9], #4
 800c8de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c8e2:	d8e5      	bhi.n	800c8b0 <__mdiff+0x88>
 800c8e4:	1b33      	subs	r3, r6, r4
 800c8e6:	3b15      	subs	r3, #21
 800c8e8:	f023 0303 	bic.w	r3, r3, #3
 800c8ec:	3415      	adds	r4, #21
 800c8ee:	3304      	adds	r3, #4
 800c8f0:	42a6      	cmp	r6, r4
 800c8f2:	bf38      	it	cc
 800c8f4:	2304      	movcc	r3, #4
 800c8f6:	441d      	add	r5, r3
 800c8f8:	445b      	add	r3, fp
 800c8fa:	461e      	mov	r6, r3
 800c8fc:	462c      	mov	r4, r5
 800c8fe:	4544      	cmp	r4, r8
 800c900:	d30e      	bcc.n	800c920 <__mdiff+0xf8>
 800c902:	f108 0103 	add.w	r1, r8, #3
 800c906:	1b49      	subs	r1, r1, r5
 800c908:	f021 0103 	bic.w	r1, r1, #3
 800c90c:	3d03      	subs	r5, #3
 800c90e:	45a8      	cmp	r8, r5
 800c910:	bf38      	it	cc
 800c912:	2100      	movcc	r1, #0
 800c914:	440b      	add	r3, r1
 800c916:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c91a:	b191      	cbz	r1, 800c942 <__mdiff+0x11a>
 800c91c:	6117      	str	r7, [r2, #16]
 800c91e:	e79d      	b.n	800c85c <__mdiff+0x34>
 800c920:	f854 1b04 	ldr.w	r1, [r4], #4
 800c924:	46e6      	mov	lr, ip
 800c926:	0c08      	lsrs	r0, r1, #16
 800c928:	fa1c fc81 	uxtah	ip, ip, r1
 800c92c:	4471      	add	r1, lr
 800c92e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c932:	b289      	uxth	r1, r1
 800c934:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c938:	f846 1b04 	str.w	r1, [r6], #4
 800c93c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c940:	e7dd      	b.n	800c8fe <__mdiff+0xd6>
 800c942:	3f01      	subs	r7, #1
 800c944:	e7e7      	b.n	800c916 <__mdiff+0xee>
 800c946:	bf00      	nop
 800c948:	0800d8d8 	.word	0x0800d8d8
 800c94c:	0800d8fa 	.word	0x0800d8fa

0800c950 <__d2b>:
 800c950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c954:	460f      	mov	r7, r1
 800c956:	2101      	movs	r1, #1
 800c958:	ec59 8b10 	vmov	r8, r9, d0
 800c95c:	4616      	mov	r6, r2
 800c95e:	f7ff fccd 	bl	800c2fc <_Balloc>
 800c962:	4604      	mov	r4, r0
 800c964:	b930      	cbnz	r0, 800c974 <__d2b+0x24>
 800c966:	4602      	mov	r2, r0
 800c968:	4b23      	ldr	r3, [pc, #140]	@ (800c9f8 <__d2b+0xa8>)
 800c96a:	4824      	ldr	r0, [pc, #144]	@ (800c9fc <__d2b+0xac>)
 800c96c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c970:	f000 f936 	bl	800cbe0 <__assert_func>
 800c974:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c97c:	b10d      	cbz	r5, 800c982 <__d2b+0x32>
 800c97e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c982:	9301      	str	r3, [sp, #4]
 800c984:	f1b8 0300 	subs.w	r3, r8, #0
 800c988:	d023      	beq.n	800c9d2 <__d2b+0x82>
 800c98a:	4668      	mov	r0, sp
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	f7ff fd7c 	bl	800c48a <__lo0bits>
 800c992:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c996:	b1d0      	cbz	r0, 800c9ce <__d2b+0x7e>
 800c998:	f1c0 0320 	rsb	r3, r0, #32
 800c99c:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a0:	430b      	orrs	r3, r1
 800c9a2:	40c2      	lsrs	r2, r0
 800c9a4:	6163      	str	r3, [r4, #20]
 800c9a6:	9201      	str	r2, [sp, #4]
 800c9a8:	9b01      	ldr	r3, [sp, #4]
 800c9aa:	61a3      	str	r3, [r4, #24]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	bf0c      	ite	eq
 800c9b0:	2201      	moveq	r2, #1
 800c9b2:	2202      	movne	r2, #2
 800c9b4:	6122      	str	r2, [r4, #16]
 800c9b6:	b1a5      	cbz	r5, 800c9e2 <__d2b+0x92>
 800c9b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c9bc:	4405      	add	r5, r0
 800c9be:	603d      	str	r5, [r7, #0]
 800c9c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c9c4:	6030      	str	r0, [r6, #0]
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	b003      	add	sp, #12
 800c9ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9ce:	6161      	str	r1, [r4, #20]
 800c9d0:	e7ea      	b.n	800c9a8 <__d2b+0x58>
 800c9d2:	a801      	add	r0, sp, #4
 800c9d4:	f7ff fd59 	bl	800c48a <__lo0bits>
 800c9d8:	9b01      	ldr	r3, [sp, #4]
 800c9da:	6163      	str	r3, [r4, #20]
 800c9dc:	3020      	adds	r0, #32
 800c9de:	2201      	movs	r2, #1
 800c9e0:	e7e8      	b.n	800c9b4 <__d2b+0x64>
 800c9e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c9e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c9ea:	6038      	str	r0, [r7, #0]
 800c9ec:	6918      	ldr	r0, [r3, #16]
 800c9ee:	f7ff fd2d 	bl	800c44c <__hi0bits>
 800c9f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c9f6:	e7e5      	b.n	800c9c4 <__d2b+0x74>
 800c9f8:	0800d8d8 	.word	0x0800d8d8
 800c9fc:	0800d8fa 	.word	0x0800d8fa

0800ca00 <__sread>:
 800ca00:	b510      	push	{r4, lr}
 800ca02:	460c      	mov	r4, r1
 800ca04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca08:	f000 f8a8 	bl	800cb5c <_read_r>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	bfab      	itete	ge
 800ca10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ca12:	89a3      	ldrhlt	r3, [r4, #12]
 800ca14:	181b      	addge	r3, r3, r0
 800ca16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ca1a:	bfac      	ite	ge
 800ca1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ca1e:	81a3      	strhlt	r3, [r4, #12]
 800ca20:	bd10      	pop	{r4, pc}

0800ca22 <__swrite>:
 800ca22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca26:	461f      	mov	r7, r3
 800ca28:	898b      	ldrh	r3, [r1, #12]
 800ca2a:	05db      	lsls	r3, r3, #23
 800ca2c:	4605      	mov	r5, r0
 800ca2e:	460c      	mov	r4, r1
 800ca30:	4616      	mov	r6, r2
 800ca32:	d505      	bpl.n	800ca40 <__swrite+0x1e>
 800ca34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca38:	2302      	movs	r3, #2
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f000 f87c 	bl	800cb38 <_lseek_r>
 800ca40:	89a3      	ldrh	r3, [r4, #12]
 800ca42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca4a:	81a3      	strh	r3, [r4, #12]
 800ca4c:	4632      	mov	r2, r6
 800ca4e:	463b      	mov	r3, r7
 800ca50:	4628      	mov	r0, r5
 800ca52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca56:	f000 b8a3 	b.w	800cba0 <_write_r>

0800ca5a <__sseek>:
 800ca5a:	b510      	push	{r4, lr}
 800ca5c:	460c      	mov	r4, r1
 800ca5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca62:	f000 f869 	bl	800cb38 <_lseek_r>
 800ca66:	1c43      	adds	r3, r0, #1
 800ca68:	89a3      	ldrh	r3, [r4, #12]
 800ca6a:	bf15      	itete	ne
 800ca6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ca72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca76:	81a3      	strheq	r3, [r4, #12]
 800ca78:	bf18      	it	ne
 800ca7a:	81a3      	strhne	r3, [r4, #12]
 800ca7c:	bd10      	pop	{r4, pc}

0800ca7e <__sclose>:
 800ca7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca82:	f000 b849 	b.w	800cb18 <_close_r>

0800ca86 <_realloc_r>:
 800ca86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca8a:	4680      	mov	r8, r0
 800ca8c:	4615      	mov	r5, r2
 800ca8e:	460c      	mov	r4, r1
 800ca90:	b921      	cbnz	r1, 800ca9c <_realloc_r+0x16>
 800ca92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca96:	4611      	mov	r1, r2
 800ca98:	f7ff baf8 	b.w	800c08c <_malloc_r>
 800ca9c:	b92a      	cbnz	r2, 800caaa <_realloc_r+0x24>
 800ca9e:	f000 f8d1 	bl	800cc44 <_free_r>
 800caa2:	2400      	movs	r4, #0
 800caa4:	4620      	mov	r0, r4
 800caa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caaa:	f000 f927 	bl	800ccfc <_malloc_usable_size_r>
 800caae:	4285      	cmp	r5, r0
 800cab0:	4606      	mov	r6, r0
 800cab2:	d802      	bhi.n	800caba <_realloc_r+0x34>
 800cab4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cab8:	d8f4      	bhi.n	800caa4 <_realloc_r+0x1e>
 800caba:	4629      	mov	r1, r5
 800cabc:	4640      	mov	r0, r8
 800cabe:	f7ff fae5 	bl	800c08c <_malloc_r>
 800cac2:	4607      	mov	r7, r0
 800cac4:	2800      	cmp	r0, #0
 800cac6:	d0ec      	beq.n	800caa2 <_realloc_r+0x1c>
 800cac8:	42b5      	cmp	r5, r6
 800caca:	462a      	mov	r2, r5
 800cacc:	4621      	mov	r1, r4
 800cace:	bf28      	it	cs
 800cad0:	4632      	movcs	r2, r6
 800cad2:	f000 f877 	bl	800cbc4 <memcpy>
 800cad6:	4621      	mov	r1, r4
 800cad8:	4640      	mov	r0, r8
 800cada:	f000 f8b3 	bl	800cc44 <_free_r>
 800cade:	463c      	mov	r4, r7
 800cae0:	e7e0      	b.n	800caa4 <_realloc_r+0x1e>

0800cae2 <memmove>:
 800cae2:	4288      	cmp	r0, r1
 800cae4:	b510      	push	{r4, lr}
 800cae6:	eb01 0402 	add.w	r4, r1, r2
 800caea:	d902      	bls.n	800caf2 <memmove+0x10>
 800caec:	4284      	cmp	r4, r0
 800caee:	4623      	mov	r3, r4
 800caf0:	d807      	bhi.n	800cb02 <memmove+0x20>
 800caf2:	1e43      	subs	r3, r0, #1
 800caf4:	42a1      	cmp	r1, r4
 800caf6:	d008      	beq.n	800cb0a <memmove+0x28>
 800caf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cafc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb00:	e7f8      	b.n	800caf4 <memmove+0x12>
 800cb02:	4402      	add	r2, r0
 800cb04:	4601      	mov	r1, r0
 800cb06:	428a      	cmp	r2, r1
 800cb08:	d100      	bne.n	800cb0c <memmove+0x2a>
 800cb0a:	bd10      	pop	{r4, pc}
 800cb0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb10:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb14:	e7f7      	b.n	800cb06 <memmove+0x24>
	...

0800cb18 <_close_r>:
 800cb18:	b538      	push	{r3, r4, r5, lr}
 800cb1a:	4d06      	ldr	r5, [pc, #24]	@ (800cb34 <_close_r+0x1c>)
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	4604      	mov	r4, r0
 800cb20:	4608      	mov	r0, r1
 800cb22:	602b      	str	r3, [r5, #0]
 800cb24:	f7f4 ffed 	bl	8001b02 <_close>
 800cb28:	1c43      	adds	r3, r0, #1
 800cb2a:	d102      	bne.n	800cb32 <_close_r+0x1a>
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	b103      	cbz	r3, 800cb32 <_close_r+0x1a>
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	bd38      	pop	{r3, r4, r5, pc}
 800cb34:	20000d80 	.word	0x20000d80

0800cb38 <_lseek_r>:
 800cb38:	b538      	push	{r3, r4, r5, lr}
 800cb3a:	4d07      	ldr	r5, [pc, #28]	@ (800cb58 <_lseek_r+0x20>)
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	4608      	mov	r0, r1
 800cb40:	4611      	mov	r1, r2
 800cb42:	2200      	movs	r2, #0
 800cb44:	602a      	str	r2, [r5, #0]
 800cb46:	461a      	mov	r2, r3
 800cb48:	f7f5 f802 	bl	8001b50 <_lseek>
 800cb4c:	1c43      	adds	r3, r0, #1
 800cb4e:	d102      	bne.n	800cb56 <_lseek_r+0x1e>
 800cb50:	682b      	ldr	r3, [r5, #0]
 800cb52:	b103      	cbz	r3, 800cb56 <_lseek_r+0x1e>
 800cb54:	6023      	str	r3, [r4, #0]
 800cb56:	bd38      	pop	{r3, r4, r5, pc}
 800cb58:	20000d80 	.word	0x20000d80

0800cb5c <_read_r>:
 800cb5c:	b538      	push	{r3, r4, r5, lr}
 800cb5e:	4d07      	ldr	r5, [pc, #28]	@ (800cb7c <_read_r+0x20>)
 800cb60:	4604      	mov	r4, r0
 800cb62:	4608      	mov	r0, r1
 800cb64:	4611      	mov	r1, r2
 800cb66:	2200      	movs	r2, #0
 800cb68:	602a      	str	r2, [r5, #0]
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	f7f4 ff90 	bl	8001a90 <_read>
 800cb70:	1c43      	adds	r3, r0, #1
 800cb72:	d102      	bne.n	800cb7a <_read_r+0x1e>
 800cb74:	682b      	ldr	r3, [r5, #0]
 800cb76:	b103      	cbz	r3, 800cb7a <_read_r+0x1e>
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	bd38      	pop	{r3, r4, r5, pc}
 800cb7c:	20000d80 	.word	0x20000d80

0800cb80 <_sbrk_r>:
 800cb80:	b538      	push	{r3, r4, r5, lr}
 800cb82:	4d06      	ldr	r5, [pc, #24]	@ (800cb9c <_sbrk_r+0x1c>)
 800cb84:	2300      	movs	r3, #0
 800cb86:	4604      	mov	r4, r0
 800cb88:	4608      	mov	r0, r1
 800cb8a:	602b      	str	r3, [r5, #0]
 800cb8c:	f7f4 ffee 	bl	8001b6c <_sbrk>
 800cb90:	1c43      	adds	r3, r0, #1
 800cb92:	d102      	bne.n	800cb9a <_sbrk_r+0x1a>
 800cb94:	682b      	ldr	r3, [r5, #0]
 800cb96:	b103      	cbz	r3, 800cb9a <_sbrk_r+0x1a>
 800cb98:	6023      	str	r3, [r4, #0]
 800cb9a:	bd38      	pop	{r3, r4, r5, pc}
 800cb9c:	20000d80 	.word	0x20000d80

0800cba0 <_write_r>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	4d07      	ldr	r5, [pc, #28]	@ (800cbc0 <_write_r+0x20>)
 800cba4:	4604      	mov	r4, r0
 800cba6:	4608      	mov	r0, r1
 800cba8:	4611      	mov	r1, r2
 800cbaa:	2200      	movs	r2, #0
 800cbac:	602a      	str	r2, [r5, #0]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	f7f4 ff8b 	bl	8001aca <_write>
 800cbb4:	1c43      	adds	r3, r0, #1
 800cbb6:	d102      	bne.n	800cbbe <_write_r+0x1e>
 800cbb8:	682b      	ldr	r3, [r5, #0]
 800cbba:	b103      	cbz	r3, 800cbbe <_write_r+0x1e>
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	bd38      	pop	{r3, r4, r5, pc}
 800cbc0:	20000d80 	.word	0x20000d80

0800cbc4 <memcpy>:
 800cbc4:	440a      	add	r2, r1
 800cbc6:	4291      	cmp	r1, r2
 800cbc8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cbcc:	d100      	bne.n	800cbd0 <memcpy+0xc>
 800cbce:	4770      	bx	lr
 800cbd0:	b510      	push	{r4, lr}
 800cbd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbda:	4291      	cmp	r1, r2
 800cbdc:	d1f9      	bne.n	800cbd2 <memcpy+0xe>
 800cbde:	bd10      	pop	{r4, pc}

0800cbe0 <__assert_func>:
 800cbe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbe2:	4614      	mov	r4, r2
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	4b09      	ldr	r3, [pc, #36]	@ (800cc0c <__assert_func+0x2c>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4605      	mov	r5, r0
 800cbec:	68d8      	ldr	r0, [r3, #12]
 800cbee:	b954      	cbnz	r4, 800cc06 <__assert_func+0x26>
 800cbf0:	4b07      	ldr	r3, [pc, #28]	@ (800cc10 <__assert_func+0x30>)
 800cbf2:	461c      	mov	r4, r3
 800cbf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbf8:	9100      	str	r1, [sp, #0]
 800cbfa:	462b      	mov	r3, r5
 800cbfc:	4905      	ldr	r1, [pc, #20]	@ (800cc14 <__assert_func+0x34>)
 800cbfe:	f000 f885 	bl	800cd0c <fiprintf>
 800cc02:	f000 f8a2 	bl	800cd4a <abort>
 800cc06:	4b04      	ldr	r3, [pc, #16]	@ (800cc18 <__assert_func+0x38>)
 800cc08:	e7f4      	b.n	800cbf4 <__assert_func+0x14>
 800cc0a:	bf00      	nop
 800cc0c:	2000003c 	.word	0x2000003c
 800cc10:	0800db96 	.word	0x0800db96
 800cc14:	0800db68 	.word	0x0800db68
 800cc18:	0800db5b 	.word	0x0800db5b

0800cc1c <_calloc_r>:
 800cc1c:	b570      	push	{r4, r5, r6, lr}
 800cc1e:	fba1 5402 	umull	r5, r4, r1, r2
 800cc22:	b93c      	cbnz	r4, 800cc34 <_calloc_r+0x18>
 800cc24:	4629      	mov	r1, r5
 800cc26:	f7ff fa31 	bl	800c08c <_malloc_r>
 800cc2a:	4606      	mov	r6, r0
 800cc2c:	b928      	cbnz	r0, 800cc3a <_calloc_r+0x1e>
 800cc2e:	2600      	movs	r6, #0
 800cc30:	4630      	mov	r0, r6
 800cc32:	bd70      	pop	{r4, r5, r6, pc}
 800cc34:	220c      	movs	r2, #12
 800cc36:	6002      	str	r2, [r0, #0]
 800cc38:	e7f9      	b.n	800cc2e <_calloc_r+0x12>
 800cc3a:	462a      	mov	r2, r5
 800cc3c:	4621      	mov	r1, r4
 800cc3e:	f7fe fa1d 	bl	800b07c <memset>
 800cc42:	e7f5      	b.n	800cc30 <_calloc_r+0x14>

0800cc44 <_free_r>:
 800cc44:	b538      	push	{r3, r4, r5, lr}
 800cc46:	4605      	mov	r5, r0
 800cc48:	2900      	cmp	r1, #0
 800cc4a:	d041      	beq.n	800ccd0 <_free_r+0x8c>
 800cc4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc50:	1f0c      	subs	r4, r1, #4
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	bfb8      	it	lt
 800cc56:	18e4      	addlt	r4, r4, r3
 800cc58:	f7ff fb44 	bl	800c2e4 <__malloc_lock>
 800cc5c:	4a1d      	ldr	r2, [pc, #116]	@ (800ccd4 <_free_r+0x90>)
 800cc5e:	6813      	ldr	r3, [r2, #0]
 800cc60:	b933      	cbnz	r3, 800cc70 <_free_r+0x2c>
 800cc62:	6063      	str	r3, [r4, #4]
 800cc64:	6014      	str	r4, [r2, #0]
 800cc66:	4628      	mov	r0, r5
 800cc68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc6c:	f7ff bb40 	b.w	800c2f0 <__malloc_unlock>
 800cc70:	42a3      	cmp	r3, r4
 800cc72:	d908      	bls.n	800cc86 <_free_r+0x42>
 800cc74:	6820      	ldr	r0, [r4, #0]
 800cc76:	1821      	adds	r1, r4, r0
 800cc78:	428b      	cmp	r3, r1
 800cc7a:	bf01      	itttt	eq
 800cc7c:	6819      	ldreq	r1, [r3, #0]
 800cc7e:	685b      	ldreq	r3, [r3, #4]
 800cc80:	1809      	addeq	r1, r1, r0
 800cc82:	6021      	streq	r1, [r4, #0]
 800cc84:	e7ed      	b.n	800cc62 <_free_r+0x1e>
 800cc86:	461a      	mov	r2, r3
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	b10b      	cbz	r3, 800cc90 <_free_r+0x4c>
 800cc8c:	42a3      	cmp	r3, r4
 800cc8e:	d9fa      	bls.n	800cc86 <_free_r+0x42>
 800cc90:	6811      	ldr	r1, [r2, #0]
 800cc92:	1850      	adds	r0, r2, r1
 800cc94:	42a0      	cmp	r0, r4
 800cc96:	d10b      	bne.n	800ccb0 <_free_r+0x6c>
 800cc98:	6820      	ldr	r0, [r4, #0]
 800cc9a:	4401      	add	r1, r0
 800cc9c:	1850      	adds	r0, r2, r1
 800cc9e:	4283      	cmp	r3, r0
 800cca0:	6011      	str	r1, [r2, #0]
 800cca2:	d1e0      	bne.n	800cc66 <_free_r+0x22>
 800cca4:	6818      	ldr	r0, [r3, #0]
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	6053      	str	r3, [r2, #4]
 800ccaa:	4408      	add	r0, r1
 800ccac:	6010      	str	r0, [r2, #0]
 800ccae:	e7da      	b.n	800cc66 <_free_r+0x22>
 800ccb0:	d902      	bls.n	800ccb8 <_free_r+0x74>
 800ccb2:	230c      	movs	r3, #12
 800ccb4:	602b      	str	r3, [r5, #0]
 800ccb6:	e7d6      	b.n	800cc66 <_free_r+0x22>
 800ccb8:	6820      	ldr	r0, [r4, #0]
 800ccba:	1821      	adds	r1, r4, r0
 800ccbc:	428b      	cmp	r3, r1
 800ccbe:	bf04      	itt	eq
 800ccc0:	6819      	ldreq	r1, [r3, #0]
 800ccc2:	685b      	ldreq	r3, [r3, #4]
 800ccc4:	6063      	str	r3, [r4, #4]
 800ccc6:	bf04      	itt	eq
 800ccc8:	1809      	addeq	r1, r1, r0
 800ccca:	6021      	streq	r1, [r4, #0]
 800cccc:	6054      	str	r4, [r2, #4]
 800ccce:	e7ca      	b.n	800cc66 <_free_r+0x22>
 800ccd0:	bd38      	pop	{r3, r4, r5, pc}
 800ccd2:	bf00      	nop
 800ccd4:	20000d7c 	.word	0x20000d7c

0800ccd8 <__ascii_mbtowc>:
 800ccd8:	b082      	sub	sp, #8
 800ccda:	b901      	cbnz	r1, 800ccde <__ascii_mbtowc+0x6>
 800ccdc:	a901      	add	r1, sp, #4
 800ccde:	b142      	cbz	r2, 800ccf2 <__ascii_mbtowc+0x1a>
 800cce0:	b14b      	cbz	r3, 800ccf6 <__ascii_mbtowc+0x1e>
 800cce2:	7813      	ldrb	r3, [r2, #0]
 800cce4:	600b      	str	r3, [r1, #0]
 800cce6:	7812      	ldrb	r2, [r2, #0]
 800cce8:	1e10      	subs	r0, r2, #0
 800ccea:	bf18      	it	ne
 800ccec:	2001      	movne	r0, #1
 800ccee:	b002      	add	sp, #8
 800ccf0:	4770      	bx	lr
 800ccf2:	4610      	mov	r0, r2
 800ccf4:	e7fb      	b.n	800ccee <__ascii_mbtowc+0x16>
 800ccf6:	f06f 0001 	mvn.w	r0, #1
 800ccfa:	e7f8      	b.n	800ccee <__ascii_mbtowc+0x16>

0800ccfc <_malloc_usable_size_r>:
 800ccfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd00:	1f18      	subs	r0, r3, #4
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	bfbc      	itt	lt
 800cd06:	580b      	ldrlt	r3, [r1, r0]
 800cd08:	18c0      	addlt	r0, r0, r3
 800cd0a:	4770      	bx	lr

0800cd0c <fiprintf>:
 800cd0c:	b40e      	push	{r1, r2, r3}
 800cd0e:	b503      	push	{r0, r1, lr}
 800cd10:	4601      	mov	r1, r0
 800cd12:	ab03      	add	r3, sp, #12
 800cd14:	4805      	ldr	r0, [pc, #20]	@ (800cd2c <fiprintf+0x20>)
 800cd16:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd1a:	6800      	ldr	r0, [r0, #0]
 800cd1c:	9301      	str	r3, [sp, #4]
 800cd1e:	f000 f845 	bl	800cdac <_vfiprintf_r>
 800cd22:	b002      	add	sp, #8
 800cd24:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd28:	b003      	add	sp, #12
 800cd2a:	4770      	bx	lr
 800cd2c:	2000003c 	.word	0x2000003c

0800cd30 <__ascii_wctomb>:
 800cd30:	4603      	mov	r3, r0
 800cd32:	4608      	mov	r0, r1
 800cd34:	b141      	cbz	r1, 800cd48 <__ascii_wctomb+0x18>
 800cd36:	2aff      	cmp	r2, #255	@ 0xff
 800cd38:	d904      	bls.n	800cd44 <__ascii_wctomb+0x14>
 800cd3a:	228a      	movs	r2, #138	@ 0x8a
 800cd3c:	601a      	str	r2, [r3, #0]
 800cd3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd42:	4770      	bx	lr
 800cd44:	700a      	strb	r2, [r1, #0]
 800cd46:	2001      	movs	r0, #1
 800cd48:	4770      	bx	lr

0800cd4a <abort>:
 800cd4a:	b508      	push	{r3, lr}
 800cd4c:	2006      	movs	r0, #6
 800cd4e:	f000 fa85 	bl	800d25c <raise>
 800cd52:	2001      	movs	r0, #1
 800cd54:	f7f4 fe91 	bl	8001a7a <_exit>

0800cd58 <__sfputc_r>:
 800cd58:	6893      	ldr	r3, [r2, #8]
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	b410      	push	{r4}
 800cd60:	6093      	str	r3, [r2, #8]
 800cd62:	da08      	bge.n	800cd76 <__sfputc_r+0x1e>
 800cd64:	6994      	ldr	r4, [r2, #24]
 800cd66:	42a3      	cmp	r3, r4
 800cd68:	db01      	blt.n	800cd6e <__sfputc_r+0x16>
 800cd6a:	290a      	cmp	r1, #10
 800cd6c:	d103      	bne.n	800cd76 <__sfputc_r+0x1e>
 800cd6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd72:	f000 b933 	b.w	800cfdc <__swbuf_r>
 800cd76:	6813      	ldr	r3, [r2, #0]
 800cd78:	1c58      	adds	r0, r3, #1
 800cd7a:	6010      	str	r0, [r2, #0]
 800cd7c:	7019      	strb	r1, [r3, #0]
 800cd7e:	4608      	mov	r0, r1
 800cd80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd84:	4770      	bx	lr

0800cd86 <__sfputs_r>:
 800cd86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd88:	4606      	mov	r6, r0
 800cd8a:	460f      	mov	r7, r1
 800cd8c:	4614      	mov	r4, r2
 800cd8e:	18d5      	adds	r5, r2, r3
 800cd90:	42ac      	cmp	r4, r5
 800cd92:	d101      	bne.n	800cd98 <__sfputs_r+0x12>
 800cd94:	2000      	movs	r0, #0
 800cd96:	e007      	b.n	800cda8 <__sfputs_r+0x22>
 800cd98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd9c:	463a      	mov	r2, r7
 800cd9e:	4630      	mov	r0, r6
 800cda0:	f7ff ffda 	bl	800cd58 <__sfputc_r>
 800cda4:	1c43      	adds	r3, r0, #1
 800cda6:	d1f3      	bne.n	800cd90 <__sfputs_r+0xa>
 800cda8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cdac <_vfiprintf_r>:
 800cdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb0:	460d      	mov	r5, r1
 800cdb2:	b09d      	sub	sp, #116	@ 0x74
 800cdb4:	4614      	mov	r4, r2
 800cdb6:	4698      	mov	r8, r3
 800cdb8:	4606      	mov	r6, r0
 800cdba:	b118      	cbz	r0, 800cdc4 <_vfiprintf_r+0x18>
 800cdbc:	6a03      	ldr	r3, [r0, #32]
 800cdbe:	b90b      	cbnz	r3, 800cdc4 <_vfiprintf_r+0x18>
 800cdc0:	f7fe f8ec 	bl	800af9c <__sinit>
 800cdc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdc6:	07d9      	lsls	r1, r3, #31
 800cdc8:	d405      	bmi.n	800cdd6 <_vfiprintf_r+0x2a>
 800cdca:	89ab      	ldrh	r3, [r5, #12]
 800cdcc:	059a      	lsls	r2, r3, #22
 800cdce:	d402      	bmi.n	800cdd6 <_vfiprintf_r+0x2a>
 800cdd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdd2:	f7fe f98a 	bl	800b0ea <__retarget_lock_acquire_recursive>
 800cdd6:	89ab      	ldrh	r3, [r5, #12]
 800cdd8:	071b      	lsls	r3, r3, #28
 800cdda:	d501      	bpl.n	800cde0 <_vfiprintf_r+0x34>
 800cddc:	692b      	ldr	r3, [r5, #16]
 800cdde:	b99b      	cbnz	r3, 800ce08 <_vfiprintf_r+0x5c>
 800cde0:	4629      	mov	r1, r5
 800cde2:	4630      	mov	r0, r6
 800cde4:	f000 f938 	bl	800d058 <__swsetup_r>
 800cde8:	b170      	cbz	r0, 800ce08 <_vfiprintf_r+0x5c>
 800cdea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdec:	07dc      	lsls	r4, r3, #31
 800cdee:	d504      	bpl.n	800cdfa <_vfiprintf_r+0x4e>
 800cdf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cdf4:	b01d      	add	sp, #116	@ 0x74
 800cdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdfa:	89ab      	ldrh	r3, [r5, #12]
 800cdfc:	0598      	lsls	r0, r3, #22
 800cdfe:	d4f7      	bmi.n	800cdf0 <_vfiprintf_r+0x44>
 800ce00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce02:	f7fe f973 	bl	800b0ec <__retarget_lock_release_recursive>
 800ce06:	e7f3      	b.n	800cdf0 <_vfiprintf_r+0x44>
 800ce08:	2300      	movs	r3, #0
 800ce0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce0c:	2320      	movs	r3, #32
 800ce0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce12:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce16:	2330      	movs	r3, #48	@ 0x30
 800ce18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cfc8 <_vfiprintf_r+0x21c>
 800ce1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce20:	f04f 0901 	mov.w	r9, #1
 800ce24:	4623      	mov	r3, r4
 800ce26:	469a      	mov	sl, r3
 800ce28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce2c:	b10a      	cbz	r2, 800ce32 <_vfiprintf_r+0x86>
 800ce2e:	2a25      	cmp	r2, #37	@ 0x25
 800ce30:	d1f9      	bne.n	800ce26 <_vfiprintf_r+0x7a>
 800ce32:	ebba 0b04 	subs.w	fp, sl, r4
 800ce36:	d00b      	beq.n	800ce50 <_vfiprintf_r+0xa4>
 800ce38:	465b      	mov	r3, fp
 800ce3a:	4622      	mov	r2, r4
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	4630      	mov	r0, r6
 800ce40:	f7ff ffa1 	bl	800cd86 <__sfputs_r>
 800ce44:	3001      	adds	r0, #1
 800ce46:	f000 80a7 	beq.w	800cf98 <_vfiprintf_r+0x1ec>
 800ce4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce4c:	445a      	add	r2, fp
 800ce4e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce50:	f89a 3000 	ldrb.w	r3, [sl]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f000 809f 	beq.w	800cf98 <_vfiprintf_r+0x1ec>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce64:	f10a 0a01 	add.w	sl, sl, #1
 800ce68:	9304      	str	r3, [sp, #16]
 800ce6a:	9307      	str	r3, [sp, #28]
 800ce6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce70:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce72:	4654      	mov	r4, sl
 800ce74:	2205      	movs	r2, #5
 800ce76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce7a:	4853      	ldr	r0, [pc, #332]	@ (800cfc8 <_vfiprintf_r+0x21c>)
 800ce7c:	f7f3 f9d0 	bl	8000220 <memchr>
 800ce80:	9a04      	ldr	r2, [sp, #16]
 800ce82:	b9d8      	cbnz	r0, 800cebc <_vfiprintf_r+0x110>
 800ce84:	06d1      	lsls	r1, r2, #27
 800ce86:	bf44      	itt	mi
 800ce88:	2320      	movmi	r3, #32
 800ce8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce8e:	0713      	lsls	r3, r2, #28
 800ce90:	bf44      	itt	mi
 800ce92:	232b      	movmi	r3, #43	@ 0x2b
 800ce94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce98:	f89a 3000 	ldrb.w	r3, [sl]
 800ce9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce9e:	d015      	beq.n	800cecc <_vfiprintf_r+0x120>
 800cea0:	9a07      	ldr	r2, [sp, #28]
 800cea2:	4654      	mov	r4, sl
 800cea4:	2000      	movs	r0, #0
 800cea6:	f04f 0c0a 	mov.w	ip, #10
 800ceaa:	4621      	mov	r1, r4
 800ceac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceb0:	3b30      	subs	r3, #48	@ 0x30
 800ceb2:	2b09      	cmp	r3, #9
 800ceb4:	d94b      	bls.n	800cf4e <_vfiprintf_r+0x1a2>
 800ceb6:	b1b0      	cbz	r0, 800cee6 <_vfiprintf_r+0x13a>
 800ceb8:	9207      	str	r2, [sp, #28]
 800ceba:	e014      	b.n	800cee6 <_vfiprintf_r+0x13a>
 800cebc:	eba0 0308 	sub.w	r3, r0, r8
 800cec0:	fa09 f303 	lsl.w	r3, r9, r3
 800cec4:	4313      	orrs	r3, r2
 800cec6:	9304      	str	r3, [sp, #16]
 800cec8:	46a2      	mov	sl, r4
 800ceca:	e7d2      	b.n	800ce72 <_vfiprintf_r+0xc6>
 800cecc:	9b03      	ldr	r3, [sp, #12]
 800cece:	1d19      	adds	r1, r3, #4
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	9103      	str	r1, [sp, #12]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	bfbb      	ittet	lt
 800ced8:	425b      	neglt	r3, r3
 800ceda:	f042 0202 	orrlt.w	r2, r2, #2
 800cede:	9307      	strge	r3, [sp, #28]
 800cee0:	9307      	strlt	r3, [sp, #28]
 800cee2:	bfb8      	it	lt
 800cee4:	9204      	strlt	r2, [sp, #16]
 800cee6:	7823      	ldrb	r3, [r4, #0]
 800cee8:	2b2e      	cmp	r3, #46	@ 0x2e
 800ceea:	d10a      	bne.n	800cf02 <_vfiprintf_r+0x156>
 800ceec:	7863      	ldrb	r3, [r4, #1]
 800ceee:	2b2a      	cmp	r3, #42	@ 0x2a
 800cef0:	d132      	bne.n	800cf58 <_vfiprintf_r+0x1ac>
 800cef2:	9b03      	ldr	r3, [sp, #12]
 800cef4:	1d1a      	adds	r2, r3, #4
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	9203      	str	r2, [sp, #12]
 800cefa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cefe:	3402      	adds	r4, #2
 800cf00:	9305      	str	r3, [sp, #20]
 800cf02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cfd8 <_vfiprintf_r+0x22c>
 800cf06:	7821      	ldrb	r1, [r4, #0]
 800cf08:	2203      	movs	r2, #3
 800cf0a:	4650      	mov	r0, sl
 800cf0c:	f7f3 f988 	bl	8000220 <memchr>
 800cf10:	b138      	cbz	r0, 800cf22 <_vfiprintf_r+0x176>
 800cf12:	9b04      	ldr	r3, [sp, #16]
 800cf14:	eba0 000a 	sub.w	r0, r0, sl
 800cf18:	2240      	movs	r2, #64	@ 0x40
 800cf1a:	4082      	lsls	r2, r0
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	3401      	adds	r4, #1
 800cf20:	9304      	str	r3, [sp, #16]
 800cf22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf26:	4829      	ldr	r0, [pc, #164]	@ (800cfcc <_vfiprintf_r+0x220>)
 800cf28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf2c:	2206      	movs	r2, #6
 800cf2e:	f7f3 f977 	bl	8000220 <memchr>
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d03f      	beq.n	800cfb6 <_vfiprintf_r+0x20a>
 800cf36:	4b26      	ldr	r3, [pc, #152]	@ (800cfd0 <_vfiprintf_r+0x224>)
 800cf38:	bb1b      	cbnz	r3, 800cf82 <_vfiprintf_r+0x1d6>
 800cf3a:	9b03      	ldr	r3, [sp, #12]
 800cf3c:	3307      	adds	r3, #7
 800cf3e:	f023 0307 	bic.w	r3, r3, #7
 800cf42:	3308      	adds	r3, #8
 800cf44:	9303      	str	r3, [sp, #12]
 800cf46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf48:	443b      	add	r3, r7
 800cf4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf4c:	e76a      	b.n	800ce24 <_vfiprintf_r+0x78>
 800cf4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf52:	460c      	mov	r4, r1
 800cf54:	2001      	movs	r0, #1
 800cf56:	e7a8      	b.n	800ceaa <_vfiprintf_r+0xfe>
 800cf58:	2300      	movs	r3, #0
 800cf5a:	3401      	adds	r4, #1
 800cf5c:	9305      	str	r3, [sp, #20]
 800cf5e:	4619      	mov	r1, r3
 800cf60:	f04f 0c0a 	mov.w	ip, #10
 800cf64:	4620      	mov	r0, r4
 800cf66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf6a:	3a30      	subs	r2, #48	@ 0x30
 800cf6c:	2a09      	cmp	r2, #9
 800cf6e:	d903      	bls.n	800cf78 <_vfiprintf_r+0x1cc>
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d0c6      	beq.n	800cf02 <_vfiprintf_r+0x156>
 800cf74:	9105      	str	r1, [sp, #20]
 800cf76:	e7c4      	b.n	800cf02 <_vfiprintf_r+0x156>
 800cf78:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf7c:	4604      	mov	r4, r0
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e7f0      	b.n	800cf64 <_vfiprintf_r+0x1b8>
 800cf82:	ab03      	add	r3, sp, #12
 800cf84:	9300      	str	r3, [sp, #0]
 800cf86:	462a      	mov	r2, r5
 800cf88:	4b12      	ldr	r3, [pc, #72]	@ (800cfd4 <_vfiprintf_r+0x228>)
 800cf8a:	a904      	add	r1, sp, #16
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	f7fd fba1 	bl	800a6d4 <_printf_float>
 800cf92:	4607      	mov	r7, r0
 800cf94:	1c78      	adds	r0, r7, #1
 800cf96:	d1d6      	bne.n	800cf46 <_vfiprintf_r+0x19a>
 800cf98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf9a:	07d9      	lsls	r1, r3, #31
 800cf9c:	d405      	bmi.n	800cfaa <_vfiprintf_r+0x1fe>
 800cf9e:	89ab      	ldrh	r3, [r5, #12]
 800cfa0:	059a      	lsls	r2, r3, #22
 800cfa2:	d402      	bmi.n	800cfaa <_vfiprintf_r+0x1fe>
 800cfa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfa6:	f7fe f8a1 	bl	800b0ec <__retarget_lock_release_recursive>
 800cfaa:	89ab      	ldrh	r3, [r5, #12]
 800cfac:	065b      	lsls	r3, r3, #25
 800cfae:	f53f af1f 	bmi.w	800cdf0 <_vfiprintf_r+0x44>
 800cfb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfb4:	e71e      	b.n	800cdf4 <_vfiprintf_r+0x48>
 800cfb6:	ab03      	add	r3, sp, #12
 800cfb8:	9300      	str	r3, [sp, #0]
 800cfba:	462a      	mov	r2, r5
 800cfbc:	4b05      	ldr	r3, [pc, #20]	@ (800cfd4 <_vfiprintf_r+0x228>)
 800cfbe:	a904      	add	r1, sp, #16
 800cfc0:	4630      	mov	r0, r6
 800cfc2:	f7fd fe1f 	bl	800ac04 <_printf_i>
 800cfc6:	e7e4      	b.n	800cf92 <_vfiprintf_r+0x1e6>
 800cfc8:	0800d8e9 	.word	0x0800d8e9
 800cfcc:	0800d8f3 	.word	0x0800d8f3
 800cfd0:	0800a6d5 	.word	0x0800a6d5
 800cfd4:	0800cd87 	.word	0x0800cd87
 800cfd8:	0800d8ef 	.word	0x0800d8ef

0800cfdc <__swbuf_r>:
 800cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfde:	460e      	mov	r6, r1
 800cfe0:	4614      	mov	r4, r2
 800cfe2:	4605      	mov	r5, r0
 800cfe4:	b118      	cbz	r0, 800cfee <__swbuf_r+0x12>
 800cfe6:	6a03      	ldr	r3, [r0, #32]
 800cfe8:	b90b      	cbnz	r3, 800cfee <__swbuf_r+0x12>
 800cfea:	f7fd ffd7 	bl	800af9c <__sinit>
 800cfee:	69a3      	ldr	r3, [r4, #24]
 800cff0:	60a3      	str	r3, [r4, #8]
 800cff2:	89a3      	ldrh	r3, [r4, #12]
 800cff4:	071a      	lsls	r2, r3, #28
 800cff6:	d501      	bpl.n	800cffc <__swbuf_r+0x20>
 800cff8:	6923      	ldr	r3, [r4, #16]
 800cffa:	b943      	cbnz	r3, 800d00e <__swbuf_r+0x32>
 800cffc:	4621      	mov	r1, r4
 800cffe:	4628      	mov	r0, r5
 800d000:	f000 f82a 	bl	800d058 <__swsetup_r>
 800d004:	b118      	cbz	r0, 800d00e <__swbuf_r+0x32>
 800d006:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d00a:	4638      	mov	r0, r7
 800d00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d00e:	6823      	ldr	r3, [r4, #0]
 800d010:	6922      	ldr	r2, [r4, #16]
 800d012:	1a98      	subs	r0, r3, r2
 800d014:	6963      	ldr	r3, [r4, #20]
 800d016:	b2f6      	uxtb	r6, r6
 800d018:	4283      	cmp	r3, r0
 800d01a:	4637      	mov	r7, r6
 800d01c:	dc05      	bgt.n	800d02a <__swbuf_r+0x4e>
 800d01e:	4621      	mov	r1, r4
 800d020:	4628      	mov	r0, r5
 800d022:	f7ff f937 	bl	800c294 <_fflush_r>
 800d026:	2800      	cmp	r0, #0
 800d028:	d1ed      	bne.n	800d006 <__swbuf_r+0x2a>
 800d02a:	68a3      	ldr	r3, [r4, #8]
 800d02c:	3b01      	subs	r3, #1
 800d02e:	60a3      	str	r3, [r4, #8]
 800d030:	6823      	ldr	r3, [r4, #0]
 800d032:	1c5a      	adds	r2, r3, #1
 800d034:	6022      	str	r2, [r4, #0]
 800d036:	701e      	strb	r6, [r3, #0]
 800d038:	6962      	ldr	r2, [r4, #20]
 800d03a:	1c43      	adds	r3, r0, #1
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d004      	beq.n	800d04a <__swbuf_r+0x6e>
 800d040:	89a3      	ldrh	r3, [r4, #12]
 800d042:	07db      	lsls	r3, r3, #31
 800d044:	d5e1      	bpl.n	800d00a <__swbuf_r+0x2e>
 800d046:	2e0a      	cmp	r6, #10
 800d048:	d1df      	bne.n	800d00a <__swbuf_r+0x2e>
 800d04a:	4621      	mov	r1, r4
 800d04c:	4628      	mov	r0, r5
 800d04e:	f7ff f921 	bl	800c294 <_fflush_r>
 800d052:	2800      	cmp	r0, #0
 800d054:	d0d9      	beq.n	800d00a <__swbuf_r+0x2e>
 800d056:	e7d6      	b.n	800d006 <__swbuf_r+0x2a>

0800d058 <__swsetup_r>:
 800d058:	b538      	push	{r3, r4, r5, lr}
 800d05a:	4b29      	ldr	r3, [pc, #164]	@ (800d100 <__swsetup_r+0xa8>)
 800d05c:	4605      	mov	r5, r0
 800d05e:	6818      	ldr	r0, [r3, #0]
 800d060:	460c      	mov	r4, r1
 800d062:	b118      	cbz	r0, 800d06c <__swsetup_r+0x14>
 800d064:	6a03      	ldr	r3, [r0, #32]
 800d066:	b90b      	cbnz	r3, 800d06c <__swsetup_r+0x14>
 800d068:	f7fd ff98 	bl	800af9c <__sinit>
 800d06c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d070:	0719      	lsls	r1, r3, #28
 800d072:	d422      	bmi.n	800d0ba <__swsetup_r+0x62>
 800d074:	06da      	lsls	r2, r3, #27
 800d076:	d407      	bmi.n	800d088 <__swsetup_r+0x30>
 800d078:	2209      	movs	r2, #9
 800d07a:	602a      	str	r2, [r5, #0]
 800d07c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d080:	81a3      	strh	r3, [r4, #12]
 800d082:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d086:	e033      	b.n	800d0f0 <__swsetup_r+0x98>
 800d088:	0758      	lsls	r0, r3, #29
 800d08a:	d512      	bpl.n	800d0b2 <__swsetup_r+0x5a>
 800d08c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d08e:	b141      	cbz	r1, 800d0a2 <__swsetup_r+0x4a>
 800d090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d094:	4299      	cmp	r1, r3
 800d096:	d002      	beq.n	800d09e <__swsetup_r+0x46>
 800d098:	4628      	mov	r0, r5
 800d09a:	f7ff fdd3 	bl	800cc44 <_free_r>
 800d09e:	2300      	movs	r3, #0
 800d0a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0a2:	89a3      	ldrh	r3, [r4, #12]
 800d0a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d0a8:	81a3      	strh	r3, [r4, #12]
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	6063      	str	r3, [r4, #4]
 800d0ae:	6923      	ldr	r3, [r4, #16]
 800d0b0:	6023      	str	r3, [r4, #0]
 800d0b2:	89a3      	ldrh	r3, [r4, #12]
 800d0b4:	f043 0308 	orr.w	r3, r3, #8
 800d0b8:	81a3      	strh	r3, [r4, #12]
 800d0ba:	6923      	ldr	r3, [r4, #16]
 800d0bc:	b94b      	cbnz	r3, 800d0d2 <__swsetup_r+0x7a>
 800d0be:	89a3      	ldrh	r3, [r4, #12]
 800d0c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d0c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0c8:	d003      	beq.n	800d0d2 <__swsetup_r+0x7a>
 800d0ca:	4621      	mov	r1, r4
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	f000 f83f 	bl	800d150 <__smakebuf_r>
 800d0d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0d6:	f013 0201 	ands.w	r2, r3, #1
 800d0da:	d00a      	beq.n	800d0f2 <__swsetup_r+0x9a>
 800d0dc:	2200      	movs	r2, #0
 800d0de:	60a2      	str	r2, [r4, #8]
 800d0e0:	6962      	ldr	r2, [r4, #20]
 800d0e2:	4252      	negs	r2, r2
 800d0e4:	61a2      	str	r2, [r4, #24]
 800d0e6:	6922      	ldr	r2, [r4, #16]
 800d0e8:	b942      	cbnz	r2, 800d0fc <__swsetup_r+0xa4>
 800d0ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d0ee:	d1c5      	bne.n	800d07c <__swsetup_r+0x24>
 800d0f0:	bd38      	pop	{r3, r4, r5, pc}
 800d0f2:	0799      	lsls	r1, r3, #30
 800d0f4:	bf58      	it	pl
 800d0f6:	6962      	ldrpl	r2, [r4, #20]
 800d0f8:	60a2      	str	r2, [r4, #8]
 800d0fa:	e7f4      	b.n	800d0e6 <__swsetup_r+0x8e>
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	e7f7      	b.n	800d0f0 <__swsetup_r+0x98>
 800d100:	2000003c 	.word	0x2000003c

0800d104 <__swhatbuf_r>:
 800d104:	b570      	push	{r4, r5, r6, lr}
 800d106:	460c      	mov	r4, r1
 800d108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d10c:	2900      	cmp	r1, #0
 800d10e:	b096      	sub	sp, #88	@ 0x58
 800d110:	4615      	mov	r5, r2
 800d112:	461e      	mov	r6, r3
 800d114:	da0d      	bge.n	800d132 <__swhatbuf_r+0x2e>
 800d116:	89a3      	ldrh	r3, [r4, #12]
 800d118:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d11c:	f04f 0100 	mov.w	r1, #0
 800d120:	bf14      	ite	ne
 800d122:	2340      	movne	r3, #64	@ 0x40
 800d124:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d128:	2000      	movs	r0, #0
 800d12a:	6031      	str	r1, [r6, #0]
 800d12c:	602b      	str	r3, [r5, #0]
 800d12e:	b016      	add	sp, #88	@ 0x58
 800d130:	bd70      	pop	{r4, r5, r6, pc}
 800d132:	466a      	mov	r2, sp
 800d134:	f000 f848 	bl	800d1c8 <_fstat_r>
 800d138:	2800      	cmp	r0, #0
 800d13a:	dbec      	blt.n	800d116 <__swhatbuf_r+0x12>
 800d13c:	9901      	ldr	r1, [sp, #4]
 800d13e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d142:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d146:	4259      	negs	r1, r3
 800d148:	4159      	adcs	r1, r3
 800d14a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d14e:	e7eb      	b.n	800d128 <__swhatbuf_r+0x24>

0800d150 <__smakebuf_r>:
 800d150:	898b      	ldrh	r3, [r1, #12]
 800d152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d154:	079d      	lsls	r5, r3, #30
 800d156:	4606      	mov	r6, r0
 800d158:	460c      	mov	r4, r1
 800d15a:	d507      	bpl.n	800d16c <__smakebuf_r+0x1c>
 800d15c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d160:	6023      	str	r3, [r4, #0]
 800d162:	6123      	str	r3, [r4, #16]
 800d164:	2301      	movs	r3, #1
 800d166:	6163      	str	r3, [r4, #20]
 800d168:	b003      	add	sp, #12
 800d16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d16c:	ab01      	add	r3, sp, #4
 800d16e:	466a      	mov	r2, sp
 800d170:	f7ff ffc8 	bl	800d104 <__swhatbuf_r>
 800d174:	9f00      	ldr	r7, [sp, #0]
 800d176:	4605      	mov	r5, r0
 800d178:	4639      	mov	r1, r7
 800d17a:	4630      	mov	r0, r6
 800d17c:	f7fe ff86 	bl	800c08c <_malloc_r>
 800d180:	b948      	cbnz	r0, 800d196 <__smakebuf_r+0x46>
 800d182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d186:	059a      	lsls	r2, r3, #22
 800d188:	d4ee      	bmi.n	800d168 <__smakebuf_r+0x18>
 800d18a:	f023 0303 	bic.w	r3, r3, #3
 800d18e:	f043 0302 	orr.w	r3, r3, #2
 800d192:	81a3      	strh	r3, [r4, #12]
 800d194:	e7e2      	b.n	800d15c <__smakebuf_r+0xc>
 800d196:	89a3      	ldrh	r3, [r4, #12]
 800d198:	6020      	str	r0, [r4, #0]
 800d19a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d19e:	81a3      	strh	r3, [r4, #12]
 800d1a0:	9b01      	ldr	r3, [sp, #4]
 800d1a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d1a6:	b15b      	cbz	r3, 800d1c0 <__smakebuf_r+0x70>
 800d1a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	f000 f81d 	bl	800d1ec <_isatty_r>
 800d1b2:	b128      	cbz	r0, 800d1c0 <__smakebuf_r+0x70>
 800d1b4:	89a3      	ldrh	r3, [r4, #12]
 800d1b6:	f023 0303 	bic.w	r3, r3, #3
 800d1ba:	f043 0301 	orr.w	r3, r3, #1
 800d1be:	81a3      	strh	r3, [r4, #12]
 800d1c0:	89a3      	ldrh	r3, [r4, #12]
 800d1c2:	431d      	orrs	r5, r3
 800d1c4:	81a5      	strh	r5, [r4, #12]
 800d1c6:	e7cf      	b.n	800d168 <__smakebuf_r+0x18>

0800d1c8 <_fstat_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	4d07      	ldr	r5, [pc, #28]	@ (800d1e8 <_fstat_r+0x20>)
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	4608      	mov	r0, r1
 800d1d2:	4611      	mov	r1, r2
 800d1d4:	602b      	str	r3, [r5, #0]
 800d1d6:	f7f4 fca0 	bl	8001b1a <_fstat>
 800d1da:	1c43      	adds	r3, r0, #1
 800d1dc:	d102      	bne.n	800d1e4 <_fstat_r+0x1c>
 800d1de:	682b      	ldr	r3, [r5, #0]
 800d1e0:	b103      	cbz	r3, 800d1e4 <_fstat_r+0x1c>
 800d1e2:	6023      	str	r3, [r4, #0]
 800d1e4:	bd38      	pop	{r3, r4, r5, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20000d80 	.word	0x20000d80

0800d1ec <_isatty_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4d06      	ldr	r5, [pc, #24]	@ (800d208 <_isatty_r+0x1c>)
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	4608      	mov	r0, r1
 800d1f6:	602b      	str	r3, [r5, #0]
 800d1f8:	f7f4 fc9f 	bl	8001b3a <_isatty>
 800d1fc:	1c43      	adds	r3, r0, #1
 800d1fe:	d102      	bne.n	800d206 <_isatty_r+0x1a>
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	b103      	cbz	r3, 800d206 <_isatty_r+0x1a>
 800d204:	6023      	str	r3, [r4, #0]
 800d206:	bd38      	pop	{r3, r4, r5, pc}
 800d208:	20000d80 	.word	0x20000d80

0800d20c <_raise_r>:
 800d20c:	291f      	cmp	r1, #31
 800d20e:	b538      	push	{r3, r4, r5, lr}
 800d210:	4605      	mov	r5, r0
 800d212:	460c      	mov	r4, r1
 800d214:	d904      	bls.n	800d220 <_raise_r+0x14>
 800d216:	2316      	movs	r3, #22
 800d218:	6003      	str	r3, [r0, #0]
 800d21a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
 800d220:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d222:	b112      	cbz	r2, 800d22a <_raise_r+0x1e>
 800d224:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d228:	b94b      	cbnz	r3, 800d23e <_raise_r+0x32>
 800d22a:	4628      	mov	r0, r5
 800d22c:	f000 f830 	bl	800d290 <_getpid_r>
 800d230:	4622      	mov	r2, r4
 800d232:	4601      	mov	r1, r0
 800d234:	4628      	mov	r0, r5
 800d236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d23a:	f000 b817 	b.w	800d26c <_kill_r>
 800d23e:	2b01      	cmp	r3, #1
 800d240:	d00a      	beq.n	800d258 <_raise_r+0x4c>
 800d242:	1c59      	adds	r1, r3, #1
 800d244:	d103      	bne.n	800d24e <_raise_r+0x42>
 800d246:	2316      	movs	r3, #22
 800d248:	6003      	str	r3, [r0, #0]
 800d24a:	2001      	movs	r0, #1
 800d24c:	e7e7      	b.n	800d21e <_raise_r+0x12>
 800d24e:	2100      	movs	r1, #0
 800d250:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d254:	4620      	mov	r0, r4
 800d256:	4798      	blx	r3
 800d258:	2000      	movs	r0, #0
 800d25a:	e7e0      	b.n	800d21e <_raise_r+0x12>

0800d25c <raise>:
 800d25c:	4b02      	ldr	r3, [pc, #8]	@ (800d268 <raise+0xc>)
 800d25e:	4601      	mov	r1, r0
 800d260:	6818      	ldr	r0, [r3, #0]
 800d262:	f7ff bfd3 	b.w	800d20c <_raise_r>
 800d266:	bf00      	nop
 800d268:	2000003c 	.word	0x2000003c

0800d26c <_kill_r>:
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	4d07      	ldr	r5, [pc, #28]	@ (800d28c <_kill_r+0x20>)
 800d270:	2300      	movs	r3, #0
 800d272:	4604      	mov	r4, r0
 800d274:	4608      	mov	r0, r1
 800d276:	4611      	mov	r1, r2
 800d278:	602b      	str	r3, [r5, #0]
 800d27a:	f7f4 fbee 	bl	8001a5a <_kill>
 800d27e:	1c43      	adds	r3, r0, #1
 800d280:	d102      	bne.n	800d288 <_kill_r+0x1c>
 800d282:	682b      	ldr	r3, [r5, #0]
 800d284:	b103      	cbz	r3, 800d288 <_kill_r+0x1c>
 800d286:	6023      	str	r3, [r4, #0]
 800d288:	bd38      	pop	{r3, r4, r5, pc}
 800d28a:	bf00      	nop
 800d28c:	20000d80 	.word	0x20000d80

0800d290 <_getpid_r>:
 800d290:	f7f4 bbdb 	b.w	8001a4a <_getpid>

0800d294 <expf>:
 800d294:	b508      	push	{r3, lr}
 800d296:	ed2d 8b02 	vpush	{d8}
 800d29a:	eef0 8a40 	vmov.f32	s17, s0
 800d29e:	f000 f839 	bl	800d314 <__ieee754_expf>
 800d2a2:	eeb0 8a40 	vmov.f32	s16, s0
 800d2a6:	eeb0 0a68 	vmov.f32	s0, s17
 800d2aa:	f000 f829 	bl	800d300 <finitef>
 800d2ae:	b160      	cbz	r0, 800d2ca <expf+0x36>
 800d2b0:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800d2f0 <expf+0x5c>
 800d2b4:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2bc:	dd0a      	ble.n	800d2d4 <expf+0x40>
 800d2be:	f7fd fee9 	bl	800b094 <__errno>
 800d2c2:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800d2f4 <expf+0x60>
 800d2c6:	2322      	movs	r3, #34	@ 0x22
 800d2c8:	6003      	str	r3, [r0, #0]
 800d2ca:	eeb0 0a48 	vmov.f32	s0, s16
 800d2ce:	ecbd 8b02 	vpop	{d8}
 800d2d2:	bd08      	pop	{r3, pc}
 800d2d4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d2f8 <expf+0x64>
 800d2d8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2e0:	d5f3      	bpl.n	800d2ca <expf+0x36>
 800d2e2:	f7fd fed7 	bl	800b094 <__errno>
 800d2e6:	2322      	movs	r3, #34	@ 0x22
 800d2e8:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800d2fc <expf+0x68>
 800d2ec:	6003      	str	r3, [r0, #0]
 800d2ee:	e7ec      	b.n	800d2ca <expf+0x36>
 800d2f0:	42b17217 	.word	0x42b17217
 800d2f4:	7f800000 	.word	0x7f800000
 800d2f8:	c2cff1b5 	.word	0xc2cff1b5
 800d2fc:	00000000 	.word	0x00000000

0800d300 <finitef>:
 800d300:	ee10 3a10 	vmov	r3, s0
 800d304:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800d308:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800d30c:	bfac      	ite	ge
 800d30e:	2000      	movge	r0, #0
 800d310:	2001      	movlt	r0, #1
 800d312:	4770      	bx	lr

0800d314 <__ieee754_expf>:
 800d314:	ee10 2a10 	vmov	r2, s0
 800d318:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800d31c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d320:	d902      	bls.n	800d328 <__ieee754_expf+0x14>
 800d322:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d326:	4770      	bx	lr
 800d328:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800d32c:	d106      	bne.n	800d33c <__ieee754_expf+0x28>
 800d32e:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800d468 <__ieee754_expf+0x154>
 800d332:	2900      	cmp	r1, #0
 800d334:	bf18      	it	ne
 800d336:	eeb0 0a67 	vmovne.f32	s0, s15
 800d33a:	4770      	bx	lr
 800d33c:	484b      	ldr	r0, [pc, #300]	@ (800d46c <__ieee754_expf+0x158>)
 800d33e:	4282      	cmp	r2, r0
 800d340:	dd02      	ble.n	800d348 <__ieee754_expf+0x34>
 800d342:	2000      	movs	r0, #0
 800d344:	f000 b92a 	b.w	800d59c <__math_oflowf>
 800d348:	2a00      	cmp	r2, #0
 800d34a:	da05      	bge.n	800d358 <__ieee754_expf+0x44>
 800d34c:	4a48      	ldr	r2, [pc, #288]	@ (800d470 <__ieee754_expf+0x15c>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d902      	bls.n	800d358 <__ieee754_expf+0x44>
 800d352:	2000      	movs	r0, #0
 800d354:	f000 b91c 	b.w	800d590 <__math_uflowf>
 800d358:	4a46      	ldr	r2, [pc, #280]	@ (800d474 <__ieee754_expf+0x160>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800d360:	d952      	bls.n	800d408 <__ieee754_expf+0xf4>
 800d362:	4a45      	ldr	r2, [pc, #276]	@ (800d478 <__ieee754_expf+0x164>)
 800d364:	4293      	cmp	r3, r2
 800d366:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800d36a:	d834      	bhi.n	800d3d6 <__ieee754_expf+0xc2>
 800d36c:	4b43      	ldr	r3, [pc, #268]	@ (800d47c <__ieee754_expf+0x168>)
 800d36e:	4413      	add	r3, r2
 800d370:	ed93 7a00 	vldr	s14, [r3]
 800d374:	4b42      	ldr	r3, [pc, #264]	@ (800d480 <__ieee754_expf+0x16c>)
 800d376:	4413      	add	r3, r2
 800d378:	ee30 7a47 	vsub.f32	s14, s0, s14
 800d37c:	f1c1 0201 	rsb	r2, r1, #1
 800d380:	edd3 7a00 	vldr	s15, [r3]
 800d384:	1a52      	subs	r2, r2, r1
 800d386:	ee37 0a67 	vsub.f32	s0, s14, s15
 800d38a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800d38e:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800d484 <__ieee754_expf+0x170>
 800d392:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d488 <__ieee754_expf+0x174>
 800d396:	eee6 6a05 	vfma.f32	s13, s12, s10
 800d39a:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800d48c <__ieee754_expf+0x178>
 800d39e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800d3a2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800d490 <__ieee754_expf+0x17c>
 800d3a6:	eee5 6a06 	vfma.f32	s13, s10, s12
 800d3aa:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800d494 <__ieee754_expf+0x180>
 800d3ae:	eea6 5a86 	vfma.f32	s10, s13, s12
 800d3b2:	eef0 6a40 	vmov.f32	s13, s0
 800d3b6:	eee5 6a46 	vfms.f32	s13, s10, s12
 800d3ba:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800d3be:	ee20 5a26 	vmul.f32	s10, s0, s13
 800d3c2:	bb92      	cbnz	r2, 800d42a <__ieee754_expf+0x116>
 800d3c4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800d3c8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800d3cc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d3d0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800d3d4:	4770      	bx	lr
 800d3d6:	4b30      	ldr	r3, [pc, #192]	@ (800d498 <__ieee754_expf+0x184>)
 800d3d8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800d49c <__ieee754_expf+0x188>
 800d3dc:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800d4a0 <__ieee754_expf+0x18c>
 800d3e0:	4413      	add	r3, r2
 800d3e2:	edd3 7a00 	vldr	s15, [r3]
 800d3e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d3ea:	eeb0 7a40 	vmov.f32	s14, s0
 800d3ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d3f2:	ee17 2a90 	vmov	r2, s15
 800d3f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3fa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d3fe:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800d4a4 <__ieee754_expf+0x190>
 800d402:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d406:	e7be      	b.n	800d386 <__ieee754_expf+0x72>
 800d408:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800d40c:	d20b      	bcs.n	800d426 <__ieee754_expf+0x112>
 800d40e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d4a8 <__ieee754_expf+0x194>
 800d412:	ee70 6a26 	vadd.f32	s13, s0, s13
 800d416:	eef4 6ae5 	vcmpe.f32	s13, s11
 800d41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d41e:	dd02      	ble.n	800d426 <__ieee754_expf+0x112>
 800d420:	ee30 0a25 	vadd.f32	s0, s0, s11
 800d424:	4770      	bx	lr
 800d426:	2200      	movs	r2, #0
 800d428:	e7af      	b.n	800d38a <__ieee754_expf+0x76>
 800d42a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800d42e:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800d432:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800d436:	bfb8      	it	lt
 800d438:	3264      	addlt	r2, #100	@ 0x64
 800d43a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d43e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d442:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800d446:	ee17 3a90 	vmov	r3, s15
 800d44a:	bfab      	itete	ge
 800d44c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800d450:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800d454:	ee00 3a10 	vmovge	s0, r3
 800d458:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800d4ac <__ieee754_expf+0x198>
 800d45c:	bfbc      	itt	lt
 800d45e:	ee00 3a10 	vmovlt	s0, r3
 800d462:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800d466:	4770      	bx	lr
 800d468:	00000000 	.word	0x00000000
 800d46c:	42b17217 	.word	0x42b17217
 800d470:	42cff1b5 	.word	0x42cff1b5
 800d474:	3eb17218 	.word	0x3eb17218
 800d478:	3f851591 	.word	0x3f851591
 800d47c:	0800dba0 	.word	0x0800dba0
 800d480:	0800db98 	.word	0x0800db98
 800d484:	3331bb4c 	.word	0x3331bb4c
 800d488:	b5ddea0e 	.word	0xb5ddea0e
 800d48c:	388ab355 	.word	0x388ab355
 800d490:	bb360b61 	.word	0xbb360b61
 800d494:	3e2aaaab 	.word	0x3e2aaaab
 800d498:	0800dba8 	.word	0x0800dba8
 800d49c:	3fb8aa3b 	.word	0x3fb8aa3b
 800d4a0:	3f317180 	.word	0x3f317180
 800d4a4:	3717f7d1 	.word	0x3717f7d1
 800d4a8:	7149f2ca 	.word	0x7149f2ca
 800d4ac:	0d800000 	.word	0x0d800000

0800d4b0 <fmaxf>:
 800d4b0:	b508      	push	{r3, lr}
 800d4b2:	ed2d 8b02 	vpush	{d8}
 800d4b6:	eeb0 8a40 	vmov.f32	s16, s0
 800d4ba:	eef0 8a60 	vmov.f32	s17, s1
 800d4be:	f000 f831 	bl	800d524 <__fpclassifyf>
 800d4c2:	b930      	cbnz	r0, 800d4d2 <fmaxf+0x22>
 800d4c4:	eeb0 8a68 	vmov.f32	s16, s17
 800d4c8:	eeb0 0a48 	vmov.f32	s0, s16
 800d4cc:	ecbd 8b02 	vpop	{d8}
 800d4d0:	bd08      	pop	{r3, pc}
 800d4d2:	eeb0 0a68 	vmov.f32	s0, s17
 800d4d6:	f000 f825 	bl	800d524 <__fpclassifyf>
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	d0f4      	beq.n	800d4c8 <fmaxf+0x18>
 800d4de:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e6:	dded      	ble.n	800d4c4 <fmaxf+0x14>
 800d4e8:	e7ee      	b.n	800d4c8 <fmaxf+0x18>

0800d4ea <fminf>:
 800d4ea:	b508      	push	{r3, lr}
 800d4ec:	ed2d 8b02 	vpush	{d8}
 800d4f0:	eeb0 8a40 	vmov.f32	s16, s0
 800d4f4:	eef0 8a60 	vmov.f32	s17, s1
 800d4f8:	f000 f814 	bl	800d524 <__fpclassifyf>
 800d4fc:	b930      	cbnz	r0, 800d50c <fminf+0x22>
 800d4fe:	eeb0 8a68 	vmov.f32	s16, s17
 800d502:	eeb0 0a48 	vmov.f32	s0, s16
 800d506:	ecbd 8b02 	vpop	{d8}
 800d50a:	bd08      	pop	{r3, pc}
 800d50c:	eeb0 0a68 	vmov.f32	s0, s17
 800d510:	f000 f808 	bl	800d524 <__fpclassifyf>
 800d514:	2800      	cmp	r0, #0
 800d516:	d0f4      	beq.n	800d502 <fminf+0x18>
 800d518:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d520:	d5ed      	bpl.n	800d4fe <fminf+0x14>
 800d522:	e7ee      	b.n	800d502 <fminf+0x18>

0800d524 <__fpclassifyf>:
 800d524:	ee10 3a10 	vmov	r3, s0
 800d528:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800d52c:	d00d      	beq.n	800d54a <__fpclassifyf+0x26>
 800d52e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800d532:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800d536:	d30a      	bcc.n	800d54e <__fpclassifyf+0x2a>
 800d538:	4b07      	ldr	r3, [pc, #28]	@ (800d558 <__fpclassifyf+0x34>)
 800d53a:	1e42      	subs	r2, r0, #1
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d908      	bls.n	800d552 <__fpclassifyf+0x2e>
 800d540:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800d544:	4258      	negs	r0, r3
 800d546:	4158      	adcs	r0, r3
 800d548:	4770      	bx	lr
 800d54a:	2002      	movs	r0, #2
 800d54c:	4770      	bx	lr
 800d54e:	2004      	movs	r0, #4
 800d550:	4770      	bx	lr
 800d552:	2003      	movs	r0, #3
 800d554:	4770      	bx	lr
 800d556:	bf00      	nop
 800d558:	007ffffe 	.word	0x007ffffe

0800d55c <with_errnof>:
 800d55c:	b510      	push	{r4, lr}
 800d55e:	ed2d 8b02 	vpush	{d8}
 800d562:	eeb0 8a40 	vmov.f32	s16, s0
 800d566:	4604      	mov	r4, r0
 800d568:	f7fd fd94 	bl	800b094 <__errno>
 800d56c:	eeb0 0a48 	vmov.f32	s0, s16
 800d570:	ecbd 8b02 	vpop	{d8}
 800d574:	6004      	str	r4, [r0, #0]
 800d576:	bd10      	pop	{r4, pc}

0800d578 <xflowf>:
 800d578:	b130      	cbz	r0, 800d588 <xflowf+0x10>
 800d57a:	eef1 7a40 	vneg.f32	s15, s0
 800d57e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d582:	2022      	movs	r0, #34	@ 0x22
 800d584:	f7ff bfea 	b.w	800d55c <with_errnof>
 800d588:	eef0 7a40 	vmov.f32	s15, s0
 800d58c:	e7f7      	b.n	800d57e <xflowf+0x6>
	...

0800d590 <__math_uflowf>:
 800d590:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d598 <__math_uflowf+0x8>
 800d594:	f7ff bff0 	b.w	800d578 <xflowf>
 800d598:	10000000 	.word	0x10000000

0800d59c <__math_oflowf>:
 800d59c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d5a4 <__math_oflowf+0x8>
 800d5a0:	f7ff bfea 	b.w	800d578 <xflowf>
 800d5a4:	70000000 	.word	0x70000000

0800d5a8 <_init>:
 800d5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5aa:	bf00      	nop
 800d5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ae:	bc08      	pop	{r3}
 800d5b0:	469e      	mov	lr, r3
 800d5b2:	4770      	bx	lr

0800d5b4 <_fini>:
 800d5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5b6:	bf00      	nop
 800d5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ba:	bc08      	pop	{r3}
 800d5bc:	469e      	mov	lr, r3
 800d5be:	4770      	bx	lr
