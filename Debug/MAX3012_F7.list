
MAX3012_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009470  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08009650  08009650  0000a650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a78  08009a78  0000b1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009a78  08009a78  0000aa78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a80  08009a80  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a80  08009a80  0000aa80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a84  08009a84  0000aa84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08009a88  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  200001e0  08009c68  0000b1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  08009c68  0000b754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117c1  00000000  00000000  0000b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad7  00000000  00000000  0001c9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0001f4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8c  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024026  00000000  00000000  00020d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012973  00000000  00000000  00044d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6d6d  00000000  00000000  0005769d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e40a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad4  00000000  00000000  0012e450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  00132f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009638 	.word	0x08009638

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	08009638 	.word	0x08009638

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  int ir_values = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f92:	f000 fc78 	bl	8001886 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f96:	f000 f90d 	bl	80011b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8000f9a:	f000 f969 	bl	8001270 <MX_GPIO_Init>
  erlog_init(&log_console, &huart3);
 8000f9e:	4974      	ldr	r1, [pc, #464]	@ (8001170 <main+0x1e8>)
 8000fa0:	4874      	ldr	r0, [pc, #464]	@ (8001174 <main+0x1ec>)
 8000fa2:	f004 fbe1 	bl	8005768 <erlog_init>
  max30102_init(&max30102 , &hi2c2);
 8000fa6:	4974      	ldr	r1, [pc, #464]	@ (8001178 <main+0x1f0>)
 8000fa8:	4874      	ldr	r0, [pc, #464]	@ (800117c <main+0x1f4>)
 8000faa:	f004 fef3 	bl	8005d94 <max30102_init>
  /* USER CODE END SysInit */


  /* USER CODE BEGIN 2 */

  read_register(&max30102, MAX30102_REVISIONID , &max30102.revision_id);
 8000fae:	4a74      	ldr	r2, [pc, #464]	@ (8001180 <main+0x1f8>)
 8000fb0:	21fe      	movs	r1, #254	@ 0xfe
 8000fb2:	4872      	ldr	r0, [pc, #456]	@ (800117c <main+0x1f4>)
 8000fb4:	f004 ff11 	bl	8005dda <read_register>
  read_register(&max30102, MAX30102_PARTID , &max30102.part_id);
 8000fb8:	4a72      	ldr	r2, [pc, #456]	@ (8001184 <main+0x1fc>)
 8000fba:	21ff      	movs	r1, #255	@ 0xff
 8000fbc:	486f      	ldr	r0, [pc, #444]	@ (800117c <main+0x1f4>)
 8000fbe:	f004 ff0c 	bl	8005dda <read_register>
  log_console.msg_len = sprintf((char *)log_console.msg,"MAX30102 Revision_id: %x, Part_id: %x\r\n", max30102.revision_id, max30102.part_id);
 8000fc2:	4b6e      	ldr	r3, [pc, #440]	@ (800117c <main+0x1f4>)
 8000fc4:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b6c      	ldr	r3, [pc, #432]	@ (800117c <main+0x1f4>)
 8000fcc:	f893 3187 	ldrb.w	r3, [r3, #391]	@ 0x187
 8000fd0:	496d      	ldr	r1, [pc, #436]	@ (8001188 <main+0x200>)
 8000fd2:	486e      	ldr	r0, [pc, #440]	@ (800118c <main+0x204>)
 8000fd4:	f005 ffb8 	bl	8006f48 <siprintf>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	4b65      	ldr	r3, [pc, #404]	@ (8001174 <main+0x1ec>)
 8000fde:	809a      	strh	r2, [r3, #4]
  erlog_write(&log_console);
 8000fe0:	4864      	ldr	r0, [pc, #400]	@ (8001174 <main+0x1ec>)
 8000fe2:	f004 fbdc 	bl	800579e <erlog_write>
  erlog_clear(&log_console);
 8000fe6:	4863      	ldr	r0, [pc, #396]	@ (8001174 <main+0x1ec>)
 8000fe8:	f004 fbeb 	bl	80057c2 <erlog_clear>

  max30102_clear_fifo(&max30102);
 8000fec:	4863      	ldr	r0, [pc, #396]	@ (800117c <main+0x1f4>)
 8000fee:	f004 ff75 	bl	8005edc <max30102_clear_fifo>
  max30102_softReset(&max30102);
 8000ff2:	4862      	ldr	r0, [pc, #392]	@ (800117c <main+0x1f4>)
 8000ff4:	f005 f8b2 	bl	800615c <max30102_softReset>
  max30102_set_fifoaverage(&max30102 , max30102_smp_ave_4);
 8000ff8:	2140      	movs	r1, #64	@ 0x40
 8000ffa:	4860      	ldr	r0, [pc, #384]	@ (800117c <main+0x1f4>)
 8000ffc:	f004 ff85 	bl	8005f0a <max30102_set_fifoaverage>
  max30102_enableFIFORollover(&max30102);
 8001000:	485e      	ldr	r0, [pc, #376]	@ (800117c <main+0x1f4>)
 8001002:	f005 f82f 	bl	8006064 <max30102_enableFIFORollover>

  max30102_setpulsewidth(&max30102 , max30102_pw_18_bit);
 8001006:	2103      	movs	r1, #3
 8001008:	485c      	ldr	r0, [pc, #368]	@ (800117c <main+0x1f4>)
 800100a:	f005 f81b 	bl	8006044 <max30102_setpulsewidth>
  max30102_setadcrange(&max30102, max30102_adc_4096);
 800100e:	2120      	movs	r1, #32
 8001010:	485a      	ldr	r0, [pc, #360]	@ (800117c <main+0x1f4>)
 8001012:	f004 fff7 	bl	8006004 <max30102_setadcrange>
  max30102_setsamplerate(&max30102, max30102_sr_400);
 8001016:	210c      	movs	r1, #12
 8001018:	4858      	ldr	r0, [pc, #352]	@ (800117c <main+0x1f4>)
 800101a:	f005 f803 	bl	8006024 <max30102_setsamplerate>
  max30102_setledmode(&max30102 , max30102_led_irg);
 800101e:	2103      	movs	r1, #3
 8001020:	4856      	ldr	r0, [pc, #344]	@ (800117c <main+0x1f4>)
 8001022:	f004 ffdf 	bl	8005fe4 <max30102_setledmode>
  max30102_set_pulseamplitude(&max30102, 0x1F, RED_COLOUR);   // configure heartbeat sensor colours
 8001026:	2201      	movs	r2, #1
 8001028:	211f      	movs	r1, #31
 800102a:	4854      	ldr	r0, [pc, #336]	@ (800117c <main+0x1f4>)
 800102c:	f005 f866 	bl	80060fc <max30102_set_pulseamplitude>
  max30102_set_pulseamplitude(&max30102, 0x1F, GREEN_COLOUR);
 8001030:	2202      	movs	r2, #2
 8001032:	211f      	movs	r1, #31
 8001034:	4851      	ldr	r0, [pc, #324]	@ (800117c <main+0x1f4>)
 8001036:	f005 f861 	bl	80060fc <max30102_set_pulseamplitude>
  max30102_set_pulseamplitude(&max30102, 0x1F, IR);
 800103a:	2203      	movs	r2, #3
 800103c:	211f      	movs	r1, #31
 800103e:	484f      	ldr	r0, [pc, #316]	@ (800117c <main+0x1f4>)
 8001040:	f005 f85c 	bl	80060fc <max30102_set_pulseamplitude>
  max30102_set_pulseamplitude(&max30102, 0x1F, PROXIMITY);
 8001044:	2204      	movs	r2, #4
 8001046:	211f      	movs	r1, #31
 8001048:	484c      	ldr	r0, [pc, #304]	@ (800117c <main+0x1f4>)
 800104a:	f005 f857 	bl	80060fc <max30102_set_pulseamplitude>

  max30102_enableSlot(&max30102 , 3, SLOT_GREEN_LED);
 800104e:	2303      	movs	r3, #3
 8001050:	461a      	mov	r2, r3
 8001052:	2103      	movs	r1, #3
 8001054:	4849      	ldr	r0, [pc, #292]	@ (800117c <main+0x1f4>)
 8001056:	f005 f813 	bl	8006080 <max30102_enableSlot>
  max30102_set_pulseamplitude(&max30102, 0x0A, RED_COLOUR);   // configure heartbeat sensor colours
 800105a:	2201      	movs	r2, #1
 800105c:	210a      	movs	r1, #10
 800105e:	4847      	ldr	r0, [pc, #284]	@ (800117c <main+0x1f4>)
 8001060:	f005 f84c 	bl	80060fc <max30102_set_pulseamplitude>
  max30102_set_pulseamplitude(&max30102, 0x00, GREEN_COLOUR);
 8001064:	2202      	movs	r2, #2
 8001066:	2100      	movs	r1, #0
 8001068:	4844      	ldr	r0, [pc, #272]	@ (800117c <main+0x1f4>)
 800106a:	f005 f847 	bl	80060fc <max30102_set_pulseamplitude>
  max30102_enableDIETEMPRDY(&max30102);
 800106e:	4843      	ldr	r0, [pc, #268]	@ (800117c <main+0x1f4>)
 8001070:	f004 ff26 	bl	8005ec0 <max30102_enableDIETEMPRDY>
  HAL_Delay(1);
 8001074:	2001      	movs	r0, #1
 8001076:	f000 fc63 	bl	8001940 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 /*measure temperature values*/
	 temp = max30102_readtemp(&max30102);
 800107a:	4840      	ldr	r0, [pc, #256]	@ (800117c <main+0x1f4>)
 800107c:	f004 ff56 	bl	8005f2c <max30102_readtemp>
 8001080:	eef0 7a40 	vmov.f32	s15, s0
 8001084:	4b42      	ldr	r3, [pc, #264]	@ (8001190 <main+0x208>)
 8001086:	edc3 7a00 	vstr	s15, [r3]
	 log_console.msg_len= sprintf((char *)log_console.msg,"Temp :- %0.2f C \r\n", temp);
 800108a:	4b41      	ldr	r3, [pc, #260]	@ (8001190 <main+0x208>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fa82 	bl	8000598 <__aeabi_f2d>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	493e      	ldr	r1, [pc, #248]	@ (8001194 <main+0x20c>)
 800109a:	483c      	ldr	r0, [pc, #240]	@ (800118c <main+0x204>)
 800109c:	f005 ff54 	bl	8006f48 <siprintf>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b33      	ldr	r3, [pc, #204]	@ (8001174 <main+0x1ec>)
 80010a6:	809a      	strh	r2, [r3, #4]
	 erlog_write(&log_console);
 80010a8:	4832      	ldr	r0, [pc, #200]	@ (8001174 <main+0x1ec>)
 80010aa:	f004 fb78 	bl	800579e <erlog_write>
	 HAL_Delay(100);
 80010ae:	2064      	movs	r0, #100	@ 0x64
 80010b0:	f000 fc46 	bl	8001940 <HAL_Delay>
	 erlog_clear(&log_console);
 80010b4:	482f      	ldr	r0, [pc, #188]	@ (8001174 <main+0x1ec>)
 80010b6:	f004 fb84 	bl	80057c2 <erlog_clear>
     HAL_Delay(100);
 80010ba:	2064      	movs	r0, #100	@ 0x64
 80010bc:	f000 fc40 	bl	8001940 <HAL_Delay>

     /*measure heartrate & spo2 values*/
	 ir_values = max30102_safeCheck(&max30102);
 80010c0:	482e      	ldr	r0, [pc, #184]	@ (800117c <main+0x1f4>)
 80010c2:	f005 f955 	bl	8006370 <max30102_safeCheck>
 80010c6:	4603      	mov	r3, r0
 80010c8:	607b      	str	r3, [r7, #4]
	 if(ir_values > 50000)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80010d0:	4293      	cmp	r3, r2
 80010d2:	dd20      	ble.n	8001116 <main+0x18e>
	 {
		 checkbeat(ir_values);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f004 fdbf 	bl	8005c58 <checkbeat>
		 Spo2AvgInit(&max30102);
 80010da:	4828      	ldr	r0, [pc, #160]	@ (800117c <main+0x1f4>)
 80010dc:	f005 fa10 	bl	8006500 <Spo2AvgInit>
		 log_console.msg_len= sprintf((char *)log_console.msg,"Finger Detected , Heartbeat:- %f , spo2 - %f\r\n", beatsPerMinute, spo2);
 80010e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001198 <main+0x210>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fa57 	bl	8000598 <__aeabi_f2d>
 80010ea:	4604      	mov	r4, r0
 80010ec:	460d      	mov	r5, r1
 80010ee:	4b2b      	ldr	r3, [pc, #172]	@ (800119c <main+0x214>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa50 	bl	8000598 <__aeabi_f2d>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	e9cd 2300 	strd	r2, r3, [sp]
 8001100:	4622      	mov	r2, r4
 8001102:	462b      	mov	r3, r5
 8001104:	4926      	ldr	r1, [pc, #152]	@ (80011a0 <main+0x218>)
 8001106:	4821      	ldr	r0, [pc, #132]	@ (800118c <main+0x204>)
 8001108:	f005 ff1e 	bl	8006f48 <siprintf>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <main+0x1ec>)
 8001112:	809a      	strh	r2, [r3, #4]
 8001114:	e021      	b.n	800115a <main+0x1d2>

	 }
	 else
	 {

		 HighPassFilter_reset(&high_pass_filter);
 8001116:	4823      	ldr	r0, [pc, #140]	@ (80011a4 <main+0x21c>)
 8001118:	f004 fc08 	bl	800592c <HighPassFilter_reset>
		 LowPassFilter_reset(&low_pass_filter);
 800111c:	4822      	ldr	r0, [pc, #136]	@ (80011a8 <main+0x220>)
 800111e:	f004 fca8 	bl	8005a72 <LowPassFilter_reset>
		 beatsPerMinute = 0;
 8001122:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <main+0x210>)
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
		 beatAvg = 0;
 800112a:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <main+0x224>)
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
		 strcpy(log_console.msg , "No finger detected \r\n");
 8001132:	4a16      	ldr	r2, [pc, #88]	@ (800118c <main+0x204>)
 8001134:	4b1e      	ldr	r3, [pc, #120]	@ (80011b0 <main+0x228>)
 8001136:	4615      	mov	r5, r2
 8001138:	461c      	mov	r4, r3
 800113a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113c:	6028      	str	r0, [r5, #0]
 800113e:	6069      	str	r1, [r5, #4]
 8001140:	60aa      	str	r2, [r5, #8]
 8001142:	60eb      	str	r3, [r5, #12]
 8001144:	6820      	ldr	r0, [r4, #0]
 8001146:	6128      	str	r0, [r5, #16]
 8001148:	88a3      	ldrh	r3, [r4, #4]
 800114a:	82ab      	strh	r3, [r5, #20]
		 log_console.msg_len = strlen(log_console.msg);
 800114c:	480f      	ldr	r0, [pc, #60]	@ (800118c <main+0x204>)
 800114e:	f7ff f8b7 	bl	80002c0 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <main+0x1ec>)
 8001158:	809a      	strh	r2, [r3, #4]
	 }
	 erlog_write(&log_console);
 800115a:	4806      	ldr	r0, [pc, #24]	@ (8001174 <main+0x1ec>)
 800115c:	f004 fb1f 	bl	800579e <erlog_write>
	 HAL_Delay(100);
 8001160:	2064      	movs	r0, #100	@ 0x64
 8001162:	f000 fbed 	bl	8001940 <HAL_Delay>
	 erlog_clear(&log_console);
 8001166:	4803      	ldr	r0, [pc, #12]	@ (8001174 <main+0x1ec>)
 8001168:	f004 fb2b 	bl	80057c2 <erlog_clear>
	 temp = max30102_readtemp(&max30102);
 800116c:	e785      	b.n	800107a <main+0xf2>
 800116e:	bf00      	nop
 8001170:	200001fc 	.word	0x200001fc
 8001174:	200002d8 	.word	0x200002d8
 8001178:	20000284 	.word	0x20000284
 800117c:	200003e0 	.word	0x200003e0
 8001180:	20000568 	.word	0x20000568
 8001184:	20000567 	.word	0x20000567
 8001188:	08009650 	.word	0x08009650
 800118c:	200002de 	.word	0x200002de
 8001190:	2000056c 	.word	0x2000056c
 8001194:	08009678 	.word	0x08009678
 8001198:	20000574 	.word	0x20000574
 800119c:	20000570 	.word	0x20000570
 80011a0:	0800968c 	.word	0x0800968c
 80011a4:	20000594 	.word	0x20000594
 80011a8:	20000584 	.word	0x20000584
 80011ac:	20000578 	.word	0x20000578
 80011b0:	080096bc 	.word	0x080096bc

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b094      	sub	sp, #80	@ 0x50
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	2230      	movs	r2, #48	@ 0x30
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f005 ffa2 	bl	800710c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011d8:	f002 fd64 	bl	8003ca4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <SystemClock_Config+0xb4>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	4a21      	ldr	r2, [pc, #132]	@ (8001268 <SystemClock_Config+0xb4>)
 80011e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <SystemClock_Config+0xb4>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011f4:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <SystemClock_Config+0xb8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011fc:	4a1b      	ldr	r2, [pc, #108]	@ (800126c <SystemClock_Config+0xb8>)
 80011fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b19      	ldr	r3, [pc, #100]	@ (800126c <SystemClock_Config+0xb8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001210:	2302      	movs	r3, #2
 8001212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001214:	2301      	movs	r3, #1
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001218:	2310      	movs	r3, #16
 800121a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800121c:	2300      	movs	r3, #0
 800121e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001220:	f107 0320 	add.w	r3, r7, #32
 8001224:	4618      	mov	r0, r3
 8001226:	f002 fd4d 	bl	8003cc4 <HAL_RCC_OscConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001230:	f000 f8ec 	bl	800140c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001234:	230f      	movs	r3, #15
 8001236:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f002 ffdc 	bl	800420c <HAL_RCC_ClockConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800125a:	f000 f8d7 	bl	800140c <Error_Handler>
  }
}
 800125e:	bf00      	nop
 8001260:	3750      	adds	r7, #80	@ 0x50
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40007000 	.word	0x40007000

08001270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	@ 0x30
 8001274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	4b5c      	ldr	r3, [pc, #368]	@ (80013f8 <MX_GPIO_Init+0x188>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a5b      	ldr	r2, [pc, #364]	@ (80013f8 <MX_GPIO_Init+0x188>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b59      	ldr	r3, [pc, #356]	@ (80013f8 <MX_GPIO_Init+0x188>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800129e:	4b56      	ldr	r3, [pc, #344]	@ (80013f8 <MX_GPIO_Init+0x188>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a55      	ldr	r2, [pc, #340]	@ (80013f8 <MX_GPIO_Init+0x188>)
 80012a4:	f043 0320 	orr.w	r3, r3, #32
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b53      	ldr	r3, [pc, #332]	@ (80013f8 <MX_GPIO_Init+0x188>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0320 	and.w	r3, r3, #32
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	4b50      	ldr	r3, [pc, #320]	@ (80013f8 <MX_GPIO_Init+0x188>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a4f      	ldr	r2, [pc, #316]	@ (80013f8 <MX_GPIO_Init+0x188>)
 80012bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b4d      	ldr	r3, [pc, #308]	@ (80013f8 <MX_GPIO_Init+0x188>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b4a      	ldr	r3, [pc, #296]	@ (80013f8 <MX_GPIO_Init+0x188>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a49      	ldr	r2, [pc, #292]	@ (80013f8 <MX_GPIO_Init+0x188>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b47      	ldr	r3, [pc, #284]	@ (80013f8 <MX_GPIO_Init+0x188>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	4b44      	ldr	r3, [pc, #272]	@ (80013f8 <MX_GPIO_Init+0x188>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a43      	ldr	r2, [pc, #268]	@ (80013f8 <MX_GPIO_Init+0x188>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b41      	ldr	r3, [pc, #260]	@ (80013f8 <MX_GPIO_Init+0x188>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012fe:	4b3e      	ldr	r3, [pc, #248]	@ (80013f8 <MX_GPIO_Init+0x188>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a3d      	ldr	r2, [pc, #244]	@ (80013f8 <MX_GPIO_Init+0x188>)
 8001304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b3b      	ldr	r3, [pc, #236]	@ (80013f8 <MX_GPIO_Init+0x188>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b38      	ldr	r3, [pc, #224]	@ (80013f8 <MX_GPIO_Init+0x188>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a37      	ldr	r2, [pc, #220]	@ (80013f8 <MX_GPIO_Init+0x188>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b35      	ldr	r3, [pc, #212]	@ (80013f8 <MX_GPIO_Init+0x188>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001334:	4831      	ldr	r0, [pc, #196]	@ (80013fc <MX_GPIO_Init+0x18c>)
 8001336:	f000 fe05 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2140      	movs	r1, #64	@ 0x40
 800133e:	4830      	ldr	r0, [pc, #192]	@ (8001400 <MX_GPIO_Init+0x190>)
 8001340:	f000 fe00 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001344:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800134a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800134e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	482a      	ldr	r0, [pc, #168]	@ (8001404 <MX_GPIO_Init+0x194>)
 800135c:	f000 fc56 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001360:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	4820      	ldr	r0, [pc, #128]	@ (80013fc <MX_GPIO_Init+0x18c>)
 800137a:	f000 fc47 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800137e:	2340      	movs	r3, #64	@ 0x40
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	481a      	ldr	r0, [pc, #104]	@ (8001400 <MX_GPIO_Init+0x190>)
 8001396:	f000 fc39 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800139a:	2380      	movs	r3, #128	@ 0x80
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4814      	ldr	r0, [pc, #80]	@ (8001400 <MX_GPIO_Init+0x190>)
 80013ae:	f000 fc2d 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013b2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013c4:	230a      	movs	r3, #10
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	480e      	ldr	r0, [pc, #56]	@ (8001408 <MX_GPIO_Init+0x198>)
 80013d0:	f000 fc1c 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	4807      	ldr	r0, [pc, #28]	@ (8001408 <MX_GPIO_Init+0x198>)
 80013ea:	f000 fc0f 	bl	8001c0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	@ 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020400 	.word	0x40020400
 8001400:	40021800 	.word	0x40021800
 8001404:	40020800 	.word	0x40020800
 8001408:	40020000 	.word	0x40020000

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <Error_Handler+0x8>

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <HAL_MspInit+0x44>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	4a0e      	ldr	r2, [pc, #56]	@ (800145c <HAL_MspInit+0x44>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001428:	6413      	str	r3, [r2, #64]	@ 0x40
 800142a:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <HAL_MspInit+0x44>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <HAL_MspInit+0x44>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	4a08      	ldr	r2, [pc, #32]	@ (800145c <HAL_MspInit+0x44>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001440:	6453      	str	r3, [r2, #68]	@ 0x44
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_MspInit+0x44>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0aa      	sub	sp, #168	@ 0xa8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2280      	movs	r2, #128	@ 0x80
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f005 fe43 	bl	800710c <memset>
  if(hi2c->Instance==I2C2)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a29      	ldr	r2, [pc, #164]	@ (8001530 <HAL_I2C_MspInit+0xd0>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d14b      	bne.n	8001528 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001490:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001494:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001496:	2300      	movs	r3, #0
 8001498:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 f8da 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014aa:	f7ff ffaf 	bl	800140c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ae:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <HAL_I2C_MspInit+0xd4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a20      	ldr	r2, [pc, #128]	@ (8001534 <HAL_I2C_MspInit+0xd4>)
 80014b4:	f043 0320 	orr.w	r3, r3, #32
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <HAL_I2C_MspInit+0xd4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0320 	and.w	r3, r3, #32
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014c6:	2303      	movs	r3, #3
 80014c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014cc:	2312      	movs	r3, #18
 80014ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014de:	2304      	movs	r3, #4
 80014e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014e4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014e8:	4619      	mov	r1, r3
 80014ea:	4813      	ldr	r0, [pc, #76]	@ (8001538 <HAL_I2C_MspInit+0xd8>)
 80014ec:	f000 fb8e 	bl	8001c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014f0:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <HAL_I2C_MspInit+0xd4>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001534 <HAL_I2C_MspInit+0xd4>)
 80014f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001534 <HAL_I2C_MspInit+0xd4>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001500:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	2021      	movs	r0, #33	@ 0x21
 800150e:	f000 fb16 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001512:	2021      	movs	r0, #33	@ 0x21
 8001514:	f000 fb2f 	bl	8001b76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2022      	movs	r0, #34	@ 0x22
 800151e:	f000 fb0e 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001522:	2022      	movs	r0, #34	@ 0x22
 8001524:	f000 fb27 	bl	8001b76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001528:	bf00      	nop
 800152a:	37a8      	adds	r7, #168	@ 0xa8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40005800 	.word	0x40005800
 8001534:	40023800 	.word	0x40023800
 8001538:	40021400 	.word	0x40021400

0800153c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0aa      	sub	sp, #168	@ 0xa8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2280      	movs	r2, #128	@ 0x80
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f005 fdd5 	bl	800710c <memset>
  if(huart->Instance==USART3)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a22      	ldr	r2, [pc, #136]	@ (80015f0 <HAL_UART_MspInit+0xb4>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d13c      	bne.n	80015e6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800156c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001570:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001572:	2300      	movs	r3, #0
 8001574:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4618      	mov	r0, r3
 800157c:	f003 f86c 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001586:	f7ff ff41 	bl	800140c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <HAL_UART_MspInit+0xb8>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	4a19      	ldr	r2, [pc, #100]	@ (80015f4 <HAL_UART_MspInit+0xb8>)
 8001590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001594:	6413      	str	r3, [r2, #64]	@ 0x40
 8001596:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <HAL_UART_MspInit+0xb8>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <HAL_UART_MspInit+0xb8>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a13      	ldr	r2, [pc, #76]	@ (80015f4 <HAL_UART_MspInit+0xb8>)
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <HAL_UART_MspInit+0xb8>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d4:	2307      	movs	r3, #7
 80015d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015da:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <HAL_UART_MspInit+0xbc>)
 80015e2:	f000 fb13 	bl	8001c0c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80015e6:	bf00      	nop
 80015e8:	37a8      	adds	r7, #168	@ 0xa8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40004800 	.word	0x40004800
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020c00 	.word	0x40020c00

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <NMI_Handler+0x4>

08001604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <HardFault_Handler+0x4>

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <MemManage_Handler+0x4>

08001614 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <UsageFault_Handler+0x4>

08001624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001652:	f000 f955 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <I2C2_EV_IRQHandler+0x10>)
 8001662:	f001 f961 	bl	8002928 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000284 	.word	0x20000284

08001670 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <I2C2_ER_IRQHandler+0x10>)
 8001676:	f001 f971 	bl	800295c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000284 	.word	0x20000284

08001684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return 1;
 8001688:	2301      	movs	r3, #1
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_kill>:

int _kill(int pid, int sig)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800169e:	f005 fd41 	bl	8007124 <__errno>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2216      	movs	r2, #22
 80016a6:	601a      	str	r2, [r3, #0]
  return -1;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_exit>:

void _exit (int status)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ffe7 	bl	8001694 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016c6:	bf00      	nop
 80016c8:	e7fd      	b.n	80016c6 <_exit+0x12>

080016ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	e00a      	b.n	80016f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016dc:	f3af 8000 	nop.w
 80016e0:	4601      	mov	r1, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	60ba      	str	r2, [r7, #8]
 80016e8:	b2ca      	uxtb	r2, r1
 80016ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3301      	adds	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	dbf0      	blt.n	80016dc <_read+0x12>
  }

  return len;
 80016fa:	687b      	ldr	r3, [r7, #4]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e009      	b.n	800172a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	60ba      	str	r2, [r7, #8]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	dbf1      	blt.n	8001716 <_write+0x12>
  }
  return len;
 8001732:	687b      	ldr	r3, [r7, #4]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_close>:

int _close(int file)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001764:	605a      	str	r2, [r3, #4]
  return 0;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <_isatty>:

int _isatty(int file)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800177c:	2301      	movs	r3, #1
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800178a:	b480      	push	{r7}
 800178c:	b085      	sub	sp, #20
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	@ (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f005 fca6 	bl	8007124 <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20040000 	.word	0x20040000
 8001804:	00000400 	.word	0x00000400
 8001808:	2000057c 	.word	0x2000057c
 800180c:	20000758 	.word	0x20000758

08001810 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <SystemInit+0x20>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <SystemInit+0x20>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001834:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800186c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001838:	f7ff ffea 	bl	8001810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800183c:	480c      	ldr	r0, [pc, #48]	@ (8001870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800183e:	490d      	ldr	r1, [pc, #52]	@ (8001874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001844:	e002      	b.n	800184c <LoopCopyDataInit>

08001846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184a:	3304      	adds	r3, #4

0800184c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800184c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001850:	d3f9      	bcc.n	8001846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001854:	4c0a      	ldr	r4, [pc, #40]	@ (8001880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001858:	e001      	b.n	800185e <LoopFillZerobss>

0800185a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800185c:	3204      	adds	r2, #4

0800185e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001860:	d3fb      	bcc.n	800185a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001862:	f005 fc65 	bl	8007130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001866:	f7ff fb8f 	bl	8000f88 <main>
  bx  lr    
 800186a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800186c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001878:	08009a88 	.word	0x08009a88
  ldr r2, =_sbss
 800187c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001880:	20000754 	.word	0x20000754

08001884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC_IRQHandler>

08001886 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188a:	2003      	movs	r0, #3
 800188c:	f000 f94c 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001890:	2000      	movs	r0, #0
 8001892:	f000 f805 	bl	80018a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001896:	f7ff fdbf 	bl	8001418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_InitTick+0x54>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <HAL_InitTick+0x58>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f967 	bl	8001b92 <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d80a      	bhi.n	80018ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018dc:	f000 f92f 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4a06      	ldr	r2, [pc, #24]	@ (80018fc <HAL_InitTick+0x5c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000008 	.word	0x20000008
 8001924:	20000580 	.word	0x20000580

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000580 	.word	0x20000580

08001940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff ffee 	bl	8001928 <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195a:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <HAL_Delay+0x44>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001966:	bf00      	nop
 8001968:	f7ff ffde 	bl	8001928 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000008 	.word	0x20000008

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x40>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x40>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00
 80019cc:	05fa0000 	.word	0x05fa0000

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	@ (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	@ (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	@ (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff29 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff3e 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff8e 	bl	8001a7c <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5d 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff31 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d004      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2280      	movs	r2, #128	@ 0x80
 8001bc2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e00c      	b.n	8001be2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2205      	movs	r2, #5
 8001bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bfc:	b2db      	uxtb	r3, r3
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	@ 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	e169      	b.n	8001f00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	f040 8158 	bne.w	8001efa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d005      	beq.n	8001c62 <HAL_GPIO_Init+0x56>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d130      	bne.n	8001cc4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 0201 	and.w	r2, r3, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d017      	beq.n	8001d00 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d123      	bne.n	8001d54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	08da      	lsrs	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3208      	adds	r2, #8
 8001d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	220f      	movs	r2, #15
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	08da      	lsrs	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3208      	adds	r2, #8
 8001d4e:	69b9      	ldr	r1, [r7, #24]
 8001d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0203 	and.w	r2, r3, #3
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80b2 	beq.w	8001efa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	4b60      	ldr	r3, [pc, #384]	@ (8001f18 <HAL_GPIO_Init+0x30c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	4a5f      	ldr	r2, [pc, #380]	@ (8001f18 <HAL_GPIO_Init+0x30c>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001da2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f18 <HAL_GPIO_Init+0x30c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001dae:	4a5b      	ldr	r2, [pc, #364]	@ (8001f1c <HAL_GPIO_Init+0x310>)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	@ (8001f20 <HAL_GPIO_Init+0x314>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d02b      	beq.n	8001e32 <HAL_GPIO_Init+0x226>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a51      	ldr	r2, [pc, #324]	@ (8001f24 <HAL_GPIO_Init+0x318>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d025      	beq.n	8001e2e <HAL_GPIO_Init+0x222>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a50      	ldr	r2, [pc, #320]	@ (8001f28 <HAL_GPIO_Init+0x31c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <HAL_GPIO_Init+0x21e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4f      	ldr	r2, [pc, #316]	@ (8001f2c <HAL_GPIO_Init+0x320>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_GPIO_Init+0x21a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f30 <HAL_GPIO_Init+0x324>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0x216>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4d      	ldr	r2, [pc, #308]	@ (8001f34 <HAL_GPIO_Init+0x328>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_GPIO_Init+0x212>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4c      	ldr	r2, [pc, #304]	@ (8001f38 <HAL_GPIO_Init+0x32c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <HAL_GPIO_Init+0x20e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f3c <HAL_GPIO_Init+0x330>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_Init+0x20a>
 8001e12:	2307      	movs	r3, #7
 8001e14:	e00e      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e16:	2308      	movs	r3, #8
 8001e18:	e00c      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	e00a      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e1e:	2305      	movs	r3, #5
 8001e20:	e008      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e22:	2304      	movs	r3, #4
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e26:	2303      	movs	r3, #3
 8001e28:	e004      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e32:	2300      	movs	r3, #0
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	f002 0203 	and.w	r2, r2, #3
 8001e3a:	0092      	lsls	r2, r2, #2
 8001e3c:	4093      	lsls	r3, r2
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e44:	4935      	ldr	r1, [pc, #212]	@ (8001f1c <HAL_GPIO_Init+0x310>)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e52:	4b3b      	ldr	r3, [pc, #236]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e76:	4a32      	ldr	r2, [pc, #200]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e7c:	4b30      	ldr	r3, [pc, #192]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea0:	4a27      	ldr	r2, [pc, #156]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ea6:	4b26      	ldr	r3, [pc, #152]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eca:	4a1d      	ldr	r2, [pc, #116]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef4:	4a12      	ldr	r2, [pc, #72]	@ (8001f40 <HAL_GPIO_Init+0x334>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3301      	adds	r3, #1
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2b0f      	cmp	r3, #15
 8001f04:	f67f ae92 	bls.w	8001c2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3724      	adds	r7, #36	@ 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40020400 	.word	0x40020400
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40021400 	.word	0x40021400
 8001f38:	40021800 	.word	0x40021800
 8001f3c:	40021c00 	.word	0x40021c00
 8001f40:	40013c00 	.word	0x40013c00

08001f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
 8001f50:	4613      	mov	r3, r2
 8001f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f54:	787b      	ldrb	r3, [r7, #1]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f60:	e003      	b.n	8001f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f62:	887b      	ldrh	r3, [r7, #2]
 8001f64:	041a      	lsls	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	619a      	str	r2, [r3, #24]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e08b      	b.n	80020a2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d106      	bne.n	8001fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fa5e 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2224      	movs	r2, #36	@ 0x24
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	e006      	b.n	8002000 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ffe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d108      	bne.n	800201a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	e007      	b.n	800202a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002028:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b1d      	ldr	r3, [pc, #116]	@ (80020ac <HAL_I2C_Init+0x134>)
 8002036:	430b      	orrs	r3, r1
 8002038:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002048:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69d9      	ldr	r1, [r3, #28]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1a      	ldr	r2, [r3, #32]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	02008000 	.word	0x02008000

080020b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	461a      	mov	r2, r3
 80020bc:	460b      	mov	r3, r1
 80020be:	817b      	strh	r3, [r7, #10]
 80020c0:	4613      	mov	r3, r2
 80020c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	f040 80fd 	bne.w	80022cc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_I2C_Master_Transmit+0x30>
 80020dc:	2302      	movs	r3, #2
 80020de:	e0f6      	b.n	80022ce <HAL_I2C_Master_Transmit+0x21e>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020e8:	f7ff fc1e 	bl	8001928 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2319      	movs	r3, #25
 80020f4:	2201      	movs	r2, #1
 80020f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f001 fa5b 	bl	80035b6 <I2C_WaitOnFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e0e1      	b.n	80022ce <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2221      	movs	r2, #33	@ 0x21
 800210e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2210      	movs	r2, #16
 8002116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	893a      	ldrh	r2, [r7, #8]
 800212a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002136:	b29b      	uxth	r3, r3
 8002138:	2bff      	cmp	r3, #255	@ 0xff
 800213a:	d906      	bls.n	800214a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	22ff      	movs	r2, #255	@ 0xff
 8002140:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002142:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e007      	b.n	800215a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002154:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002158:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215e:	2b00      	cmp	r3, #0
 8002160:	d024      	beq.n	80021ac <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	3b01      	subs	r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002196:	b2db      	uxtb	r3, r3
 8002198:	3301      	adds	r3, #1
 800219a:	b2da      	uxtb	r2, r3
 800219c:	8979      	ldrh	r1, [r7, #10]
 800219e:	4b4e      	ldr	r3, [pc, #312]	@ (80022d8 <HAL_I2C_Master_Transmit+0x228>)
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f001 fc55 	bl	8003a54 <I2C_TransferConfig>
 80021aa:	e066      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	8979      	ldrh	r1, [r7, #10]
 80021b4:	4b48      	ldr	r3, [pc, #288]	@ (80022d8 <HAL_I2C_Master_Transmit+0x228>)
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f001 fc4a 	bl	8003a54 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80021c0:	e05b      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	6a39      	ldr	r1, [r7, #32]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f001 fa4e 	bl	8003668 <I2C_WaitOnTXISFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e07b      	b.n	80022ce <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021da:	781a      	ldrb	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d034      	beq.n	800227a <HAL_I2C_Master_Transmit+0x1ca>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	d130      	bne.n	800227a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	2200      	movs	r2, #0
 8002220:	2180      	movs	r1, #128	@ 0x80
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f001 f9c7 	bl	80035b6 <I2C_WaitOnFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e04d      	b.n	80022ce <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002236:	b29b      	uxth	r3, r3
 8002238:	2bff      	cmp	r3, #255	@ 0xff
 800223a:	d90e      	bls.n	800225a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	22ff      	movs	r2, #255	@ 0xff
 8002240:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002246:	b2da      	uxtb	r2, r3
 8002248:	8979      	ldrh	r1, [r7, #10]
 800224a:	2300      	movs	r3, #0
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f001 fbfe 	bl	8003a54 <I2C_TransferConfig>
 8002258:	e00f      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002268:	b2da      	uxtb	r2, r3
 800226a:	8979      	ldrh	r1, [r7, #10]
 800226c:	2300      	movs	r3, #0
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f001 fbed 	bl	8003a54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d19e      	bne.n	80021c2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	6a39      	ldr	r1, [r7, #32]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f001 fa34 	bl	80036f6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e01a      	b.n	80022ce <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2220      	movs	r2, #32
 800229e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <HAL_I2C_Master_Transmit+0x22c>)
 80022ac:	400b      	ands	r3, r1
 80022ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	80002000 	.word	0x80002000
 80022dc:	fe00e800 	.word	0xfe00e800

080022e0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	461a      	mov	r2, r3
 80022ec:	460b      	mov	r3, r1
 80022ee:	817b      	strh	r3, [r7, #10]
 80022f0:	4613      	mov	r3, r2
 80022f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	f040 80db 	bne.w	80024b8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_I2C_Master_Receive+0x30>
 800230c:	2302      	movs	r3, #2
 800230e:	e0d4      	b.n	80024ba <HAL_I2C_Master_Receive+0x1da>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002318:	f7ff fb06 	bl	8001928 <HAL_GetTick>
 800231c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2319      	movs	r3, #25
 8002324:	2201      	movs	r2, #1
 8002326:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f001 f943 	bl	80035b6 <I2C_WaitOnFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0bf      	b.n	80024ba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2222      	movs	r2, #34	@ 0x22
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2210      	movs	r2, #16
 8002346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	893a      	ldrh	r2, [r7, #8]
 800235a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	2bff      	cmp	r3, #255	@ 0xff
 800236a:	d90e      	bls.n	800238a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2201      	movs	r2, #1
 8002370:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002376:	b2da      	uxtb	r2, r3
 8002378:	8979      	ldrh	r1, [r7, #10]
 800237a:	4b52      	ldr	r3, [pc, #328]	@ (80024c4 <HAL_I2C_Master_Receive+0x1e4>)
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f001 fb66 	bl	8003a54 <I2C_TransferConfig>
 8002388:	e06d      	b.n	8002466 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002398:	b2da      	uxtb	r2, r3
 800239a:	8979      	ldrh	r1, [r7, #10]
 800239c:	4b49      	ldr	r3, [pc, #292]	@ (80024c4 <HAL_I2C_Master_Receive+0x1e4>)
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f001 fb55 	bl	8003a54 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80023aa:	e05c      	b.n	8002466 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	6a39      	ldr	r1, [r7, #32]
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f001 f9e3 	bl	800377c <I2C_WaitOnRXNEFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e07c      	b.n	80024ba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d034      	beq.n	8002466 <HAL_I2C_Master_Receive+0x186>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002400:	2b00      	cmp	r3, #0
 8002402:	d130      	bne.n	8002466 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	2200      	movs	r2, #0
 800240c:	2180      	movs	r1, #128	@ 0x80
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f001 f8d1 	bl	80035b6 <I2C_WaitOnFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e04d      	b.n	80024ba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002422:	b29b      	uxth	r3, r3
 8002424:	2bff      	cmp	r3, #255	@ 0xff
 8002426:	d90e      	bls.n	8002446 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	22ff      	movs	r2, #255	@ 0xff
 800242c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002432:	b2da      	uxtb	r2, r3
 8002434:	8979      	ldrh	r1, [r7, #10]
 8002436:	2300      	movs	r3, #0
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f001 fb08 	bl	8003a54 <I2C_TransferConfig>
 8002444:	e00f      	b.n	8002466 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002454:	b2da      	uxtb	r2, r3
 8002456:	8979      	ldrh	r1, [r7, #10]
 8002458:	2300      	movs	r3, #0
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f001 faf7 	bl	8003a54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d19d      	bne.n	80023ac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	6a39      	ldr	r1, [r7, #32]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f001 f93e 	bl	80036f6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e01a      	b.n	80024ba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2220      	movs	r2, #32
 800248a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6859      	ldr	r1, [r3, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <HAL_I2C_Master_Receive+0x1e8>)
 8002498:	400b      	ands	r3, r1
 800249a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	80002400 	.word	0x80002400
 80024c8:	fe00e800 	.word	0xfe00e800

080024cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	461a      	mov	r2, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	817b      	strh	r3, [r7, #10]
 80024de:	460b      	mov	r3, r1
 80024e0:	813b      	strh	r3, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	f040 80f9 	bne.w	80026e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_I2C_Mem_Write+0x34>
 80024fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002506:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0ed      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_I2C_Mem_Write+0x4e>
 8002516:	2302      	movs	r3, #2
 8002518:	e0e6      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002522:	f7ff fa01 	bl	8001928 <HAL_GetTick>
 8002526:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2319      	movs	r3, #25
 800252e:	2201      	movs	r2, #1
 8002530:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f001 f83e 	bl	80035b6 <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0d1      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2221      	movs	r2, #33	@ 0x21
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2240      	movs	r2, #64	@ 0x40
 8002550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a3a      	ldr	r2, [r7, #32]
 800255e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002564:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800256c:	88f8      	ldrh	r0, [r7, #6]
 800256e:	893a      	ldrh	r2, [r7, #8]
 8002570:	8979      	ldrh	r1, [r7, #10]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	4603      	mov	r3, r0
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fb81 	bl	8002c84 <I2C_RequestMemoryWrite>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0a9      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	2bff      	cmp	r3, #255	@ 0xff
 800259c:	d90e      	bls.n	80025bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	22ff      	movs	r2, #255	@ 0xff
 80025a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	8979      	ldrh	r1, [r7, #10]
 80025ac:	2300      	movs	r3, #0
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f001 fa4d 	bl	8003a54 <I2C_TransferConfig>
 80025ba:	e00f      	b.n	80025dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	8979      	ldrh	r1, [r7, #10]
 80025ce:	2300      	movs	r3, #0
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f001 fa3c 	bl	8003a54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f001 f841 	bl	8003668 <I2C_WaitOnTXISFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e07b      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d034      	beq.n	8002694 <HAL_I2C_Mem_Write+0x1c8>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262e:	2b00      	cmp	r3, #0
 8002630:	d130      	bne.n	8002694 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002638:	2200      	movs	r2, #0
 800263a:	2180      	movs	r1, #128	@ 0x80
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 ffba 	bl	80035b6 <I2C_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e04d      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	2bff      	cmp	r3, #255	@ 0xff
 8002654:	d90e      	bls.n	8002674 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	22ff      	movs	r2, #255	@ 0xff
 800265a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002660:	b2da      	uxtb	r2, r3
 8002662:	8979      	ldrh	r1, [r7, #10]
 8002664:	2300      	movs	r3, #0
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f001 f9f1 	bl	8003a54 <I2C_TransferConfig>
 8002672:	e00f      	b.n	8002694 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002682:	b2da      	uxtb	r2, r3
 8002684:	8979      	ldrh	r1, [r7, #10]
 8002686:	2300      	movs	r3, #0
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f001 f9e0 	bl	8003a54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d19e      	bne.n	80025dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f001 f827 	bl	80036f6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e01a      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2220      	movs	r2, #32
 80026b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <HAL_I2C_Mem_Write+0x224>)
 80026c6:	400b      	ands	r3, r1
 80026c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
  }
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	fe00e800 	.word	0xfe00e800

080026f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	4608      	mov	r0, r1
 80026fe:	4611      	mov	r1, r2
 8002700:	461a      	mov	r2, r3
 8002702:	4603      	mov	r3, r0
 8002704:	817b      	strh	r3, [r7, #10]
 8002706:	460b      	mov	r3, r1
 8002708:	813b      	strh	r3, [r7, #8]
 800270a:	4613      	mov	r3, r2
 800270c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	f040 80fd 	bne.w	8002916 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_I2C_Mem_Read+0x34>
 8002722:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002724:	2b00      	cmp	r3, #0
 8002726:	d105      	bne.n	8002734 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800272e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0f1      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_I2C_Mem_Read+0x4e>
 800273e:	2302      	movs	r3, #2
 8002740:	e0ea      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800274a:	f7ff f8ed 	bl	8001928 <HAL_GetTick>
 800274e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2319      	movs	r3, #25
 8002756:	2201      	movs	r2, #1
 8002758:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 ff2a 	bl	80035b6 <I2C_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0d5      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2222      	movs	r2, #34	@ 0x22
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2240      	movs	r2, #64	@ 0x40
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800278c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002794:	88f8      	ldrh	r0, [r7, #6]
 8002796:	893a      	ldrh	r2, [r7, #8]
 8002798:	8979      	ldrh	r1, [r7, #10]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	4603      	mov	r3, r0
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fac1 	bl	8002d2c <I2C_RequestMemoryRead>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0ad      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2bff      	cmp	r3, #255	@ 0xff
 80027c4:	d90e      	bls.n	80027e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	8979      	ldrh	r1, [r7, #10]
 80027d4:	4b52      	ldr	r3, [pc, #328]	@ (8002920 <HAL_I2C_Mem_Read+0x22c>)
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f001 f939 	bl	8003a54 <I2C_TransferConfig>
 80027e2:	e00f      	b.n	8002804 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	8979      	ldrh	r1, [r7, #10]
 80027f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002920 <HAL_I2C_Mem_Read+0x22c>)
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f001 f928 	bl	8003a54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280a:	2200      	movs	r2, #0
 800280c:	2104      	movs	r1, #4
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fed1 	bl	80035b6 <I2C_WaitOnFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e07c      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d034      	beq.n	80028c4 <HAL_I2C_Mem_Read+0x1d0>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285e:	2b00      	cmp	r3, #0
 8002860:	d130      	bne.n	80028c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002868:	2200      	movs	r2, #0
 800286a:	2180      	movs	r1, #128	@ 0x80
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fea2 	bl	80035b6 <I2C_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e04d      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	2bff      	cmp	r3, #255	@ 0xff
 8002884:	d90e      	bls.n	80028a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002890:	b2da      	uxtb	r2, r3
 8002892:	8979      	ldrh	r1, [r7, #10]
 8002894:	2300      	movs	r3, #0
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f001 f8d9 	bl	8003a54 <I2C_TransferConfig>
 80028a2:	e00f      	b.n	80028c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	8979      	ldrh	r1, [r7, #10]
 80028b6:	2300      	movs	r3, #0
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f001 f8c8 	bl	8003a54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d19a      	bne.n	8002804 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 ff0f 	bl	80036f6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e01a      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2220      	movs	r2, #32
 80028e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002924 <HAL_I2C_Mem_Read+0x230>)
 80028f6:	400b      	ands	r3, r1
 80028f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
  }
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	80002400 	.word	0x80002400
 8002924:	fe00e800 	.word	0xfe00e800

08002928 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	68f9      	ldr	r1, [r7, #12]
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
  }
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00f      	beq.n	800299e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298c:	f043 0201 	orr.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800299c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00f      	beq.n	80029c8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	f043 0208 	orr.w	r2, r3, #8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029c6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00f      	beq.n	80029f2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e0:	f043 0202 	orr.w	r2, r3, #2
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029f0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 030b 	and.w	r3, r3, #11
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002a02:	68f9      	ldr	r1, [r7, #12]
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fc7d 	bl	8003304 <I2C_ITError>
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	460b      	mov	r3, r1
 8002a44:	70fb      	strb	r3, [r7, #3]
 8002a46:	4613      	mov	r3, r2
 8002a48:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <I2C_Slave_ISR_IT+0x24>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e0e2      	b.n	8002c7c <I2C_Slave_ISR_IT+0x1ea>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d009      	beq.n	8002adc <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d004      	beq.n	8002adc <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002ad2:	6939      	ldr	r1, [r7, #16]
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fa5d 	bl	8002f94 <I2C_ITSlaveCplt>
 8002ada:	e0ca      	b.n	8002c72 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d04b      	beq.n	8002b7e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d046      	beq.n	8002b7e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d128      	bne.n	8002b4c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b28      	cmp	r3, #40	@ 0x28
 8002b04:	d108      	bne.n	8002b18 <I2C_Slave_ISR_IT+0x86>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b0c:	d104      	bne.n	8002b18 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b0e:	6939      	ldr	r1, [r7, #16]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fba3 	bl	800325c <I2C_ITListenCplt>
 8002b16:	e031      	b.n	8002b7c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b29      	cmp	r3, #41	@ 0x29
 8002b22:	d10e      	bne.n	8002b42 <I2C_Slave_ISR_IT+0xb0>
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b2a:	d00a      	beq.n	8002b42 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2210      	movs	r2, #16
 8002b32:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fcfc 	bl	8003532 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f9ce 	bl	8002edc <I2C_ITSlaveSeqCplt>
 8002b40:	e01c      	b.n	8002b7c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2210      	movs	r2, #16
 8002b48:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002b4a:	e08f      	b.n	8002c6c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2210      	movs	r2, #16
 8002b52:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b58:	f043 0204 	orr.w	r2, r3, #4
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <I2C_Slave_ISR_IT+0xdc>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b6c:	d17e      	bne.n	8002c6c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	4619      	mov	r1, r3
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 fbc5 	bl	8003304 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002b7a:	e077      	b.n	8002c6c <I2C_Slave_ISR_IT+0x1da>
 8002b7c:	e076      	b.n	8002c6c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d02f      	beq.n	8002be8 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d02a      	beq.n	8002be8 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d018      	beq.n	8002bce <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d14b      	bne.n	8002c70 <I2C_Slave_ISR_IT+0x1de>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bde:	d047      	beq.n	8002c70 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f97b 	bl	8002edc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002be6:	e043      	b.n	8002c70 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d004      	beq.n	8002c06 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002bfc:	6939      	ldr	r1, [r7, #16]
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 f8e8 	bl	8002dd4 <I2C_ITAddrCplt>
 8002c04:	e035      	b.n	8002c72 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d030      	beq.n	8002c72 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d02b      	beq.n	8002c72 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d018      	beq.n	8002c56 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002c54:	e00d      	b.n	8002c72 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c5c:	d002      	beq.n	8002c64 <I2C_Slave_ISR_IT+0x1d2>
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d106      	bne.n	8002c72 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f939 	bl	8002edc <I2C_ITSlaveSeqCplt>
 8002c6a:	e002      	b.n	8002c72 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002c6c:	bf00      	nop
 8002c6e:	e000      	b.n	8002c72 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002c70:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	4608      	mov	r0, r1
 8002c8e:	4611      	mov	r1, r2
 8002c90:	461a      	mov	r2, r3
 8002c92:	4603      	mov	r3, r0
 8002c94:	817b      	strh	r3, [r7, #10]
 8002c96:	460b      	mov	r3, r1
 8002c98:	813b      	strh	r3, [r7, #8]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	8979      	ldrh	r1, [r7, #10]
 8002ca4:	4b20      	ldr	r3, [pc, #128]	@ (8002d28 <I2C_RequestMemoryWrite+0xa4>)
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fed1 	bl	8003a54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	69b9      	ldr	r1, [r7, #24]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fcd6 	bl	8003668 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e02c      	b.n	8002d20 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d105      	bne.n	8002cd8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ccc:	893b      	ldrh	r3, [r7, #8]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cd6:	e015      	b.n	8002d04 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cd8:	893b      	ldrh	r3, [r7, #8]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	69b9      	ldr	r1, [r7, #24]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fcbc 	bl	8003668 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e012      	b.n	8002d20 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cfa:	893b      	ldrh	r3, [r7, #8]
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2180      	movs	r1, #128	@ 0x80
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fc51 	bl	80035b6 <I2C_WaitOnFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	80002000 	.word	0x80002000

08002d2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	817b      	strh	r3, [r7, #10]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	813b      	strh	r3, [r7, #8]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	8979      	ldrh	r1, [r7, #10]
 8002d4c:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <I2C_RequestMemoryRead+0xa4>)
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	2300      	movs	r3, #0
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fe7e 	bl	8003a54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	69b9      	ldr	r1, [r7, #24]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fc83 	bl	8003668 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e02c      	b.n	8002dc6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d105      	bne.n	8002d7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d72:	893b      	ldrh	r3, [r7, #8]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d7c:	e015      	b.n	8002daa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d7e:	893b      	ldrh	r3, [r7, #8]
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	69b9      	ldr	r1, [r7, #24]
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 fc69 	bl	8003668 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e012      	b.n	8002dc6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002da0:	893b      	ldrh	r3, [r7, #8]
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2200      	movs	r2, #0
 8002db2:	2140      	movs	r1, #64	@ 0x40
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fbfe 	bl	80035b6 <I2C_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	80002000 	.word	0x80002000

08002dd4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002dea:	2b28      	cmp	r3, #40	@ 0x28
 8002dec:	d16a      	bne.n	8002ec4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002e0c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e1a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002e28:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d138      	bne.n	8002ea4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002e32:	897b      	ldrh	r3, [r7, #10]
 8002e34:	09db      	lsrs	r3, r3, #7
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	89bb      	ldrh	r3, [r7, #12]
 8002e3a:	4053      	eors	r3, r2
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f003 0306 	and.w	r3, r3, #6
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d11c      	bne.n	8002e80 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002e46:	897b      	ldrh	r3, [r7, #10]
 8002e48:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d13b      	bne.n	8002ed4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2208      	movs	r2, #8
 8002e68:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e72:	89ba      	ldrh	r2, [r7, #12]
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	4619      	mov	r1, r3
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff fdde 	bl	8002a3a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e7e:	e029      	b.n	8002ed4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002e80:	893b      	ldrh	r3, [r7, #8]
 8002e82:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fe15 	bl	8003ab8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e96:	89ba      	ldrh	r2, [r7, #12]
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff fdcc 	bl	8002a3a <HAL_I2C_AddrCallback>
}
 8002ea2:	e017      	b.n	8002ed4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ea4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fe05 	bl	8003ab8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002eb6:	89ba      	ldrh	r2, [r7, #12]
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fdbc 	bl	8002a3a <HAL_I2C_AddrCallback>
}
 8002ec2:	e007      	b.n	8002ed4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2208      	movs	r2, #8
 8002eca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e00c      	b.n	8002f2a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d007      	beq.n	8002f2a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f28:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b29      	cmp	r3, #41	@ 0x29
 8002f34:	d112      	bne.n	8002f5c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2228      	movs	r2, #40	@ 0x28
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2221      	movs	r2, #33	@ 0x21
 8002f42:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f44:	2101      	movs	r1, #1
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fdb6 	bl	8003ab8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff fd5c 	bl	8002a12 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f5a:	e017      	b.n	8002f8c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f66:	d111      	bne.n	8002f8c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2228      	movs	r2, #40	@ 0x28
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2222      	movs	r2, #34	@ 0x22
 8002f74:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f76:	2102      	movs	r1, #2
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fd9d 	bl	8003ab8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff fd4d 	bl	8002a26 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fae:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fc0:	7afb      	ldrb	r3, [r7, #11]
 8002fc2:	2b21      	cmp	r3, #33	@ 0x21
 8002fc4:	d002      	beq.n	8002fcc <I2C_ITSlaveCplt+0x38>
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	2b29      	cmp	r3, #41	@ 0x29
 8002fca:	d108      	bne.n	8002fde <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002fcc:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fd71 	bl	8003ab8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2221      	movs	r2, #33	@ 0x21
 8002fda:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fdc:	e019      	b.n	8003012 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002fde:	7afb      	ldrb	r3, [r7, #11]
 8002fe0:	2b22      	cmp	r3, #34	@ 0x22
 8002fe2:	d002      	beq.n	8002fea <I2C_ITSlaveCplt+0x56>
 8002fe4:	7afb      	ldrb	r3, [r7, #11]
 8002fe6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fe8:	d108      	bne.n	8002ffc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002fea:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fd62 	bl	8003ab8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2222      	movs	r2, #34	@ 0x22
 8002ff8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ffa:	e00a      	b.n	8003012 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002ffc:	7afb      	ldrb	r3, [r7, #11]
 8002ffe:	2b28      	cmp	r3, #40	@ 0x28
 8003000:	d107      	bne.n	8003012 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003002:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fd56 	bl	8003ab8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003020:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b89      	ldr	r3, [pc, #548]	@ (8003254 <I2C_ITSlaveCplt+0x2c0>)
 800302e:	400b      	ands	r3, r1
 8003030:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fa7d 	bl	8003532 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d013      	beq.n	800306a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003050:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003056:	2b00      	cmp	r3, #0
 8003058:	d01f      	beq.n	800309a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	b29a      	uxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003068:	e017      	b.n	800309a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d012      	beq.n	800309a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003082:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d006      	beq.n	800309a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	b29a      	uxth	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f023 0304 	bic.w	r3, r3, #4
 80030aa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00c      	beq.n	80030e6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f4:	f043 0204 	orr.w	r2, r3, #4
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b00      	cmp	r3, #0
 8003104:	d049      	beq.n	800319a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800310c:	2b00      	cmp	r3, #0
 800310e:	d044      	beq.n	800319a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d128      	bne.n	800316c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b28      	cmp	r3, #40	@ 0x28
 8003124:	d108      	bne.n	8003138 <I2C_ITSlaveCplt+0x1a4>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800312c:	d104      	bne.n	8003138 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800312e:	6979      	ldr	r1, [r7, #20]
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f893 	bl	800325c <I2C_ITListenCplt>
 8003136:	e030      	b.n	800319a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b29      	cmp	r3, #41	@ 0x29
 8003142:	d10e      	bne.n	8003162 <I2C_ITSlaveCplt+0x1ce>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800314a:	d00a      	beq.n	8003162 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2210      	movs	r2, #16
 8003152:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f9ec 	bl	8003532 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff febe 	bl	8002edc <I2C_ITSlaveSeqCplt>
 8003160:	e01b      	b.n	800319a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2210      	movs	r2, #16
 8003168:	61da      	str	r2, [r3, #28]
 800316a:	e016      	b.n	800319a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2210      	movs	r2, #16
 8003172:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003178:	f043 0204 	orr.w	r2, r3, #4
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <I2C_ITSlaveCplt+0x1fa>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800318c:	d105      	bne.n	800319a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f8b5 	bl	8003304 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d010      	beq.n	80031d2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f8a4 	bl	8003304 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b28      	cmp	r3, #40	@ 0x28
 80031c6:	d141      	bne.n	800324c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80031c8:	6979      	ldr	r1, [r7, #20]
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f846 	bl	800325c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031d0:	e03c      	b.n	800324c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031da:	d014      	beq.n	8003206 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff fe7d 	bl	8002edc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003258 <I2C_ITSlaveCplt+0x2c4>)
 80031e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff fc29 	bl	8002a56 <HAL_I2C_ListenCpltCallback>
}
 8003204:	e022      	b.n	800324c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b22      	cmp	r3, #34	@ 0x22
 8003210:	d10e      	bne.n	8003230 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff fbfc 	bl	8002a26 <HAL_I2C_SlaveRxCpltCallback>
}
 800322e:	e00d      	b.n	800324c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff fbe3 	bl	8002a12 <HAL_I2C_SlaveTxCpltCallback>
}
 800324c:	bf00      	nop
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	fe00e800 	.word	0xfe00e800
 8003258:	ffff0000 	.word	0xffff0000

0800325c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a25      	ldr	r2, [pc, #148]	@ (8003300 <I2C_ITListenCplt+0xa4>)
 800326a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	d022      	beq.n	80032d8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d012      	beq.n	80032d8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d0:	f043 0204 	orr.w	r2, r3, #4
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032d8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fbeb 	bl	8003ab8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2210      	movs	r2, #16
 80032e8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff fbaf 	bl	8002a56 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	ffff0000 	.word	0xffff0000

08003304 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003314:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a6d      	ldr	r2, [pc, #436]	@ (80034d8 <I2C_ITError+0x1d4>)
 8003322:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	2b28      	cmp	r3, #40	@ 0x28
 800333a:	d005      	beq.n	8003348 <I2C_ITError+0x44>
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b29      	cmp	r3, #41	@ 0x29
 8003340:	d002      	beq.n	8003348 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	2b2a      	cmp	r3, #42	@ 0x2a
 8003346:	d10b      	bne.n	8003360 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003348:	2103      	movs	r1, #3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fbb4 	bl	8003ab8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2228      	movs	r2, #40	@ 0x28
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a60      	ldr	r2, [pc, #384]	@ (80034dc <I2C_ITError+0x1d8>)
 800335c:	635a      	str	r2, [r3, #52]	@ 0x34
 800335e:	e030      	b.n	80033c2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003360:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fba7 	bl	8003ab8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f8e1 	bl	8003532 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b60      	cmp	r3, #96	@ 0x60
 800337a:	d01f      	beq.n	80033bc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b20      	cmp	r3, #32
 8003390:	d114      	bne.n	80033bc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b10      	cmp	r3, #16
 800339e:	d109      	bne.n	80033b4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2210      	movs	r2, #16
 80033a6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ac:	f043 0204 	orr.w	r2, r3, #4
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2220      	movs	r2, #32
 80033ba:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d039      	beq.n	8003444 <I2C_ITError+0x140>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b11      	cmp	r3, #17
 80033d4:	d002      	beq.n	80033dc <I2C_ITError+0xd8>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b21      	cmp	r3, #33	@ 0x21
 80033da:	d133      	bne.n	8003444 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033ea:	d107      	bne.n	80033fc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80033fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe fbf4 	bl	8001bee <HAL_DMA_GetState>
 8003406:	4603      	mov	r3, r0
 8003408:	2b01      	cmp	r3, #1
 800340a:	d017      	beq.n	800343c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003410:	4a33      	ldr	r2, [pc, #204]	@ (80034e0 <I2C_ITError+0x1dc>)
 8003412:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe fbc2 	bl	8001baa <HAL_DMA_Abort_IT>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d04d      	beq.n	80034c8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003436:	4610      	mov	r0, r2
 8003438:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800343a:	e045      	b.n	80034c8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f851 	bl	80034e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003442:	e041      	b.n	80034c8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d039      	beq.n	80034c0 <I2C_ITError+0x1bc>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b12      	cmp	r3, #18
 8003450:	d002      	beq.n	8003458 <I2C_ITError+0x154>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b22      	cmp	r3, #34	@ 0x22
 8003456:	d133      	bne.n	80034c0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003462:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003466:	d107      	bne.n	8003478 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003476:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347c:	4618      	mov	r0, r3
 800347e:	f7fe fbb6 	bl	8001bee <HAL_DMA_GetState>
 8003482:	4603      	mov	r3, r0
 8003484:	2b01      	cmp	r3, #1
 8003486:	d017      	beq.n	80034b8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348c:	4a14      	ldr	r2, [pc, #80]	@ (80034e0 <I2C_ITError+0x1dc>)
 800348e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe fb84 	bl	8001baa <HAL_DMA_Abort_IT>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d011      	beq.n	80034cc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034b2:	4610      	mov	r0, r2
 80034b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034b6:	e009      	b.n	80034cc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f813 	bl	80034e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034be:	e005      	b.n	80034cc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f80f 	bl	80034e4 <I2C_TreatErrorCallback>
  }
}
 80034c6:	e002      	b.n	80034ce <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034c8:	bf00      	nop
 80034ca:	e000      	b.n	80034ce <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034cc:	bf00      	nop
}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	ffff0000 	.word	0xffff0000
 80034dc:	08002a93 	.word	0x08002a93
 80034e0:	0800357b 	.word	0x0800357b

080034e4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b60      	cmp	r3, #96	@ 0x60
 80034f6:	d10e      	bne.n	8003516 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff fab5 	bl	8002a7e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003514:	e009      	b.n	800352a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff faa0 	bl	8002a6a <HAL_I2C_ErrorCallback>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b02      	cmp	r3, #2
 8003546:	d103      	bne.n	8003550 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2200      	movs	r2, #0
 800354e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b01      	cmp	r3, #1
 800355c:	d007      	beq.n	800356e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	619a      	str	r2, [r3, #24]
  }
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003594:	2200      	movs	r2, #0
 8003596:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a4:	2200      	movs	r2, #0
 80035a6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f7ff ff9b 	bl	80034e4 <I2C_TreatErrorCallback>
}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4613      	mov	r3, r2
 80035c4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c6:	e03b      	b.n	8003640 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	6839      	ldr	r1, [r7, #0]
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 f961 	bl	8003894 <I2C_IsErrorOccurred>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e041      	b.n	8003660 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035e2:	d02d      	beq.n	8003640 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e4:	f7fe f9a0 	bl	8001928 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d302      	bcc.n	80035fa <I2C_WaitOnFlagUntilTimeout+0x44>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d122      	bne.n	8003640 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4013      	ands	r3, r2
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	bf0c      	ite	eq
 800360a:	2301      	moveq	r3, #1
 800360c:	2300      	movne	r3, #0
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	429a      	cmp	r2, r3
 8003616:	d113      	bne.n	8003640 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361c:	f043 0220 	orr.w	r2, r3, #32
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e00f      	b.n	8003660 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4013      	ands	r3, r2
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	429a      	cmp	r2, r3
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	429a      	cmp	r2, r3
 800365c:	d0b4      	beq.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003674:	e033      	b.n	80036de <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f90a 	bl	8003894 <I2C_IsErrorOccurred>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e031      	b.n	80036ee <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003690:	d025      	beq.n	80036de <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003692:	f7fe f949 	bl	8001928 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d302      	bcc.n	80036a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d11a      	bne.n	80036de <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d013      	beq.n	80036de <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ba:	f043 0220 	orr.w	r2, r3, #32
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e007      	b.n	80036ee <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d1c4      	bne.n	8003676 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003702:	e02f      	b.n	8003764 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f8c3 	bl	8003894 <I2C_IsErrorOccurred>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e02d      	b.n	8003774 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003718:	f7fe f906 	bl	8001928 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	429a      	cmp	r2, r3
 8003726:	d302      	bcc.n	800372e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d11a      	bne.n	8003764 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b20      	cmp	r3, #32
 800373a:	d013      	beq.n	8003764 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003740:	f043 0220 	orr.w	r2, r3, #32
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e007      	b.n	8003774 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b20      	cmp	r3, #32
 8003770:	d1c8      	bne.n	8003704 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800378c:	e071      	b.n	8003872 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f87e 	bl	8003894 <I2C_IsErrorOccurred>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d13b      	bne.n	8003828 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d138      	bne.n	8003828 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d105      	bne.n	80037d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d121      	bne.n	8003822 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2210      	movs	r2, #16
 80037e4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2204      	movs	r2, #4
 80037ea:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2220      	movs	r2, #32
 80037f2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6859      	ldr	r1, [r3, #4]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4b24      	ldr	r3, [pc, #144]	@ (8003890 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003800:	400b      	ands	r3, r1
 8003802:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	75fb      	strb	r3, [r7, #23]
 8003820:	e002      	b.n	8003828 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003828:	f7fe f87e 	bl	8001928 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	429a      	cmp	r2, r3
 8003836:	d302      	bcc.n	800383e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d119      	bne.n	8003872 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800383e:	7dfb      	ldrb	r3, [r7, #23]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d116      	bne.n	8003872 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b04      	cmp	r3, #4
 8003850:	d00f      	beq.n	8003872 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003856:	f043 0220 	orr.w	r2, r3, #32
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b04      	cmp	r3, #4
 800387e:	d002      	beq.n	8003886 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003880:	7dfb      	ldrb	r3, [r7, #23]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d083      	beq.n	800378e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003886:	7dfb      	ldrb	r3, [r7, #23]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	fe00e800 	.word	0xfe00e800

08003894 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	@ 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038ae:	2300      	movs	r3, #0
 80038b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d068      	beq.n	8003992 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2210      	movs	r2, #16
 80038c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038c8:	e049      	b.n	800395e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038d0:	d045      	beq.n	800395e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038d2:	f7fe f829 	bl	8001928 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d302      	bcc.n	80038e8 <I2C_IsErrorOccurred+0x54>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d13a      	bne.n	800395e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800390a:	d121      	bne.n	8003950 <I2C_IsErrorOccurred+0xbc>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003912:	d01d      	beq.n	8003950 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	2b20      	cmp	r3, #32
 8003918:	d01a      	beq.n	8003950 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003928:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800392a:	f7fd fffd 	bl	8001928 <HAL_GetTick>
 800392e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003930:	e00e      	b.n	8003950 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003932:	f7fd fff9 	bl	8001928 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b19      	cmp	r3, #25
 800393e:	d907      	bls.n	8003950 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	f043 0320 	orr.w	r3, r3, #32
 8003946:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800394e:	e006      	b.n	800395e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b20      	cmp	r3, #32
 800395c:	d1e9      	bne.n	8003932 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b20      	cmp	r3, #32
 800396a:	d003      	beq.n	8003974 <I2C_IsErrorOccurred+0xe0>
 800396c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0aa      	beq.n	80038ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003978:	2b00      	cmp	r3, #0
 800397a:	d103      	bne.n	8003984 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2220      	movs	r2, #32
 8003982:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00b      	beq.n	80039bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	f043 0308 	orr.w	r3, r3, #8
 80039cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00b      	beq.n	8003a00 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	f043 0302 	orr.w	r3, r3, #2
 80039ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01c      	beq.n	8003a42 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f7ff fd92 	bl	8003532 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b0d      	ldr	r3, [pc, #52]	@ (8003a50 <I2C_IsErrorOccurred+0x1bc>)
 8003a1a:	400b      	ands	r3, r1
 8003a1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3728      	adds	r7, #40	@ 0x28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	fe00e800 	.word	0xfe00e800

08003a54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	817b      	strh	r3, [r7, #10]
 8003a62:	4613      	mov	r3, r2
 8003a64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a66:	897b      	ldrh	r3, [r7, #10]
 8003a68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a6c:	7a7b      	ldrb	r3, [r7, #9]
 8003a6e:	041b      	lsls	r3, r3, #16
 8003a70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a74:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a82:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	0d5b      	lsrs	r3, r3, #21
 8003a8e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003a92:	4b08      	ldr	r3, [pc, #32]	@ (8003ab4 <I2C_TransferConfig+0x60>)
 8003a94:	430b      	orrs	r3, r1
 8003a96:	43db      	mvns	r3, r3
 8003a98:	ea02 0103 	and.w	r1, r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	03ff63ff 	.word	0x03ff63ff

08003ab8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ac8:	887b      	ldrh	r3, [r7, #2]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00f      	beq.n	8003af2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003ad8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ae6:	2b28      	cmp	r3, #40	@ 0x28
 8003ae8:	d003      	beq.n	8003af2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003af0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003af2:	887b      	ldrh	r3, [r7, #2]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00f      	beq.n	8003b1c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003b02:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b10:	2b28      	cmp	r3, #40	@ 0x28
 8003b12:	d003      	beq.n	8003b1c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003b1a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	da03      	bge.n	8003b2c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003b2a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b2c:	887b      	ldrh	r3, [r7, #2]
 8003b2e:	2b10      	cmp	r3, #16
 8003b30:	d103      	bne.n	8003b3a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003b38:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b3a:	887b      	ldrh	r3, [r7, #2]
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d103      	bne.n	8003b48 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f043 0320 	orr.w	r3, r3, #32
 8003b46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b48:	887b      	ldrh	r3, [r7, #2]
 8003b4a:	2b40      	cmp	r3, #64	@ 0x40
 8003b4c:	d103      	bne.n	8003b56 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b54:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6819      	ldr	r1, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	43da      	mvns	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	400a      	ands	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d138      	bne.n	8003bfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e032      	b.n	8003bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2224      	movs	r2, #36	@ 0x24
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0201 	bic.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	e000      	b.n	8003bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
  }
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	d139      	bne.n	8003c94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e033      	b.n	8003c96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2224      	movs	r2, #36	@ 0x24
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e000      	b.n	8003c96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c94:	2302      	movs	r3, #2
  }
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca8:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a04      	ldr	r2, [pc, #16]	@ (8003cc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb2:	6013      	str	r3, [r2, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40007000 	.word	0x40007000

08003cc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e291      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8087 	beq.w	8003df6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce8:	4b96      	ldr	r3, [pc, #600]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d00c      	beq.n	8003d0e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf4:	4b93      	ldr	r3, [pc, #588]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 030c 	and.w	r3, r3, #12
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d112      	bne.n	8003d26 <HAL_RCC_OscConfig+0x62>
 8003d00:	4b90      	ldr	r3, [pc, #576]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d0c:	d10b      	bne.n	8003d26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0e:	4b8d      	ldr	r3, [pc, #564]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d06c      	beq.n	8003df4 <HAL_RCC_OscConfig+0x130>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d168      	bne.n	8003df4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e26b      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d2e:	d106      	bne.n	8003d3e <HAL_RCC_OscConfig+0x7a>
 8003d30:	4b84      	ldr	r3, [pc, #528]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a83      	ldr	r2, [pc, #524]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	e02e      	b.n	8003d9c <HAL_RCC_OscConfig+0xd8>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x9c>
 8003d46:	4b7f      	ldr	r3, [pc, #508]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	4b7c      	ldr	r3, [pc, #496]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a7b      	ldr	r2, [pc, #492]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	e01d      	b.n	8003d9c <HAL_RCC_OscConfig+0xd8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d68:	d10c      	bne.n	8003d84 <HAL_RCC_OscConfig+0xc0>
 8003d6a:	4b76      	ldr	r3, [pc, #472]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a75      	ldr	r2, [pc, #468]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	4b73      	ldr	r3, [pc, #460]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a72      	ldr	r2, [pc, #456]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	e00b      	b.n	8003d9c <HAL_RCC_OscConfig+0xd8>
 8003d84:	4b6f      	ldr	r3, [pc, #444]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a6e      	ldr	r2, [pc, #440]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	4b6c      	ldr	r3, [pc, #432]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a6b      	ldr	r2, [pc, #428]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d013      	beq.n	8003dcc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fd fdc0 	bl	8001928 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dac:	f7fd fdbc 	bl	8001928 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	@ 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e21f      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b61      	ldr	r3, [pc, #388]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0xe8>
 8003dca:	e014      	b.n	8003df6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fd fdac 	bl	8001928 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd4:	f7fd fda8 	bl	8001928 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b64      	cmp	r3, #100	@ 0x64
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e20b      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de6:	4b57      	ldr	r3, [pc, #348]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x110>
 8003df2:	e000      	b.n	8003df6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d069      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e02:	4b50      	ldr	r3, [pc, #320]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0e:	4b4d      	ldr	r3, [pc, #308]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d11c      	bne.n	8003e54 <HAL_RCC_OscConfig+0x190>
 8003e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d116      	bne.n	8003e54 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e26:	4b47      	ldr	r3, [pc, #284]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d005      	beq.n	8003e3e <HAL_RCC_OscConfig+0x17a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d001      	beq.n	8003e3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e1df      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3e:	4b41      	ldr	r3, [pc, #260]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	493d      	ldr	r1, [pc, #244]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e52:	e040      	b.n	8003ed6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d023      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e5c:	4b39      	ldr	r3, [pc, #228]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a38      	ldr	r2, [pc, #224]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fd fd5e 	bl	8001928 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e70:	f7fd fd5a 	bl	8001928 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e1bd      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e82:	4b30      	ldr	r3, [pc, #192]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4929      	ldr	r1, [pc, #164]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
 8003ea2:	e018      	b.n	8003ed6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea4:	4b27      	ldr	r3, [pc, #156]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a26      	ldr	r2, [pc, #152]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003eaa:	f023 0301 	bic.w	r3, r3, #1
 8003eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fd fd3a 	bl	8001928 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb8:	f7fd fd36 	bl	8001928 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e199      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eca:	4b1e      	ldr	r3, [pc, #120]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d038      	beq.n	8003f54 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d019      	beq.n	8003f1e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eea:	4b16      	ldr	r3, [pc, #88]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eee:	4a15      	ldr	r2, [pc, #84]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef6:	f7fd fd17 	bl	8001928 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003efe:	f7fd fd13 	bl	8001928 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e176      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f10:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCC_OscConfig+0x23a>
 8003f1c:	e01a      	b.n	8003f54 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f1e:	4b09      	ldr	r3, [pc, #36]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f22:	4a08      	ldr	r2, [pc, #32]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003f24:	f023 0301 	bic.w	r3, r3, #1
 8003f28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2a:	f7fd fcfd 	bl	8001928 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f30:	e00a      	b.n	8003f48 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f32:	f7fd fcf9 	bl	8001928 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d903      	bls.n	8003f48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e15c      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>
 8003f44:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	4b91      	ldr	r3, [pc, #580]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8003f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1ee      	bne.n	8003f32 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80a4 	beq.w	80040aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f62:	4b8b      	ldr	r3, [pc, #556]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10d      	bne.n	8003f8a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6e:	4b88      	ldr	r3, [pc, #544]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	4a87      	ldr	r2, [pc, #540]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8003f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f7a:	4b85      	ldr	r3, [pc, #532]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f8a:	4b82      	ldr	r3, [pc, #520]	@ (8004194 <HAL_RCC_OscConfig+0x4d0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d118      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f96:	4b7f      	ldr	r3, [pc, #508]	@ (8004194 <HAL_RCC_OscConfig+0x4d0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8004194 <HAL_RCC_OscConfig+0x4d0>)
 8003f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa2:	f7fd fcc1 	bl	8001928 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003faa:	f7fd fcbd 	bl	8001928 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b64      	cmp	r3, #100	@ 0x64
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e120      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fbc:	4b75      	ldr	r3, [pc, #468]	@ (8004194 <HAL_RCC_OscConfig+0x4d0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d106      	bne.n	8003fde <HAL_RCC_OscConfig+0x31a>
 8003fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd4:	4a6e      	ldr	r2, [pc, #440]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fdc:	e02d      	b.n	800403a <HAL_RCC_OscConfig+0x376>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x33c>
 8003fe6:	4b6a      	ldr	r3, [pc, #424]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fea:	4a69      	ldr	r2, [pc, #420]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff2:	4b67      	ldr	r3, [pc, #412]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	4a66      	ldr	r2, [pc, #408]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8003ff8:	f023 0304 	bic.w	r3, r3, #4
 8003ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffe:	e01c      	b.n	800403a <HAL_RCC_OscConfig+0x376>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b05      	cmp	r3, #5
 8004006:	d10c      	bne.n	8004022 <HAL_RCC_OscConfig+0x35e>
 8004008:	4b61      	ldr	r3, [pc, #388]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400c:	4a60      	ldr	r2, [pc, #384]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 800400e:	f043 0304 	orr.w	r3, r3, #4
 8004012:	6713      	str	r3, [r2, #112]	@ 0x70
 8004014:	4b5e      	ldr	r3, [pc, #376]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004018:	4a5d      	ldr	r2, [pc, #372]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004020:	e00b      	b.n	800403a <HAL_RCC_OscConfig+0x376>
 8004022:	4b5b      	ldr	r3, [pc, #364]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004026:	4a5a      	ldr	r2, [pc, #360]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	6713      	str	r3, [r2, #112]	@ 0x70
 800402e:	4b58      	ldr	r3, [pc, #352]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004032:	4a57      	ldr	r2, [pc, #348]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8004034:	f023 0304 	bic.w	r3, r3, #4
 8004038:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d015      	beq.n	800406e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004042:	f7fd fc71 	bl	8001928 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fd fc6d 	bl	8001928 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e0ce      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004060:	4b4b      	ldr	r3, [pc, #300]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0ee      	beq.n	800404a <HAL_RCC_OscConfig+0x386>
 800406c:	e014      	b.n	8004098 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406e:	f7fd fc5b 	bl	8001928 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004074:	e00a      	b.n	800408c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004076:	f7fd fc57 	bl	8001928 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004084:	4293      	cmp	r3, r2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e0b8      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408c:	4b40      	ldr	r3, [pc, #256]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 800408e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1ee      	bne.n	8004076 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004098:	7dfb      	ldrb	r3, [r7, #23]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d105      	bne.n	80040aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409e:	4b3c      	ldr	r3, [pc, #240]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	4a3b      	ldr	r2, [pc, #236]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 80040a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040a8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 80a4 	beq.w	80041fc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b4:	4b36      	ldr	r3, [pc, #216]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d06b      	beq.n	8004198 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d149      	bne.n	800415c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c8:	4b31      	ldr	r3, [pc, #196]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a30      	ldr	r2, [pc, #192]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 80040ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fd fc28 	bl	8001928 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fd fc24 	bl	8001928 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e087      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	4b28      	ldr	r3, [pc, #160]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69da      	ldr	r2, [r3, #28]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	019b      	lsls	r3, r3, #6
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004110:	085b      	lsrs	r3, r3, #1
 8004112:	3b01      	subs	r3, #1
 8004114:	041b      	lsls	r3, r3, #16
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	061b      	lsls	r3, r3, #24
 800411e:	4313      	orrs	r3, r2
 8004120:	4a1b      	ldr	r2, [pc, #108]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8004122:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004126:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004128:	4b19      	ldr	r3, [pc, #100]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a18      	ldr	r2, [pc, #96]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 800412e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fd fbf8 	bl	8001928 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413c:	f7fd fbf4 	bl	8001928 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e057      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414e:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0x478>
 800415a:	e04f      	b.n	80041fc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415c:	4b0c      	ldr	r3, [pc, #48]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0b      	ldr	r2, [pc, #44]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8004162:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fd fbde 	bl	8001928 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004170:	f7fd fbda 	bl	8001928 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e03d      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004182:	4b03      	ldr	r3, [pc, #12]	@ (8004190 <HAL_RCC_OscConfig+0x4cc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x4ac>
 800418e:	e035      	b.n	80041fc <HAL_RCC_OscConfig+0x538>
 8004190:	40023800 	.word	0x40023800
 8004194:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004198:	4b1b      	ldr	r3, [pc, #108]	@ (8004208 <HAL_RCC_OscConfig+0x544>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d028      	beq.n	80041f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d121      	bne.n	80041f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041be:	429a      	cmp	r2, r3
 80041c0:	d11a      	bne.n	80041f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041c8:	4013      	ands	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d111      	bne.n	80041f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	3b01      	subs	r3, #1
 80041e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d107      	bne.n	80041f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800

0800420c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0d0      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004224:	4b6a      	ldr	r3, [pc, #424]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d910      	bls.n	8004254 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b67      	ldr	r3, [pc, #412]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 020f 	bic.w	r2, r3, #15
 800423a:	4965      	ldr	r1, [pc, #404]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b63      	ldr	r3, [pc, #396]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0b8      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d020      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800426c:	4b59      	ldr	r3, [pc, #356]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	4a58      	ldr	r2, [pc, #352]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004272:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004276:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004284:	4b53      	ldr	r3, [pc, #332]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4a52      	ldr	r2, [pc, #328]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 800428a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800428e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004290:	4b50      	ldr	r3, [pc, #320]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	494d      	ldr	r1, [pc, #308]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d040      	beq.n	8004330 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b6:	4b47      	ldr	r3, [pc, #284]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d115      	bne.n	80042ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e07f      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d107      	bne.n	80042de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ce:	4b41      	ldr	r3, [pc, #260]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e073      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042de:	4b3d      	ldr	r3, [pc, #244]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e06b      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ee:	4b39      	ldr	r3, [pc, #228]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f023 0203 	bic.w	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4936      	ldr	r1, [pc, #216]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004300:	f7fd fb12 	bl	8001928 <HAL_GetTick>
 8004304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	e00a      	b.n	800431e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004308:	f7fd fb0e 	bl	8001928 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e053      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431e:	4b2d      	ldr	r3, [pc, #180]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 020c 	and.w	r2, r3, #12
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	429a      	cmp	r2, r3
 800432e:	d1eb      	bne.n	8004308 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004330:	4b27      	ldr	r3, [pc, #156]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d210      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433e:	4b24      	ldr	r3, [pc, #144]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f023 020f 	bic.w	r2, r3, #15
 8004346:	4922      	ldr	r1, [pc, #136]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	4313      	orrs	r3, r2
 800434c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434e:	4b20      	ldr	r3, [pc, #128]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d001      	beq.n	8004360 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e032      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800436c:	4b19      	ldr	r3, [pc, #100]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4916      	ldr	r1, [pc, #88]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800438a:	4b12      	ldr	r3, [pc, #72]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	490e      	ldr	r1, [pc, #56]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800439e:	f000 f821 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80043a2:	4602      	mov	r2, r0
 80043a4:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	490a      	ldr	r1, [pc, #40]	@ (80043d8 <HAL_RCC_ClockConfig+0x1cc>)
 80043b0:	5ccb      	ldrb	r3, [r1, r3]
 80043b2:	fa22 f303 	lsr.w	r3, r2, r3
 80043b6:	4a09      	ldr	r2, [pc, #36]	@ (80043dc <HAL_RCC_ClockConfig+0x1d0>)
 80043b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043ba:	4b09      	ldr	r3, [pc, #36]	@ (80043e0 <HAL_RCC_ClockConfig+0x1d4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd fa6e 	bl	80018a0 <HAL_InitTick>

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40023c00 	.word	0x40023c00
 80043d4:	40023800 	.word	0x40023800
 80043d8:	080096d4 	.word	0x080096d4
 80043dc:	20000000 	.word	0x20000000
 80043e0:	20000004 	.word	0x20000004

080043e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e8:	b094      	sub	sp, #80	@ 0x50
 80043ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f0:	2300      	movs	r3, #0
 80043f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f4:	2300      	movs	r3, #0
 80043f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043fc:	4b79      	ldr	r3, [pc, #484]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	2b08      	cmp	r3, #8
 8004406:	d00d      	beq.n	8004424 <HAL_RCC_GetSysClockFreq+0x40>
 8004408:	2b08      	cmp	r3, #8
 800440a:	f200 80e1 	bhi.w	80045d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0x34>
 8004412:	2b04      	cmp	r3, #4
 8004414:	d003      	beq.n	800441e <HAL_RCC_GetSysClockFreq+0x3a>
 8004416:	e0db      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004418:	4b73      	ldr	r3, [pc, #460]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800441a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800441c:	e0db      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800441e:	4b73      	ldr	r3, [pc, #460]	@ (80045ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004420:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004422:	e0d8      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004424:	4b6f      	ldr	r3, [pc, #444]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800442c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800442e:	4b6d      	ldr	r3, [pc, #436]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d063      	beq.n	8004502 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800443a:	4b6a      	ldr	r3, [pc, #424]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	099b      	lsrs	r3, r3, #6
 8004440:	2200      	movs	r2, #0
 8004442:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004444:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444c:	633b      	str	r3, [r7, #48]	@ 0x30
 800444e:	2300      	movs	r3, #0
 8004450:	637b      	str	r3, [r7, #52]	@ 0x34
 8004452:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004456:	4622      	mov	r2, r4
 8004458:	462b      	mov	r3, r5
 800445a:	f04f 0000 	mov.w	r0, #0
 800445e:	f04f 0100 	mov.w	r1, #0
 8004462:	0159      	lsls	r1, r3, #5
 8004464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004468:	0150      	lsls	r0, r2, #5
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4621      	mov	r1, r4
 8004470:	1a51      	subs	r1, r2, r1
 8004472:	6139      	str	r1, [r7, #16]
 8004474:	4629      	mov	r1, r5
 8004476:	eb63 0301 	sbc.w	r3, r3, r1
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004488:	4659      	mov	r1, fp
 800448a:	018b      	lsls	r3, r1, #6
 800448c:	4651      	mov	r1, sl
 800448e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004492:	4651      	mov	r1, sl
 8004494:	018a      	lsls	r2, r1, #6
 8004496:	4651      	mov	r1, sl
 8004498:	ebb2 0801 	subs.w	r8, r2, r1
 800449c:	4659      	mov	r1, fp
 800449e:	eb63 0901 	sbc.w	r9, r3, r1
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044b6:	4690      	mov	r8, r2
 80044b8:	4699      	mov	r9, r3
 80044ba:	4623      	mov	r3, r4
 80044bc:	eb18 0303 	adds.w	r3, r8, r3
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	462b      	mov	r3, r5
 80044c4:	eb49 0303 	adc.w	r3, r9, r3
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044d6:	4629      	mov	r1, r5
 80044d8:	024b      	lsls	r3, r1, #9
 80044da:	4621      	mov	r1, r4
 80044dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044e0:	4621      	mov	r1, r4
 80044e2:	024a      	lsls	r2, r1, #9
 80044e4:	4610      	mov	r0, r2
 80044e6:	4619      	mov	r1, r3
 80044e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ea:	2200      	movs	r2, #0
 80044ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044f4:	f7fc fbd0 	bl	8000c98 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004500:	e058      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004502:	4b38      	ldr	r3, [pc, #224]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	2200      	movs	r2, #0
 800450a:	4618      	mov	r0, r3
 800450c:	4611      	mov	r1, r2
 800450e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004512:	623b      	str	r3, [r7, #32]
 8004514:	2300      	movs	r3, #0
 8004516:	627b      	str	r3, [r7, #36]	@ 0x24
 8004518:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800451c:	4642      	mov	r2, r8
 800451e:	464b      	mov	r3, r9
 8004520:	f04f 0000 	mov.w	r0, #0
 8004524:	f04f 0100 	mov.w	r1, #0
 8004528:	0159      	lsls	r1, r3, #5
 800452a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800452e:	0150      	lsls	r0, r2, #5
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4641      	mov	r1, r8
 8004536:	ebb2 0a01 	subs.w	sl, r2, r1
 800453a:	4649      	mov	r1, r9
 800453c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800454c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004550:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004554:	ebb2 040a 	subs.w	r4, r2, sl
 8004558:	eb63 050b 	sbc.w	r5, r3, fp
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	00eb      	lsls	r3, r5, #3
 8004566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800456a:	00e2      	lsls	r2, r4, #3
 800456c:	4614      	mov	r4, r2
 800456e:	461d      	mov	r5, r3
 8004570:	4643      	mov	r3, r8
 8004572:	18e3      	adds	r3, r4, r3
 8004574:	603b      	str	r3, [r7, #0]
 8004576:	464b      	mov	r3, r9
 8004578:	eb45 0303 	adc.w	r3, r5, r3
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800458a:	4629      	mov	r1, r5
 800458c:	028b      	lsls	r3, r1, #10
 800458e:	4621      	mov	r1, r4
 8004590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004594:	4621      	mov	r1, r4
 8004596:	028a      	lsls	r2, r1, #10
 8004598:	4610      	mov	r0, r2
 800459a:	4619      	mov	r1, r3
 800459c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800459e:	2200      	movs	r2, #0
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	61fa      	str	r2, [r7, #28]
 80045a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045a8:	f7fc fb76 	bl	8000c98 <__aeabi_uldivmod>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4613      	mov	r3, r2
 80045b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045b4:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	3301      	adds	r3, #1
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80045c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045ce:	e002      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045d0:	4b05      	ldr	r3, [pc, #20]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3750      	adds	r7, #80	@ 0x50
 80045dc:	46bd      	mov	sp, r7
 80045de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045e2:	bf00      	nop
 80045e4:	40023800 	.word	0x40023800
 80045e8:	00f42400 	.word	0x00f42400
 80045ec:	007a1200 	.word	0x007a1200

080045f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045f4:	4b03      	ldr	r3, [pc, #12]	@ (8004604 <HAL_RCC_GetHCLKFreq+0x14>)
 80045f6:	681b      	ldr	r3, [r3, #0]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000000 	.word	0x20000000

08004608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800460c:	f7ff fff0 	bl	80045f0 <HAL_RCC_GetHCLKFreq>
 8004610:	4602      	mov	r2, r0
 8004612:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	0a9b      	lsrs	r3, r3, #10
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	4903      	ldr	r1, [pc, #12]	@ (800462c <HAL_RCC_GetPCLK1Freq+0x24>)
 800461e:	5ccb      	ldrb	r3, [r1, r3]
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004624:	4618      	mov	r0, r3
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40023800 	.word	0x40023800
 800462c:	080096e4 	.word	0x080096e4

08004630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004634:	f7ff ffdc 	bl	80045f0 <HAL_RCC_GetHCLKFreq>
 8004638:	4602      	mov	r2, r0
 800463a:	4b05      	ldr	r3, [pc, #20]	@ (8004650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	0b5b      	lsrs	r3, r3, #13
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	4903      	ldr	r1, [pc, #12]	@ (8004654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004646:	5ccb      	ldrb	r3, [r1, r3]
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800464c:	4618      	mov	r0, r3
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40023800 	.word	0x40023800
 8004654:	080096e4 	.word	0x080096e4

08004658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d012      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800467c:	4b65      	ldr	r3, [pc, #404]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	4a64      	ldr	r2, [pc, #400]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004682:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004686:	6093      	str	r3, [r2, #8]
 8004688:	4b62      	ldr	r3, [pc, #392]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	4960      	ldr	r1, [pc, #384]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800469e:	2301      	movs	r3, #1
 80046a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d017      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046ae:	4b59      	ldr	r3, [pc, #356]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046b4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046bc:	4955      	ldr	r1, [pc, #340]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046cc:	d101      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80046ce:	2301      	movs	r3, #1
 80046d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80046da:	2301      	movs	r3, #1
 80046dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d017      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f8:	4946      	ldr	r1, [pc, #280]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004704:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004708:	d101      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800470a:	2301      	movs	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8004716:	2301      	movs	r3, #1
 8004718:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 808b 	beq.w	800483e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004728:	4b3a      	ldr	r3, [pc, #232]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800472a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472c:	4a39      	ldr	r2, [pc, #228]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800472e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004732:	6413      	str	r3, [r2, #64]	@ 0x40
 8004734:	4b37      	ldr	r3, [pc, #220]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004740:	4b35      	ldr	r3, [pc, #212]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a34      	ldr	r2, [pc, #208]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800474a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474c:	f7fd f8ec 	bl	8001928 <HAL_GetTick>
 8004750:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004754:	f7fd f8e8 	bl	8001928 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	@ 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e2bc      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004766:	4b2c      	ldr	r3, [pc, #176]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004772:	4b28      	ldr	r3, [pc, #160]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800477a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d035      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004786:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	429a      	cmp	r2, r3
 800478e:	d02e      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004790:	4b20      	ldr	r3, [pc, #128]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004798:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800479a:	4b1e      	ldr	r3, [pc, #120]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	4a1d      	ldr	r2, [pc, #116]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047a4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80047b2:	4a18      	ldr	r2, [pc, #96]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047b8:	4b16      	ldr	r3, [pc, #88]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d114      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fd f8b0 	bl	8001928 <HAL_GetTick>
 80047c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ca:	e00a      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047cc:	f7fd f8ac 	bl	8001928 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e27e      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0ee      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047fa:	d111      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80047fc:	4b05      	ldr	r3, [pc, #20]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004808:	4b04      	ldr	r3, [pc, #16]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800480a:	400b      	ands	r3, r1
 800480c:	4901      	ldr	r1, [pc, #4]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
 8004812:	e00b      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004814:	40023800 	.word	0x40023800
 8004818:	40007000 	.word	0x40007000
 800481c:	0ffffcff 	.word	0x0ffffcff
 8004820:	4ba4      	ldr	r3, [pc, #656]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	4aa3      	ldr	r2, [pc, #652]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004826:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800482a:	6093      	str	r3, [r2, #8]
 800482c:	4ba1      	ldr	r3, [pc, #644]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800482e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004838:	499e      	ldr	r1, [pc, #632]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800483a:	4313      	orrs	r3, r2
 800483c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b00      	cmp	r3, #0
 8004848:	d010      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800484a:	4b9a      	ldr	r3, [pc, #616]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800484c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004850:	4a98      	ldr	r2, [pc, #608]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004856:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800485a:	4b96      	ldr	r3, [pc, #600]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800485c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004864:	4993      	ldr	r1, [pc, #588]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004878:	4b8e      	ldr	r3, [pc, #568]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004886:	498b      	ldr	r1, [pc, #556]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004888:	4313      	orrs	r3, r2
 800488a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800489a:	4b86      	ldr	r3, [pc, #536]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a8:	4982      	ldr	r1, [pc, #520]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048bc:	4b7d      	ldr	r3, [pc, #500]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048ca:	497a      	ldr	r1, [pc, #488]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048de:	4b75      	ldr	r3, [pc, #468]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e4:	f023 0203 	bic.w	r2, r3, #3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ec:	4971      	ldr	r1, [pc, #452]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004900:	4b6c      	ldr	r3, [pc, #432]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004906:	f023 020c 	bic.w	r2, r3, #12
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	4969      	ldr	r1, [pc, #420]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004922:	4b64      	ldr	r3, [pc, #400]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004928:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004930:	4960      	ldr	r1, [pc, #384]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004944:	4b5b      	ldr	r3, [pc, #364]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004952:	4958      	ldr	r1, [pc, #352]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004966:	4b53      	ldr	r3, [pc, #332]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004974:	494f      	ldr	r1, [pc, #316]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004988:	4b4a      	ldr	r3, [pc, #296]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004996:	4947      	ldr	r1, [pc, #284]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049aa:	4b42      	ldr	r3, [pc, #264]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b8:	493e      	ldr	r1, [pc, #248]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049cc:	4b39      	ldr	r3, [pc, #228]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049da:	4936      	ldr	r1, [pc, #216]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d011      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80049ee:	4b31      	ldr	r3, [pc, #196]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049fc:	492d      	ldr	r1, [pc, #180]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a1e:	4b25      	ldr	r3, [pc, #148]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a24:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a2c:	4921      	ldr	r1, [pc, #132]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a40:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a46:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a4e:	4919      	ldr	r1, [pc, #100]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004a62:	4b14      	ldr	r3, [pc, #80]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a68:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a70:	4910      	ldr	r1, [pc, #64]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d006      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 809d 	beq.w	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a8c:	4b09      	ldr	r3, [pc, #36]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a08      	ldr	r2, [pc, #32]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a98:	f7fc ff46 	bl	8001928 <HAL_GetTick>
 8004a9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a9e:	e00b      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004aa0:	f7fc ff42 	bl	8001928 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	@ 0x64
 8004aac:	d904      	bls.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e116      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004ab2:	bf00      	nop
 8004ab4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab8:	4b8b      	ldr	r3, [pc, #556]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1ed      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d017      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d113      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ad8:	4b83      	ldr	r3, [pc, #524]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ade:	0e1b      	lsrs	r3, r3, #24
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	019a      	lsls	r2, r3, #6
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	061b      	lsls	r3, r3, #24
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	071b      	lsls	r3, r3, #28
 8004af8:	497b      	ldr	r1, [pc, #492]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d004      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d024      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b2a:	d11f      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b2c:	4b6e      	ldr	r3, [pc, #440]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b32:	0f1b      	lsrs	r3, r3, #28
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	019a      	lsls	r2, r3, #6
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	061b      	lsls	r3, r3, #24
 8004b46:	431a      	orrs	r2, r3
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	071b      	lsls	r3, r3, #28
 8004b4c:	4966      	ldr	r1, [pc, #408]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b54:	4b64      	ldr	r3, [pc, #400]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b5a:	f023 021f 	bic.w	r2, r3, #31
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	4960      	ldr	r1, [pc, #384]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00d      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	019a      	lsls	r2, r3, #6
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	061b      	lsls	r3, r3, #24
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	071b      	lsls	r3, r3, #28
 8004b8c:	4956      	ldr	r1, [pc, #344]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b94:	4b54      	ldr	r3, [pc, #336]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a53      	ldr	r2, [pc, #332]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004b9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba0:	f7fc fec2 	bl	8001928 <HAL_GetTick>
 8004ba4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ba8:	f7fc febe 	bl	8001928 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b64      	cmp	r3, #100	@ 0x64
 8004bb4:	d901      	bls.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e092      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bba:	4b4b      	ldr	r3, [pc, #300]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	f040 8088 	bne.w	8004cde <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bce:	4b46      	ldr	r3, [pc, #280]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a45      	ldr	r2, [pc, #276]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bda:	f7fc fea5 	bl	8001928 <HAL_GetTick>
 8004bde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004be2:	f7fc fea1 	bl	8001928 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b64      	cmp	r3, #100	@ 0x64
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e075      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c00:	d0ef      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d009      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d024      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d120      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c30:	0c1b      	lsrs	r3, r3, #16
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	019a      	lsls	r2, r3, #6
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	041b      	lsls	r3, r3, #16
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	061b      	lsls	r3, r3, #24
 8004c4a:	4927      	ldr	r1, [pc, #156]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c52:	4b25      	ldr	r3, [pc, #148]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c58:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	4920      	ldr	r1, [pc, #128]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d018      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c80:	d113      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c82:	4b19      	ldr	r3, [pc, #100]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c88:	0e1b      	lsrs	r3, r3, #24
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	019a      	lsls	r2, r3, #6
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	061b      	lsls	r3, r3, #24
 8004ca2:	4911      	ldr	r1, [pc, #68]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004caa:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a0e      	ldr	r2, [pc, #56]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb6:	f7fc fe37 	bl	8001928 <HAL_GetTick>
 8004cba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cbe:	f7fc fe33 	bl	8001928 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b64      	cmp	r3, #100	@ 0x64
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e007      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cd0:	4b05      	ldr	r3, [pc, #20]	@ (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cdc:	d1ef      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3720      	adds	r7, #32
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40023800 	.word	0x40023800

08004cec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e040      	b.n	8004d80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7fc fc14 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2224      	movs	r2, #36	@ 0x24
 8004d18:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fb16 	bl	8005364 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f8af 	bl	8004e9c <UART_SetConfig>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e01b      	b.n	8004d80 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fb95 	bl	80054a8 <UART_CheckIdleState>
 8004d7e:	4603      	mov	r3, r0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	@ 0x28
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d177      	bne.n	8004e90 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_UART_Transmit+0x24>
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e070      	b.n	8004e92 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2221      	movs	r2, #33	@ 0x21
 8004dbc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dbe:	f7fc fdb3 	bl	8001928 <HAL_GetTick>
 8004dc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	88fa      	ldrh	r2, [r7, #6]
 8004dc8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	88fa      	ldrh	r2, [r7, #6]
 8004dd0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ddc:	d108      	bne.n	8004df0 <HAL_UART_Transmit+0x68>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	61bb      	str	r3, [r7, #24]
 8004dee:	e003      	b.n	8004df8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004df8:	e02f      	b.n	8004e5a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2200      	movs	r2, #0
 8004e02:	2180      	movs	r1, #128	@ 0x80
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fba6 	bl	8005556 <UART_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e03b      	b.n	8004e92 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10b      	bne.n	8004e38 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	3302      	adds	r3, #2
 8004e34:	61bb      	str	r3, [r7, #24]
 8004e36:	e007      	b.n	8004e48 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	781a      	ldrb	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	3301      	adds	r3, #1
 8004e46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1c9      	bne.n	8004dfa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2140      	movs	r1, #64	@ 0x40
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fb70 	bl	8005556 <UART_WaitOnFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d004      	beq.n	8004e86 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e005      	b.n	8004e92 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e000      	b.n	8004e92 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e90:	2302      	movs	r3, #2
  }
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	4ba6      	ldr	r3, [pc, #664]	@ (8005160 <UART_SetConfig+0x2c4>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6812      	ldr	r2, [r2, #0]
 8004ece:	6979      	ldr	r1, [r7, #20]
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a94      	ldr	r2, [pc, #592]	@ (8005164 <UART_SetConfig+0x2c8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d120      	bne.n	8004f5a <UART_SetConfig+0xbe>
 8004f18:	4b93      	ldr	r3, [pc, #588]	@ (8005168 <UART_SetConfig+0x2cc>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d816      	bhi.n	8004f54 <UART_SetConfig+0xb8>
 8004f26:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <UART_SetConfig+0x90>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f3d 	.word	0x08004f3d
 8004f30:	08004f49 	.word	0x08004f49
 8004f34:	08004f43 	.word	0x08004f43
 8004f38:	08004f4f 	.word	0x08004f4f
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e150      	b.n	80051e4 <UART_SetConfig+0x348>
 8004f42:	2302      	movs	r3, #2
 8004f44:	77fb      	strb	r3, [r7, #31]
 8004f46:	e14d      	b.n	80051e4 <UART_SetConfig+0x348>
 8004f48:	2304      	movs	r3, #4
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e14a      	b.n	80051e4 <UART_SetConfig+0x348>
 8004f4e:	2308      	movs	r3, #8
 8004f50:	77fb      	strb	r3, [r7, #31]
 8004f52:	e147      	b.n	80051e4 <UART_SetConfig+0x348>
 8004f54:	2310      	movs	r3, #16
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	e144      	b.n	80051e4 <UART_SetConfig+0x348>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a83      	ldr	r2, [pc, #524]	@ (800516c <UART_SetConfig+0x2d0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d132      	bne.n	8004fca <UART_SetConfig+0x12e>
 8004f64:	4b80      	ldr	r3, [pc, #512]	@ (8005168 <UART_SetConfig+0x2cc>)
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6a:	f003 030c 	and.w	r3, r3, #12
 8004f6e:	2b0c      	cmp	r3, #12
 8004f70:	d828      	bhi.n	8004fc4 <UART_SetConfig+0x128>
 8004f72:	a201      	add	r2, pc, #4	@ (adr r2, 8004f78 <UART_SetConfig+0xdc>)
 8004f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f78:	08004fad 	.word	0x08004fad
 8004f7c:	08004fc5 	.word	0x08004fc5
 8004f80:	08004fc5 	.word	0x08004fc5
 8004f84:	08004fc5 	.word	0x08004fc5
 8004f88:	08004fb9 	.word	0x08004fb9
 8004f8c:	08004fc5 	.word	0x08004fc5
 8004f90:	08004fc5 	.word	0x08004fc5
 8004f94:	08004fc5 	.word	0x08004fc5
 8004f98:	08004fb3 	.word	0x08004fb3
 8004f9c:	08004fc5 	.word	0x08004fc5
 8004fa0:	08004fc5 	.word	0x08004fc5
 8004fa4:	08004fc5 	.word	0x08004fc5
 8004fa8:	08004fbf 	.word	0x08004fbf
 8004fac:	2300      	movs	r3, #0
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e118      	b.n	80051e4 <UART_SetConfig+0x348>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	77fb      	strb	r3, [r7, #31]
 8004fb6:	e115      	b.n	80051e4 <UART_SetConfig+0x348>
 8004fb8:	2304      	movs	r3, #4
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e112      	b.n	80051e4 <UART_SetConfig+0x348>
 8004fbe:	2308      	movs	r3, #8
 8004fc0:	77fb      	strb	r3, [r7, #31]
 8004fc2:	e10f      	b.n	80051e4 <UART_SetConfig+0x348>
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	77fb      	strb	r3, [r7, #31]
 8004fc8:	e10c      	b.n	80051e4 <UART_SetConfig+0x348>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a68      	ldr	r2, [pc, #416]	@ (8005170 <UART_SetConfig+0x2d4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d120      	bne.n	8005016 <UART_SetConfig+0x17a>
 8004fd4:	4b64      	ldr	r3, [pc, #400]	@ (8005168 <UART_SetConfig+0x2cc>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fda:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fde:	2b30      	cmp	r3, #48	@ 0x30
 8004fe0:	d013      	beq.n	800500a <UART_SetConfig+0x16e>
 8004fe2:	2b30      	cmp	r3, #48	@ 0x30
 8004fe4:	d814      	bhi.n	8005010 <UART_SetConfig+0x174>
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d009      	beq.n	8004ffe <UART_SetConfig+0x162>
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	d810      	bhi.n	8005010 <UART_SetConfig+0x174>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <UART_SetConfig+0x15c>
 8004ff2:	2b10      	cmp	r3, #16
 8004ff4:	d006      	beq.n	8005004 <UART_SetConfig+0x168>
 8004ff6:	e00b      	b.n	8005010 <UART_SetConfig+0x174>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	77fb      	strb	r3, [r7, #31]
 8004ffc:	e0f2      	b.n	80051e4 <UART_SetConfig+0x348>
 8004ffe:	2302      	movs	r3, #2
 8005000:	77fb      	strb	r3, [r7, #31]
 8005002:	e0ef      	b.n	80051e4 <UART_SetConfig+0x348>
 8005004:	2304      	movs	r3, #4
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e0ec      	b.n	80051e4 <UART_SetConfig+0x348>
 800500a:	2308      	movs	r3, #8
 800500c:	77fb      	strb	r3, [r7, #31]
 800500e:	e0e9      	b.n	80051e4 <UART_SetConfig+0x348>
 8005010:	2310      	movs	r3, #16
 8005012:	77fb      	strb	r3, [r7, #31]
 8005014:	e0e6      	b.n	80051e4 <UART_SetConfig+0x348>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a56      	ldr	r2, [pc, #344]	@ (8005174 <UART_SetConfig+0x2d8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d120      	bne.n	8005062 <UART_SetConfig+0x1c6>
 8005020:	4b51      	ldr	r3, [pc, #324]	@ (8005168 <UART_SetConfig+0x2cc>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005026:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800502a:	2bc0      	cmp	r3, #192	@ 0xc0
 800502c:	d013      	beq.n	8005056 <UART_SetConfig+0x1ba>
 800502e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005030:	d814      	bhi.n	800505c <UART_SetConfig+0x1c0>
 8005032:	2b80      	cmp	r3, #128	@ 0x80
 8005034:	d009      	beq.n	800504a <UART_SetConfig+0x1ae>
 8005036:	2b80      	cmp	r3, #128	@ 0x80
 8005038:	d810      	bhi.n	800505c <UART_SetConfig+0x1c0>
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <UART_SetConfig+0x1a8>
 800503e:	2b40      	cmp	r3, #64	@ 0x40
 8005040:	d006      	beq.n	8005050 <UART_SetConfig+0x1b4>
 8005042:	e00b      	b.n	800505c <UART_SetConfig+0x1c0>
 8005044:	2300      	movs	r3, #0
 8005046:	77fb      	strb	r3, [r7, #31]
 8005048:	e0cc      	b.n	80051e4 <UART_SetConfig+0x348>
 800504a:	2302      	movs	r3, #2
 800504c:	77fb      	strb	r3, [r7, #31]
 800504e:	e0c9      	b.n	80051e4 <UART_SetConfig+0x348>
 8005050:	2304      	movs	r3, #4
 8005052:	77fb      	strb	r3, [r7, #31]
 8005054:	e0c6      	b.n	80051e4 <UART_SetConfig+0x348>
 8005056:	2308      	movs	r3, #8
 8005058:	77fb      	strb	r3, [r7, #31]
 800505a:	e0c3      	b.n	80051e4 <UART_SetConfig+0x348>
 800505c:	2310      	movs	r3, #16
 800505e:	77fb      	strb	r3, [r7, #31]
 8005060:	e0c0      	b.n	80051e4 <UART_SetConfig+0x348>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a44      	ldr	r2, [pc, #272]	@ (8005178 <UART_SetConfig+0x2dc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d125      	bne.n	80050b8 <UART_SetConfig+0x21c>
 800506c:	4b3e      	ldr	r3, [pc, #248]	@ (8005168 <UART_SetConfig+0x2cc>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800507a:	d017      	beq.n	80050ac <UART_SetConfig+0x210>
 800507c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005080:	d817      	bhi.n	80050b2 <UART_SetConfig+0x216>
 8005082:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005086:	d00b      	beq.n	80050a0 <UART_SetConfig+0x204>
 8005088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800508c:	d811      	bhi.n	80050b2 <UART_SetConfig+0x216>
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <UART_SetConfig+0x1fe>
 8005092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005096:	d006      	beq.n	80050a6 <UART_SetConfig+0x20a>
 8005098:	e00b      	b.n	80050b2 <UART_SetConfig+0x216>
 800509a:	2300      	movs	r3, #0
 800509c:	77fb      	strb	r3, [r7, #31]
 800509e:	e0a1      	b.n	80051e4 <UART_SetConfig+0x348>
 80050a0:	2302      	movs	r3, #2
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e09e      	b.n	80051e4 <UART_SetConfig+0x348>
 80050a6:	2304      	movs	r3, #4
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e09b      	b.n	80051e4 <UART_SetConfig+0x348>
 80050ac:	2308      	movs	r3, #8
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e098      	b.n	80051e4 <UART_SetConfig+0x348>
 80050b2:	2310      	movs	r3, #16
 80050b4:	77fb      	strb	r3, [r7, #31]
 80050b6:	e095      	b.n	80051e4 <UART_SetConfig+0x348>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a2f      	ldr	r2, [pc, #188]	@ (800517c <UART_SetConfig+0x2e0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d125      	bne.n	800510e <UART_SetConfig+0x272>
 80050c2:	4b29      	ldr	r3, [pc, #164]	@ (8005168 <UART_SetConfig+0x2cc>)
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050d0:	d017      	beq.n	8005102 <UART_SetConfig+0x266>
 80050d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050d6:	d817      	bhi.n	8005108 <UART_SetConfig+0x26c>
 80050d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050dc:	d00b      	beq.n	80050f6 <UART_SetConfig+0x25a>
 80050de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050e2:	d811      	bhi.n	8005108 <UART_SetConfig+0x26c>
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <UART_SetConfig+0x254>
 80050e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ec:	d006      	beq.n	80050fc <UART_SetConfig+0x260>
 80050ee:	e00b      	b.n	8005108 <UART_SetConfig+0x26c>
 80050f0:	2301      	movs	r3, #1
 80050f2:	77fb      	strb	r3, [r7, #31]
 80050f4:	e076      	b.n	80051e4 <UART_SetConfig+0x348>
 80050f6:	2302      	movs	r3, #2
 80050f8:	77fb      	strb	r3, [r7, #31]
 80050fa:	e073      	b.n	80051e4 <UART_SetConfig+0x348>
 80050fc:	2304      	movs	r3, #4
 80050fe:	77fb      	strb	r3, [r7, #31]
 8005100:	e070      	b.n	80051e4 <UART_SetConfig+0x348>
 8005102:	2308      	movs	r3, #8
 8005104:	77fb      	strb	r3, [r7, #31]
 8005106:	e06d      	b.n	80051e4 <UART_SetConfig+0x348>
 8005108:	2310      	movs	r3, #16
 800510a:	77fb      	strb	r3, [r7, #31]
 800510c:	e06a      	b.n	80051e4 <UART_SetConfig+0x348>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1b      	ldr	r2, [pc, #108]	@ (8005180 <UART_SetConfig+0x2e4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d138      	bne.n	800518a <UART_SetConfig+0x2ee>
 8005118:	4b13      	ldr	r3, [pc, #76]	@ (8005168 <UART_SetConfig+0x2cc>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005122:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005126:	d017      	beq.n	8005158 <UART_SetConfig+0x2bc>
 8005128:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800512c:	d82a      	bhi.n	8005184 <UART_SetConfig+0x2e8>
 800512e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005132:	d00b      	beq.n	800514c <UART_SetConfig+0x2b0>
 8005134:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005138:	d824      	bhi.n	8005184 <UART_SetConfig+0x2e8>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <UART_SetConfig+0x2aa>
 800513e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005142:	d006      	beq.n	8005152 <UART_SetConfig+0x2b6>
 8005144:	e01e      	b.n	8005184 <UART_SetConfig+0x2e8>
 8005146:	2300      	movs	r3, #0
 8005148:	77fb      	strb	r3, [r7, #31]
 800514a:	e04b      	b.n	80051e4 <UART_SetConfig+0x348>
 800514c:	2302      	movs	r3, #2
 800514e:	77fb      	strb	r3, [r7, #31]
 8005150:	e048      	b.n	80051e4 <UART_SetConfig+0x348>
 8005152:	2304      	movs	r3, #4
 8005154:	77fb      	strb	r3, [r7, #31]
 8005156:	e045      	b.n	80051e4 <UART_SetConfig+0x348>
 8005158:	2308      	movs	r3, #8
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	e042      	b.n	80051e4 <UART_SetConfig+0x348>
 800515e:	bf00      	nop
 8005160:	efff69f3 	.word	0xefff69f3
 8005164:	40011000 	.word	0x40011000
 8005168:	40023800 	.word	0x40023800
 800516c:	40004400 	.word	0x40004400
 8005170:	40004800 	.word	0x40004800
 8005174:	40004c00 	.word	0x40004c00
 8005178:	40005000 	.word	0x40005000
 800517c:	40011400 	.word	0x40011400
 8005180:	40007800 	.word	0x40007800
 8005184:	2310      	movs	r3, #16
 8005186:	77fb      	strb	r3, [r7, #31]
 8005188:	e02c      	b.n	80051e4 <UART_SetConfig+0x348>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a72      	ldr	r2, [pc, #456]	@ (8005358 <UART_SetConfig+0x4bc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d125      	bne.n	80051e0 <UART_SetConfig+0x344>
 8005194:	4b71      	ldr	r3, [pc, #452]	@ (800535c <UART_SetConfig+0x4c0>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800519e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80051a2:	d017      	beq.n	80051d4 <UART_SetConfig+0x338>
 80051a4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80051a8:	d817      	bhi.n	80051da <UART_SetConfig+0x33e>
 80051aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ae:	d00b      	beq.n	80051c8 <UART_SetConfig+0x32c>
 80051b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051b4:	d811      	bhi.n	80051da <UART_SetConfig+0x33e>
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <UART_SetConfig+0x326>
 80051ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051be:	d006      	beq.n	80051ce <UART_SetConfig+0x332>
 80051c0:	e00b      	b.n	80051da <UART_SetConfig+0x33e>
 80051c2:	2300      	movs	r3, #0
 80051c4:	77fb      	strb	r3, [r7, #31]
 80051c6:	e00d      	b.n	80051e4 <UART_SetConfig+0x348>
 80051c8:	2302      	movs	r3, #2
 80051ca:	77fb      	strb	r3, [r7, #31]
 80051cc:	e00a      	b.n	80051e4 <UART_SetConfig+0x348>
 80051ce:	2304      	movs	r3, #4
 80051d0:	77fb      	strb	r3, [r7, #31]
 80051d2:	e007      	b.n	80051e4 <UART_SetConfig+0x348>
 80051d4:	2308      	movs	r3, #8
 80051d6:	77fb      	strb	r3, [r7, #31]
 80051d8:	e004      	b.n	80051e4 <UART_SetConfig+0x348>
 80051da:	2310      	movs	r3, #16
 80051dc:	77fb      	strb	r3, [r7, #31]
 80051de:	e001      	b.n	80051e4 <UART_SetConfig+0x348>
 80051e0:	2310      	movs	r3, #16
 80051e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ec:	d15b      	bne.n	80052a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80051ee:	7ffb      	ldrb	r3, [r7, #31]
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d828      	bhi.n	8005246 <UART_SetConfig+0x3aa>
 80051f4:	a201      	add	r2, pc, #4	@ (adr r2, 80051fc <UART_SetConfig+0x360>)
 80051f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fa:	bf00      	nop
 80051fc:	08005221 	.word	0x08005221
 8005200:	08005229 	.word	0x08005229
 8005204:	08005231 	.word	0x08005231
 8005208:	08005247 	.word	0x08005247
 800520c:	08005237 	.word	0x08005237
 8005210:	08005247 	.word	0x08005247
 8005214:	08005247 	.word	0x08005247
 8005218:	08005247 	.word	0x08005247
 800521c:	0800523f 	.word	0x0800523f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005220:	f7ff f9f2 	bl	8004608 <HAL_RCC_GetPCLK1Freq>
 8005224:	61b8      	str	r0, [r7, #24]
        break;
 8005226:	e013      	b.n	8005250 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005228:	f7ff fa02 	bl	8004630 <HAL_RCC_GetPCLK2Freq>
 800522c:	61b8      	str	r0, [r7, #24]
        break;
 800522e:	e00f      	b.n	8005250 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005230:	4b4b      	ldr	r3, [pc, #300]	@ (8005360 <UART_SetConfig+0x4c4>)
 8005232:	61bb      	str	r3, [r7, #24]
        break;
 8005234:	e00c      	b.n	8005250 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005236:	f7ff f8d5 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 800523a:	61b8      	str	r0, [r7, #24]
        break;
 800523c:	e008      	b.n	8005250 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800523e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005242:	61bb      	str	r3, [r7, #24]
        break;
 8005244:	e004      	b.n	8005250 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005246:	2300      	movs	r3, #0
 8005248:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	77bb      	strb	r3, [r7, #30]
        break;
 800524e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d074      	beq.n	8005340 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	005a      	lsls	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	085b      	lsrs	r3, r3, #1
 8005260:	441a      	add	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	fbb2 f3f3 	udiv	r3, r2, r3
 800526a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	2b0f      	cmp	r3, #15
 8005270:	d916      	bls.n	80052a0 <UART_SetConfig+0x404>
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005278:	d212      	bcs.n	80052a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f023 030f 	bic.w	r3, r3, #15
 8005282:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	b29b      	uxth	r3, r3
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	b29a      	uxth	r2, r3
 8005290:	89fb      	ldrh	r3, [r7, #14]
 8005292:	4313      	orrs	r3, r2
 8005294:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	89fa      	ldrh	r2, [r7, #14]
 800529c:	60da      	str	r2, [r3, #12]
 800529e:	e04f      	b.n	8005340 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	77bb      	strb	r3, [r7, #30]
 80052a4:	e04c      	b.n	8005340 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052a6:	7ffb      	ldrb	r3, [r7, #31]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d828      	bhi.n	80052fe <UART_SetConfig+0x462>
 80052ac:	a201      	add	r2, pc, #4	@ (adr r2, 80052b4 <UART_SetConfig+0x418>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052d9 	.word	0x080052d9
 80052b8:	080052e1 	.word	0x080052e1
 80052bc:	080052e9 	.word	0x080052e9
 80052c0:	080052ff 	.word	0x080052ff
 80052c4:	080052ef 	.word	0x080052ef
 80052c8:	080052ff 	.word	0x080052ff
 80052cc:	080052ff 	.word	0x080052ff
 80052d0:	080052ff 	.word	0x080052ff
 80052d4:	080052f7 	.word	0x080052f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d8:	f7ff f996 	bl	8004608 <HAL_RCC_GetPCLK1Freq>
 80052dc:	61b8      	str	r0, [r7, #24]
        break;
 80052de:	e013      	b.n	8005308 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e0:	f7ff f9a6 	bl	8004630 <HAL_RCC_GetPCLK2Freq>
 80052e4:	61b8      	str	r0, [r7, #24]
        break;
 80052e6:	e00f      	b.n	8005308 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005360 <UART_SetConfig+0x4c4>)
 80052ea:	61bb      	str	r3, [r7, #24]
        break;
 80052ec:	e00c      	b.n	8005308 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ee:	f7ff f879 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80052f2:	61b8      	str	r0, [r7, #24]
        break;
 80052f4:	e008      	b.n	8005308 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052fa:	61bb      	str	r3, [r7, #24]
        break;
 80052fc:	e004      	b.n	8005308 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	77bb      	strb	r3, [r7, #30]
        break;
 8005306:	bf00      	nop
    }

    if (pclk != 0U)
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d018      	beq.n	8005340 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	085a      	lsrs	r2, r3, #1
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	441a      	add	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005320:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	2b0f      	cmp	r3, #15
 8005326:	d909      	bls.n	800533c <UART_SetConfig+0x4a0>
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800532e:	d205      	bcs.n	800533c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	b29a      	uxth	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	60da      	str	r2, [r3, #12]
 800533a:	e001      	b.n	8005340 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800534c:	7fbb      	ldrb	r3, [r7, #30]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3720      	adds	r7, #32
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	40007c00 	.word	0x40007c00
 800535c:	40023800 	.word	0x40023800
 8005360:	00f42400 	.word	0x00f42400

08005364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d01a      	beq.n	800547a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005462:	d10a      	bne.n	800547a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	605a      	str	r2, [r3, #4]
  }
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08c      	sub	sp, #48	@ 0x30
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054b8:	f7fc fa36 	bl	8001928 <HAL_GetTick>
 80054bc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d12e      	bne.n	800552a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	2200      	movs	r2, #0
 80054d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f83b 	bl	8005556 <UART_WaitOnFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d021      	beq.n	800552a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054fa:	623b      	str	r3, [r7, #32]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	61fb      	str	r3, [r7, #28]
 8005506:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	69b9      	ldr	r1, [r7, #24]
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	617b      	str	r3, [r7, #20]
   return(result);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e6      	bne.n	80054e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e011      	b.n	800554e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2220      	movs	r2, #32
 800552e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3728      	adds	r7, #40	@ 0x28
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b084      	sub	sp, #16
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	603b      	str	r3, [r7, #0]
 8005562:	4613      	mov	r3, r2
 8005564:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005566:	e04f      	b.n	8005608 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800556e:	d04b      	beq.n	8005608 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005570:	f7fc f9da 	bl	8001928 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	429a      	cmp	r2, r3
 800557e:	d302      	bcc.n	8005586 <UART_WaitOnFlagUntilTimeout+0x30>
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e04e      	b.n	8005628 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d037      	beq.n	8005608 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b80      	cmp	r3, #128	@ 0x80
 800559c:	d034      	beq.n	8005608 <UART_WaitOnFlagUntilTimeout+0xb2>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b40      	cmp	r3, #64	@ 0x40
 80055a2:	d031      	beq.n	8005608 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d110      	bne.n	80055d4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2208      	movs	r2, #8
 80055b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f838 	bl	8005630 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2208      	movs	r2, #8
 80055c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e029      	b.n	8005628 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055e2:	d111      	bne.n	8005608 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 f81e 	bl	8005630 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e00f      	b.n	8005628 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	69da      	ldr	r2, [r3, #28]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4013      	ands	r3, r2
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	429a      	cmp	r2, r3
 8005616:	bf0c      	ite	eq
 8005618:	2301      	moveq	r3, #1
 800561a:	2300      	movne	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	461a      	mov	r2, r3
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	429a      	cmp	r2, r3
 8005624:	d0a0      	beq.n	8005568 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005630:	b480      	push	{r7}
 8005632:	b095      	sub	sp, #84	@ 0x54
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800564c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005656:	643b      	str	r3, [r7, #64]	@ 0x40
 8005658:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800565c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e6      	bne.n	8005638 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3308      	adds	r3, #8
 8005670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	61fb      	str	r3, [r7, #28]
   return(result);
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800568a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800568c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005690:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e5      	bne.n	800566a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d118      	bne.n	80056d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f023 0310 	bic.w	r3, r3, #16
 80056ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056c4:	61bb      	str	r3, [r7, #24]
 80056c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	6979      	ldr	r1, [r7, #20]
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	613b      	str	r3, [r7, #16]
   return(result);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e6      	bne.n	80056a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056ec:	bf00      	nop
 80056ee:	3754      	adds	r7, #84	@ 0x54
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <uart_error_handler>:


#include "erlog.h"

static void uart_error_handler()
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80056fc:	b672      	cpsid	i
}
 80056fe:	bf00      	nop
	 __disable_irq();
	  while (1)
 8005700:	bf00      	nop
 8005702:	e7fd      	b.n	8005700 <uart_error_handler+0x8>

08005704 <uart_init>:
	  {
	  }
}
static void uart_init(UART_HandleTypeDef *huart3)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3->Instance = USART3;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a15      	ldr	r2, [pc, #84]	@ (8005764 <uart_init+0x60>)
 8005710:	601a      	str	r2, [r3, #0]
  huart3->Init.BaudRate = 115200;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005718:	605a      	str	r2, [r3, #4]
  huart3->Init.WordLength = UART_WORDLENGTH_8B;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	609a      	str	r2, [r3, #8]
  huart3->Init.StopBits = UART_STOPBITS_1;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	60da      	str	r2, [r3, #12]
  huart3->Init.Parity = UART_PARITY_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	611a      	str	r2, [r3, #16]
  huart3->Init.Mode = UART_MODE_TX_RX;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	220c      	movs	r2, #12
 8005730:	615a      	str	r2, [r3, #20]
  huart3->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	619a      	str	r2, [r3, #24]
  huart3->Init.OverSampling = UART_OVERSAMPLING_16;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	61da      	str	r2, [r3, #28]
  huart3->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	621a      	str	r2, [r3, #32]
  huart3->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart3) != HAL_OK)
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff face 	bl	8004cec <HAL_UART_Init>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <uart_init+0x56>
  {
	  uart_error_handler();
 8005756:	f7ff ffcf 	bl	80056f8 <uart_error_handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800575a:	bf00      	nop
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40004800 	.word	0x40004800

08005768 <erlog_init>:

void erlog_init(log_t *log_console, UART_HandleTypeDef *huart3)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
	log_console->uhart = huart3;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	601a      	str	r2, [r3, #0]
	log_console->msg_len = 0;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	809a      	strh	r2, [r3, #4]
	memset(log_console->msg, 0 , sizeof(log_console->msg_len));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3306      	adds	r3, #6
 8005782:	2202      	movs	r2, #2
 8005784:	2100      	movs	r1, #0
 8005786:	4618      	mov	r0, r3
 8005788:	f001 fcc0 	bl	800710c <memset>
	uart_init(log_console->uhart);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff ffb7 	bl	8005704 <uart_init>
}
 8005796:	bf00      	nop
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <erlog_write>:

void erlog_write(log_t *log_console)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b082      	sub	sp, #8
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(log_console->uhart, (uint8_t *)log_console->msg, log_console->msg_len, HAL_MAX_DELAY);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	1d99      	adds	r1, r3, #6
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	889a      	ldrh	r2, [r3, #4]
 80057b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80057b6:	f7ff fae7 	bl	8004d88 <HAL_UART_Transmit>
}
 80057ba:	bf00      	nop
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <erlog_clear>:
void erlog_clear(log_t *log_console)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b082      	sub	sp, #8
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
	memset(log_console->msg , 0, sizeof(log_console->msg_len));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3306      	adds	r3, #6
 80057ce:	2202      	movs	r2, #2
 80057d0:	2100      	movs	r1, #0
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 fc9a 	bl	800710c <memset>
}
 80057d8:	bf00      	nop
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HighPassFilter_init>:
LowPassFilter low_pass_filter;
HighPassFilter high_pass_filter;
Differentiator differentiator;

/* High Pass Filter Functions */
void HighPassFilter_init(HighPassFilter* filter, float samples) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	ed87 0a00 	vstr	s0, [r7]
    filter->kX = expf(-1.0f / samples);
 80057ec:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80057f0:	edd7 7a00 	vldr	s15, [r7]
 80057f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057f8:	eeb0 0a47 	vmov.f32	s0, s14
 80057fc:	f003 fd92 	bl	8009324 <expf>
 8005800:	eef0 7a40 	vmov.f32	s15, s0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	edc3 7a00 	vstr	s15, [r3]
    filter->kA0 = (1.0f + filter->kX) / 2.0f;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	edd3 7a00 	vldr	s15, [r3]
 8005810:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005814:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005818:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800581c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->kA1 = -filter->kA0;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	edd3 7a01 	vldr	s15, [r3, #4]
 800582c:	eef1 7a67 	vneg.f32	s15, s15
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->kB1 = filter->kX;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	60da      	str	r2, [r3, #12]
    filter->last_filter_value = 0.0;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	611a      	str	r2, [r3, #16]
    filter->last_raw_value = 0.0;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	615a      	str	r2, [r3, #20]
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <HighPassFilter_init_with_cutoff>:

void HighPassFilter_init_with_cutoff(HighPassFilter* filter, float cutoff, float sampling_frequency) {
 8005858:	b5b0      	push	{r4, r5, r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	ed87 0a02 	vstr	s0, [r7, #8]
 8005864:	edc7 0a01 	vstr	s1, [r7, #4]
    HighPassFilter_init(filter, sampling_frequency / (cutoff * 2.0 * M_PI));
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7fa fe95 	bl	8000598 <__aeabi_f2d>
 800586e:	4604      	mov	r4, r0
 8005870:	460d      	mov	r5, r1
 8005872:	68b8      	ldr	r0, [r7, #8]
 8005874:	f7fa fe90 	bl	8000598 <__aeabi_f2d>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	f7fa fd2e 	bl	80002dc <__adddf3>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4610      	mov	r0, r2
 8005886:	4619      	mov	r1, r3
 8005888:	a30d      	add	r3, pc, #52	@ (adr r3, 80058c0 <HighPassFilter_init_with_cutoff+0x68>)
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	f7fa fedb 	bl	8000648 <__aeabi_dmul>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4620      	mov	r0, r4
 8005898:	4629      	mov	r1, r5
 800589a:	f7fa ffff 	bl	800089c <__aeabi_ddiv>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	f7fb f9a7 	bl	8000bf8 <__aeabi_d2f>
 80058aa:	4603      	mov	r3, r0
 80058ac:	ee00 3a10 	vmov	s0, r3
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f7ff ff95 	bl	80057e0 <HighPassFilter_init>
}
 80058b6:	bf00      	nop
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bdb0      	pop	{r4, r5, r7, pc}
 80058be:	bf00      	nop
 80058c0:	54442d18 	.word	0x54442d18
 80058c4:	400921fb 	.word	0x400921fb

080058c8 <HighPassFilter_process>:

float HighPassFilter_process(HighPassFilter* filter, float value)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	ed87 0a00 	vstr	s0, [r7]
//    if (isnanf(filter->last_filter_value) || isnanf(filter->last_raw_value)) {
//        filter->last_filter_value = 0.0f;
//    } else {
        filter->last_filter_value = filter->kA0 * value + filter->kA1 * filter->last_raw_value + filter->kB1 * filter->last_filter_value;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80058da:	edd7 7a00 	vldr	s15, [r7]
 80058de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80058ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8005902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	edc3 7a04 	vstr	s15, [r3, #16]
    //}
    filter->last_raw_value = value;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	615a      	str	r2, [r3, #20]
    return filter->last_filter_value;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	ee07 3a90 	vmov	s15, r3
}
 800591e:	eeb0 0a67 	vmov.f32	s0, s15
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HighPassFilter_reset>:

void HighPassFilter_reset(HighPassFilter* filter) {
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
    filter->last_raw_value = 0.0;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	615a      	str	r2, [r3, #20]
    filter->last_filter_value = 0.0;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	611a      	str	r2, [r3, #16]
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <LowPassFilter_init>:

/* Low Pass Filter Functions */
void LowPassFilter_init(LowPassFilter* filter, float samples) {
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	ed87 0a00 	vstr	s0, [r7]
    filter->kX = expf(-1.0f / samples);
 800595c:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8005960:	edd7 7a00 	vldr	s15, [r7]
 8005964:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005968:	eeb0 0a47 	vmov.f32	s0, s14
 800596c:	f003 fcda 	bl	8009324 <expf>
 8005970:	eef0 7a40 	vmov.f32	s15, s0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	edc3 7a00 	vstr	s15, [r3]
    filter->kA0 = 1.0f - filter->kX;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	edd3 7a00 	vldr	s15, [r3]
 8005980:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->kB1 = filter->kX;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	609a      	str	r2, [r3, #8]
    filter->last_value = 0.0;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	60da      	str	r2, [r3, #12]
}
 800599e:	bf00      	nop
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <LowPassFilter_init_with_cutoff>:

void LowPassFilter_init_with_cutoff(LowPassFilter* filter, float cutoff, float sampling_frequency) {
 80059a8:	b5b0      	push	{r4, r5, r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80059b4:	edc7 0a01 	vstr	s1, [r7, #4]
    LowPassFilter_init(filter, sampling_frequency / (cutoff * 2.0f * M_PI));
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7fa fded 	bl	8000598 <__aeabi_f2d>
 80059be:	4604      	mov	r4, r0
 80059c0:	460d      	mov	r5, r1
 80059c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80059c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059ca:	ee17 0a90 	vmov	r0, s15
 80059ce:	f7fa fde3 	bl	8000598 <__aeabi_f2d>
 80059d2:	a30d      	add	r3, pc, #52	@ (adr r3, 8005a08 <LowPassFilter_init_with_cutoff+0x60>)
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	f7fa fe36 	bl	8000648 <__aeabi_dmul>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	4620      	mov	r0, r4
 80059e2:	4629      	mov	r1, r5
 80059e4:	f7fa ff5a 	bl	800089c <__aeabi_ddiv>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4610      	mov	r0, r2
 80059ee:	4619      	mov	r1, r3
 80059f0:	f7fb f902 	bl	8000bf8 <__aeabi_d2f>
 80059f4:	4603      	mov	r3, r0
 80059f6:	ee00 3a10 	vmov	s0, r3
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f7ff ffa8 	bl	8005950 <LowPassFilter_init>
}
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bdb0      	pop	{r4, r5, r7, pc}
 8005a08:	54442d18 	.word	0x54442d18
 8005a0c:	400921fb 	.word	0x400921fb

08005a10 <LowPassFilter_process>:

float LowPassFilter_process(LowPassFilter* filter, float value) {
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	ed87 0a00 	vstr	s0, [r7]
    if (isnanf(filter->last_value)) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a22:	eef4 7a67 	vcmp.f32	s15, s15
 8005a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a2a:	d703      	bvc.n	8005a34 <LowPassFilter_process+0x24>
        filter->last_value = value;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	60da      	str	r2, [r3, #12]
 8005a32:	e013      	b.n	8005a5c <LowPassFilter_process+0x4c>
    } else {
        filter->last_value = filter->kA0 * value + filter->kB1 * filter->last_value;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	ed93 7a01 	vldr	s14, [r3, #4]
 8005a3a:	edd7 7a00 	vldr	s15, [r7]
 8005a3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    return filter->last_value;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	ee07 3a90 	vmov	s15, r3
}
 8005a64:	eeb0 0a67 	vmov.f32	s0, s15
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <LowPassFilter_reset>:

void LowPassFilter_reset(LowPassFilter* filter) {
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
    filter->last_value = 0.0;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	60da      	str	r2, [r3, #12]
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <Differentiator_init>:

/* Differentiator Functions */
void Differentiator_init(Differentiator* differentiator, float sampling_frequency) {
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	ed87 0a00 	vstr	s0, [r7]
    differentiator->kSamplingFrequency = sampling_frequency;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	601a      	str	r2, [r3, #0]
    differentiator->last_value = 0.0;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f04f 0200 	mov.w	r2, #0
 8005aa6:	605a      	str	r2, [r3, #4]
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <Differentiator_process>:

float Differentiator_process(Differentiator* differentiator, float value) {
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	ed87 0a00 	vstr	s0, [r7]
    float diff = (value - differentiator->last_value) * differentiator->kSamplingFrequency;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ac6:	ed97 7a00 	vldr	s14, [r7]
 8005aca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	edd3 7a00 	vldr	s15, [r3]
 8005ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad8:	edc7 7a03 	vstr	s15, [r7, #12]
    differentiator->last_value = value;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	605a      	str	r2, [r3, #4]
    return diff;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	ee07 3a90 	vmov	s15, r3
}
 8005ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
	...

08005af8 <processHeartBeat>:
uint8_t rateSpot = 0;   // Index for storing BPM readings
uint8_t rates[RATE_SIZE];  // Array to store BPM values


void processHeartBeat(float current_diff)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	ed87 0a01 	vstr	s0, [r7, #4]
	const float kEdgeThreshold = -1000.0;
 8005b02:	4b4a      	ldr	r3, [pc, #296]	@ (8005c2c <processHeartBeat+0x134>)
 8005b04:	613b      	str	r3, [r7, #16]
    uint32_t currentMillis = HAL_GetTick();  // Get current time in milliseconds
 8005b06:	f7fb ff0f 	bl	8001928 <HAL_GetTick>
 8005b0a:	60f8      	str	r0, [r7, #12]
    delta = currentMillis - lastBeat;  // Calculate the time difference between current and last beat
 8005b0c:	4b48      	ldr	r3, [pc, #288]	@ (8005c30 <processHeartBeat+0x138>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	4a47      	ldr	r2, [pc, #284]	@ (8005c34 <processHeartBeat+0x13c>)
 8005b16:	6013      	str	r3, [r2, #0]
    lastBeat = currentMillis;          // Update the time of the last beat
 8005b18:	4a45      	ldr	r2, [pc, #276]	@ (8005c30 <processHeartBeat+0x138>)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6013      	str	r3, [r2, #0]

    beatsPerMinute = (60.0 / (delta / 1000.0)) - 100.0;  // Calculate beats per minute
 8005b1e:	4b45      	ldr	r3, [pc, #276]	@ (8005c34 <processHeartBeat+0x13c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fa fd16 	bl	8000554 <__aeabi_ui2d>
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	4b42      	ldr	r3, [pc, #264]	@ (8005c38 <processHeartBeat+0x140>)
 8005b2e:	f7fa feb5 	bl	800089c <__aeabi_ddiv>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	f04f 0000 	mov.w	r0, #0
 8005b3a:	4940      	ldr	r1, [pc, #256]	@ (8005c3c <processHeartBeat+0x144>)
 8005b3c:	f7fa feae 	bl	800089c <__aeabi_ddiv>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4610      	mov	r0, r2
 8005b46:	4619      	mov	r1, r3
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	4b3c      	ldr	r3, [pc, #240]	@ (8005c40 <processHeartBeat+0x148>)
 8005b4e:	f7fa fbc3 	bl	80002d8 <__aeabi_dsub>
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	4610      	mov	r0, r2
 8005b58:	4619      	mov	r1, r3
 8005b5a:	f7fb f84d 	bl	8000bf8 <__aeabi_d2f>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4a38      	ldr	r2, [pc, #224]	@ (8005c44 <processHeartBeat+0x14c>)
 8005b62:	6013      	str	r3, [r2, #0]

    // Filter valid BPM values
    if (beatsPerMinute < 255 && beatsPerMinute > 20 && current_diff < kEdgeThreshold)
 8005b64:	4b37      	ldr	r3, [pc, #220]	@ (8005c44 <processHeartBeat+0x14c>)
 8005b66:	edd3 7a00 	vldr	s15, [r3]
 8005b6a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8005c48 <processHeartBeat+0x150>
 8005b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b76:	d400      	bmi.n	8005b7a <processHeartBeat+0x82>
        {
            beatAvg += rates[x];
        }
        beatAvg /= RATE_SIZE;  // Compute the average BPM
    }
}
 8005b78:	e053      	b.n	8005c22 <processHeartBeat+0x12a>
    if (beatsPerMinute < 255 && beatsPerMinute > 20 && current_diff < kEdgeThreshold)
 8005b7a:	4b32      	ldr	r3, [pc, #200]	@ (8005c44 <processHeartBeat+0x14c>)
 8005b7c:	edd3 7a00 	vldr	s15, [r3]
 8005b80:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8005b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8c:	dc00      	bgt.n	8005b90 <processHeartBeat+0x98>
}
 8005b8e:	e048      	b.n	8005c22 <processHeartBeat+0x12a>
    if (beatsPerMinute < 255 && beatsPerMinute > 20 && current_diff < kEdgeThreshold)
 8005b90:	ed97 7a01 	vldr	s14, [r7, #4]
 8005b94:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba0:	d400      	bmi.n	8005ba4 <processHeartBeat+0xac>
}
 8005ba2:	e03e      	b.n	8005c22 <processHeartBeat+0x12a>
        rates[rateSpot++] = (uint8_t)beatsPerMinute;  // Store BPM in the array
 8005ba4:	4b27      	ldr	r3, [pc, #156]	@ (8005c44 <processHeartBeat+0x14c>)
 8005ba6:	edd3 7a00 	vldr	s15, [r3]
 8005baa:	4b28      	ldr	r3, [pc, #160]	@ (8005c4c <processHeartBeat+0x154>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	b2d1      	uxtb	r1, r2
 8005bb2:	4a26      	ldr	r2, [pc, #152]	@ (8005c4c <processHeartBeat+0x154>)
 8005bb4:	7011      	strb	r1, [r2, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bbc:	edc7 7a00 	vstr	s15, [r7]
 8005bc0:	783b      	ldrb	r3, [r7, #0]
 8005bc2:	b2d9      	uxtb	r1, r3
 8005bc4:	4b22      	ldr	r3, [pc, #136]	@ (8005c50 <processHeartBeat+0x158>)
 8005bc6:	5499      	strb	r1, [r3, r2]
        rateSpot %= RATE_SIZE;  // Wrap the array index if it exceeds RATE_SIZE
 8005bc8:	4b20      	ldr	r3, [pc, #128]	@ (8005c4c <processHeartBeat+0x154>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c4c <processHeartBeat+0x154>)
 8005bd4:	701a      	strb	r2, [r3, #0]
        beatAvg = 0;
 8005bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8005c54 <processHeartBeat+0x15c>)
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
        for (uint8_t x = 0; x < RATE_SIZE; x++)
 8005bde:	2300      	movs	r3, #0
 8005be0:	75fb      	strb	r3, [r7, #23]
 8005be2:	e011      	b.n	8005c08 <processHeartBeat+0x110>
            beatAvg += rates[x];
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c50 <processHeartBeat+0x158>)
 8005be8:	5cd3      	ldrb	r3, [r2, r3]
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bf2:	4b18      	ldr	r3, [pc, #96]	@ (8005c54 <processHeartBeat+0x15c>)
 8005bf4:	edd3 7a00 	vldr	s15, [r3]
 8005bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bfc:	4b15      	ldr	r3, [pc, #84]	@ (8005c54 <processHeartBeat+0x15c>)
 8005bfe:	edc3 7a00 	vstr	s15, [r3]
        for (uint8_t x = 0; x < RATE_SIZE; x++)
 8005c02:	7dfb      	ldrb	r3, [r7, #23]
 8005c04:	3301      	adds	r3, #1
 8005c06:	75fb      	strb	r3, [r7, #23]
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d9ea      	bls.n	8005be4 <processHeartBeat+0xec>
        beatAvg /= RATE_SIZE;  // Compute the average BPM
 8005c0e:	4b11      	ldr	r3, [pc, #68]	@ (8005c54 <processHeartBeat+0x15c>)
 8005c10:	ed93 7a00 	vldr	s14, [r3]
 8005c14:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005c18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c54 <processHeartBeat+0x15c>)
 8005c1e:	edc3 7a00 	vstr	s15, [r3]
}
 8005c22:	bf00      	nop
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	c47a0000 	.word	0xc47a0000
 8005c30:	200005b4 	.word	0x200005b4
 8005c34:	200005b8 	.word	0x200005b8
 8005c38:	408f4000 	.word	0x408f4000
 8005c3c:	404e0000 	.word	0x404e0000
 8005c40:	40590000 	.word	0x40590000
 8005c44:	20000574 	.word	0x20000574
 8005c48:	437f0000 	.word	0x437f0000
 8005c4c:	200005bc 	.word	0x200005bc
 8005c50:	200005c0 	.word	0x200005c0
 8005c54:	20000578 	.word	0x20000578

08005c58 <checkbeat>:

bool checkbeat(int32_t sample)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
	// Averaging
	const float kSamplingFrequency = 400.0;
 8005c60:	4b23      	ldr	r3, [pc, #140]	@ (8005cf0 <checkbeat+0x98>)
 8005c62:	61fb      	str	r3, [r7, #28]

	// Filters
	float current_value = sample;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c6e:	edc7 7a06 	vstr	s15, [r7, #24]
	const float kLowPassCutoff = 5.0;
 8005c72:	4b20      	ldr	r3, [pc, #128]	@ (8005cf4 <checkbeat+0x9c>)
 8005c74:	617b      	str	r3, [r7, #20]
	const float kHighPassCutoff = 0.5;
 8005c76:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8005c7a:	613b      	str	r3, [r7, #16]

	LowPassFilter_init_with_cutoff(&low_pass_filter, kLowPassCutoff, kSamplingFrequency);
 8005c7c:	edd7 0a07 	vldr	s1, [r7, #28]
 8005c80:	ed97 0a05 	vldr	s0, [r7, #20]
 8005c84:	481c      	ldr	r0, [pc, #112]	@ (8005cf8 <checkbeat+0xa0>)
 8005c86:	f7ff fe8f 	bl	80059a8 <LowPassFilter_init_with_cutoff>
	HighPassFilter_init_with_cutoff(&high_pass_filter, kHighPassCutoff, kSamplingFrequency);
 8005c8a:	edd7 0a07 	vldr	s1, [r7, #28]
 8005c8e:	ed97 0a04 	vldr	s0, [r7, #16]
 8005c92:	481a      	ldr	r0, [pc, #104]	@ (8005cfc <checkbeat+0xa4>)
 8005c94:	f7ff fde0 	bl	8005858 <HighPassFilter_init_with_cutoff>
	Differentiator_init(&differentiator, kSamplingFrequency);  // Pass sampling frequency
 8005c98:	ed97 0a07 	vldr	s0, [r7, #28]
 8005c9c:	4818      	ldr	r0, [pc, #96]	@ (8005d00 <checkbeat+0xa8>)
 8005c9e:	f7ff fef6 	bl	8005a8e <Differentiator_init>
	current_value = LowPassFilter_process(&low_pass_filter, current_value);
 8005ca2:	ed97 0a06 	vldr	s0, [r7, #24]
 8005ca6:	4814      	ldr	r0, [pc, #80]	@ (8005cf8 <checkbeat+0xa0>)
 8005ca8:	f7ff feb2 	bl	8005a10 <LowPassFilter_process>
 8005cac:	ed87 0a06 	vstr	s0, [r7, #24]
	current_value = HighPassFilter_process(&high_pass_filter, current_value);
 8005cb0:	ed97 0a06 	vldr	s0, [r7, #24]
 8005cb4:	4811      	ldr	r0, [pc, #68]	@ (8005cfc <checkbeat+0xa4>)
 8005cb6:	f7ff fe07 	bl	80058c8 <HighPassFilter_process>
 8005cba:	ed87 0a06 	vstr	s0, [r7, #24]
	float current_diff = Differentiator_process(&differentiator, current_value);
 8005cbe:	ed97 0a06 	vldr	s0, [r7, #24]
 8005cc2:	480f      	ldr	r0, [pc, #60]	@ (8005d00 <checkbeat+0xa8>)
 8005cc4:	f7ff fef6 	bl	8005ab4 <Differentiator_process>
 8005cc8:	ed87 0a03 	vstr	s0, [r7, #12]

	if (current_diff > 0.0)
 8005ccc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd8:	dd05      	ble.n	8005ce6 <checkbeat+0x8e>
	{
	    	processHeartBeat(current_diff);
 8005cda:	ed97 0a03 	vldr	s0, [r7, #12]
 8005cde:	f7ff ff0b 	bl	8005af8 <processHeartBeat>
	    	return true;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <checkbeat+0x90>
	 }
   else
   {
	    	return false;
 8005ce6:	2300      	movs	r3, #0
	}


}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3720      	adds	r7, #32
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	43c80000 	.word	0x43c80000
 8005cf4:	40a00000 	.word	0x40a00000
 8005cf8:	20000584 	.word	0x20000584
 8005cfc:	20000594 	.word	0x20000594
 8005d00:	200005ac 	.word	0x200005ac

08005d04 <i2c_error_Handler>:
uint8_t dataBuffer[32];
uint8_t readPointer = 0;
uint8_t writePointer = 0;

static void i2c_error_Handler(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005d08:	b672      	cpsid	i
}
 8005d0a:	bf00      	nop
  __disable_irq();
  while (1)
 8005d0c:	bf00      	nop
 8005d0e:	e7fd      	b.n	8005d0c <i2c_error_Handler+0x8>

08005d10 <i2c_init>:
  {
  }
}
static void i2c_init(I2C_HandleTypeDef *hi2c1)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]

  /*PF0 & PF1 pins configured*/

  /* USER CODE BEGIN I2C1_Init 1 */
  hi2c1->Instance = I2C2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8005d8c <i2c_init+0x7c>)
 8005d1c:	601a      	str	r2, [r3, #0]
  hi2c1->Init.Timing = 400000;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a1b      	ldr	r2, [pc, #108]	@ (8005d90 <i2c_init+0x80>)
 8005d22:	605a      	str	r2, [r3, #4]
  hi2c1->Init.OwnAddress1 = 0;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	609a      	str	r2, [r3, #8]
  hi2c1->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	60da      	str	r2, [r3, #12]
  hi2c1->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	611a      	str	r2, [r3, #16]
  hi2c1->Init.OwnAddress2 = 0;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	615a      	str	r2, [r3, #20]
  hi2c1->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	619a      	str	r2, [r3, #24]
  hi2c1->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	61da      	str	r2, [r3, #28]
  hi2c1->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c1) != HAL_OK)
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fc f912 	bl	8001f78 <HAL_I2C_Init>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <i2c_init+0x4e>
  {
	  i2c_error_Handler();
 8005d5a:	f7ff ffd3 	bl	8005d04 <i2c_error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005d5e:	2100      	movs	r1, #0
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7fd ff07 	bl	8003b74 <HAL_I2CEx_ConfigAnalogFilter>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <i2c_init+0x60>
  {
	  i2c_error_Handler();
 8005d6c:	f7ff ffca 	bl	8005d04 <i2c_error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c1, 0) != HAL_OK)
 8005d70:	2100      	movs	r1, #0
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7fd ff49 	bl	8003c0a <HAL_I2CEx_ConfigDigitalFilter>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <i2c_init+0x72>
  {
	  i2c_error_Handler();
 8005d7e:	f7ff ffc1 	bl	8005d04 <i2c_error_Handler>
  }
  /* USER CODE END I2C1_Init 1 */

}
 8005d82:	bf00      	nop
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40005800 	.word	0x40005800
 8005d90:	00061a80 	.word	0x00061a80

08005d94 <max30102_init>:
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *i2chandler)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
	 obj->ui2c = i2chandler;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	601a      	str	r2, [r3, #0]
	 obj->intr_flag = 0;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
	 memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3304      	adds	r3, #4
 8005db0:	2280      	movs	r2, #128	@ 0x80
 8005db2:	2100      	movs	r1, #0
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 f9a9 	bl	800710c <memset>
	 memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3384      	adds	r3, #132	@ 0x84
 8005dbe:	2280      	movs	r2, #128	@ 0x80
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f001 f9a2 	bl	800710c <memset>
	 i2c_init(obj->ui2c);  /*initialise the i2c peripheral for MAX3212*/
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff ff9f 	bl	8005d10 <i2c_init>

}
 8005dd2:	bf00      	nop
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <read_register>:
bool read_register(max30102_t *obj, uint8_t addr, uint8_t *value)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b08a      	sub	sp, #40	@ 0x28
 8005dde:	af04      	add	r7, sp, #16
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	460b      	mov	r3, r1
 8005de4:	607a      	str	r2, [r7, #4]
 8005de6:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_buff;
	uint8_t rx_address;
	rx_address = (MAX30102_I2C_ADDR << 1);
 8005de8:	23ae      	movs	r3, #174	@ 0xae
 8005dea:	75fb      	strb	r3, [r7, #23]
	if (HAL_I2C_Mem_Read(obj->ui2c, rx_address , addr, 1, &rx_buff, 1, 5000) == HAL_OK)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
 8005df2:	b299      	uxth	r1, r3
 8005df4:	7afb      	ldrb	r3, [r7, #11]
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005dfc:	9302      	str	r3, [sp, #8]
 8005dfe:	2301      	movs	r3, #1
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	f107 0316 	add.w	r3, r7, #22
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	2301      	movs	r3, #1
 8005e0a:	f7fc fc73 	bl	80026f4 <HAL_I2C_Mem_Read>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <read_register+0x44>
	{
		*value = rx_buff;
 8005e14:	7dba      	ldrb	r2, [r7, #22]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	701a      	strb	r2, [r3, #0]
		return true;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e000      	b.n	8005e20 <read_register+0x46>
	}
	else
		return false;
 8005e1e:	2300      	movs	r3, #0

}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <write_register>:
bool write_register(max30102_t *obj, uint8_t addr, uint8_t value)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af04      	add	r7, sp, #16
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
 8005e34:	4613      	mov	r3, r2
 8005e36:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_address;
	tx_address = (MAX30102_I2C_ADDR << 1);
 8005e38:	23ae      	movs	r3, #174	@ 0xae
 8005e3a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(obj->ui2c, tx_address, addr, 1, &value, 1, 10000) == HAL_OK)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	b299      	uxth	r1, r3
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	f242 7310 	movw	r3, #10000	@ 0x2710
 8005e4c:	9302      	str	r3, [sp, #8]
 8005e4e:	2301      	movs	r3, #1
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	1cbb      	adds	r3, r7, #2
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	2301      	movs	r3, #1
 8005e58:	f7fc fb38 	bl	80024cc <HAL_I2C_Mem_Write>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <write_register+0x3e>
		return false;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e000      	b.n	8005e68 <write_register+0x40>
	else
		return true;
 8005e66:	2301      	movs	r3, #1
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <bitMask>:
static void bitMask(max30102_t *obj, uint8_t reg, uint8_t mask, uint8_t thing)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	4608      	mov	r0, r1
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	4603      	mov	r3, r0
 8005e80:	70fb      	strb	r3, [r7, #3]
 8005e82:	460b      	mov	r3, r1
 8005e84:	70bb      	strb	r3, [r7, #2]
 8005e86:	4613      	mov	r3, r2
 8005e88:	707b      	strb	r3, [r7, #1]
  // Grab current register context
  uint8_t originalContents = 0;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	73fb      	strb	r3, [r7, #15]

  read_register(obj, reg, &originalContents);
 8005e8e:	f107 020f 	add.w	r2, r7, #15
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff ff9f 	bl	8005dda <read_register>

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;
 8005e9c:	7bfa      	ldrb	r2, [r7, #15]
 8005e9e:	78bb      	ldrb	r3, [r7, #2]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	73fb      	strb	r3, [r7, #15]

  // Change contents
  write_register(obj, reg, originalContents | thing);
 8005ea6:	7bfa      	ldrb	r2, [r7, #15]
 8005ea8:	787b      	ldrb	r3, [r7, #1]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff ffb8 	bl	8005e28 <write_register>
}
 8005eb8:	bf00      	nop
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <max30102_enableDIETEMPRDY>:

void max30102_enableDIETEMPRDY(max30102_t *obj)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  bitMask(obj, MAX30102_INTENABLE2, MAX30102_INT_DIE_TEMP_RDY_MASK, MAX30102_INT_DIE_TEMP_RDY_ENABLE);
 8005ec8:	22fd      	movs	r2, #253	@ 0xfd
 8005eca:	2302      	movs	r3, #2
 8005ecc:	2103      	movs	r1, #3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff ffce 	bl	8005e70 <bitMask>
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <max30102_clear_fifo>:
void max30102_disablePROXINT(max30102_t *obj) {
  bitMask(obj, MAX30102_INTENABLE1, MAX30102_INT_PROX_INT_MASK, MAX30102_INT_PROX_INT_DISABLE);
}

void max30102_clear_fifo(max30102_t *obj)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
    write_register(obj, MAX30102_FIFOWRITEPTR, 0);
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2104      	movs	r1, #4
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff ff9d 	bl	8005e28 <write_register>
    write_register(obj, MAX30102_FIFOREADPTR, 0);
 8005eee:	2200      	movs	r2, #0
 8005ef0:	2106      	movs	r1, #6
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff ff98 	bl	8005e28 <write_register>
    write_register(obj, MAX30102_FIFOOVERFLOW, 0);
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2105      	movs	r1, #5
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff ff93 	bl	8005e28 <write_register>
}
 8005f02:	bf00      	nop
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <max30102_set_fifoaverage>:

void max30102_set_fifoaverage(max30102_t *obj, uint8_t numberOfSamples)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	460b      	mov	r3, r1
 8005f14:	70fb      	strb	r3, [r7, #3]
	bitMask(obj, MAX30102_FIFOCONFIG, MAX30102_SAMPLEAVG_MASK, numberOfSamples);
 8005f16:	221f      	movs	r2, #31
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	2108      	movs	r1, #8
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff ffa7 	bl	8005e70 <bitMask>
}
 8005f22:	bf00      	nop
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <max30102_readtemp>:

float max30102_readtemp(max30102_t *obj)
{
 8005f2c:	b5b0      	push	{r4, r5, r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

  uint8_t response = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	73fb      	strb	r3, [r7, #15]
  uint8_t tempInt = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	73bb      	strb	r3, [r7, #14]
  uint8_t tempFrac = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	737b      	strb	r3, [r7, #13]

  write_register(obj, MAX30102_DIETEMPCONFIG, 0x01);
 8005f40:	2201      	movs	r2, #1
 8005f42:	2121      	movs	r1, #33	@ 0x21
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff ff6f 	bl	8005e28 <write_register>

  do
  {
	  read_register(obj, MAX30102_INTSTAT2, &response);
 8005f4a:	f107 030f 	add.w	r3, r7, #15
 8005f4e:	461a      	mov	r2, r3
 8005f50:	2101      	movs	r1, #1
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff ff41 	bl	8005dda <read_register>
	  HAL_Delay(1);
 8005f58:	2001      	movs	r0, #1
 8005f5a:	f7fb fcf1 	bl	8001940 <HAL_Delay>
  }while((response & MAX30102_INTENABLE1) == 0);
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0f0      	beq.n	8005f4a <max30102_readtemp+0x1e>

  read_register(obj, MAX30102_DIETEMPINT, &tempInt);
 8005f68:	f107 030e 	add.w	r3, r7, #14
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	211f      	movs	r1, #31
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff ff32 	bl	8005dda <read_register>
  read_register(obj, MAX30102_DIETEMPFRAC, &tempFrac);
 8005f76:	f107 030d 	add.w	r3, r7, #13
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	2120      	movs	r1, #32
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff ff2b 	bl	8005dda <read_register>

  return (float)tempInt + ((float)tempFrac * 0.0625); // Step 3: Calculate temperature (datasheet pg. 23)
 8005f84:	7bbb      	ldrb	r3, [r7, #14]
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8e:	ee17 0a90 	vmov	r0, s15
 8005f92:	f7fa fb01 	bl	8000598 <__aeabi_f2d>
 8005f96:	4604      	mov	r4, r0
 8005f98:	460d      	mov	r5, r1
 8005f9a:	7b7b      	ldrb	r3, [r7, #13]
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa4:	ee17 0a90 	vmov	r0, s15
 8005fa8:	f7fa faf6 	bl	8000598 <__aeabi_f2d>
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe0 <max30102_readtemp+0xb4>)
 8005fb2:	f7fa fb49 	bl	8000648 <__aeabi_dmul>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4620      	mov	r0, r4
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	f7fa f98d 	bl	80002dc <__adddf3>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	4619      	mov	r1, r3
 8005fca:	f7fa fe15 	bl	8000bf8 <__aeabi_d2f>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	ee07 3a90 	vmov	s15, r3
}
 8005fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	3fb00000 	.word	0x3fb00000

08005fe4 <max30102_setledmode>:

void max30102_setledmode(max30102_t *obj, uint8_t mode)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	70fb      	strb	r3, [r7, #3]
  bitMask(obj, MAX30102_MODECONFIG, MAX30102_MODE_MASK, mode); // Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	22f8      	movs	r2, #248	@ 0xf8
 8005ff4:	2109      	movs	r1, #9
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff ff3a 	bl	8005e70 <bitMask>
  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  // See datasheet, page 19
}
 8005ffc:	bf00      	nop
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <max30102_setadcrange>:

void max30102_setadcrange(max30102_t *obj, uint8_t adcRange)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  bitMask(obj ,MAX30102_PARTICLECONFIG, MAX30102_ADCRANGE_MASK, adcRange); // adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	229f      	movs	r2, #159	@ 0x9f
 8006014:	210a      	movs	r1, #10
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff ff2a 	bl	8005e70 <bitMask>
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <max30102_setsamplerate>:

void max30102_setsamplerate(max30102_t *obj, uint8_t sampleRate)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	70fb      	strb	r3, [r7, #3]
  bitMask(obj, MAX30102_PARTICLECONFIG, MAX30102_SAMPLERATE_MASK, sampleRate); // sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	22e3      	movs	r2, #227	@ 0xe3
 8006034:	210a      	movs	r1, #10
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff ff1a 	bl	8005e70 <bitMask>
}
 800603c:	bf00      	nop
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <max30102_setpulsewidth>:

void max30102_setpulsewidth(max30102_t *obj, uint8_t pulseWidth)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	70fb      	strb	r3, [r7, #3]
  bitMask(obj, MAX30102_PARTICLECONFIG, MAX30102_PULSEWIDTH_MASK, pulseWidth); // pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	22fc      	movs	r2, #252	@ 0xfc
 8006054:	210a      	movs	r1, #10
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff ff0a 	bl	8005e70 <bitMask>
}
 800605c:	bf00      	nop
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <max30102_enableFIFORollover>:
void max30102_enableFIFORollover(max30102_t *obj)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  bitMask(obj, MAX30102_FIFOCONFIG, MAX30102_ROLLOVER_MASK, MAX30102_ROLLOVER_ENABLE);
 800606c:	22ef      	movs	r2, #239	@ 0xef
 800606e:	2310      	movs	r3, #16
 8006070:	2108      	movs	r1, #8
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff fefc 	bl	8005e70 <bitMask>
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <max30102_enableSlot>:

void max30102_enableSlot(max30102_t *obj , uint8_t slotNumber, uint8_t device)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	70fb      	strb	r3, [r7, #3]
 800608c:	4613      	mov	r3, r2
 800608e:	70bb      	strb	r3, [r7, #2]

  switch (slotNumber)
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	3b01      	subs	r3, #1
 8006094:	2b03      	cmp	r3, #3
 8006096:	d82b      	bhi.n	80060f0 <max30102_enableSlot+0x70>
 8006098:	a201      	add	r2, pc, #4	@ (adr r2, 80060a0 <max30102_enableSlot+0x20>)
 800609a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609e:	bf00      	nop
 80060a0:	080060b1 	.word	0x080060b1
 80060a4:	080060bf 	.word	0x080060bf
 80060a8:	080060d1 	.word	0x080060d1
 80060ac:	080060df 	.word	0x080060df
  {
    case (1):
      bitMask(obj, MAX30102_MULTILEDCONFIG1, MAX30102_SLOT1_MASK, device);
 80060b0:	22f8      	movs	r2, #248	@ 0xf8
 80060b2:	78bb      	ldrb	r3, [r7, #2]
 80060b4:	2111      	movs	r1, #17
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff feda 	bl	8005e70 <bitMask>
      break;
 80060bc:	e019      	b.n	80060f2 <max30102_enableSlot+0x72>
    case (2):
      bitMask(obj, MAX30102_MULTILEDCONFIG1, MAX30102_SLOT2_MASK, device << 4);
 80060be:	228f      	movs	r2, #143	@ 0x8f
 80060c0:	78bb      	ldrb	r3, [r7, #2]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2111      	movs	r1, #17
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff fed1 	bl	8005e70 <bitMask>
      break;
 80060ce:	e010      	b.n	80060f2 <max30102_enableSlot+0x72>
    case (3):
      bitMask(obj, MAX30102_MULTILEDCONFIG2, MAX30102_SLOT3_MASK, device);
 80060d0:	22f8      	movs	r2, #248	@ 0xf8
 80060d2:	78bb      	ldrb	r3, [r7, #2]
 80060d4:	2112      	movs	r1, #18
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff feca 	bl	8005e70 <bitMask>
      break;
 80060dc:	e009      	b.n	80060f2 <max30102_enableSlot+0x72>
    case (4):
      bitMask(obj, MAX30102_MULTILEDCONFIG2, MAX30102_SLOT4_MASK, device << 4);
 80060de:	228f      	movs	r2, #143	@ 0x8f
 80060e0:	78bb      	ldrb	r3, [r7, #2]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2112      	movs	r1, #18
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff fec1 	bl	8005e70 <bitMask>
      break;
 80060ee:	e000      	b.n	80060f2 <max30102_enableSlot+0x72>
    default:
      //Shouldn't be here!
      break;
 80060f0:	bf00      	nop
  }
}
 80060f2:	bf00      	nop
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop

080060fc <max30102_set_pulseamplitude>:

void max30102_set_pulseamplitude(max30102_t *obj, uint8_t amplitude, max30102_colour_t colour_mode)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	70fb      	strb	r3, [r7, #3]
 8006108:	4613      	mov	r3, r2
 800610a:	70bb      	strb	r3, [r7, #2]
	uint8_t reg_val = 0;
 800610c:	2300      	movs	r3, #0
 800610e:	73fb      	strb	r3, [r7, #15]
	switch(colour_mode)
 8006110:	78bb      	ldrb	r3, [r7, #2]
 8006112:	3b01      	subs	r3, #1
 8006114:	2b03      	cmp	r3, #3
 8006116:	d817      	bhi.n	8006148 <max30102_set_pulseamplitude+0x4c>
 8006118:	a201      	add	r2, pc, #4	@ (adr r2, 8006120 <max30102_set_pulseamplitude+0x24>)
 800611a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611e:	bf00      	nop
 8006120:	08006131 	.word	0x08006131
 8006124:	08006137 	.word	0x08006137
 8006128:	0800613d 	.word	0x0800613d
 800612c:	08006143 	.word	0x08006143
	{
		case RED_COLOUR:
		{
			reg_val = MAX30102_LED1_PULSEAMP;
 8006130:	230c      	movs	r3, #12
 8006132:	73fb      	strb	r3, [r7, #15]
			break;
 8006134:	e008      	b.n	8006148 <max30102_set_pulseamplitude+0x4c>
		}
		case GREEN_COLOUR:
		{
			reg_val = MAX30102_LED3_PULSEAMP;
 8006136:	230e      	movs	r3, #14
 8006138:	73fb      	strb	r3, [r7, #15]
			break;
 800613a:	e005      	b.n	8006148 <max30102_set_pulseamplitude+0x4c>
		}
		case IR:
		{
			reg_val = MAX30102_LED2_PULSEAMP;
 800613c:	230d      	movs	r3, #13
 800613e:	73fb      	strb	r3, [r7, #15]
			break;
 8006140:	e002      	b.n	8006148 <max30102_set_pulseamplitude+0x4c>
		}
		case PROXIMITY:
		{
			reg_val = MAX30102_LED_PROX_AMP;
 8006142:	2310      	movs	r3, #16
 8006144:	73fb      	strb	r3, [r7, #15]
			break;
 8006146:	bf00      	nop
		}
	}
	write_register(obj , reg_val , amplitude);
 8006148:	78fa      	ldrb	r2, [r7, #3]
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	4619      	mov	r1, r3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff fe6a 	bl	8005e28 <write_register>
}
 8006154:	bf00      	nop
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <max30102_softReset>:

void max30102_softReset(max30102_t *obj)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
	uint8_t response = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	73fb      	strb	r3, [r7, #15]
	bitMask(obj, MAX30102_MODECONFIG, MAX30102_RESET_MASK, MAX30102_RESET);
 8006168:	22bf      	movs	r2, #191	@ 0xbf
 800616a:	2340      	movs	r3, #64	@ 0x40
 800616c:	2109      	movs	r1, #9
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff fe7e 	bl	8005e70 <bitMask>
	do
	  {
		  read_register(obj, MAX30102_MODECONFIG, &response);
 8006174:	f107 030f 	add.w	r3, r7, #15
 8006178:	461a      	mov	r2, r3
 800617a:	2109      	movs	r1, #9
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7ff fe2c 	bl	8005dda <read_register>
		  HAL_Delay(1);
 8006182:	2001      	movs	r0, #1
 8006184:	f7fb fbdc 	bl	8001940 <HAL_Delay>
	  }while((response & MAX30102_RESET) != 0);
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	2240      	movs	r2, #64	@ 0x40
 800618c:	4013      	ands	r3, r2
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1ef      	bne.n	8006174 <max30102_softReset+0x18>

}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <max30102_checksamples>:




uint32_t max30102_checksamples(max30102_t *obj)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08c      	sub	sp, #48	@ 0x30
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	6078      	str	r0, [r7, #4]
	uint8_t command;
	int bytesLeftToRead = 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	627b      	str	r3, [r7, #36]	@ 0x24
	int toGet = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	623b      	str	r3, [r7, #32]
	int numberOfSamples = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	61fb      	str	r3, [r7, #28]

    read_register(obj, MAX30102_FIFOREADPTR , &readPointer);
 80061b4:	4a6b      	ldr	r2, [pc, #428]	@ (8006364 <max30102_checksamples+0x1c4>)
 80061b6:	2106      	movs	r1, #6
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff fe0e 	bl	8005dda <read_register>
    read_register(obj, MAX30102_FIFOWRITEPTR , &writePointer);
 80061be:	4a6a      	ldr	r2, [pc, #424]	@ (8006368 <max30102_checksamples+0x1c8>)
 80061c0:	2104      	movs	r1, #4
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff fe09 	bl	8005dda <read_register>

  // Check if there is new data
  if (readPointer != writePointer)
 80061c8:	4b66      	ldr	r3, [pc, #408]	@ (8006364 <max30102_checksamples+0x1c4>)
 80061ca:	781a      	ldrb	r2, [r3, #0]
 80061cc:	4b66      	ldr	r3, [pc, #408]	@ (8006368 <max30102_checksamples+0x1c8>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	f000 80c1 	beq.w	8006358 <max30102_checksamples+0x1b8>
  {
    numberOfSamples = writePointer - readPointer;
 80061d6:	4b64      	ldr	r3, [pc, #400]	@ (8006368 <max30102_checksamples+0x1c8>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	4b61      	ldr	r3, [pc, #388]	@ (8006364 <max30102_checksamples+0x1c4>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	61fb      	str	r3, [r7, #28]
    if (numberOfSamples < 0) numberOfSamples += 32; // Wrap around condition
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da02      	bge.n	80061f0 <max30102_checksamples+0x50>
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	3320      	adds	r3, #32
 80061ee:	61fb      	str	r3, [r7, #28]

    bytesLeftToRead = numberOfSamples * max30102_led_irg * 3;
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	4613      	mov	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	4413      	add	r3, r2
 80061f8:	627b      	str	r3, [r7, #36]	@ 0x24
    command = MAX30102_FIFODATA;
 80061fa:	2307      	movs	r3, #7
 80061fc:	75fb      	strb	r3, [r7, #23]

    // Send the register address (FIFODATA) to read from
    HAL_I2C_Master_Transmit(obj->ui2c, MAX30102_I2C_ADDR << 1, &command, 1, HAL_MAX_DELAY);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	f107 0217 	add.w	r2, r7, #23
 8006206:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	2301      	movs	r3, #1
 800620e:	21ae      	movs	r1, #174	@ 0xae
 8006210:	f7fb ff4e 	bl	80020b0 <HAL_I2C_Master_Transmit>

    while (bytesLeftToRead > 0)
 8006214:	e09c      	b.n	8006350 <max30102_checksamples+0x1b0>
    {
      toGet = bytesLeftToRead;
 8006216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006218:	623b      	str	r3, [r7, #32]
      if (toGet > I2C_BUFFER_LENGTH)
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	2b20      	cmp	r3, #32
 800621e:	dd01      	ble.n	8006224 <max30102_checksamples+0x84>
      {
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (max30102_led_irg * 3)); // Trim to multiple of samples
 8006220:	231b      	movs	r3, #27
 8006222:	623b      	str	r3, [r7, #32]
      }

      bytesLeftToRead -= toGet;
 8006224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	627b      	str	r3, [r7, #36]	@ 0x24
      HAL_I2C_Master_Receive(obj->ui2c, MAX30102_I2C_ADDR << 1, dataBuffer, toGet, HAL_MAX_DELAY);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6818      	ldr	r0, [r3, #0]
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	b29b      	uxth	r3, r3
 8006234:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006238:	9200      	str	r2, [sp, #0]
 800623a:	4a4c      	ldr	r2, [pc, #304]	@ (800636c <max30102_checksamples+0x1cc>)
 800623c:	21ae      	movs	r1, #174	@ 0xae
 800623e:	f7fc f84f 	bl	80022e0 <HAL_I2C_Master_Receive>

      int index = 0;
 8006242:	2300      	movs	r3, #0
 8006244:	61bb      	str	r3, [r7, #24]
      while (toGet > 0)
 8006246:	e07f      	b.n	8006348 <max30102_checksamples+0x1a8>
      {
        obj->_head++;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 800624e:	3301      	adds	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184
        obj->_head = (obj->_head + 1) % STORAGE_SIZE;  // Wrap condition
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 800625e:	3301      	adds	r3, #1
 8006260:	425a      	negs	r2, r3
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	f002 0203 	and.w	r2, r2, #3
 800626a:	bf58      	it	pl
 800626c:	4253      	negpl	r3, r2
 800626e:	b29a      	uxth	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

        uint8_t temp[sizeof(uint32_t)] = {0};
 8006276:	2300      	movs	r3, #0
 8006278:	613b      	str	r3, [r7, #16]
        uint32_t tempLong = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]

        // Burst read three bytes for RED
        temp[2] = dataBuffer[index++];
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	61ba      	str	r2, [r7, #24]
 8006284:	4a39      	ldr	r2, [pc, #228]	@ (800636c <max30102_checksamples+0x1cc>)
 8006286:	5cd3      	ldrb	r3, [r2, r3]
 8006288:	74bb      	strb	r3, [r7, #18]
        temp[1] = dataBuffer[index++];
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	61ba      	str	r2, [r7, #24]
 8006290:	4a36      	ldr	r2, [pc, #216]	@ (800636c <max30102_checksamples+0x1cc>)
 8006292:	5cd3      	ldrb	r3, [r2, r3]
 8006294:	747b      	strb	r3, [r7, #17]
        temp[0] = dataBuffer[index++];
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	61ba      	str	r2, [r7, #24]
 800629c:	4a33      	ldr	r2, [pc, #204]	@ (800636c <max30102_checksamples+0x1cc>)
 800629e:	5cd3      	ldrb	r3, [r2, r3]
 80062a0:	743b      	strb	r3, [r7, #16]

        memcpy(&tempLong, temp, sizeof(tempLong));
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	60fb      	str	r3, [r7, #12]
        tempLong &= 0x3FFFF; // Zero out all but 18 bits
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80062ac:	60fb      	str	r3, [r7, #12]
        obj->_red_samples[obj->_head] = tempLong;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	3320      	adds	r3, #32
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	440b      	add	r3, r1
 80062be:	605a      	str	r2, [r3, #4]

        if (max30102_led_irg > 1)
        {
          // Burst read three bytes for IR
          temp[2] = dataBuffer[index++];
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	61ba      	str	r2, [r7, #24]
 80062c6:	4a29      	ldr	r2, [pc, #164]	@ (800636c <max30102_checksamples+0x1cc>)
 80062c8:	5cd3      	ldrb	r3, [r2, r3]
 80062ca:	74bb      	strb	r3, [r7, #18]
          temp[1] = dataBuffer[index++];
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	61ba      	str	r2, [r7, #24]
 80062d2:	4a26      	ldr	r2, [pc, #152]	@ (800636c <max30102_checksamples+0x1cc>)
 80062d4:	5cd3      	ldrb	r3, [r2, r3]
 80062d6:	747b      	strb	r3, [r7, #17]
          temp[0] = dataBuffer[index++];
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	61ba      	str	r2, [r7, #24]
 80062de:	4a23      	ldr	r2, [pc, #140]	@ (800636c <max30102_checksamples+0x1cc>)
 80062e0:	5cd3      	ldrb	r3, [r2, r3]
 80062e2:	743b      	strb	r3, [r7, #16]
          memcpy(&tempLong, temp, sizeof(tempLong));
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	60fb      	str	r3, [r7, #12]
          tempLong &= 0x3FFFF;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80062ee:	60fb      	str	r3, [r7, #12]
          obj->_ir_samples[obj->_head] = tempLong;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	440b      	add	r3, r1
 80062fe:	605a      	str	r2, [r3, #4]
        }

        if (max30102_led_irg > 2)
        {
          // Burst read three bytes for Green
          temp[2] = dataBuffer[index++];
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	61ba      	str	r2, [r7, #24]
 8006306:	4a19      	ldr	r2, [pc, #100]	@ (800636c <max30102_checksamples+0x1cc>)
 8006308:	5cd3      	ldrb	r3, [r2, r3]
 800630a:	74bb      	strb	r3, [r7, #18]
          temp[1] = dataBuffer[index++];
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	61ba      	str	r2, [r7, #24]
 8006312:	4a16      	ldr	r2, [pc, #88]	@ (800636c <max30102_checksamples+0x1cc>)
 8006314:	5cd3      	ldrb	r3, [r2, r3]
 8006316:	747b      	strb	r3, [r7, #17]
          temp[0] = dataBuffer[index++];
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	61ba      	str	r2, [r7, #24]
 800631e:	4a13      	ldr	r2, [pc, #76]	@ (800636c <max30102_checksamples+0x1cc>)
 8006320:	5cd3      	ldrb	r3, [r2, r3]
 8006322:	743b      	strb	r3, [r7, #16]
          memcpy(&tempLong, temp, sizeof(tempLong));
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	60fb      	str	r3, [r7, #12]
          tempLong &= 0x3FFFF;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800632e:	60fb      	str	r3, [r7, #12]
          obj->_green[obj->_head] = tempLong;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	6879      	ldr	r1, [r7, #4]
 800633a:	3340      	adds	r3, #64	@ 0x40
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	440b      	add	r3, r1
 8006340:	605a      	str	r2, [r3, #4]
        }

        toGet -=max30102_led_irg * 3;
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	3b09      	subs	r3, #9
 8006346:	623b      	str	r3, [r7, #32]
      while (toGet > 0)
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f73f af7c 	bgt.w	8006248 <max30102_checksamples+0xa8>
    while (bytesLeftToRead > 0)
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	2b00      	cmp	r3, #0
 8006354:	f73f af5f 	bgt.w	8006216 <max30102_checksamples+0x76>
      }
    }
  }
  return numberOfSamples;
 8006358:	69fb      	ldr	r3, [r7, #28]

}
 800635a:	4618      	mov	r0, r3
 800635c:	3728      	adds	r7, #40	@ 0x28
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	200005e4 	.word	0x200005e4
 8006368:	200005e5 	.word	0x200005e5
 800636c:	200005c4 	.word	0x200005c4

08006370 <max30102_safeCheck>:

uint32_t max30102_safeCheck(max30102_t *obj)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
	const uint8_t maxTimeToCheck = 250;
 8006378:	23fa      	movs	r3, #250	@ 0xfa
 800637a:	73fb      	strb	r3, [r7, #15]
    uint32_t markTime = HAL_GetTick();  // Get the current system tick (in ms)
 800637c:	f7fb fad4 	bl	8001928 <HAL_GetTick>
 8006380:	60b8      	str	r0, [r7, #8]

    while (1)
    {
        if (HAL_GetTick() - markTime > maxTimeToCheck)
 8006382:	f7fb fad1 	bl	8001928 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	1ad2      	subs	r2, r2, r3
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	429a      	cmp	r2, r3
 8006390:	d901      	bls.n	8006396 <max30102_safeCheck+0x26>
        {
            return false;  // Timeout occurred
 8006392:	2300      	movs	r3, #0
 8006394:	e011      	b.n	80063ba <max30102_safeCheck+0x4a>
        }

        if (max30102_checksamples(obj) == true)  // Check if new data is available (assuming `check()` is implemented elsewhere)
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7ff ff02 	bl	80061a0 <max30102_checksamples>
 800639c:	4603      	mov	r3, r0
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d107      	bne.n	80063b2 <max30102_safeCheck+0x42>
        {
        	return obj->_ir_samples[obj->_head];  // New data found
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	e003      	b.n	80063ba <max30102_safeCheck+0x4a>
        }
        HAL_Delay(1);  // Delay for 1 millisecond
 80063b2:	2001      	movs	r0, #1
 80063b4:	f7fb fac4 	bl	8001940 <HAL_Delay>
        if (HAL_GetTick() - markTime > maxTimeToCheck)
 80063b8:	e7e3      	b.n	8006382 <max30102_safeCheck+0x12>
    }
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <Spo2AvgProcess>:
    stat->sum = 0.0;
    stat->count = 0;
}

void Spo2AvgProcess(MinMaxAvgStatistic *stat, float value)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	ed87 0a00 	vstr	s0, [r7]
    if (isnan(stat->min))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	edd3 7a00 	vldr	s15, [r3]
 80063d4:	eef4 7a67 	vcmp.f32	s15, s15
 80063d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063dc:	d706      	bvc.n	80063ec <Spo2AvgProcess+0x2a>
    {
        stat->min = value;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	601a      	str	r2, [r3, #0]
        stat->max = value;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	605a      	str	r2, [r3, #4]
 80063ea:	e01b      	b.n	8006424 <Spo2AvgProcess+0x62>
    }
    else
    {
        stat->min = fminf(stat->min, value);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	edd3 7a00 	vldr	s15, [r3]
 80063f2:	eef0 0a67 	vmov.f32	s1, s15
 80063f6:	ed97 0a00 	vldr	s0, [r7]
 80063fa:	f003 f8be 	bl	800957a <fminf>
 80063fe:	eef0 7a40 	vmov.f32	s15, s0
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	edc3 7a00 	vstr	s15, [r3]
        stat->max = fmaxf(stat->max, value);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	edd3 7a01 	vldr	s15, [r3, #4]
 800640e:	eef0 0a67 	vmov.f32	s1, s15
 8006412:	ed97 0a00 	vldr	s0, [r7]
 8006416:	f003 f893 	bl	8009540 <fmaxf>
 800641a:	eef0 7a40 	vmov.f32	s15, s0
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	edc3 7a01 	vstr	s15, [r3, #4]
    }
    stat->sum += value;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	ed93 7a02 	vldr	s14, [r3, #8]
 800642a:	edd7 7a00 	vldr	s15, [r7]
 800642e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	edc3 7a02 	vstr	s15, [r3, #8]
    stat->count++;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	60da      	str	r2, [r3, #12]
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <average>:


float average(MinMaxAvgStatistic *stat)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
    return (stat->count > 0) ? stat->sum / stat->count : 0.0;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	dd0b      	ble.n	8006474 <average+0x28>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	ed93 7a02 	vldr	s14, [r3, #8]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800646e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006472:	e001      	b.n	8006478 <average+0x2c>
 8006474:	eddf 6a05 	vldr	s13, [pc, #20]	@ 800648c <average+0x40>
 8006478:	eef0 7a66 	vmov.f32	s15, s13
}
 800647c:	eeb0 0a67 	vmov.f32	s0, s15
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	00000000 	.word	0x00000000

08006490 <minimum>:


float minimum(MinMaxAvgStatistic *stat)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
    return stat->min;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	ee07 3a90 	vmov	s15, r3
}
 80064a0:	eeb0 0a67 	vmov.f32	s0, s15
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <maximum>:

float maximum(MinMaxAvgStatistic *stat)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
    return stat->max;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	ee07 3a90 	vmov	s15, r3
}
 80064be:	eeb0 0a67 	vmov.f32	s0, s15
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <initMinMaxAvgStatistic>:


void initMinMaxAvgStatistic(MinMaxAvgStatistic *stat) {
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
    stat->min = 0.0;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f04f 0200 	mov.w	r2, #0
 80064da:	601a      	str	r2, [r3, #0]
    stat->max = 0.0;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	605a      	str	r2, [r3, #4]
    stat->sum = 0.0;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	609a      	str	r2, [r3, #8]
    stat->count = 0;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	60da      	str	r2, [r3, #12]
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
	...

08006500 <Spo2AvgInit>:

void Spo2AvgInit(max30102_t *obj)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	ed2d 8b02 	vpush	{d8}
 8006506:	b08a      	sub	sp, #40	@ 0x28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
	float rred , rir, r = 0;
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	627b      	str	r3, [r7, #36]	@ 0x24
	float sample[4];
	initMinMaxAvgStatistic(&stat_red);
 8006512:	485a      	ldr	r0, [pc, #360]	@ (800667c <Spo2AvgInit+0x17c>)
 8006514:	f7ff ffda 	bl	80064cc <initMinMaxAvgStatistic>
	initMinMaxAvgStatistic(&stat_ir);
 8006518:	4859      	ldr	r0, [pc, #356]	@ (8006680 <Spo2AvgInit+0x180>)
 800651a:	f7ff ffd7 	bl	80064cc <initMinMaxAvgStatistic>

	sample[0] = LowPassFilter_process(&low_pass_filter, obj->_red_samples[0]);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006524:	ee07 3a90 	vmov	s15, r3
 8006528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652c:	eeb0 0a67 	vmov.f32	s0, s15
 8006530:	4854      	ldr	r0, [pc, #336]	@ (8006684 <Spo2AvgInit+0x184>)
 8006532:	f7ff fa6d 	bl	8005a10 <LowPassFilter_process>
 8006536:	eef0 7a40 	vmov.f32	s15, s0
 800653a:	edc7 7a03 	vstr	s15, [r7, #12]
	sample[1] = LowPassFilter_process(&low_pass_filter, obj->_red_samples[2]);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006544:	ee07 3a90 	vmov	s15, r3
 8006548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654c:	eeb0 0a67 	vmov.f32	s0, s15
 8006550:	484c      	ldr	r0, [pc, #304]	@ (8006684 <Spo2AvgInit+0x184>)
 8006552:	f7ff fa5d 	bl	8005a10 <LowPassFilter_process>
 8006556:	eef0 7a40 	vmov.f32	s15, s0
 800655a:	edc7 7a04 	vstr	s15, [r7, #16]
	sample[2] = LowPassFilter_process(&low_pass_filter, obj->_ir_samples[0]);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656a:	eeb0 0a67 	vmov.f32	s0, s15
 800656e:	4845      	ldr	r0, [pc, #276]	@ (8006684 <Spo2AvgInit+0x184>)
 8006570:	f7ff fa4e 	bl	8005a10 <LowPassFilter_process>
 8006574:	eef0 7a40 	vmov.f32	s15, s0
 8006578:	edc7 7a05 	vstr	s15, [r7, #20]
	sample[3] = LowPassFilter_process(&low_pass_filter, obj->_ir_samples[2]);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	ee07 3a90 	vmov	s15, r3
 8006584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006588:	eeb0 0a67 	vmov.f32	s0, s15
 800658c:	483d      	ldr	r0, [pc, #244]	@ (8006684 <Spo2AvgInit+0x184>)
 800658e:	f7ff fa3f 	bl	8005a10 <LowPassFilter_process>
 8006592:	eef0 7a40 	vmov.f32	s15, s0
 8006596:	edc7 7a06 	vstr	s15, [r7, #24]


	Spo2AvgProcess(&stat_red, sample[0]);
 800659a:	edd7 7a03 	vldr	s15, [r7, #12]
 800659e:	eeb0 0a67 	vmov.f32	s0, s15
 80065a2:	4836      	ldr	r0, [pc, #216]	@ (800667c <Spo2AvgInit+0x17c>)
 80065a4:	f7ff ff0d 	bl	80063c2 <Spo2AvgProcess>
	Spo2AvgProcess(&stat_red, sample[1]);
 80065a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80065ac:	eeb0 0a67 	vmov.f32	s0, s15
 80065b0:	4832      	ldr	r0, [pc, #200]	@ (800667c <Spo2AvgInit+0x17c>)
 80065b2:	f7ff ff06 	bl	80063c2 <Spo2AvgProcess>
	Spo2AvgProcess(&stat_ir, sample[3]);
 80065b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80065ba:	eeb0 0a67 	vmov.f32	s0, s15
 80065be:	4830      	ldr	r0, [pc, #192]	@ (8006680 <Spo2AvgInit+0x180>)
 80065c0:	f7ff feff 	bl	80063c2 <Spo2AvgProcess>
	Spo2AvgProcess(&stat_ir, sample[4]);
 80065c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80065c8:	eeb0 0a67 	vmov.f32	s0, s15
 80065cc:	482c      	ldr	r0, [pc, #176]	@ (8006680 <Spo2AvgInit+0x180>)
 80065ce:	f7ff fef8 	bl	80063c2 <Spo2AvgProcess>

	rred = (maximum(&stat_red) - minimum(&stat_red)) / average(&stat_red);
 80065d2:	482a      	ldr	r0, [pc, #168]	@ (800667c <Spo2AvgInit+0x17c>)
 80065d4:	f7ff ff6b 	bl	80064ae <maximum>
 80065d8:	eeb0 8a40 	vmov.f32	s16, s0
 80065dc:	4827      	ldr	r0, [pc, #156]	@ (800667c <Spo2AvgInit+0x17c>)
 80065de:	f7ff ff57 	bl	8006490 <minimum>
 80065e2:	eef0 7a40 	vmov.f32	s15, s0
 80065e6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80065ea:	4824      	ldr	r0, [pc, #144]	@ (800667c <Spo2AvgInit+0x17c>)
 80065ec:	f7ff ff2e 	bl	800644c <average>
 80065f0:	eeb0 7a40 	vmov.f32	s14, s0
 80065f4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80065f8:	edc7 7a08 	vstr	s15, [r7, #32]
	rir = (maximum(&stat_ir) - minimum(&stat_ir)) / average(&stat_ir);
 80065fc:	4820      	ldr	r0, [pc, #128]	@ (8006680 <Spo2AvgInit+0x180>)
 80065fe:	f7ff ff56 	bl	80064ae <maximum>
 8006602:	eeb0 8a40 	vmov.f32	s16, s0
 8006606:	481e      	ldr	r0, [pc, #120]	@ (8006680 <Spo2AvgInit+0x180>)
 8006608:	f7ff ff42 	bl	8006490 <minimum>
 800660c:	eef0 7a40 	vmov.f32	s15, s0
 8006610:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006614:	481a      	ldr	r0, [pc, #104]	@ (8006680 <Spo2AvgInit+0x180>)
 8006616:	f7ff ff19 	bl	800644c <average>
 800661a:	eeb0 7a40 	vmov.f32	s14, s0
 800661e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8006622:	edc7 7a07 	vstr	s15, [r7, #28]
	r = rred / rir;
 8006626:	edd7 6a08 	vldr	s13, [r7, #32]
 800662a:	ed97 7a07 	vldr	s14, [r7, #28]
 800662e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006632:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	spo2 = kSpO2_A * r * r + kSpO2_B * r + kSpO2_C;
 8006636:	4b14      	ldr	r3, [pc, #80]	@ (8006688 <Spo2AvgInit+0x188>)
 8006638:	ed93 7a00 	vldr	s14, [r3]
 800663c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006644:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006648:	ee27 7a27 	vmul.f32	s14, s14, s15
 800664c:	4b0f      	ldr	r3, [pc, #60]	@ (800668c <Spo2AvgInit+0x18c>)
 800664e:	edd3 6a00 	vldr	s13, [r3]
 8006652:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800665a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800665e:	4b0c      	ldr	r3, [pc, #48]	@ (8006690 <Spo2AvgInit+0x190>)
 8006660:	edd3 7a00 	vldr	s15, [r3]
 8006664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006668:	4b0a      	ldr	r3, [pc, #40]	@ (8006694 <Spo2AvgInit+0x194>)
 800666a:	edc3 7a00 	vstr	s15, [r3]
}
 800666e:	bf00      	nop
 8006670:	3728      	adds	r7, #40	@ 0x28
 8006672:	46bd      	mov	sp, r7
 8006674:	ecbd 8b02 	vpop	{d8}
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	200005e8 	.word	0x200005e8
 8006680:	200005f8 	.word	0x200005f8
 8006684:	20000584 	.word	0x20000584
 8006688:	2000000c 	.word	0x2000000c
 800668c:	20000010 	.word	0x20000010
 8006690:	20000014 	.word	0x20000014
 8006694:	20000570 	.word	0x20000570

08006698 <__cvt>:
 8006698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800669c:	ec57 6b10 	vmov	r6, r7, d0
 80066a0:	2f00      	cmp	r7, #0
 80066a2:	460c      	mov	r4, r1
 80066a4:	4619      	mov	r1, r3
 80066a6:	463b      	mov	r3, r7
 80066a8:	bfbb      	ittet	lt
 80066aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80066ae:	461f      	movlt	r7, r3
 80066b0:	2300      	movge	r3, #0
 80066b2:	232d      	movlt	r3, #45	@ 0x2d
 80066b4:	700b      	strb	r3, [r1, #0]
 80066b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80066bc:	4691      	mov	r9, r2
 80066be:	f023 0820 	bic.w	r8, r3, #32
 80066c2:	bfbc      	itt	lt
 80066c4:	4632      	movlt	r2, r6
 80066c6:	4616      	movlt	r6, r2
 80066c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066cc:	d005      	beq.n	80066da <__cvt+0x42>
 80066ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80066d2:	d100      	bne.n	80066d6 <__cvt+0x3e>
 80066d4:	3401      	adds	r4, #1
 80066d6:	2102      	movs	r1, #2
 80066d8:	e000      	b.n	80066dc <__cvt+0x44>
 80066da:	2103      	movs	r1, #3
 80066dc:	ab03      	add	r3, sp, #12
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	ab02      	add	r3, sp, #8
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	ec47 6b10 	vmov	d0, r6, r7
 80066e8:	4653      	mov	r3, sl
 80066ea:	4622      	mov	r2, r4
 80066ec:	f000 fdd0 	bl	8007290 <_dtoa_r>
 80066f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80066f4:	4605      	mov	r5, r0
 80066f6:	d119      	bne.n	800672c <__cvt+0x94>
 80066f8:	f019 0f01 	tst.w	r9, #1
 80066fc:	d00e      	beq.n	800671c <__cvt+0x84>
 80066fe:	eb00 0904 	add.w	r9, r0, r4
 8006702:	2200      	movs	r2, #0
 8006704:	2300      	movs	r3, #0
 8006706:	4630      	mov	r0, r6
 8006708:	4639      	mov	r1, r7
 800670a:	f7fa fa05 	bl	8000b18 <__aeabi_dcmpeq>
 800670e:	b108      	cbz	r0, 8006714 <__cvt+0x7c>
 8006710:	f8cd 900c 	str.w	r9, [sp, #12]
 8006714:	2230      	movs	r2, #48	@ 0x30
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	454b      	cmp	r3, r9
 800671a:	d31e      	bcc.n	800675a <__cvt+0xc2>
 800671c:	9b03      	ldr	r3, [sp, #12]
 800671e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006720:	1b5b      	subs	r3, r3, r5
 8006722:	4628      	mov	r0, r5
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	b004      	add	sp, #16
 8006728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006730:	eb00 0904 	add.w	r9, r0, r4
 8006734:	d1e5      	bne.n	8006702 <__cvt+0x6a>
 8006736:	7803      	ldrb	r3, [r0, #0]
 8006738:	2b30      	cmp	r3, #48	@ 0x30
 800673a:	d10a      	bne.n	8006752 <__cvt+0xba>
 800673c:	2200      	movs	r2, #0
 800673e:	2300      	movs	r3, #0
 8006740:	4630      	mov	r0, r6
 8006742:	4639      	mov	r1, r7
 8006744:	f7fa f9e8 	bl	8000b18 <__aeabi_dcmpeq>
 8006748:	b918      	cbnz	r0, 8006752 <__cvt+0xba>
 800674a:	f1c4 0401 	rsb	r4, r4, #1
 800674e:	f8ca 4000 	str.w	r4, [sl]
 8006752:	f8da 3000 	ldr.w	r3, [sl]
 8006756:	4499      	add	r9, r3
 8006758:	e7d3      	b.n	8006702 <__cvt+0x6a>
 800675a:	1c59      	adds	r1, r3, #1
 800675c:	9103      	str	r1, [sp, #12]
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	e7d9      	b.n	8006716 <__cvt+0x7e>

08006762 <__exponent>:
 8006762:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006764:	2900      	cmp	r1, #0
 8006766:	bfba      	itte	lt
 8006768:	4249      	neglt	r1, r1
 800676a:	232d      	movlt	r3, #45	@ 0x2d
 800676c:	232b      	movge	r3, #43	@ 0x2b
 800676e:	2909      	cmp	r1, #9
 8006770:	7002      	strb	r2, [r0, #0]
 8006772:	7043      	strb	r3, [r0, #1]
 8006774:	dd29      	ble.n	80067ca <__exponent+0x68>
 8006776:	f10d 0307 	add.w	r3, sp, #7
 800677a:	461d      	mov	r5, r3
 800677c:	270a      	movs	r7, #10
 800677e:	461a      	mov	r2, r3
 8006780:	fbb1 f6f7 	udiv	r6, r1, r7
 8006784:	fb07 1416 	mls	r4, r7, r6, r1
 8006788:	3430      	adds	r4, #48	@ 0x30
 800678a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800678e:	460c      	mov	r4, r1
 8006790:	2c63      	cmp	r4, #99	@ 0x63
 8006792:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006796:	4631      	mov	r1, r6
 8006798:	dcf1      	bgt.n	800677e <__exponent+0x1c>
 800679a:	3130      	adds	r1, #48	@ 0x30
 800679c:	1e94      	subs	r4, r2, #2
 800679e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067a2:	1c41      	adds	r1, r0, #1
 80067a4:	4623      	mov	r3, r4
 80067a6:	42ab      	cmp	r3, r5
 80067a8:	d30a      	bcc.n	80067c0 <__exponent+0x5e>
 80067aa:	f10d 0309 	add.w	r3, sp, #9
 80067ae:	1a9b      	subs	r3, r3, r2
 80067b0:	42ac      	cmp	r4, r5
 80067b2:	bf88      	it	hi
 80067b4:	2300      	movhi	r3, #0
 80067b6:	3302      	adds	r3, #2
 80067b8:	4403      	add	r3, r0
 80067ba:	1a18      	subs	r0, r3, r0
 80067bc:	b003      	add	sp, #12
 80067be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80067c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80067c8:	e7ed      	b.n	80067a6 <__exponent+0x44>
 80067ca:	2330      	movs	r3, #48	@ 0x30
 80067cc:	3130      	adds	r1, #48	@ 0x30
 80067ce:	7083      	strb	r3, [r0, #2]
 80067d0:	70c1      	strb	r1, [r0, #3]
 80067d2:	1d03      	adds	r3, r0, #4
 80067d4:	e7f1      	b.n	80067ba <__exponent+0x58>
	...

080067d8 <_printf_float>:
 80067d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067dc:	b08d      	sub	sp, #52	@ 0x34
 80067de:	460c      	mov	r4, r1
 80067e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80067e4:	4616      	mov	r6, r2
 80067e6:	461f      	mov	r7, r3
 80067e8:	4605      	mov	r5, r0
 80067ea:	f000 fc97 	bl	800711c <_localeconv_r>
 80067ee:	6803      	ldr	r3, [r0, #0]
 80067f0:	9304      	str	r3, [sp, #16]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7f9 fd64 	bl	80002c0 <strlen>
 80067f8:	2300      	movs	r3, #0
 80067fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80067fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006800:	9005      	str	r0, [sp, #20]
 8006802:	3307      	adds	r3, #7
 8006804:	f023 0307 	bic.w	r3, r3, #7
 8006808:	f103 0208 	add.w	r2, r3, #8
 800680c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006810:	f8d4 b000 	ldr.w	fp, [r4]
 8006814:	f8c8 2000 	str.w	r2, [r8]
 8006818:	e9d3 8900 	ldrd	r8, r9, [r3]
 800681c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006820:	9307      	str	r3, [sp, #28]
 8006822:	f8cd 8018 	str.w	r8, [sp, #24]
 8006826:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800682a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800682e:	4b9c      	ldr	r3, [pc, #624]	@ (8006aa0 <_printf_float+0x2c8>)
 8006830:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006834:	f7fa f9a2 	bl	8000b7c <__aeabi_dcmpun>
 8006838:	bb70      	cbnz	r0, 8006898 <_printf_float+0xc0>
 800683a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800683e:	4b98      	ldr	r3, [pc, #608]	@ (8006aa0 <_printf_float+0x2c8>)
 8006840:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006844:	f7fa f97c 	bl	8000b40 <__aeabi_dcmple>
 8006848:	bb30      	cbnz	r0, 8006898 <_printf_float+0xc0>
 800684a:	2200      	movs	r2, #0
 800684c:	2300      	movs	r3, #0
 800684e:	4640      	mov	r0, r8
 8006850:	4649      	mov	r1, r9
 8006852:	f7fa f96b 	bl	8000b2c <__aeabi_dcmplt>
 8006856:	b110      	cbz	r0, 800685e <_printf_float+0x86>
 8006858:	232d      	movs	r3, #45	@ 0x2d
 800685a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800685e:	4a91      	ldr	r2, [pc, #580]	@ (8006aa4 <_printf_float+0x2cc>)
 8006860:	4b91      	ldr	r3, [pc, #580]	@ (8006aa8 <_printf_float+0x2d0>)
 8006862:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006866:	bf94      	ite	ls
 8006868:	4690      	movls	r8, r2
 800686a:	4698      	movhi	r8, r3
 800686c:	2303      	movs	r3, #3
 800686e:	6123      	str	r3, [r4, #16]
 8006870:	f02b 0304 	bic.w	r3, fp, #4
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	f04f 0900 	mov.w	r9, #0
 800687a:	9700      	str	r7, [sp, #0]
 800687c:	4633      	mov	r3, r6
 800687e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	f000 f9d2 	bl	8006c2c <_printf_common>
 8006888:	3001      	adds	r0, #1
 800688a:	f040 808d 	bne.w	80069a8 <_printf_float+0x1d0>
 800688e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006892:	b00d      	add	sp, #52	@ 0x34
 8006894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006898:	4642      	mov	r2, r8
 800689a:	464b      	mov	r3, r9
 800689c:	4640      	mov	r0, r8
 800689e:	4649      	mov	r1, r9
 80068a0:	f7fa f96c 	bl	8000b7c <__aeabi_dcmpun>
 80068a4:	b140      	cbz	r0, 80068b8 <_printf_float+0xe0>
 80068a6:	464b      	mov	r3, r9
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	bfbc      	itt	lt
 80068ac:	232d      	movlt	r3, #45	@ 0x2d
 80068ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80068b2:	4a7e      	ldr	r2, [pc, #504]	@ (8006aac <_printf_float+0x2d4>)
 80068b4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ab0 <_printf_float+0x2d8>)
 80068b6:	e7d4      	b.n	8006862 <_printf_float+0x8a>
 80068b8:	6863      	ldr	r3, [r4, #4]
 80068ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80068be:	9206      	str	r2, [sp, #24]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	d13b      	bne.n	800693c <_printf_float+0x164>
 80068c4:	2306      	movs	r3, #6
 80068c6:	6063      	str	r3, [r4, #4]
 80068c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80068cc:	2300      	movs	r3, #0
 80068ce:	6022      	str	r2, [r4, #0]
 80068d0:	9303      	str	r3, [sp, #12]
 80068d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80068d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80068d8:	ab09      	add	r3, sp, #36	@ 0x24
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	6861      	ldr	r1, [r4, #4]
 80068de:	ec49 8b10 	vmov	d0, r8, r9
 80068e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80068e6:	4628      	mov	r0, r5
 80068e8:	f7ff fed6 	bl	8006698 <__cvt>
 80068ec:	9b06      	ldr	r3, [sp, #24]
 80068ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068f0:	2b47      	cmp	r3, #71	@ 0x47
 80068f2:	4680      	mov	r8, r0
 80068f4:	d129      	bne.n	800694a <_printf_float+0x172>
 80068f6:	1cc8      	adds	r0, r1, #3
 80068f8:	db02      	blt.n	8006900 <_printf_float+0x128>
 80068fa:	6863      	ldr	r3, [r4, #4]
 80068fc:	4299      	cmp	r1, r3
 80068fe:	dd41      	ble.n	8006984 <_printf_float+0x1ac>
 8006900:	f1aa 0a02 	sub.w	sl, sl, #2
 8006904:	fa5f fa8a 	uxtb.w	sl, sl
 8006908:	3901      	subs	r1, #1
 800690a:	4652      	mov	r2, sl
 800690c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006910:	9109      	str	r1, [sp, #36]	@ 0x24
 8006912:	f7ff ff26 	bl	8006762 <__exponent>
 8006916:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006918:	1813      	adds	r3, r2, r0
 800691a:	2a01      	cmp	r2, #1
 800691c:	4681      	mov	r9, r0
 800691e:	6123      	str	r3, [r4, #16]
 8006920:	dc02      	bgt.n	8006928 <_printf_float+0x150>
 8006922:	6822      	ldr	r2, [r4, #0]
 8006924:	07d2      	lsls	r2, r2, #31
 8006926:	d501      	bpl.n	800692c <_printf_float+0x154>
 8006928:	3301      	adds	r3, #1
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0a2      	beq.n	800687a <_printf_float+0xa2>
 8006934:	232d      	movs	r3, #45	@ 0x2d
 8006936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800693a:	e79e      	b.n	800687a <_printf_float+0xa2>
 800693c:	9a06      	ldr	r2, [sp, #24]
 800693e:	2a47      	cmp	r2, #71	@ 0x47
 8006940:	d1c2      	bne.n	80068c8 <_printf_float+0xf0>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1c0      	bne.n	80068c8 <_printf_float+0xf0>
 8006946:	2301      	movs	r3, #1
 8006948:	e7bd      	b.n	80068c6 <_printf_float+0xee>
 800694a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800694e:	d9db      	bls.n	8006908 <_printf_float+0x130>
 8006950:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006954:	d118      	bne.n	8006988 <_printf_float+0x1b0>
 8006956:	2900      	cmp	r1, #0
 8006958:	6863      	ldr	r3, [r4, #4]
 800695a:	dd0b      	ble.n	8006974 <_printf_float+0x19c>
 800695c:	6121      	str	r1, [r4, #16]
 800695e:	b913      	cbnz	r3, 8006966 <_printf_float+0x18e>
 8006960:	6822      	ldr	r2, [r4, #0]
 8006962:	07d0      	lsls	r0, r2, #31
 8006964:	d502      	bpl.n	800696c <_printf_float+0x194>
 8006966:	3301      	adds	r3, #1
 8006968:	440b      	add	r3, r1
 800696a:	6123      	str	r3, [r4, #16]
 800696c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800696e:	f04f 0900 	mov.w	r9, #0
 8006972:	e7db      	b.n	800692c <_printf_float+0x154>
 8006974:	b913      	cbnz	r3, 800697c <_printf_float+0x1a4>
 8006976:	6822      	ldr	r2, [r4, #0]
 8006978:	07d2      	lsls	r2, r2, #31
 800697a:	d501      	bpl.n	8006980 <_printf_float+0x1a8>
 800697c:	3302      	adds	r3, #2
 800697e:	e7f4      	b.n	800696a <_printf_float+0x192>
 8006980:	2301      	movs	r3, #1
 8006982:	e7f2      	b.n	800696a <_printf_float+0x192>
 8006984:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800698a:	4299      	cmp	r1, r3
 800698c:	db05      	blt.n	800699a <_printf_float+0x1c2>
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	6121      	str	r1, [r4, #16]
 8006992:	07d8      	lsls	r0, r3, #31
 8006994:	d5ea      	bpl.n	800696c <_printf_float+0x194>
 8006996:	1c4b      	adds	r3, r1, #1
 8006998:	e7e7      	b.n	800696a <_printf_float+0x192>
 800699a:	2900      	cmp	r1, #0
 800699c:	bfd4      	ite	le
 800699e:	f1c1 0202 	rsble	r2, r1, #2
 80069a2:	2201      	movgt	r2, #1
 80069a4:	4413      	add	r3, r2
 80069a6:	e7e0      	b.n	800696a <_printf_float+0x192>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	055a      	lsls	r2, r3, #21
 80069ac:	d407      	bmi.n	80069be <_printf_float+0x1e6>
 80069ae:	6923      	ldr	r3, [r4, #16]
 80069b0:	4642      	mov	r2, r8
 80069b2:	4631      	mov	r1, r6
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	d12b      	bne.n	8006a14 <_printf_float+0x23c>
 80069bc:	e767      	b.n	800688e <_printf_float+0xb6>
 80069be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069c2:	f240 80dd 	bls.w	8006b80 <_printf_float+0x3a8>
 80069c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069ca:	2200      	movs	r2, #0
 80069cc:	2300      	movs	r3, #0
 80069ce:	f7fa f8a3 	bl	8000b18 <__aeabi_dcmpeq>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d033      	beq.n	8006a3e <_printf_float+0x266>
 80069d6:	4a37      	ldr	r2, [pc, #220]	@ (8006ab4 <_printf_float+0x2dc>)
 80069d8:	2301      	movs	r3, #1
 80069da:	4631      	mov	r1, r6
 80069dc:	4628      	mov	r0, r5
 80069de:	47b8      	blx	r7
 80069e0:	3001      	adds	r0, #1
 80069e2:	f43f af54 	beq.w	800688e <_printf_float+0xb6>
 80069e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80069ea:	4543      	cmp	r3, r8
 80069ec:	db02      	blt.n	80069f4 <_printf_float+0x21c>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	07d8      	lsls	r0, r3, #31
 80069f2:	d50f      	bpl.n	8006a14 <_printf_float+0x23c>
 80069f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f8:	4631      	mov	r1, r6
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b8      	blx	r7
 80069fe:	3001      	adds	r0, #1
 8006a00:	f43f af45 	beq.w	800688e <_printf_float+0xb6>
 8006a04:	f04f 0900 	mov.w	r9, #0
 8006a08:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006a0c:	f104 0a1a 	add.w	sl, r4, #26
 8006a10:	45c8      	cmp	r8, r9
 8006a12:	dc09      	bgt.n	8006a28 <_printf_float+0x250>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	079b      	lsls	r3, r3, #30
 8006a18:	f100 8103 	bmi.w	8006c22 <_printf_float+0x44a>
 8006a1c:	68e0      	ldr	r0, [r4, #12]
 8006a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a20:	4298      	cmp	r0, r3
 8006a22:	bfb8      	it	lt
 8006a24:	4618      	movlt	r0, r3
 8006a26:	e734      	b.n	8006892 <_printf_float+0xba>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	4652      	mov	r2, sl
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b8      	blx	r7
 8006a32:	3001      	adds	r0, #1
 8006a34:	f43f af2b 	beq.w	800688e <_printf_float+0xb6>
 8006a38:	f109 0901 	add.w	r9, r9, #1
 8006a3c:	e7e8      	b.n	8006a10 <_printf_float+0x238>
 8006a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	dc39      	bgt.n	8006ab8 <_printf_float+0x2e0>
 8006a44:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab4 <_printf_float+0x2dc>)
 8006a46:	2301      	movs	r3, #1
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	47b8      	blx	r7
 8006a4e:	3001      	adds	r0, #1
 8006a50:	f43f af1d 	beq.w	800688e <_printf_float+0xb6>
 8006a54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006a58:	ea59 0303 	orrs.w	r3, r9, r3
 8006a5c:	d102      	bne.n	8006a64 <_printf_float+0x28c>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	07d9      	lsls	r1, r3, #31
 8006a62:	d5d7      	bpl.n	8006a14 <_printf_float+0x23c>
 8006a64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a68:	4631      	mov	r1, r6
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	47b8      	blx	r7
 8006a6e:	3001      	adds	r0, #1
 8006a70:	f43f af0d 	beq.w	800688e <_printf_float+0xb6>
 8006a74:	f04f 0a00 	mov.w	sl, #0
 8006a78:	f104 0b1a 	add.w	fp, r4, #26
 8006a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a7e:	425b      	negs	r3, r3
 8006a80:	4553      	cmp	r3, sl
 8006a82:	dc01      	bgt.n	8006a88 <_printf_float+0x2b0>
 8006a84:	464b      	mov	r3, r9
 8006a86:	e793      	b.n	80069b0 <_printf_float+0x1d8>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	465a      	mov	r2, fp
 8006a8c:	4631      	mov	r1, r6
 8006a8e:	4628      	mov	r0, r5
 8006a90:	47b8      	blx	r7
 8006a92:	3001      	adds	r0, #1
 8006a94:	f43f aefb 	beq.w	800688e <_printf_float+0xb6>
 8006a98:	f10a 0a01 	add.w	sl, sl, #1
 8006a9c:	e7ee      	b.n	8006a7c <_printf_float+0x2a4>
 8006a9e:	bf00      	nop
 8006aa0:	7fefffff 	.word	0x7fefffff
 8006aa4:	080096ec 	.word	0x080096ec
 8006aa8:	080096f0 	.word	0x080096f0
 8006aac:	080096f4 	.word	0x080096f4
 8006ab0:	080096f8 	.word	0x080096f8
 8006ab4:	080096fc 	.word	0x080096fc
 8006ab8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006aba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006abe:	4553      	cmp	r3, sl
 8006ac0:	bfa8      	it	ge
 8006ac2:	4653      	movge	r3, sl
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	4699      	mov	r9, r3
 8006ac8:	dc36      	bgt.n	8006b38 <_printf_float+0x360>
 8006aca:	f04f 0b00 	mov.w	fp, #0
 8006ace:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ad2:	f104 021a 	add.w	r2, r4, #26
 8006ad6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ad8:	9306      	str	r3, [sp, #24]
 8006ada:	eba3 0309 	sub.w	r3, r3, r9
 8006ade:	455b      	cmp	r3, fp
 8006ae0:	dc31      	bgt.n	8006b46 <_printf_float+0x36e>
 8006ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ae4:	459a      	cmp	sl, r3
 8006ae6:	dc3a      	bgt.n	8006b5e <_printf_float+0x386>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	07da      	lsls	r2, r3, #31
 8006aec:	d437      	bmi.n	8006b5e <_printf_float+0x386>
 8006aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af0:	ebaa 0903 	sub.w	r9, sl, r3
 8006af4:	9b06      	ldr	r3, [sp, #24]
 8006af6:	ebaa 0303 	sub.w	r3, sl, r3
 8006afa:	4599      	cmp	r9, r3
 8006afc:	bfa8      	it	ge
 8006afe:	4699      	movge	r9, r3
 8006b00:	f1b9 0f00 	cmp.w	r9, #0
 8006b04:	dc33      	bgt.n	8006b6e <_printf_float+0x396>
 8006b06:	f04f 0800 	mov.w	r8, #0
 8006b0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b0e:	f104 0b1a 	add.w	fp, r4, #26
 8006b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b14:	ebaa 0303 	sub.w	r3, sl, r3
 8006b18:	eba3 0309 	sub.w	r3, r3, r9
 8006b1c:	4543      	cmp	r3, r8
 8006b1e:	f77f af79 	ble.w	8006a14 <_printf_float+0x23c>
 8006b22:	2301      	movs	r3, #1
 8006b24:	465a      	mov	r2, fp
 8006b26:	4631      	mov	r1, r6
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47b8      	blx	r7
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	f43f aeae 	beq.w	800688e <_printf_float+0xb6>
 8006b32:	f108 0801 	add.w	r8, r8, #1
 8006b36:	e7ec      	b.n	8006b12 <_printf_float+0x33a>
 8006b38:	4642      	mov	r2, r8
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	47b8      	blx	r7
 8006b40:	3001      	adds	r0, #1
 8006b42:	d1c2      	bne.n	8006aca <_printf_float+0x2f2>
 8006b44:	e6a3      	b.n	800688e <_printf_float+0xb6>
 8006b46:	2301      	movs	r3, #1
 8006b48:	4631      	mov	r1, r6
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	9206      	str	r2, [sp, #24]
 8006b4e:	47b8      	blx	r7
 8006b50:	3001      	adds	r0, #1
 8006b52:	f43f ae9c 	beq.w	800688e <_printf_float+0xb6>
 8006b56:	9a06      	ldr	r2, [sp, #24]
 8006b58:	f10b 0b01 	add.w	fp, fp, #1
 8006b5c:	e7bb      	b.n	8006ad6 <_printf_float+0x2fe>
 8006b5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b62:	4631      	mov	r1, r6
 8006b64:	4628      	mov	r0, r5
 8006b66:	47b8      	blx	r7
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d1c0      	bne.n	8006aee <_printf_float+0x316>
 8006b6c:	e68f      	b.n	800688e <_printf_float+0xb6>
 8006b6e:	9a06      	ldr	r2, [sp, #24]
 8006b70:	464b      	mov	r3, r9
 8006b72:	4442      	add	r2, r8
 8006b74:	4631      	mov	r1, r6
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b8      	blx	r7
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d1c3      	bne.n	8006b06 <_printf_float+0x32e>
 8006b7e:	e686      	b.n	800688e <_printf_float+0xb6>
 8006b80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b84:	f1ba 0f01 	cmp.w	sl, #1
 8006b88:	dc01      	bgt.n	8006b8e <_printf_float+0x3b6>
 8006b8a:	07db      	lsls	r3, r3, #31
 8006b8c:	d536      	bpl.n	8006bfc <_printf_float+0x424>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	4642      	mov	r2, r8
 8006b92:	4631      	mov	r1, r6
 8006b94:	4628      	mov	r0, r5
 8006b96:	47b8      	blx	r7
 8006b98:	3001      	adds	r0, #1
 8006b9a:	f43f ae78 	beq.w	800688e <_printf_float+0xb6>
 8006b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	47b8      	blx	r7
 8006ba8:	3001      	adds	r0, #1
 8006baa:	f43f ae70 	beq.w	800688e <_printf_float+0xb6>
 8006bae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006bba:	f7f9 ffad 	bl	8000b18 <__aeabi_dcmpeq>
 8006bbe:	b9c0      	cbnz	r0, 8006bf2 <_printf_float+0x41a>
 8006bc0:	4653      	mov	r3, sl
 8006bc2:	f108 0201 	add.w	r2, r8, #1
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	4628      	mov	r0, r5
 8006bca:	47b8      	blx	r7
 8006bcc:	3001      	adds	r0, #1
 8006bce:	d10c      	bne.n	8006bea <_printf_float+0x412>
 8006bd0:	e65d      	b.n	800688e <_printf_float+0xb6>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	465a      	mov	r2, fp
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4628      	mov	r0, r5
 8006bda:	47b8      	blx	r7
 8006bdc:	3001      	adds	r0, #1
 8006bde:	f43f ae56 	beq.w	800688e <_printf_float+0xb6>
 8006be2:	f108 0801 	add.w	r8, r8, #1
 8006be6:	45d0      	cmp	r8, sl
 8006be8:	dbf3      	blt.n	8006bd2 <_printf_float+0x3fa>
 8006bea:	464b      	mov	r3, r9
 8006bec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006bf0:	e6df      	b.n	80069b2 <_printf_float+0x1da>
 8006bf2:	f04f 0800 	mov.w	r8, #0
 8006bf6:	f104 0b1a 	add.w	fp, r4, #26
 8006bfa:	e7f4      	b.n	8006be6 <_printf_float+0x40e>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	4642      	mov	r2, r8
 8006c00:	e7e1      	b.n	8006bc6 <_printf_float+0x3ee>
 8006c02:	2301      	movs	r3, #1
 8006c04:	464a      	mov	r2, r9
 8006c06:	4631      	mov	r1, r6
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b8      	blx	r7
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	f43f ae3e 	beq.w	800688e <_printf_float+0xb6>
 8006c12:	f108 0801 	add.w	r8, r8, #1
 8006c16:	68e3      	ldr	r3, [r4, #12]
 8006c18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c1a:	1a5b      	subs	r3, r3, r1
 8006c1c:	4543      	cmp	r3, r8
 8006c1e:	dcf0      	bgt.n	8006c02 <_printf_float+0x42a>
 8006c20:	e6fc      	b.n	8006a1c <_printf_float+0x244>
 8006c22:	f04f 0800 	mov.w	r8, #0
 8006c26:	f104 0919 	add.w	r9, r4, #25
 8006c2a:	e7f4      	b.n	8006c16 <_printf_float+0x43e>

08006c2c <_printf_common>:
 8006c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c30:	4616      	mov	r6, r2
 8006c32:	4698      	mov	r8, r3
 8006c34:	688a      	ldr	r2, [r1, #8]
 8006c36:	690b      	ldr	r3, [r1, #16]
 8006c38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	bfb8      	it	lt
 8006c40:	4613      	movlt	r3, r2
 8006c42:	6033      	str	r3, [r6, #0]
 8006c44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c48:	4607      	mov	r7, r0
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	b10a      	cbz	r2, 8006c52 <_printf_common+0x26>
 8006c4e:	3301      	adds	r3, #1
 8006c50:	6033      	str	r3, [r6, #0]
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	0699      	lsls	r1, r3, #26
 8006c56:	bf42      	ittt	mi
 8006c58:	6833      	ldrmi	r3, [r6, #0]
 8006c5a:	3302      	addmi	r3, #2
 8006c5c:	6033      	strmi	r3, [r6, #0]
 8006c5e:	6825      	ldr	r5, [r4, #0]
 8006c60:	f015 0506 	ands.w	r5, r5, #6
 8006c64:	d106      	bne.n	8006c74 <_printf_common+0x48>
 8006c66:	f104 0a19 	add.w	sl, r4, #25
 8006c6a:	68e3      	ldr	r3, [r4, #12]
 8006c6c:	6832      	ldr	r2, [r6, #0]
 8006c6e:	1a9b      	subs	r3, r3, r2
 8006c70:	42ab      	cmp	r3, r5
 8006c72:	dc26      	bgt.n	8006cc2 <_printf_common+0x96>
 8006c74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c78:	6822      	ldr	r2, [r4, #0]
 8006c7a:	3b00      	subs	r3, #0
 8006c7c:	bf18      	it	ne
 8006c7e:	2301      	movne	r3, #1
 8006c80:	0692      	lsls	r2, r2, #26
 8006c82:	d42b      	bmi.n	8006cdc <_printf_common+0xb0>
 8006c84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c88:	4641      	mov	r1, r8
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	47c8      	blx	r9
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d01e      	beq.n	8006cd0 <_printf_common+0xa4>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	6922      	ldr	r2, [r4, #16]
 8006c96:	f003 0306 	and.w	r3, r3, #6
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	bf02      	ittt	eq
 8006c9e:	68e5      	ldreq	r5, [r4, #12]
 8006ca0:	6833      	ldreq	r3, [r6, #0]
 8006ca2:	1aed      	subeq	r5, r5, r3
 8006ca4:	68a3      	ldr	r3, [r4, #8]
 8006ca6:	bf0c      	ite	eq
 8006ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cac:	2500      	movne	r5, #0
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	bfc4      	itt	gt
 8006cb2:	1a9b      	subgt	r3, r3, r2
 8006cb4:	18ed      	addgt	r5, r5, r3
 8006cb6:	2600      	movs	r6, #0
 8006cb8:	341a      	adds	r4, #26
 8006cba:	42b5      	cmp	r5, r6
 8006cbc:	d11a      	bne.n	8006cf4 <_printf_common+0xc8>
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	e008      	b.n	8006cd4 <_printf_common+0xa8>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	4652      	mov	r2, sl
 8006cc6:	4641      	mov	r1, r8
 8006cc8:	4638      	mov	r0, r7
 8006cca:	47c8      	blx	r9
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d103      	bne.n	8006cd8 <_printf_common+0xac>
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd8:	3501      	adds	r5, #1
 8006cda:	e7c6      	b.n	8006c6a <_printf_common+0x3e>
 8006cdc:	18e1      	adds	r1, r4, r3
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	2030      	movs	r0, #48	@ 0x30
 8006ce2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ce6:	4422      	add	r2, r4
 8006ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cf0:	3302      	adds	r3, #2
 8006cf2:	e7c7      	b.n	8006c84 <_printf_common+0x58>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	47c8      	blx	r9
 8006cfe:	3001      	adds	r0, #1
 8006d00:	d0e6      	beq.n	8006cd0 <_printf_common+0xa4>
 8006d02:	3601      	adds	r6, #1
 8006d04:	e7d9      	b.n	8006cba <_printf_common+0x8e>
	...

08006d08 <_printf_i>:
 8006d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0c:	7e0f      	ldrb	r7, [r1, #24]
 8006d0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d10:	2f78      	cmp	r7, #120	@ 0x78
 8006d12:	4691      	mov	r9, r2
 8006d14:	4680      	mov	r8, r0
 8006d16:	460c      	mov	r4, r1
 8006d18:	469a      	mov	sl, r3
 8006d1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d1e:	d807      	bhi.n	8006d30 <_printf_i+0x28>
 8006d20:	2f62      	cmp	r7, #98	@ 0x62
 8006d22:	d80a      	bhi.n	8006d3a <_printf_i+0x32>
 8006d24:	2f00      	cmp	r7, #0
 8006d26:	f000 80d2 	beq.w	8006ece <_printf_i+0x1c6>
 8006d2a:	2f58      	cmp	r7, #88	@ 0x58
 8006d2c:	f000 80b9 	beq.w	8006ea2 <_printf_i+0x19a>
 8006d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d38:	e03a      	b.n	8006db0 <_printf_i+0xa8>
 8006d3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d3e:	2b15      	cmp	r3, #21
 8006d40:	d8f6      	bhi.n	8006d30 <_printf_i+0x28>
 8006d42:	a101      	add	r1, pc, #4	@ (adr r1, 8006d48 <_printf_i+0x40>)
 8006d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d48:	08006da1 	.word	0x08006da1
 8006d4c:	08006db5 	.word	0x08006db5
 8006d50:	08006d31 	.word	0x08006d31
 8006d54:	08006d31 	.word	0x08006d31
 8006d58:	08006d31 	.word	0x08006d31
 8006d5c:	08006d31 	.word	0x08006d31
 8006d60:	08006db5 	.word	0x08006db5
 8006d64:	08006d31 	.word	0x08006d31
 8006d68:	08006d31 	.word	0x08006d31
 8006d6c:	08006d31 	.word	0x08006d31
 8006d70:	08006d31 	.word	0x08006d31
 8006d74:	08006eb5 	.word	0x08006eb5
 8006d78:	08006ddf 	.word	0x08006ddf
 8006d7c:	08006e6f 	.word	0x08006e6f
 8006d80:	08006d31 	.word	0x08006d31
 8006d84:	08006d31 	.word	0x08006d31
 8006d88:	08006ed7 	.word	0x08006ed7
 8006d8c:	08006d31 	.word	0x08006d31
 8006d90:	08006ddf 	.word	0x08006ddf
 8006d94:	08006d31 	.word	0x08006d31
 8006d98:	08006d31 	.word	0x08006d31
 8006d9c:	08006e77 	.word	0x08006e77
 8006da0:	6833      	ldr	r3, [r6, #0]
 8006da2:	1d1a      	adds	r2, r3, #4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6032      	str	r2, [r6, #0]
 8006da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006db0:	2301      	movs	r3, #1
 8006db2:	e09d      	b.n	8006ef0 <_printf_i+0x1e8>
 8006db4:	6833      	ldr	r3, [r6, #0]
 8006db6:	6820      	ldr	r0, [r4, #0]
 8006db8:	1d19      	adds	r1, r3, #4
 8006dba:	6031      	str	r1, [r6, #0]
 8006dbc:	0606      	lsls	r6, r0, #24
 8006dbe:	d501      	bpl.n	8006dc4 <_printf_i+0xbc>
 8006dc0:	681d      	ldr	r5, [r3, #0]
 8006dc2:	e003      	b.n	8006dcc <_printf_i+0xc4>
 8006dc4:	0645      	lsls	r5, r0, #25
 8006dc6:	d5fb      	bpl.n	8006dc0 <_printf_i+0xb8>
 8006dc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006dcc:	2d00      	cmp	r5, #0
 8006dce:	da03      	bge.n	8006dd8 <_printf_i+0xd0>
 8006dd0:	232d      	movs	r3, #45	@ 0x2d
 8006dd2:	426d      	negs	r5, r5
 8006dd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dd8:	4859      	ldr	r0, [pc, #356]	@ (8006f40 <_printf_i+0x238>)
 8006dda:	230a      	movs	r3, #10
 8006ddc:	e011      	b.n	8006e02 <_printf_i+0xfa>
 8006dde:	6821      	ldr	r1, [r4, #0]
 8006de0:	6833      	ldr	r3, [r6, #0]
 8006de2:	0608      	lsls	r0, r1, #24
 8006de4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006de8:	d402      	bmi.n	8006df0 <_printf_i+0xe8>
 8006dea:	0649      	lsls	r1, r1, #25
 8006dec:	bf48      	it	mi
 8006dee:	b2ad      	uxthmi	r5, r5
 8006df0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006df2:	4853      	ldr	r0, [pc, #332]	@ (8006f40 <_printf_i+0x238>)
 8006df4:	6033      	str	r3, [r6, #0]
 8006df6:	bf14      	ite	ne
 8006df8:	230a      	movne	r3, #10
 8006dfa:	2308      	moveq	r3, #8
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e02:	6866      	ldr	r6, [r4, #4]
 8006e04:	60a6      	str	r6, [r4, #8]
 8006e06:	2e00      	cmp	r6, #0
 8006e08:	bfa2      	ittt	ge
 8006e0a:	6821      	ldrge	r1, [r4, #0]
 8006e0c:	f021 0104 	bicge.w	r1, r1, #4
 8006e10:	6021      	strge	r1, [r4, #0]
 8006e12:	b90d      	cbnz	r5, 8006e18 <_printf_i+0x110>
 8006e14:	2e00      	cmp	r6, #0
 8006e16:	d04b      	beq.n	8006eb0 <_printf_i+0x1a8>
 8006e18:	4616      	mov	r6, r2
 8006e1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e1e:	fb03 5711 	mls	r7, r3, r1, r5
 8006e22:	5dc7      	ldrb	r7, [r0, r7]
 8006e24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e28:	462f      	mov	r7, r5
 8006e2a:	42bb      	cmp	r3, r7
 8006e2c:	460d      	mov	r5, r1
 8006e2e:	d9f4      	bls.n	8006e1a <_printf_i+0x112>
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d10b      	bne.n	8006e4c <_printf_i+0x144>
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	07df      	lsls	r7, r3, #31
 8006e38:	d508      	bpl.n	8006e4c <_printf_i+0x144>
 8006e3a:	6923      	ldr	r3, [r4, #16]
 8006e3c:	6861      	ldr	r1, [r4, #4]
 8006e3e:	4299      	cmp	r1, r3
 8006e40:	bfde      	ittt	le
 8006e42:	2330      	movle	r3, #48	@ 0x30
 8006e44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e48:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006e4c:	1b92      	subs	r2, r2, r6
 8006e4e:	6122      	str	r2, [r4, #16]
 8006e50:	f8cd a000 	str.w	sl, [sp]
 8006e54:	464b      	mov	r3, r9
 8006e56:	aa03      	add	r2, sp, #12
 8006e58:	4621      	mov	r1, r4
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	f7ff fee6 	bl	8006c2c <_printf_common>
 8006e60:	3001      	adds	r0, #1
 8006e62:	d14a      	bne.n	8006efa <_printf_i+0x1f2>
 8006e64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e68:	b004      	add	sp, #16
 8006e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	f043 0320 	orr.w	r3, r3, #32
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	4833      	ldr	r0, [pc, #204]	@ (8006f44 <_printf_i+0x23c>)
 8006e78:	2778      	movs	r7, #120	@ 0x78
 8006e7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	6831      	ldr	r1, [r6, #0]
 8006e82:	061f      	lsls	r7, r3, #24
 8006e84:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e88:	d402      	bmi.n	8006e90 <_printf_i+0x188>
 8006e8a:	065f      	lsls	r7, r3, #25
 8006e8c:	bf48      	it	mi
 8006e8e:	b2ad      	uxthmi	r5, r5
 8006e90:	6031      	str	r1, [r6, #0]
 8006e92:	07d9      	lsls	r1, r3, #31
 8006e94:	bf44      	itt	mi
 8006e96:	f043 0320 	orrmi.w	r3, r3, #32
 8006e9a:	6023      	strmi	r3, [r4, #0]
 8006e9c:	b11d      	cbz	r5, 8006ea6 <_printf_i+0x19e>
 8006e9e:	2310      	movs	r3, #16
 8006ea0:	e7ac      	b.n	8006dfc <_printf_i+0xf4>
 8006ea2:	4827      	ldr	r0, [pc, #156]	@ (8006f40 <_printf_i+0x238>)
 8006ea4:	e7e9      	b.n	8006e7a <_printf_i+0x172>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	f023 0320 	bic.w	r3, r3, #32
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	e7f6      	b.n	8006e9e <_printf_i+0x196>
 8006eb0:	4616      	mov	r6, r2
 8006eb2:	e7bd      	b.n	8006e30 <_printf_i+0x128>
 8006eb4:	6833      	ldr	r3, [r6, #0]
 8006eb6:	6825      	ldr	r5, [r4, #0]
 8006eb8:	6961      	ldr	r1, [r4, #20]
 8006eba:	1d18      	adds	r0, r3, #4
 8006ebc:	6030      	str	r0, [r6, #0]
 8006ebe:	062e      	lsls	r6, r5, #24
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	d501      	bpl.n	8006ec8 <_printf_i+0x1c0>
 8006ec4:	6019      	str	r1, [r3, #0]
 8006ec6:	e002      	b.n	8006ece <_printf_i+0x1c6>
 8006ec8:	0668      	lsls	r0, r5, #25
 8006eca:	d5fb      	bpl.n	8006ec4 <_printf_i+0x1bc>
 8006ecc:	8019      	strh	r1, [r3, #0]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	6123      	str	r3, [r4, #16]
 8006ed2:	4616      	mov	r6, r2
 8006ed4:	e7bc      	b.n	8006e50 <_printf_i+0x148>
 8006ed6:	6833      	ldr	r3, [r6, #0]
 8006ed8:	1d1a      	adds	r2, r3, #4
 8006eda:	6032      	str	r2, [r6, #0]
 8006edc:	681e      	ldr	r6, [r3, #0]
 8006ede:	6862      	ldr	r2, [r4, #4]
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f7f9 f99c 	bl	8000220 <memchr>
 8006ee8:	b108      	cbz	r0, 8006eee <_printf_i+0x1e6>
 8006eea:	1b80      	subs	r0, r0, r6
 8006eec:	6060      	str	r0, [r4, #4]
 8006eee:	6863      	ldr	r3, [r4, #4]
 8006ef0:	6123      	str	r3, [r4, #16]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ef8:	e7aa      	b.n	8006e50 <_printf_i+0x148>
 8006efa:	6923      	ldr	r3, [r4, #16]
 8006efc:	4632      	mov	r2, r6
 8006efe:	4649      	mov	r1, r9
 8006f00:	4640      	mov	r0, r8
 8006f02:	47d0      	blx	sl
 8006f04:	3001      	adds	r0, #1
 8006f06:	d0ad      	beq.n	8006e64 <_printf_i+0x15c>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	079b      	lsls	r3, r3, #30
 8006f0c:	d413      	bmi.n	8006f36 <_printf_i+0x22e>
 8006f0e:	68e0      	ldr	r0, [r4, #12]
 8006f10:	9b03      	ldr	r3, [sp, #12]
 8006f12:	4298      	cmp	r0, r3
 8006f14:	bfb8      	it	lt
 8006f16:	4618      	movlt	r0, r3
 8006f18:	e7a6      	b.n	8006e68 <_printf_i+0x160>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4632      	mov	r2, r6
 8006f1e:	4649      	mov	r1, r9
 8006f20:	4640      	mov	r0, r8
 8006f22:	47d0      	blx	sl
 8006f24:	3001      	adds	r0, #1
 8006f26:	d09d      	beq.n	8006e64 <_printf_i+0x15c>
 8006f28:	3501      	adds	r5, #1
 8006f2a:	68e3      	ldr	r3, [r4, #12]
 8006f2c:	9903      	ldr	r1, [sp, #12]
 8006f2e:	1a5b      	subs	r3, r3, r1
 8006f30:	42ab      	cmp	r3, r5
 8006f32:	dcf2      	bgt.n	8006f1a <_printf_i+0x212>
 8006f34:	e7eb      	b.n	8006f0e <_printf_i+0x206>
 8006f36:	2500      	movs	r5, #0
 8006f38:	f104 0619 	add.w	r6, r4, #25
 8006f3c:	e7f5      	b.n	8006f2a <_printf_i+0x222>
 8006f3e:	bf00      	nop
 8006f40:	080096fe 	.word	0x080096fe
 8006f44:	0800970f 	.word	0x0800970f

08006f48 <siprintf>:
 8006f48:	b40e      	push	{r1, r2, r3}
 8006f4a:	b500      	push	{lr}
 8006f4c:	b09c      	sub	sp, #112	@ 0x70
 8006f4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006f50:	9002      	str	r0, [sp, #8]
 8006f52:	9006      	str	r0, [sp, #24]
 8006f54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f58:	4809      	ldr	r0, [pc, #36]	@ (8006f80 <siprintf+0x38>)
 8006f5a:	9107      	str	r1, [sp, #28]
 8006f5c:	9104      	str	r1, [sp, #16]
 8006f5e:	4909      	ldr	r1, [pc, #36]	@ (8006f84 <siprintf+0x3c>)
 8006f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f64:	9105      	str	r1, [sp, #20]
 8006f66:	6800      	ldr	r0, [r0, #0]
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	a902      	add	r1, sp, #8
 8006f6c:	f000 ffb0 	bl	8007ed0 <_svfiprintf_r>
 8006f70:	9b02      	ldr	r3, [sp, #8]
 8006f72:	2200      	movs	r2, #0
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	b01c      	add	sp, #112	@ 0x70
 8006f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f7c:	b003      	add	sp, #12
 8006f7e:	4770      	bx	lr
 8006f80:	20000024 	.word	0x20000024
 8006f84:	ffff0208 	.word	0xffff0208

08006f88 <std>:
 8006f88:	2300      	movs	r3, #0
 8006f8a:	b510      	push	{r4, lr}
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f96:	6083      	str	r3, [r0, #8]
 8006f98:	8181      	strh	r1, [r0, #12]
 8006f9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f9c:	81c2      	strh	r2, [r0, #14]
 8006f9e:	6183      	str	r3, [r0, #24]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	2208      	movs	r2, #8
 8006fa4:	305c      	adds	r0, #92	@ 0x5c
 8006fa6:	f000 f8b1 	bl	800710c <memset>
 8006faa:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe0 <std+0x58>)
 8006fac:	6263      	str	r3, [r4, #36]	@ 0x24
 8006fae:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe4 <std+0x5c>)
 8006fb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe8 <std+0x60>)
 8006fb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006fec <std+0x64>)
 8006fb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006fba:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff0 <std+0x68>)
 8006fbc:	6224      	str	r4, [r4, #32]
 8006fbe:	429c      	cmp	r4, r3
 8006fc0:	d006      	beq.n	8006fd0 <std+0x48>
 8006fc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006fc6:	4294      	cmp	r4, r2
 8006fc8:	d002      	beq.n	8006fd0 <std+0x48>
 8006fca:	33d0      	adds	r3, #208	@ 0xd0
 8006fcc:	429c      	cmp	r4, r3
 8006fce:	d105      	bne.n	8006fdc <std+0x54>
 8006fd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fd8:	f000 b8ce 	b.w	8007178 <__retarget_lock_init_recursive>
 8006fdc:	bd10      	pop	{r4, pc}
 8006fde:	bf00      	nop
 8006fe0:	08008a91 	.word	0x08008a91
 8006fe4:	08008ab3 	.word	0x08008ab3
 8006fe8:	08008aeb 	.word	0x08008aeb
 8006fec:	08008b0f 	.word	0x08008b0f
 8006ff0:	20000608 	.word	0x20000608

08006ff4 <stdio_exit_handler>:
 8006ff4:	4a02      	ldr	r2, [pc, #8]	@ (8007000 <stdio_exit_handler+0xc>)
 8006ff6:	4903      	ldr	r1, [pc, #12]	@ (8007004 <stdio_exit_handler+0x10>)
 8006ff8:	4803      	ldr	r0, [pc, #12]	@ (8007008 <stdio_exit_handler+0x14>)
 8006ffa:	f000 b869 	b.w	80070d0 <_fwalk_sglue>
 8006ffe:	bf00      	nop
 8007000:	20000018 	.word	0x20000018
 8007004:	08008325 	.word	0x08008325
 8007008:	20000028 	.word	0x20000028

0800700c <cleanup_stdio>:
 800700c:	6841      	ldr	r1, [r0, #4]
 800700e:	4b0c      	ldr	r3, [pc, #48]	@ (8007040 <cleanup_stdio+0x34>)
 8007010:	4299      	cmp	r1, r3
 8007012:	b510      	push	{r4, lr}
 8007014:	4604      	mov	r4, r0
 8007016:	d001      	beq.n	800701c <cleanup_stdio+0x10>
 8007018:	f001 f984 	bl	8008324 <_fflush_r>
 800701c:	68a1      	ldr	r1, [r4, #8]
 800701e:	4b09      	ldr	r3, [pc, #36]	@ (8007044 <cleanup_stdio+0x38>)
 8007020:	4299      	cmp	r1, r3
 8007022:	d002      	beq.n	800702a <cleanup_stdio+0x1e>
 8007024:	4620      	mov	r0, r4
 8007026:	f001 f97d 	bl	8008324 <_fflush_r>
 800702a:	68e1      	ldr	r1, [r4, #12]
 800702c:	4b06      	ldr	r3, [pc, #24]	@ (8007048 <cleanup_stdio+0x3c>)
 800702e:	4299      	cmp	r1, r3
 8007030:	d004      	beq.n	800703c <cleanup_stdio+0x30>
 8007032:	4620      	mov	r0, r4
 8007034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007038:	f001 b974 	b.w	8008324 <_fflush_r>
 800703c:	bd10      	pop	{r4, pc}
 800703e:	bf00      	nop
 8007040:	20000608 	.word	0x20000608
 8007044:	20000670 	.word	0x20000670
 8007048:	200006d8 	.word	0x200006d8

0800704c <global_stdio_init.part.0>:
 800704c:	b510      	push	{r4, lr}
 800704e:	4b0b      	ldr	r3, [pc, #44]	@ (800707c <global_stdio_init.part.0+0x30>)
 8007050:	4c0b      	ldr	r4, [pc, #44]	@ (8007080 <global_stdio_init.part.0+0x34>)
 8007052:	4a0c      	ldr	r2, [pc, #48]	@ (8007084 <global_stdio_init.part.0+0x38>)
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	4620      	mov	r0, r4
 8007058:	2200      	movs	r2, #0
 800705a:	2104      	movs	r1, #4
 800705c:	f7ff ff94 	bl	8006f88 <std>
 8007060:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007064:	2201      	movs	r2, #1
 8007066:	2109      	movs	r1, #9
 8007068:	f7ff ff8e 	bl	8006f88 <std>
 800706c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007070:	2202      	movs	r2, #2
 8007072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007076:	2112      	movs	r1, #18
 8007078:	f7ff bf86 	b.w	8006f88 <std>
 800707c:	20000740 	.word	0x20000740
 8007080:	20000608 	.word	0x20000608
 8007084:	08006ff5 	.word	0x08006ff5

08007088 <__sfp_lock_acquire>:
 8007088:	4801      	ldr	r0, [pc, #4]	@ (8007090 <__sfp_lock_acquire+0x8>)
 800708a:	f000 b876 	b.w	800717a <__retarget_lock_acquire_recursive>
 800708e:	bf00      	nop
 8007090:	20000745 	.word	0x20000745

08007094 <__sfp_lock_release>:
 8007094:	4801      	ldr	r0, [pc, #4]	@ (800709c <__sfp_lock_release+0x8>)
 8007096:	f000 b871 	b.w	800717c <__retarget_lock_release_recursive>
 800709a:	bf00      	nop
 800709c:	20000745 	.word	0x20000745

080070a0 <__sinit>:
 80070a0:	b510      	push	{r4, lr}
 80070a2:	4604      	mov	r4, r0
 80070a4:	f7ff fff0 	bl	8007088 <__sfp_lock_acquire>
 80070a8:	6a23      	ldr	r3, [r4, #32]
 80070aa:	b11b      	cbz	r3, 80070b4 <__sinit+0x14>
 80070ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b0:	f7ff bff0 	b.w	8007094 <__sfp_lock_release>
 80070b4:	4b04      	ldr	r3, [pc, #16]	@ (80070c8 <__sinit+0x28>)
 80070b6:	6223      	str	r3, [r4, #32]
 80070b8:	4b04      	ldr	r3, [pc, #16]	@ (80070cc <__sinit+0x2c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1f5      	bne.n	80070ac <__sinit+0xc>
 80070c0:	f7ff ffc4 	bl	800704c <global_stdio_init.part.0>
 80070c4:	e7f2      	b.n	80070ac <__sinit+0xc>
 80070c6:	bf00      	nop
 80070c8:	0800700d 	.word	0x0800700d
 80070cc:	20000740 	.word	0x20000740

080070d0 <_fwalk_sglue>:
 80070d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070d4:	4607      	mov	r7, r0
 80070d6:	4688      	mov	r8, r1
 80070d8:	4614      	mov	r4, r2
 80070da:	2600      	movs	r6, #0
 80070dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070e0:	f1b9 0901 	subs.w	r9, r9, #1
 80070e4:	d505      	bpl.n	80070f2 <_fwalk_sglue+0x22>
 80070e6:	6824      	ldr	r4, [r4, #0]
 80070e8:	2c00      	cmp	r4, #0
 80070ea:	d1f7      	bne.n	80070dc <_fwalk_sglue+0xc>
 80070ec:	4630      	mov	r0, r6
 80070ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070f2:	89ab      	ldrh	r3, [r5, #12]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d907      	bls.n	8007108 <_fwalk_sglue+0x38>
 80070f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070fc:	3301      	adds	r3, #1
 80070fe:	d003      	beq.n	8007108 <_fwalk_sglue+0x38>
 8007100:	4629      	mov	r1, r5
 8007102:	4638      	mov	r0, r7
 8007104:	47c0      	blx	r8
 8007106:	4306      	orrs	r6, r0
 8007108:	3568      	adds	r5, #104	@ 0x68
 800710a:	e7e9      	b.n	80070e0 <_fwalk_sglue+0x10>

0800710c <memset>:
 800710c:	4402      	add	r2, r0
 800710e:	4603      	mov	r3, r0
 8007110:	4293      	cmp	r3, r2
 8007112:	d100      	bne.n	8007116 <memset+0xa>
 8007114:	4770      	bx	lr
 8007116:	f803 1b01 	strb.w	r1, [r3], #1
 800711a:	e7f9      	b.n	8007110 <memset+0x4>

0800711c <_localeconv_r>:
 800711c:	4800      	ldr	r0, [pc, #0]	@ (8007120 <_localeconv_r+0x4>)
 800711e:	4770      	bx	lr
 8007120:	20000164 	.word	0x20000164

08007124 <__errno>:
 8007124:	4b01      	ldr	r3, [pc, #4]	@ (800712c <__errno+0x8>)
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	20000024 	.word	0x20000024

08007130 <__libc_init_array>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	4d0d      	ldr	r5, [pc, #52]	@ (8007168 <__libc_init_array+0x38>)
 8007134:	4c0d      	ldr	r4, [pc, #52]	@ (800716c <__libc_init_array+0x3c>)
 8007136:	1b64      	subs	r4, r4, r5
 8007138:	10a4      	asrs	r4, r4, #2
 800713a:	2600      	movs	r6, #0
 800713c:	42a6      	cmp	r6, r4
 800713e:	d109      	bne.n	8007154 <__libc_init_array+0x24>
 8007140:	4d0b      	ldr	r5, [pc, #44]	@ (8007170 <__libc_init_array+0x40>)
 8007142:	4c0c      	ldr	r4, [pc, #48]	@ (8007174 <__libc_init_array+0x44>)
 8007144:	f002 fa78 	bl	8009638 <_init>
 8007148:	1b64      	subs	r4, r4, r5
 800714a:	10a4      	asrs	r4, r4, #2
 800714c:	2600      	movs	r6, #0
 800714e:	42a6      	cmp	r6, r4
 8007150:	d105      	bne.n	800715e <__libc_init_array+0x2e>
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	f855 3b04 	ldr.w	r3, [r5], #4
 8007158:	4798      	blx	r3
 800715a:	3601      	adds	r6, #1
 800715c:	e7ee      	b.n	800713c <__libc_init_array+0xc>
 800715e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007162:	4798      	blx	r3
 8007164:	3601      	adds	r6, #1
 8007166:	e7f2      	b.n	800714e <__libc_init_array+0x1e>
 8007168:	08009a80 	.word	0x08009a80
 800716c:	08009a80 	.word	0x08009a80
 8007170:	08009a80 	.word	0x08009a80
 8007174:	08009a84 	.word	0x08009a84

08007178 <__retarget_lock_init_recursive>:
 8007178:	4770      	bx	lr

0800717a <__retarget_lock_acquire_recursive>:
 800717a:	4770      	bx	lr

0800717c <__retarget_lock_release_recursive>:
 800717c:	4770      	bx	lr

0800717e <quorem>:
 800717e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007182:	6903      	ldr	r3, [r0, #16]
 8007184:	690c      	ldr	r4, [r1, #16]
 8007186:	42a3      	cmp	r3, r4
 8007188:	4607      	mov	r7, r0
 800718a:	db7e      	blt.n	800728a <quorem+0x10c>
 800718c:	3c01      	subs	r4, #1
 800718e:	f101 0814 	add.w	r8, r1, #20
 8007192:	00a3      	lsls	r3, r4, #2
 8007194:	f100 0514 	add.w	r5, r0, #20
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800719e:	9301      	str	r3, [sp, #4]
 80071a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071a8:	3301      	adds	r3, #1
 80071aa:	429a      	cmp	r2, r3
 80071ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80071b4:	d32e      	bcc.n	8007214 <quorem+0x96>
 80071b6:	f04f 0a00 	mov.w	sl, #0
 80071ba:	46c4      	mov	ip, r8
 80071bc:	46ae      	mov	lr, r5
 80071be:	46d3      	mov	fp, sl
 80071c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071c4:	b298      	uxth	r0, r3
 80071c6:	fb06 a000 	mla	r0, r6, r0, sl
 80071ca:	0c02      	lsrs	r2, r0, #16
 80071cc:	0c1b      	lsrs	r3, r3, #16
 80071ce:	fb06 2303 	mla	r3, r6, r3, r2
 80071d2:	f8de 2000 	ldr.w	r2, [lr]
 80071d6:	b280      	uxth	r0, r0
 80071d8:	b292      	uxth	r2, r2
 80071da:	1a12      	subs	r2, r2, r0
 80071dc:	445a      	add	r2, fp
 80071de:	f8de 0000 	ldr.w	r0, [lr]
 80071e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80071f0:	b292      	uxth	r2, r2
 80071f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071f6:	45e1      	cmp	r9, ip
 80071f8:	f84e 2b04 	str.w	r2, [lr], #4
 80071fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007200:	d2de      	bcs.n	80071c0 <quorem+0x42>
 8007202:	9b00      	ldr	r3, [sp, #0]
 8007204:	58eb      	ldr	r3, [r5, r3]
 8007206:	b92b      	cbnz	r3, 8007214 <quorem+0x96>
 8007208:	9b01      	ldr	r3, [sp, #4]
 800720a:	3b04      	subs	r3, #4
 800720c:	429d      	cmp	r5, r3
 800720e:	461a      	mov	r2, r3
 8007210:	d32f      	bcc.n	8007272 <quorem+0xf4>
 8007212:	613c      	str	r4, [r7, #16]
 8007214:	4638      	mov	r0, r7
 8007216:	f001 fb33 	bl	8008880 <__mcmp>
 800721a:	2800      	cmp	r0, #0
 800721c:	db25      	blt.n	800726a <quorem+0xec>
 800721e:	4629      	mov	r1, r5
 8007220:	2000      	movs	r0, #0
 8007222:	f858 2b04 	ldr.w	r2, [r8], #4
 8007226:	f8d1 c000 	ldr.w	ip, [r1]
 800722a:	fa1f fe82 	uxth.w	lr, r2
 800722e:	fa1f f38c 	uxth.w	r3, ip
 8007232:	eba3 030e 	sub.w	r3, r3, lr
 8007236:	4403      	add	r3, r0
 8007238:	0c12      	lsrs	r2, r2, #16
 800723a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800723e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007242:	b29b      	uxth	r3, r3
 8007244:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007248:	45c1      	cmp	r9, r8
 800724a:	f841 3b04 	str.w	r3, [r1], #4
 800724e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007252:	d2e6      	bcs.n	8007222 <quorem+0xa4>
 8007254:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007258:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800725c:	b922      	cbnz	r2, 8007268 <quorem+0xea>
 800725e:	3b04      	subs	r3, #4
 8007260:	429d      	cmp	r5, r3
 8007262:	461a      	mov	r2, r3
 8007264:	d30b      	bcc.n	800727e <quorem+0x100>
 8007266:	613c      	str	r4, [r7, #16]
 8007268:	3601      	adds	r6, #1
 800726a:	4630      	mov	r0, r6
 800726c:	b003      	add	sp, #12
 800726e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007272:	6812      	ldr	r2, [r2, #0]
 8007274:	3b04      	subs	r3, #4
 8007276:	2a00      	cmp	r2, #0
 8007278:	d1cb      	bne.n	8007212 <quorem+0x94>
 800727a:	3c01      	subs	r4, #1
 800727c:	e7c6      	b.n	800720c <quorem+0x8e>
 800727e:	6812      	ldr	r2, [r2, #0]
 8007280:	3b04      	subs	r3, #4
 8007282:	2a00      	cmp	r2, #0
 8007284:	d1ef      	bne.n	8007266 <quorem+0xe8>
 8007286:	3c01      	subs	r4, #1
 8007288:	e7ea      	b.n	8007260 <quorem+0xe2>
 800728a:	2000      	movs	r0, #0
 800728c:	e7ee      	b.n	800726c <quorem+0xee>
	...

08007290 <_dtoa_r>:
 8007290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	69c7      	ldr	r7, [r0, #28]
 8007296:	b099      	sub	sp, #100	@ 0x64
 8007298:	ed8d 0b02 	vstr	d0, [sp, #8]
 800729c:	ec55 4b10 	vmov	r4, r5, d0
 80072a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80072a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80072a4:	4683      	mov	fp, r0
 80072a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80072a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072aa:	b97f      	cbnz	r7, 80072cc <_dtoa_r+0x3c>
 80072ac:	2010      	movs	r0, #16
 80072ae:	f000 ff0b 	bl	80080c8 <malloc>
 80072b2:	4602      	mov	r2, r0
 80072b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80072b8:	b920      	cbnz	r0, 80072c4 <_dtoa_r+0x34>
 80072ba:	4ba7      	ldr	r3, [pc, #668]	@ (8007558 <_dtoa_r+0x2c8>)
 80072bc:	21ef      	movs	r1, #239	@ 0xef
 80072be:	48a7      	ldr	r0, [pc, #668]	@ (800755c <_dtoa_r+0x2cc>)
 80072c0:	f001 fcd6 	bl	8008c70 <__assert_func>
 80072c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80072c8:	6007      	str	r7, [r0, #0]
 80072ca:	60c7      	str	r7, [r0, #12]
 80072cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072d0:	6819      	ldr	r1, [r3, #0]
 80072d2:	b159      	cbz	r1, 80072ec <_dtoa_r+0x5c>
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	604a      	str	r2, [r1, #4]
 80072d8:	2301      	movs	r3, #1
 80072da:	4093      	lsls	r3, r2
 80072dc:	608b      	str	r3, [r1, #8]
 80072de:	4658      	mov	r0, fp
 80072e0:	f001 f894 	bl	800840c <_Bfree>
 80072e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	1e2b      	subs	r3, r5, #0
 80072ee:	bfb9      	ittee	lt
 80072f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072f4:	9303      	strlt	r3, [sp, #12]
 80072f6:	2300      	movge	r3, #0
 80072f8:	6033      	strge	r3, [r6, #0]
 80072fa:	9f03      	ldr	r7, [sp, #12]
 80072fc:	4b98      	ldr	r3, [pc, #608]	@ (8007560 <_dtoa_r+0x2d0>)
 80072fe:	bfbc      	itt	lt
 8007300:	2201      	movlt	r2, #1
 8007302:	6032      	strlt	r2, [r6, #0]
 8007304:	43bb      	bics	r3, r7
 8007306:	d112      	bne.n	800732e <_dtoa_r+0x9e>
 8007308:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800730a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007314:	4323      	orrs	r3, r4
 8007316:	f000 854d 	beq.w	8007db4 <_dtoa_r+0xb24>
 800731a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800731c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007574 <_dtoa_r+0x2e4>
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 854f 	beq.w	8007dc4 <_dtoa_r+0xb34>
 8007326:	f10a 0303 	add.w	r3, sl, #3
 800732a:	f000 bd49 	b.w	8007dc0 <_dtoa_r+0xb30>
 800732e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007332:	2200      	movs	r2, #0
 8007334:	ec51 0b17 	vmov	r0, r1, d7
 8007338:	2300      	movs	r3, #0
 800733a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800733e:	f7f9 fbeb 	bl	8000b18 <__aeabi_dcmpeq>
 8007342:	4680      	mov	r8, r0
 8007344:	b158      	cbz	r0, 800735e <_dtoa_r+0xce>
 8007346:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007348:	2301      	movs	r3, #1
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800734e:	b113      	cbz	r3, 8007356 <_dtoa_r+0xc6>
 8007350:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007352:	4b84      	ldr	r3, [pc, #528]	@ (8007564 <_dtoa_r+0x2d4>)
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007578 <_dtoa_r+0x2e8>
 800735a:	f000 bd33 	b.w	8007dc4 <_dtoa_r+0xb34>
 800735e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007362:	aa16      	add	r2, sp, #88	@ 0x58
 8007364:	a917      	add	r1, sp, #92	@ 0x5c
 8007366:	4658      	mov	r0, fp
 8007368:	f001 fb3a 	bl	80089e0 <__d2b>
 800736c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007370:	4681      	mov	r9, r0
 8007372:	2e00      	cmp	r6, #0
 8007374:	d077      	beq.n	8007466 <_dtoa_r+0x1d6>
 8007376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007378:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800737c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007384:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007388:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800738c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007390:	4619      	mov	r1, r3
 8007392:	2200      	movs	r2, #0
 8007394:	4b74      	ldr	r3, [pc, #464]	@ (8007568 <_dtoa_r+0x2d8>)
 8007396:	f7f8 ff9f 	bl	80002d8 <__aeabi_dsub>
 800739a:	a369      	add	r3, pc, #420	@ (adr r3, 8007540 <_dtoa_r+0x2b0>)
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	f7f9 f952 	bl	8000648 <__aeabi_dmul>
 80073a4:	a368      	add	r3, pc, #416	@ (adr r3, 8007548 <_dtoa_r+0x2b8>)
 80073a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073aa:	f7f8 ff97 	bl	80002dc <__adddf3>
 80073ae:	4604      	mov	r4, r0
 80073b0:	4630      	mov	r0, r6
 80073b2:	460d      	mov	r5, r1
 80073b4:	f7f9 f8de 	bl	8000574 <__aeabi_i2d>
 80073b8:	a365      	add	r3, pc, #404	@ (adr r3, 8007550 <_dtoa_r+0x2c0>)
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	f7f9 f943 	bl	8000648 <__aeabi_dmul>
 80073c2:	4602      	mov	r2, r0
 80073c4:	460b      	mov	r3, r1
 80073c6:	4620      	mov	r0, r4
 80073c8:	4629      	mov	r1, r5
 80073ca:	f7f8 ff87 	bl	80002dc <__adddf3>
 80073ce:	4604      	mov	r4, r0
 80073d0:	460d      	mov	r5, r1
 80073d2:	f7f9 fbe9 	bl	8000ba8 <__aeabi_d2iz>
 80073d6:	2200      	movs	r2, #0
 80073d8:	4607      	mov	r7, r0
 80073da:	2300      	movs	r3, #0
 80073dc:	4620      	mov	r0, r4
 80073de:	4629      	mov	r1, r5
 80073e0:	f7f9 fba4 	bl	8000b2c <__aeabi_dcmplt>
 80073e4:	b140      	cbz	r0, 80073f8 <_dtoa_r+0x168>
 80073e6:	4638      	mov	r0, r7
 80073e8:	f7f9 f8c4 	bl	8000574 <__aeabi_i2d>
 80073ec:	4622      	mov	r2, r4
 80073ee:	462b      	mov	r3, r5
 80073f0:	f7f9 fb92 	bl	8000b18 <__aeabi_dcmpeq>
 80073f4:	b900      	cbnz	r0, 80073f8 <_dtoa_r+0x168>
 80073f6:	3f01      	subs	r7, #1
 80073f8:	2f16      	cmp	r7, #22
 80073fa:	d851      	bhi.n	80074a0 <_dtoa_r+0x210>
 80073fc:	4b5b      	ldr	r3, [pc, #364]	@ (800756c <_dtoa_r+0x2dc>)
 80073fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800740a:	f7f9 fb8f 	bl	8000b2c <__aeabi_dcmplt>
 800740e:	2800      	cmp	r0, #0
 8007410:	d048      	beq.n	80074a4 <_dtoa_r+0x214>
 8007412:	3f01      	subs	r7, #1
 8007414:	2300      	movs	r3, #0
 8007416:	9312      	str	r3, [sp, #72]	@ 0x48
 8007418:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800741a:	1b9b      	subs	r3, r3, r6
 800741c:	1e5a      	subs	r2, r3, #1
 800741e:	bf44      	itt	mi
 8007420:	f1c3 0801 	rsbmi	r8, r3, #1
 8007424:	2300      	movmi	r3, #0
 8007426:	9208      	str	r2, [sp, #32]
 8007428:	bf54      	ite	pl
 800742a:	f04f 0800 	movpl.w	r8, #0
 800742e:	9308      	strmi	r3, [sp, #32]
 8007430:	2f00      	cmp	r7, #0
 8007432:	db39      	blt.n	80074a8 <_dtoa_r+0x218>
 8007434:	9b08      	ldr	r3, [sp, #32]
 8007436:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007438:	443b      	add	r3, r7
 800743a:	9308      	str	r3, [sp, #32]
 800743c:	2300      	movs	r3, #0
 800743e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007442:	2b09      	cmp	r3, #9
 8007444:	d864      	bhi.n	8007510 <_dtoa_r+0x280>
 8007446:	2b05      	cmp	r3, #5
 8007448:	bfc4      	itt	gt
 800744a:	3b04      	subgt	r3, #4
 800744c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800744e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007450:	f1a3 0302 	sub.w	r3, r3, #2
 8007454:	bfcc      	ite	gt
 8007456:	2400      	movgt	r4, #0
 8007458:	2401      	movle	r4, #1
 800745a:	2b03      	cmp	r3, #3
 800745c:	d863      	bhi.n	8007526 <_dtoa_r+0x296>
 800745e:	e8df f003 	tbb	[pc, r3]
 8007462:	372a      	.short	0x372a
 8007464:	5535      	.short	0x5535
 8007466:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800746a:	441e      	add	r6, r3
 800746c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007470:	2b20      	cmp	r3, #32
 8007472:	bfc1      	itttt	gt
 8007474:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007478:	409f      	lslgt	r7, r3
 800747a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800747e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007482:	bfd6      	itet	le
 8007484:	f1c3 0320 	rsble	r3, r3, #32
 8007488:	ea47 0003 	orrgt.w	r0, r7, r3
 800748c:	fa04 f003 	lslle.w	r0, r4, r3
 8007490:	f7f9 f860 	bl	8000554 <__aeabi_ui2d>
 8007494:	2201      	movs	r2, #1
 8007496:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800749a:	3e01      	subs	r6, #1
 800749c:	9214      	str	r2, [sp, #80]	@ 0x50
 800749e:	e777      	b.n	8007390 <_dtoa_r+0x100>
 80074a0:	2301      	movs	r3, #1
 80074a2:	e7b8      	b.n	8007416 <_dtoa_r+0x186>
 80074a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80074a6:	e7b7      	b.n	8007418 <_dtoa_r+0x188>
 80074a8:	427b      	negs	r3, r7
 80074aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80074ac:	2300      	movs	r3, #0
 80074ae:	eba8 0807 	sub.w	r8, r8, r7
 80074b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074b4:	e7c4      	b.n	8007440 <_dtoa_r+0x1b0>
 80074b6:	2300      	movs	r3, #0
 80074b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074bc:	2b00      	cmp	r3, #0
 80074be:	dc35      	bgt.n	800752c <_dtoa_r+0x29c>
 80074c0:	2301      	movs	r3, #1
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	9307      	str	r3, [sp, #28]
 80074c6:	461a      	mov	r2, r3
 80074c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80074ca:	e00b      	b.n	80074e4 <_dtoa_r+0x254>
 80074cc:	2301      	movs	r3, #1
 80074ce:	e7f3      	b.n	80074b8 <_dtoa_r+0x228>
 80074d0:	2300      	movs	r3, #0
 80074d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074d6:	18fb      	adds	r3, r7, r3
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	3301      	adds	r3, #1
 80074dc:	2b01      	cmp	r3, #1
 80074de:	9307      	str	r3, [sp, #28]
 80074e0:	bfb8      	it	lt
 80074e2:	2301      	movlt	r3, #1
 80074e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80074e8:	2100      	movs	r1, #0
 80074ea:	2204      	movs	r2, #4
 80074ec:	f102 0514 	add.w	r5, r2, #20
 80074f0:	429d      	cmp	r5, r3
 80074f2:	d91f      	bls.n	8007534 <_dtoa_r+0x2a4>
 80074f4:	6041      	str	r1, [r0, #4]
 80074f6:	4658      	mov	r0, fp
 80074f8:	f000 ff48 	bl	800838c <_Balloc>
 80074fc:	4682      	mov	sl, r0
 80074fe:	2800      	cmp	r0, #0
 8007500:	d13c      	bne.n	800757c <_dtoa_r+0x2ec>
 8007502:	4b1b      	ldr	r3, [pc, #108]	@ (8007570 <_dtoa_r+0x2e0>)
 8007504:	4602      	mov	r2, r0
 8007506:	f240 11af 	movw	r1, #431	@ 0x1af
 800750a:	e6d8      	b.n	80072be <_dtoa_r+0x2e>
 800750c:	2301      	movs	r3, #1
 800750e:	e7e0      	b.n	80074d2 <_dtoa_r+0x242>
 8007510:	2401      	movs	r4, #1
 8007512:	2300      	movs	r3, #0
 8007514:	9309      	str	r3, [sp, #36]	@ 0x24
 8007516:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	9307      	str	r3, [sp, #28]
 8007520:	2200      	movs	r2, #0
 8007522:	2312      	movs	r3, #18
 8007524:	e7d0      	b.n	80074c8 <_dtoa_r+0x238>
 8007526:	2301      	movs	r3, #1
 8007528:	930b      	str	r3, [sp, #44]	@ 0x2c
 800752a:	e7f5      	b.n	8007518 <_dtoa_r+0x288>
 800752c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	9307      	str	r3, [sp, #28]
 8007532:	e7d7      	b.n	80074e4 <_dtoa_r+0x254>
 8007534:	3101      	adds	r1, #1
 8007536:	0052      	lsls	r2, r2, #1
 8007538:	e7d8      	b.n	80074ec <_dtoa_r+0x25c>
 800753a:	bf00      	nop
 800753c:	f3af 8000 	nop.w
 8007540:	636f4361 	.word	0x636f4361
 8007544:	3fd287a7 	.word	0x3fd287a7
 8007548:	8b60c8b3 	.word	0x8b60c8b3
 800754c:	3fc68a28 	.word	0x3fc68a28
 8007550:	509f79fb 	.word	0x509f79fb
 8007554:	3fd34413 	.word	0x3fd34413
 8007558:	0800972d 	.word	0x0800972d
 800755c:	08009744 	.word	0x08009744
 8007560:	7ff00000 	.word	0x7ff00000
 8007564:	080096fd 	.word	0x080096fd
 8007568:	3ff80000 	.word	0x3ff80000
 800756c:	08009850 	.word	0x08009850
 8007570:	0800979c 	.word	0x0800979c
 8007574:	08009729 	.word	0x08009729
 8007578:	080096fc 	.word	0x080096fc
 800757c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007580:	6018      	str	r0, [r3, #0]
 8007582:	9b07      	ldr	r3, [sp, #28]
 8007584:	2b0e      	cmp	r3, #14
 8007586:	f200 80a4 	bhi.w	80076d2 <_dtoa_r+0x442>
 800758a:	2c00      	cmp	r4, #0
 800758c:	f000 80a1 	beq.w	80076d2 <_dtoa_r+0x442>
 8007590:	2f00      	cmp	r7, #0
 8007592:	dd33      	ble.n	80075fc <_dtoa_r+0x36c>
 8007594:	4bad      	ldr	r3, [pc, #692]	@ (800784c <_dtoa_r+0x5bc>)
 8007596:	f007 020f 	and.w	r2, r7, #15
 800759a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800759e:	ed93 7b00 	vldr	d7, [r3]
 80075a2:	05f8      	lsls	r0, r7, #23
 80075a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80075a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80075ac:	d516      	bpl.n	80075dc <_dtoa_r+0x34c>
 80075ae:	4ba8      	ldr	r3, [pc, #672]	@ (8007850 <_dtoa_r+0x5c0>)
 80075b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075b8:	f7f9 f970 	bl	800089c <__aeabi_ddiv>
 80075bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075c0:	f004 040f 	and.w	r4, r4, #15
 80075c4:	2603      	movs	r6, #3
 80075c6:	4da2      	ldr	r5, [pc, #648]	@ (8007850 <_dtoa_r+0x5c0>)
 80075c8:	b954      	cbnz	r4, 80075e0 <_dtoa_r+0x350>
 80075ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075d2:	f7f9 f963 	bl	800089c <__aeabi_ddiv>
 80075d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075da:	e028      	b.n	800762e <_dtoa_r+0x39e>
 80075dc:	2602      	movs	r6, #2
 80075de:	e7f2      	b.n	80075c6 <_dtoa_r+0x336>
 80075e0:	07e1      	lsls	r1, r4, #31
 80075e2:	d508      	bpl.n	80075f6 <_dtoa_r+0x366>
 80075e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075ec:	f7f9 f82c 	bl	8000648 <__aeabi_dmul>
 80075f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075f4:	3601      	adds	r6, #1
 80075f6:	1064      	asrs	r4, r4, #1
 80075f8:	3508      	adds	r5, #8
 80075fa:	e7e5      	b.n	80075c8 <_dtoa_r+0x338>
 80075fc:	f000 80d2 	beq.w	80077a4 <_dtoa_r+0x514>
 8007600:	427c      	negs	r4, r7
 8007602:	4b92      	ldr	r3, [pc, #584]	@ (800784c <_dtoa_r+0x5bc>)
 8007604:	4d92      	ldr	r5, [pc, #584]	@ (8007850 <_dtoa_r+0x5c0>)
 8007606:	f004 020f 	and.w	r2, r4, #15
 800760a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007612:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007616:	f7f9 f817 	bl	8000648 <__aeabi_dmul>
 800761a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800761e:	1124      	asrs	r4, r4, #4
 8007620:	2300      	movs	r3, #0
 8007622:	2602      	movs	r6, #2
 8007624:	2c00      	cmp	r4, #0
 8007626:	f040 80b2 	bne.w	800778e <_dtoa_r+0x4fe>
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1d3      	bne.n	80075d6 <_dtoa_r+0x346>
 800762e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007630:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 80b7 	beq.w	80077a8 <_dtoa_r+0x518>
 800763a:	4b86      	ldr	r3, [pc, #536]	@ (8007854 <_dtoa_r+0x5c4>)
 800763c:	2200      	movs	r2, #0
 800763e:	4620      	mov	r0, r4
 8007640:	4629      	mov	r1, r5
 8007642:	f7f9 fa73 	bl	8000b2c <__aeabi_dcmplt>
 8007646:	2800      	cmp	r0, #0
 8007648:	f000 80ae 	beq.w	80077a8 <_dtoa_r+0x518>
 800764c:	9b07      	ldr	r3, [sp, #28]
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 80aa 	beq.w	80077a8 <_dtoa_r+0x518>
 8007654:	9b00      	ldr	r3, [sp, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	dd37      	ble.n	80076ca <_dtoa_r+0x43a>
 800765a:	1e7b      	subs	r3, r7, #1
 800765c:	9304      	str	r3, [sp, #16]
 800765e:	4620      	mov	r0, r4
 8007660:	4b7d      	ldr	r3, [pc, #500]	@ (8007858 <_dtoa_r+0x5c8>)
 8007662:	2200      	movs	r2, #0
 8007664:	4629      	mov	r1, r5
 8007666:	f7f8 ffef 	bl	8000648 <__aeabi_dmul>
 800766a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800766e:	9c00      	ldr	r4, [sp, #0]
 8007670:	3601      	adds	r6, #1
 8007672:	4630      	mov	r0, r6
 8007674:	f7f8 ff7e 	bl	8000574 <__aeabi_i2d>
 8007678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800767c:	f7f8 ffe4 	bl	8000648 <__aeabi_dmul>
 8007680:	4b76      	ldr	r3, [pc, #472]	@ (800785c <_dtoa_r+0x5cc>)
 8007682:	2200      	movs	r2, #0
 8007684:	f7f8 fe2a 	bl	80002dc <__adddf3>
 8007688:	4605      	mov	r5, r0
 800768a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800768e:	2c00      	cmp	r4, #0
 8007690:	f040 808d 	bne.w	80077ae <_dtoa_r+0x51e>
 8007694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007698:	4b71      	ldr	r3, [pc, #452]	@ (8007860 <_dtoa_r+0x5d0>)
 800769a:	2200      	movs	r2, #0
 800769c:	f7f8 fe1c 	bl	80002d8 <__aeabi_dsub>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076a8:	462a      	mov	r2, r5
 80076aa:	4633      	mov	r3, r6
 80076ac:	f7f9 fa5c 	bl	8000b68 <__aeabi_dcmpgt>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	f040 828b 	bne.w	8007bcc <_dtoa_r+0x93c>
 80076b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ba:	462a      	mov	r2, r5
 80076bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80076c0:	f7f9 fa34 	bl	8000b2c <__aeabi_dcmplt>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	f040 8128 	bne.w	800791a <_dtoa_r+0x68a>
 80076ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80076ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80076d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f2c0 815a 	blt.w	800798e <_dtoa_r+0x6fe>
 80076da:	2f0e      	cmp	r7, #14
 80076dc:	f300 8157 	bgt.w	800798e <_dtoa_r+0x6fe>
 80076e0:	4b5a      	ldr	r3, [pc, #360]	@ (800784c <_dtoa_r+0x5bc>)
 80076e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076e6:	ed93 7b00 	vldr	d7, [r3]
 80076ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	ed8d 7b00 	vstr	d7, [sp]
 80076f2:	da03      	bge.n	80076fc <_dtoa_r+0x46c>
 80076f4:	9b07      	ldr	r3, [sp, #28]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f340 8101 	ble.w	80078fe <_dtoa_r+0x66e>
 80076fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007700:	4656      	mov	r6, sl
 8007702:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007706:	4620      	mov	r0, r4
 8007708:	4629      	mov	r1, r5
 800770a:	f7f9 f8c7 	bl	800089c <__aeabi_ddiv>
 800770e:	f7f9 fa4b 	bl	8000ba8 <__aeabi_d2iz>
 8007712:	4680      	mov	r8, r0
 8007714:	f7f8 ff2e 	bl	8000574 <__aeabi_i2d>
 8007718:	e9dd 2300 	ldrd	r2, r3, [sp]
 800771c:	f7f8 ff94 	bl	8000648 <__aeabi_dmul>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4620      	mov	r0, r4
 8007726:	4629      	mov	r1, r5
 8007728:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800772c:	f7f8 fdd4 	bl	80002d8 <__aeabi_dsub>
 8007730:	f806 4b01 	strb.w	r4, [r6], #1
 8007734:	9d07      	ldr	r5, [sp, #28]
 8007736:	eba6 040a 	sub.w	r4, r6, sl
 800773a:	42a5      	cmp	r5, r4
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	f040 8117 	bne.w	8007972 <_dtoa_r+0x6e2>
 8007744:	f7f8 fdca 	bl	80002dc <__adddf3>
 8007748:	e9dd 2300 	ldrd	r2, r3, [sp]
 800774c:	4604      	mov	r4, r0
 800774e:	460d      	mov	r5, r1
 8007750:	f7f9 fa0a 	bl	8000b68 <__aeabi_dcmpgt>
 8007754:	2800      	cmp	r0, #0
 8007756:	f040 80f9 	bne.w	800794c <_dtoa_r+0x6bc>
 800775a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800775e:	4620      	mov	r0, r4
 8007760:	4629      	mov	r1, r5
 8007762:	f7f9 f9d9 	bl	8000b18 <__aeabi_dcmpeq>
 8007766:	b118      	cbz	r0, 8007770 <_dtoa_r+0x4e0>
 8007768:	f018 0f01 	tst.w	r8, #1
 800776c:	f040 80ee 	bne.w	800794c <_dtoa_r+0x6bc>
 8007770:	4649      	mov	r1, r9
 8007772:	4658      	mov	r0, fp
 8007774:	f000 fe4a 	bl	800840c <_Bfree>
 8007778:	2300      	movs	r3, #0
 800777a:	7033      	strb	r3, [r6, #0]
 800777c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800777e:	3701      	adds	r7, #1
 8007780:	601f      	str	r7, [r3, #0]
 8007782:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 831d 	beq.w	8007dc4 <_dtoa_r+0xb34>
 800778a:	601e      	str	r6, [r3, #0]
 800778c:	e31a      	b.n	8007dc4 <_dtoa_r+0xb34>
 800778e:	07e2      	lsls	r2, r4, #31
 8007790:	d505      	bpl.n	800779e <_dtoa_r+0x50e>
 8007792:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007796:	f7f8 ff57 	bl	8000648 <__aeabi_dmul>
 800779a:	3601      	adds	r6, #1
 800779c:	2301      	movs	r3, #1
 800779e:	1064      	asrs	r4, r4, #1
 80077a0:	3508      	adds	r5, #8
 80077a2:	e73f      	b.n	8007624 <_dtoa_r+0x394>
 80077a4:	2602      	movs	r6, #2
 80077a6:	e742      	b.n	800762e <_dtoa_r+0x39e>
 80077a8:	9c07      	ldr	r4, [sp, #28]
 80077aa:	9704      	str	r7, [sp, #16]
 80077ac:	e761      	b.n	8007672 <_dtoa_r+0x3e2>
 80077ae:	4b27      	ldr	r3, [pc, #156]	@ (800784c <_dtoa_r+0x5bc>)
 80077b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077ba:	4454      	add	r4, sl
 80077bc:	2900      	cmp	r1, #0
 80077be:	d053      	beq.n	8007868 <_dtoa_r+0x5d8>
 80077c0:	4928      	ldr	r1, [pc, #160]	@ (8007864 <_dtoa_r+0x5d4>)
 80077c2:	2000      	movs	r0, #0
 80077c4:	f7f9 f86a 	bl	800089c <__aeabi_ddiv>
 80077c8:	4633      	mov	r3, r6
 80077ca:	462a      	mov	r2, r5
 80077cc:	f7f8 fd84 	bl	80002d8 <__aeabi_dsub>
 80077d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077d4:	4656      	mov	r6, sl
 80077d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077da:	f7f9 f9e5 	bl	8000ba8 <__aeabi_d2iz>
 80077de:	4605      	mov	r5, r0
 80077e0:	f7f8 fec8 	bl	8000574 <__aeabi_i2d>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ec:	f7f8 fd74 	bl	80002d8 <__aeabi_dsub>
 80077f0:	3530      	adds	r5, #48	@ 0x30
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077fa:	f806 5b01 	strb.w	r5, [r6], #1
 80077fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007802:	f7f9 f993 	bl	8000b2c <__aeabi_dcmplt>
 8007806:	2800      	cmp	r0, #0
 8007808:	d171      	bne.n	80078ee <_dtoa_r+0x65e>
 800780a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800780e:	4911      	ldr	r1, [pc, #68]	@ (8007854 <_dtoa_r+0x5c4>)
 8007810:	2000      	movs	r0, #0
 8007812:	f7f8 fd61 	bl	80002d8 <__aeabi_dsub>
 8007816:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800781a:	f7f9 f987 	bl	8000b2c <__aeabi_dcmplt>
 800781e:	2800      	cmp	r0, #0
 8007820:	f040 8095 	bne.w	800794e <_dtoa_r+0x6be>
 8007824:	42a6      	cmp	r6, r4
 8007826:	f43f af50 	beq.w	80076ca <_dtoa_r+0x43a>
 800782a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800782e:	4b0a      	ldr	r3, [pc, #40]	@ (8007858 <_dtoa_r+0x5c8>)
 8007830:	2200      	movs	r2, #0
 8007832:	f7f8 ff09 	bl	8000648 <__aeabi_dmul>
 8007836:	4b08      	ldr	r3, [pc, #32]	@ (8007858 <_dtoa_r+0x5c8>)
 8007838:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800783c:	2200      	movs	r2, #0
 800783e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007842:	f7f8 ff01 	bl	8000648 <__aeabi_dmul>
 8007846:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800784a:	e7c4      	b.n	80077d6 <_dtoa_r+0x546>
 800784c:	08009850 	.word	0x08009850
 8007850:	08009828 	.word	0x08009828
 8007854:	3ff00000 	.word	0x3ff00000
 8007858:	40240000 	.word	0x40240000
 800785c:	401c0000 	.word	0x401c0000
 8007860:	40140000 	.word	0x40140000
 8007864:	3fe00000 	.word	0x3fe00000
 8007868:	4631      	mov	r1, r6
 800786a:	4628      	mov	r0, r5
 800786c:	f7f8 feec 	bl	8000648 <__aeabi_dmul>
 8007870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007874:	9415      	str	r4, [sp, #84]	@ 0x54
 8007876:	4656      	mov	r6, sl
 8007878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800787c:	f7f9 f994 	bl	8000ba8 <__aeabi_d2iz>
 8007880:	4605      	mov	r5, r0
 8007882:	f7f8 fe77 	bl	8000574 <__aeabi_i2d>
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800788e:	f7f8 fd23 	bl	80002d8 <__aeabi_dsub>
 8007892:	3530      	adds	r5, #48	@ 0x30
 8007894:	f806 5b01 	strb.w	r5, [r6], #1
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	42a6      	cmp	r6, r4
 800789e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078a2:	f04f 0200 	mov.w	r2, #0
 80078a6:	d124      	bne.n	80078f2 <_dtoa_r+0x662>
 80078a8:	4bac      	ldr	r3, [pc, #688]	@ (8007b5c <_dtoa_r+0x8cc>)
 80078aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078ae:	f7f8 fd15 	bl	80002dc <__adddf3>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ba:	f7f9 f955 	bl	8000b68 <__aeabi_dcmpgt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d145      	bne.n	800794e <_dtoa_r+0x6be>
 80078c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078c6:	49a5      	ldr	r1, [pc, #660]	@ (8007b5c <_dtoa_r+0x8cc>)
 80078c8:	2000      	movs	r0, #0
 80078ca:	f7f8 fd05 	bl	80002d8 <__aeabi_dsub>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078d6:	f7f9 f929 	bl	8000b2c <__aeabi_dcmplt>
 80078da:	2800      	cmp	r0, #0
 80078dc:	f43f aef5 	beq.w	80076ca <_dtoa_r+0x43a>
 80078e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80078e2:	1e73      	subs	r3, r6, #1
 80078e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80078e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078ea:	2b30      	cmp	r3, #48	@ 0x30
 80078ec:	d0f8      	beq.n	80078e0 <_dtoa_r+0x650>
 80078ee:	9f04      	ldr	r7, [sp, #16]
 80078f0:	e73e      	b.n	8007770 <_dtoa_r+0x4e0>
 80078f2:	4b9b      	ldr	r3, [pc, #620]	@ (8007b60 <_dtoa_r+0x8d0>)
 80078f4:	f7f8 fea8 	bl	8000648 <__aeabi_dmul>
 80078f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078fc:	e7bc      	b.n	8007878 <_dtoa_r+0x5e8>
 80078fe:	d10c      	bne.n	800791a <_dtoa_r+0x68a>
 8007900:	4b98      	ldr	r3, [pc, #608]	@ (8007b64 <_dtoa_r+0x8d4>)
 8007902:	2200      	movs	r2, #0
 8007904:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007908:	f7f8 fe9e 	bl	8000648 <__aeabi_dmul>
 800790c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007910:	f7f9 f920 	bl	8000b54 <__aeabi_dcmpge>
 8007914:	2800      	cmp	r0, #0
 8007916:	f000 8157 	beq.w	8007bc8 <_dtoa_r+0x938>
 800791a:	2400      	movs	r4, #0
 800791c:	4625      	mov	r5, r4
 800791e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007920:	43db      	mvns	r3, r3
 8007922:	9304      	str	r3, [sp, #16]
 8007924:	4656      	mov	r6, sl
 8007926:	2700      	movs	r7, #0
 8007928:	4621      	mov	r1, r4
 800792a:	4658      	mov	r0, fp
 800792c:	f000 fd6e 	bl	800840c <_Bfree>
 8007930:	2d00      	cmp	r5, #0
 8007932:	d0dc      	beq.n	80078ee <_dtoa_r+0x65e>
 8007934:	b12f      	cbz	r7, 8007942 <_dtoa_r+0x6b2>
 8007936:	42af      	cmp	r7, r5
 8007938:	d003      	beq.n	8007942 <_dtoa_r+0x6b2>
 800793a:	4639      	mov	r1, r7
 800793c:	4658      	mov	r0, fp
 800793e:	f000 fd65 	bl	800840c <_Bfree>
 8007942:	4629      	mov	r1, r5
 8007944:	4658      	mov	r0, fp
 8007946:	f000 fd61 	bl	800840c <_Bfree>
 800794a:	e7d0      	b.n	80078ee <_dtoa_r+0x65e>
 800794c:	9704      	str	r7, [sp, #16]
 800794e:	4633      	mov	r3, r6
 8007950:	461e      	mov	r6, r3
 8007952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007956:	2a39      	cmp	r2, #57	@ 0x39
 8007958:	d107      	bne.n	800796a <_dtoa_r+0x6da>
 800795a:	459a      	cmp	sl, r3
 800795c:	d1f8      	bne.n	8007950 <_dtoa_r+0x6c0>
 800795e:	9a04      	ldr	r2, [sp, #16]
 8007960:	3201      	adds	r2, #1
 8007962:	9204      	str	r2, [sp, #16]
 8007964:	2230      	movs	r2, #48	@ 0x30
 8007966:	f88a 2000 	strb.w	r2, [sl]
 800796a:	781a      	ldrb	r2, [r3, #0]
 800796c:	3201      	adds	r2, #1
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	e7bd      	b.n	80078ee <_dtoa_r+0x65e>
 8007972:	4b7b      	ldr	r3, [pc, #492]	@ (8007b60 <_dtoa_r+0x8d0>)
 8007974:	2200      	movs	r2, #0
 8007976:	f7f8 fe67 	bl	8000648 <__aeabi_dmul>
 800797a:	2200      	movs	r2, #0
 800797c:	2300      	movs	r3, #0
 800797e:	4604      	mov	r4, r0
 8007980:	460d      	mov	r5, r1
 8007982:	f7f9 f8c9 	bl	8000b18 <__aeabi_dcmpeq>
 8007986:	2800      	cmp	r0, #0
 8007988:	f43f aebb 	beq.w	8007702 <_dtoa_r+0x472>
 800798c:	e6f0      	b.n	8007770 <_dtoa_r+0x4e0>
 800798e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007990:	2a00      	cmp	r2, #0
 8007992:	f000 80db 	beq.w	8007b4c <_dtoa_r+0x8bc>
 8007996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007998:	2a01      	cmp	r2, #1
 800799a:	f300 80bf 	bgt.w	8007b1c <_dtoa_r+0x88c>
 800799e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80079a0:	2a00      	cmp	r2, #0
 80079a2:	f000 80b7 	beq.w	8007b14 <_dtoa_r+0x884>
 80079a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079ac:	4646      	mov	r6, r8
 80079ae:	9a08      	ldr	r2, [sp, #32]
 80079b0:	2101      	movs	r1, #1
 80079b2:	441a      	add	r2, r3
 80079b4:	4658      	mov	r0, fp
 80079b6:	4498      	add	r8, r3
 80079b8:	9208      	str	r2, [sp, #32]
 80079ba:	f000 fddb 	bl	8008574 <__i2b>
 80079be:	4605      	mov	r5, r0
 80079c0:	b15e      	cbz	r6, 80079da <_dtoa_r+0x74a>
 80079c2:	9b08      	ldr	r3, [sp, #32]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	dd08      	ble.n	80079da <_dtoa_r+0x74a>
 80079c8:	42b3      	cmp	r3, r6
 80079ca:	9a08      	ldr	r2, [sp, #32]
 80079cc:	bfa8      	it	ge
 80079ce:	4633      	movge	r3, r6
 80079d0:	eba8 0803 	sub.w	r8, r8, r3
 80079d4:	1af6      	subs	r6, r6, r3
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	9308      	str	r3, [sp, #32]
 80079da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079dc:	b1f3      	cbz	r3, 8007a1c <_dtoa_r+0x78c>
 80079de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 80b7 	beq.w	8007b54 <_dtoa_r+0x8c4>
 80079e6:	b18c      	cbz	r4, 8007a0c <_dtoa_r+0x77c>
 80079e8:	4629      	mov	r1, r5
 80079ea:	4622      	mov	r2, r4
 80079ec:	4658      	mov	r0, fp
 80079ee:	f000 fe81 	bl	80086f4 <__pow5mult>
 80079f2:	464a      	mov	r2, r9
 80079f4:	4601      	mov	r1, r0
 80079f6:	4605      	mov	r5, r0
 80079f8:	4658      	mov	r0, fp
 80079fa:	f000 fdd1 	bl	80085a0 <__multiply>
 80079fe:	4649      	mov	r1, r9
 8007a00:	9004      	str	r0, [sp, #16]
 8007a02:	4658      	mov	r0, fp
 8007a04:	f000 fd02 	bl	800840c <_Bfree>
 8007a08:	9b04      	ldr	r3, [sp, #16]
 8007a0a:	4699      	mov	r9, r3
 8007a0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a0e:	1b1a      	subs	r2, r3, r4
 8007a10:	d004      	beq.n	8007a1c <_dtoa_r+0x78c>
 8007a12:	4649      	mov	r1, r9
 8007a14:	4658      	mov	r0, fp
 8007a16:	f000 fe6d 	bl	80086f4 <__pow5mult>
 8007a1a:	4681      	mov	r9, r0
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	4658      	mov	r0, fp
 8007a20:	f000 fda8 	bl	8008574 <__i2b>
 8007a24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a26:	4604      	mov	r4, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 81cf 	beq.w	8007dcc <_dtoa_r+0xb3c>
 8007a2e:	461a      	mov	r2, r3
 8007a30:	4601      	mov	r1, r0
 8007a32:	4658      	mov	r0, fp
 8007a34:	f000 fe5e 	bl	80086f4 <__pow5mult>
 8007a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	f300 8095 	bgt.w	8007b6c <_dtoa_r+0x8dc>
 8007a42:	9b02      	ldr	r3, [sp, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f040 8087 	bne.w	8007b58 <_dtoa_r+0x8c8>
 8007a4a:	9b03      	ldr	r3, [sp, #12]
 8007a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f040 8089 	bne.w	8007b68 <_dtoa_r+0x8d8>
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a5c:	0d1b      	lsrs	r3, r3, #20
 8007a5e:	051b      	lsls	r3, r3, #20
 8007a60:	b12b      	cbz	r3, 8007a6e <_dtoa_r+0x7de>
 8007a62:	9b08      	ldr	r3, [sp, #32]
 8007a64:	3301      	adds	r3, #1
 8007a66:	9308      	str	r3, [sp, #32]
 8007a68:	f108 0801 	add.w	r8, r8, #1
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 81b0 	beq.w	8007dd8 <_dtoa_r+0xb48>
 8007a78:	6923      	ldr	r3, [r4, #16]
 8007a7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a7e:	6918      	ldr	r0, [r3, #16]
 8007a80:	f000 fd2c 	bl	80084dc <__hi0bits>
 8007a84:	f1c0 0020 	rsb	r0, r0, #32
 8007a88:	9b08      	ldr	r3, [sp, #32]
 8007a8a:	4418      	add	r0, r3
 8007a8c:	f010 001f 	ands.w	r0, r0, #31
 8007a90:	d077      	beq.n	8007b82 <_dtoa_r+0x8f2>
 8007a92:	f1c0 0320 	rsb	r3, r0, #32
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	dd6b      	ble.n	8007b72 <_dtoa_r+0x8e2>
 8007a9a:	9b08      	ldr	r3, [sp, #32]
 8007a9c:	f1c0 001c 	rsb	r0, r0, #28
 8007aa0:	4403      	add	r3, r0
 8007aa2:	4480      	add	r8, r0
 8007aa4:	4406      	add	r6, r0
 8007aa6:	9308      	str	r3, [sp, #32]
 8007aa8:	f1b8 0f00 	cmp.w	r8, #0
 8007aac:	dd05      	ble.n	8007aba <_dtoa_r+0x82a>
 8007aae:	4649      	mov	r1, r9
 8007ab0:	4642      	mov	r2, r8
 8007ab2:	4658      	mov	r0, fp
 8007ab4:	f000 fe78 	bl	80087a8 <__lshift>
 8007ab8:	4681      	mov	r9, r0
 8007aba:	9b08      	ldr	r3, [sp, #32]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	dd05      	ble.n	8007acc <_dtoa_r+0x83c>
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	4658      	mov	r0, fp
 8007ac6:	f000 fe6f 	bl	80087a8 <__lshift>
 8007aca:	4604      	mov	r4, r0
 8007acc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d059      	beq.n	8007b86 <_dtoa_r+0x8f6>
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	4648      	mov	r0, r9
 8007ad6:	f000 fed3 	bl	8008880 <__mcmp>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	da53      	bge.n	8007b86 <_dtoa_r+0x8f6>
 8007ade:	1e7b      	subs	r3, r7, #1
 8007ae0:	9304      	str	r3, [sp, #16]
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	220a      	movs	r2, #10
 8007ae8:	4658      	mov	r0, fp
 8007aea:	f000 fcb1 	bl	8008450 <__multadd>
 8007aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007af0:	4681      	mov	r9, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 8172 	beq.w	8007ddc <_dtoa_r+0xb4c>
 8007af8:	2300      	movs	r3, #0
 8007afa:	4629      	mov	r1, r5
 8007afc:	220a      	movs	r2, #10
 8007afe:	4658      	mov	r0, fp
 8007b00:	f000 fca6 	bl	8008450 <__multadd>
 8007b04:	9b00      	ldr	r3, [sp, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	4605      	mov	r5, r0
 8007b0a:	dc67      	bgt.n	8007bdc <_dtoa_r+0x94c>
 8007b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	dc41      	bgt.n	8007b96 <_dtoa_r+0x906>
 8007b12:	e063      	b.n	8007bdc <_dtoa_r+0x94c>
 8007b14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b1a:	e746      	b.n	80079aa <_dtoa_r+0x71a>
 8007b1c:	9b07      	ldr	r3, [sp, #28]
 8007b1e:	1e5c      	subs	r4, r3, #1
 8007b20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b22:	42a3      	cmp	r3, r4
 8007b24:	bfbf      	itttt	lt
 8007b26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007b2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b2c:	1ae3      	sublt	r3, r4, r3
 8007b2e:	bfb4      	ite	lt
 8007b30:	18d2      	addlt	r2, r2, r3
 8007b32:	1b1c      	subge	r4, r3, r4
 8007b34:	9b07      	ldr	r3, [sp, #28]
 8007b36:	bfbc      	itt	lt
 8007b38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007b3a:	2400      	movlt	r4, #0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	bfb5      	itete	lt
 8007b40:	eba8 0603 	sublt.w	r6, r8, r3
 8007b44:	9b07      	ldrge	r3, [sp, #28]
 8007b46:	2300      	movlt	r3, #0
 8007b48:	4646      	movge	r6, r8
 8007b4a:	e730      	b.n	80079ae <_dtoa_r+0x71e>
 8007b4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b50:	4646      	mov	r6, r8
 8007b52:	e735      	b.n	80079c0 <_dtoa_r+0x730>
 8007b54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b56:	e75c      	b.n	8007a12 <_dtoa_r+0x782>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	e788      	b.n	8007a6e <_dtoa_r+0x7de>
 8007b5c:	3fe00000 	.word	0x3fe00000
 8007b60:	40240000 	.word	0x40240000
 8007b64:	40140000 	.word	0x40140000
 8007b68:	9b02      	ldr	r3, [sp, #8]
 8007b6a:	e780      	b.n	8007a6e <_dtoa_r+0x7de>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b70:	e782      	b.n	8007a78 <_dtoa_r+0x7e8>
 8007b72:	d099      	beq.n	8007aa8 <_dtoa_r+0x818>
 8007b74:	9a08      	ldr	r2, [sp, #32]
 8007b76:	331c      	adds	r3, #28
 8007b78:	441a      	add	r2, r3
 8007b7a:	4498      	add	r8, r3
 8007b7c:	441e      	add	r6, r3
 8007b7e:	9208      	str	r2, [sp, #32]
 8007b80:	e792      	b.n	8007aa8 <_dtoa_r+0x818>
 8007b82:	4603      	mov	r3, r0
 8007b84:	e7f6      	b.n	8007b74 <_dtoa_r+0x8e4>
 8007b86:	9b07      	ldr	r3, [sp, #28]
 8007b88:	9704      	str	r7, [sp, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	dc20      	bgt.n	8007bd0 <_dtoa_r+0x940>
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	dd1e      	ble.n	8007bd4 <_dtoa_r+0x944>
 8007b96:	9b00      	ldr	r3, [sp, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f47f aec0 	bne.w	800791e <_dtoa_r+0x68e>
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	2205      	movs	r2, #5
 8007ba2:	4658      	mov	r0, fp
 8007ba4:	f000 fc54 	bl	8008450 <__multadd>
 8007ba8:	4601      	mov	r1, r0
 8007baa:	4604      	mov	r4, r0
 8007bac:	4648      	mov	r0, r9
 8007bae:	f000 fe67 	bl	8008880 <__mcmp>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	f77f aeb3 	ble.w	800791e <_dtoa_r+0x68e>
 8007bb8:	4656      	mov	r6, sl
 8007bba:	2331      	movs	r3, #49	@ 0x31
 8007bbc:	f806 3b01 	strb.w	r3, [r6], #1
 8007bc0:	9b04      	ldr	r3, [sp, #16]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	9304      	str	r3, [sp, #16]
 8007bc6:	e6ae      	b.n	8007926 <_dtoa_r+0x696>
 8007bc8:	9c07      	ldr	r4, [sp, #28]
 8007bca:	9704      	str	r7, [sp, #16]
 8007bcc:	4625      	mov	r5, r4
 8007bce:	e7f3      	b.n	8007bb8 <_dtoa_r+0x928>
 8007bd0:	9b07      	ldr	r3, [sp, #28]
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 8104 	beq.w	8007de4 <_dtoa_r+0xb54>
 8007bdc:	2e00      	cmp	r6, #0
 8007bde:	dd05      	ble.n	8007bec <_dtoa_r+0x95c>
 8007be0:	4629      	mov	r1, r5
 8007be2:	4632      	mov	r2, r6
 8007be4:	4658      	mov	r0, fp
 8007be6:	f000 fddf 	bl	80087a8 <__lshift>
 8007bea:	4605      	mov	r5, r0
 8007bec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d05a      	beq.n	8007ca8 <_dtoa_r+0xa18>
 8007bf2:	6869      	ldr	r1, [r5, #4]
 8007bf4:	4658      	mov	r0, fp
 8007bf6:	f000 fbc9 	bl	800838c <_Balloc>
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	b928      	cbnz	r0, 8007c0a <_dtoa_r+0x97a>
 8007bfe:	4b84      	ldr	r3, [pc, #528]	@ (8007e10 <_dtoa_r+0xb80>)
 8007c00:	4602      	mov	r2, r0
 8007c02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c06:	f7ff bb5a 	b.w	80072be <_dtoa_r+0x2e>
 8007c0a:	692a      	ldr	r2, [r5, #16]
 8007c0c:	3202      	adds	r2, #2
 8007c0e:	0092      	lsls	r2, r2, #2
 8007c10:	f105 010c 	add.w	r1, r5, #12
 8007c14:	300c      	adds	r0, #12
 8007c16:	f001 f81d 	bl	8008c54 <memcpy>
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	4658      	mov	r0, fp
 8007c20:	f000 fdc2 	bl	80087a8 <__lshift>
 8007c24:	f10a 0301 	add.w	r3, sl, #1
 8007c28:	9307      	str	r3, [sp, #28]
 8007c2a:	9b00      	ldr	r3, [sp, #0]
 8007c2c:	4453      	add	r3, sl
 8007c2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c30:	9b02      	ldr	r3, [sp, #8]
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	462f      	mov	r7, r5
 8007c38:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	9b07      	ldr	r3, [sp, #28]
 8007c3e:	4621      	mov	r1, r4
 8007c40:	3b01      	subs	r3, #1
 8007c42:	4648      	mov	r0, r9
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	f7ff fa9a 	bl	800717e <quorem>
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	9002      	str	r0, [sp, #8]
 8007c4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c52:	4648      	mov	r0, r9
 8007c54:	f000 fe14 	bl	8008880 <__mcmp>
 8007c58:	462a      	mov	r2, r5
 8007c5a:	9008      	str	r0, [sp, #32]
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4658      	mov	r0, fp
 8007c60:	f000 fe2a 	bl	80088b8 <__mdiff>
 8007c64:	68c2      	ldr	r2, [r0, #12]
 8007c66:	4606      	mov	r6, r0
 8007c68:	bb02      	cbnz	r2, 8007cac <_dtoa_r+0xa1c>
 8007c6a:	4601      	mov	r1, r0
 8007c6c:	4648      	mov	r0, r9
 8007c6e:	f000 fe07 	bl	8008880 <__mcmp>
 8007c72:	4602      	mov	r2, r0
 8007c74:	4631      	mov	r1, r6
 8007c76:	4658      	mov	r0, fp
 8007c78:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c7a:	f000 fbc7 	bl	800840c <_Bfree>
 8007c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c82:	9e07      	ldr	r6, [sp, #28]
 8007c84:	ea43 0102 	orr.w	r1, r3, r2
 8007c88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c8a:	4319      	orrs	r1, r3
 8007c8c:	d110      	bne.n	8007cb0 <_dtoa_r+0xa20>
 8007c8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c92:	d029      	beq.n	8007ce8 <_dtoa_r+0xa58>
 8007c94:	9b08      	ldr	r3, [sp, #32]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	dd02      	ble.n	8007ca0 <_dtoa_r+0xa10>
 8007c9a:	9b02      	ldr	r3, [sp, #8]
 8007c9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007ca0:	9b00      	ldr	r3, [sp, #0]
 8007ca2:	f883 8000 	strb.w	r8, [r3]
 8007ca6:	e63f      	b.n	8007928 <_dtoa_r+0x698>
 8007ca8:	4628      	mov	r0, r5
 8007caa:	e7bb      	b.n	8007c24 <_dtoa_r+0x994>
 8007cac:	2201      	movs	r2, #1
 8007cae:	e7e1      	b.n	8007c74 <_dtoa_r+0x9e4>
 8007cb0:	9b08      	ldr	r3, [sp, #32]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	db04      	blt.n	8007cc0 <_dtoa_r+0xa30>
 8007cb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cb8:	430b      	orrs	r3, r1
 8007cba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cbc:	430b      	orrs	r3, r1
 8007cbe:	d120      	bne.n	8007d02 <_dtoa_r+0xa72>
 8007cc0:	2a00      	cmp	r2, #0
 8007cc2:	dded      	ble.n	8007ca0 <_dtoa_r+0xa10>
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	4658      	mov	r0, fp
 8007cca:	f000 fd6d 	bl	80087a8 <__lshift>
 8007cce:	4621      	mov	r1, r4
 8007cd0:	4681      	mov	r9, r0
 8007cd2:	f000 fdd5 	bl	8008880 <__mcmp>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	dc03      	bgt.n	8007ce2 <_dtoa_r+0xa52>
 8007cda:	d1e1      	bne.n	8007ca0 <_dtoa_r+0xa10>
 8007cdc:	f018 0f01 	tst.w	r8, #1
 8007ce0:	d0de      	beq.n	8007ca0 <_dtoa_r+0xa10>
 8007ce2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ce6:	d1d8      	bne.n	8007c9a <_dtoa_r+0xa0a>
 8007ce8:	9a00      	ldr	r2, [sp, #0]
 8007cea:	2339      	movs	r3, #57	@ 0x39
 8007cec:	7013      	strb	r3, [r2, #0]
 8007cee:	4633      	mov	r3, r6
 8007cf0:	461e      	mov	r6, r3
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007cf8:	2a39      	cmp	r2, #57	@ 0x39
 8007cfa:	d052      	beq.n	8007da2 <_dtoa_r+0xb12>
 8007cfc:	3201      	adds	r2, #1
 8007cfe:	701a      	strb	r2, [r3, #0]
 8007d00:	e612      	b.n	8007928 <_dtoa_r+0x698>
 8007d02:	2a00      	cmp	r2, #0
 8007d04:	dd07      	ble.n	8007d16 <_dtoa_r+0xa86>
 8007d06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d0a:	d0ed      	beq.n	8007ce8 <_dtoa_r+0xa58>
 8007d0c:	9a00      	ldr	r2, [sp, #0]
 8007d0e:	f108 0301 	add.w	r3, r8, #1
 8007d12:	7013      	strb	r3, [r2, #0]
 8007d14:	e608      	b.n	8007928 <_dtoa_r+0x698>
 8007d16:	9b07      	ldr	r3, [sp, #28]
 8007d18:	9a07      	ldr	r2, [sp, #28]
 8007d1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d028      	beq.n	8007d76 <_dtoa_r+0xae6>
 8007d24:	4649      	mov	r1, r9
 8007d26:	2300      	movs	r3, #0
 8007d28:	220a      	movs	r2, #10
 8007d2a:	4658      	mov	r0, fp
 8007d2c:	f000 fb90 	bl	8008450 <__multadd>
 8007d30:	42af      	cmp	r7, r5
 8007d32:	4681      	mov	r9, r0
 8007d34:	f04f 0300 	mov.w	r3, #0
 8007d38:	f04f 020a 	mov.w	r2, #10
 8007d3c:	4639      	mov	r1, r7
 8007d3e:	4658      	mov	r0, fp
 8007d40:	d107      	bne.n	8007d52 <_dtoa_r+0xac2>
 8007d42:	f000 fb85 	bl	8008450 <__multadd>
 8007d46:	4607      	mov	r7, r0
 8007d48:	4605      	mov	r5, r0
 8007d4a:	9b07      	ldr	r3, [sp, #28]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	9307      	str	r3, [sp, #28]
 8007d50:	e774      	b.n	8007c3c <_dtoa_r+0x9ac>
 8007d52:	f000 fb7d 	bl	8008450 <__multadd>
 8007d56:	4629      	mov	r1, r5
 8007d58:	4607      	mov	r7, r0
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	220a      	movs	r2, #10
 8007d5e:	4658      	mov	r0, fp
 8007d60:	f000 fb76 	bl	8008450 <__multadd>
 8007d64:	4605      	mov	r5, r0
 8007d66:	e7f0      	b.n	8007d4a <_dtoa_r+0xaba>
 8007d68:	9b00      	ldr	r3, [sp, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bfcc      	ite	gt
 8007d6e:	461e      	movgt	r6, r3
 8007d70:	2601      	movle	r6, #1
 8007d72:	4456      	add	r6, sl
 8007d74:	2700      	movs	r7, #0
 8007d76:	4649      	mov	r1, r9
 8007d78:	2201      	movs	r2, #1
 8007d7a:	4658      	mov	r0, fp
 8007d7c:	f000 fd14 	bl	80087a8 <__lshift>
 8007d80:	4621      	mov	r1, r4
 8007d82:	4681      	mov	r9, r0
 8007d84:	f000 fd7c 	bl	8008880 <__mcmp>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	dcb0      	bgt.n	8007cee <_dtoa_r+0xa5e>
 8007d8c:	d102      	bne.n	8007d94 <_dtoa_r+0xb04>
 8007d8e:	f018 0f01 	tst.w	r8, #1
 8007d92:	d1ac      	bne.n	8007cee <_dtoa_r+0xa5e>
 8007d94:	4633      	mov	r3, r6
 8007d96:	461e      	mov	r6, r3
 8007d98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d9c:	2a30      	cmp	r2, #48	@ 0x30
 8007d9e:	d0fa      	beq.n	8007d96 <_dtoa_r+0xb06>
 8007da0:	e5c2      	b.n	8007928 <_dtoa_r+0x698>
 8007da2:	459a      	cmp	sl, r3
 8007da4:	d1a4      	bne.n	8007cf0 <_dtoa_r+0xa60>
 8007da6:	9b04      	ldr	r3, [sp, #16]
 8007da8:	3301      	adds	r3, #1
 8007daa:	9304      	str	r3, [sp, #16]
 8007dac:	2331      	movs	r3, #49	@ 0x31
 8007dae:	f88a 3000 	strb.w	r3, [sl]
 8007db2:	e5b9      	b.n	8007928 <_dtoa_r+0x698>
 8007db4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007db6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e14 <_dtoa_r+0xb84>
 8007dba:	b11b      	cbz	r3, 8007dc4 <_dtoa_r+0xb34>
 8007dbc:	f10a 0308 	add.w	r3, sl, #8
 8007dc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	4650      	mov	r0, sl
 8007dc6:	b019      	add	sp, #100	@ 0x64
 8007dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	f77f ae37 	ble.w	8007a42 <_dtoa_r+0x7b2>
 8007dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dd8:	2001      	movs	r0, #1
 8007dda:	e655      	b.n	8007a88 <_dtoa_r+0x7f8>
 8007ddc:	9b00      	ldr	r3, [sp, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f77f aed6 	ble.w	8007b90 <_dtoa_r+0x900>
 8007de4:	4656      	mov	r6, sl
 8007de6:	4621      	mov	r1, r4
 8007de8:	4648      	mov	r0, r9
 8007dea:	f7ff f9c8 	bl	800717e <quorem>
 8007dee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007df2:	f806 8b01 	strb.w	r8, [r6], #1
 8007df6:	9b00      	ldr	r3, [sp, #0]
 8007df8:	eba6 020a 	sub.w	r2, r6, sl
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	ddb3      	ble.n	8007d68 <_dtoa_r+0xad8>
 8007e00:	4649      	mov	r1, r9
 8007e02:	2300      	movs	r3, #0
 8007e04:	220a      	movs	r2, #10
 8007e06:	4658      	mov	r0, fp
 8007e08:	f000 fb22 	bl	8008450 <__multadd>
 8007e0c:	4681      	mov	r9, r0
 8007e0e:	e7ea      	b.n	8007de6 <_dtoa_r+0xb56>
 8007e10:	0800979c 	.word	0x0800979c
 8007e14:	08009720 	.word	0x08009720

08007e18 <__ssputs_r>:
 8007e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e1c:	688e      	ldr	r6, [r1, #8]
 8007e1e:	461f      	mov	r7, r3
 8007e20:	42be      	cmp	r6, r7
 8007e22:	680b      	ldr	r3, [r1, #0]
 8007e24:	4682      	mov	sl, r0
 8007e26:	460c      	mov	r4, r1
 8007e28:	4690      	mov	r8, r2
 8007e2a:	d82d      	bhi.n	8007e88 <__ssputs_r+0x70>
 8007e2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007e34:	d026      	beq.n	8007e84 <__ssputs_r+0x6c>
 8007e36:	6965      	ldr	r5, [r4, #20]
 8007e38:	6909      	ldr	r1, [r1, #16]
 8007e3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e3e:	eba3 0901 	sub.w	r9, r3, r1
 8007e42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e46:	1c7b      	adds	r3, r7, #1
 8007e48:	444b      	add	r3, r9
 8007e4a:	106d      	asrs	r5, r5, #1
 8007e4c:	429d      	cmp	r5, r3
 8007e4e:	bf38      	it	cc
 8007e50:	461d      	movcc	r5, r3
 8007e52:	0553      	lsls	r3, r2, #21
 8007e54:	d527      	bpl.n	8007ea6 <__ssputs_r+0x8e>
 8007e56:	4629      	mov	r1, r5
 8007e58:	f000 f960 	bl	800811c <_malloc_r>
 8007e5c:	4606      	mov	r6, r0
 8007e5e:	b360      	cbz	r0, 8007eba <__ssputs_r+0xa2>
 8007e60:	6921      	ldr	r1, [r4, #16]
 8007e62:	464a      	mov	r2, r9
 8007e64:	f000 fef6 	bl	8008c54 <memcpy>
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e72:	81a3      	strh	r3, [r4, #12]
 8007e74:	6126      	str	r6, [r4, #16]
 8007e76:	6165      	str	r5, [r4, #20]
 8007e78:	444e      	add	r6, r9
 8007e7a:	eba5 0509 	sub.w	r5, r5, r9
 8007e7e:	6026      	str	r6, [r4, #0]
 8007e80:	60a5      	str	r5, [r4, #8]
 8007e82:	463e      	mov	r6, r7
 8007e84:	42be      	cmp	r6, r7
 8007e86:	d900      	bls.n	8007e8a <__ssputs_r+0x72>
 8007e88:	463e      	mov	r6, r7
 8007e8a:	6820      	ldr	r0, [r4, #0]
 8007e8c:	4632      	mov	r2, r6
 8007e8e:	4641      	mov	r1, r8
 8007e90:	f000 fe6f 	bl	8008b72 <memmove>
 8007e94:	68a3      	ldr	r3, [r4, #8]
 8007e96:	1b9b      	subs	r3, r3, r6
 8007e98:	60a3      	str	r3, [r4, #8]
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	4433      	add	r3, r6
 8007e9e:	6023      	str	r3, [r4, #0]
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea6:	462a      	mov	r2, r5
 8007ea8:	f000 fe35 	bl	8008b16 <_realloc_r>
 8007eac:	4606      	mov	r6, r0
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d1e0      	bne.n	8007e74 <__ssputs_r+0x5c>
 8007eb2:	6921      	ldr	r1, [r4, #16]
 8007eb4:	4650      	mov	r0, sl
 8007eb6:	f000 ff0d 	bl	8008cd4 <_free_r>
 8007eba:	230c      	movs	r3, #12
 8007ebc:	f8ca 3000 	str.w	r3, [sl]
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ecc:	e7e9      	b.n	8007ea2 <__ssputs_r+0x8a>
	...

08007ed0 <_svfiprintf_r>:
 8007ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed4:	4698      	mov	r8, r3
 8007ed6:	898b      	ldrh	r3, [r1, #12]
 8007ed8:	061b      	lsls	r3, r3, #24
 8007eda:	b09d      	sub	sp, #116	@ 0x74
 8007edc:	4607      	mov	r7, r0
 8007ede:	460d      	mov	r5, r1
 8007ee0:	4614      	mov	r4, r2
 8007ee2:	d510      	bpl.n	8007f06 <_svfiprintf_r+0x36>
 8007ee4:	690b      	ldr	r3, [r1, #16]
 8007ee6:	b973      	cbnz	r3, 8007f06 <_svfiprintf_r+0x36>
 8007ee8:	2140      	movs	r1, #64	@ 0x40
 8007eea:	f000 f917 	bl	800811c <_malloc_r>
 8007eee:	6028      	str	r0, [r5, #0]
 8007ef0:	6128      	str	r0, [r5, #16]
 8007ef2:	b930      	cbnz	r0, 8007f02 <_svfiprintf_r+0x32>
 8007ef4:	230c      	movs	r3, #12
 8007ef6:	603b      	str	r3, [r7, #0]
 8007ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007efc:	b01d      	add	sp, #116	@ 0x74
 8007efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f02:	2340      	movs	r3, #64	@ 0x40
 8007f04:	616b      	str	r3, [r5, #20]
 8007f06:	2300      	movs	r3, #0
 8007f08:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f0a:	2320      	movs	r3, #32
 8007f0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f10:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f14:	2330      	movs	r3, #48	@ 0x30
 8007f16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80080b4 <_svfiprintf_r+0x1e4>
 8007f1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f1e:	f04f 0901 	mov.w	r9, #1
 8007f22:	4623      	mov	r3, r4
 8007f24:	469a      	mov	sl, r3
 8007f26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f2a:	b10a      	cbz	r2, 8007f30 <_svfiprintf_r+0x60>
 8007f2c:	2a25      	cmp	r2, #37	@ 0x25
 8007f2e:	d1f9      	bne.n	8007f24 <_svfiprintf_r+0x54>
 8007f30:	ebba 0b04 	subs.w	fp, sl, r4
 8007f34:	d00b      	beq.n	8007f4e <_svfiprintf_r+0x7e>
 8007f36:	465b      	mov	r3, fp
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	f7ff ff6b 	bl	8007e18 <__ssputs_r>
 8007f42:	3001      	adds	r0, #1
 8007f44:	f000 80a7 	beq.w	8008096 <_svfiprintf_r+0x1c6>
 8007f48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f4a:	445a      	add	r2, fp
 8007f4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 809f 	beq.w	8008096 <_svfiprintf_r+0x1c6>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f62:	f10a 0a01 	add.w	sl, sl, #1
 8007f66:	9304      	str	r3, [sp, #16]
 8007f68:	9307      	str	r3, [sp, #28]
 8007f6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f70:	4654      	mov	r4, sl
 8007f72:	2205      	movs	r2, #5
 8007f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f78:	484e      	ldr	r0, [pc, #312]	@ (80080b4 <_svfiprintf_r+0x1e4>)
 8007f7a:	f7f8 f951 	bl	8000220 <memchr>
 8007f7e:	9a04      	ldr	r2, [sp, #16]
 8007f80:	b9d8      	cbnz	r0, 8007fba <_svfiprintf_r+0xea>
 8007f82:	06d0      	lsls	r0, r2, #27
 8007f84:	bf44      	itt	mi
 8007f86:	2320      	movmi	r3, #32
 8007f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f8c:	0711      	lsls	r1, r2, #28
 8007f8e:	bf44      	itt	mi
 8007f90:	232b      	movmi	r3, #43	@ 0x2b
 8007f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f96:	f89a 3000 	ldrb.w	r3, [sl]
 8007f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f9c:	d015      	beq.n	8007fca <_svfiprintf_r+0xfa>
 8007f9e:	9a07      	ldr	r2, [sp, #28]
 8007fa0:	4654      	mov	r4, sl
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	f04f 0c0a 	mov.w	ip, #10
 8007fa8:	4621      	mov	r1, r4
 8007faa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fae:	3b30      	subs	r3, #48	@ 0x30
 8007fb0:	2b09      	cmp	r3, #9
 8007fb2:	d94b      	bls.n	800804c <_svfiprintf_r+0x17c>
 8007fb4:	b1b0      	cbz	r0, 8007fe4 <_svfiprintf_r+0x114>
 8007fb6:	9207      	str	r2, [sp, #28]
 8007fb8:	e014      	b.n	8007fe4 <_svfiprintf_r+0x114>
 8007fba:	eba0 0308 	sub.w	r3, r0, r8
 8007fbe:	fa09 f303 	lsl.w	r3, r9, r3
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	9304      	str	r3, [sp, #16]
 8007fc6:	46a2      	mov	sl, r4
 8007fc8:	e7d2      	b.n	8007f70 <_svfiprintf_r+0xa0>
 8007fca:	9b03      	ldr	r3, [sp, #12]
 8007fcc:	1d19      	adds	r1, r3, #4
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	9103      	str	r1, [sp, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	bfbb      	ittet	lt
 8007fd6:	425b      	neglt	r3, r3
 8007fd8:	f042 0202 	orrlt.w	r2, r2, #2
 8007fdc:	9307      	strge	r3, [sp, #28]
 8007fde:	9307      	strlt	r3, [sp, #28]
 8007fe0:	bfb8      	it	lt
 8007fe2:	9204      	strlt	r2, [sp, #16]
 8007fe4:	7823      	ldrb	r3, [r4, #0]
 8007fe6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fe8:	d10a      	bne.n	8008000 <_svfiprintf_r+0x130>
 8007fea:	7863      	ldrb	r3, [r4, #1]
 8007fec:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fee:	d132      	bne.n	8008056 <_svfiprintf_r+0x186>
 8007ff0:	9b03      	ldr	r3, [sp, #12]
 8007ff2:	1d1a      	adds	r2, r3, #4
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	9203      	str	r2, [sp, #12]
 8007ff8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ffc:	3402      	adds	r4, #2
 8007ffe:	9305      	str	r3, [sp, #20]
 8008000:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80080c4 <_svfiprintf_r+0x1f4>
 8008004:	7821      	ldrb	r1, [r4, #0]
 8008006:	2203      	movs	r2, #3
 8008008:	4650      	mov	r0, sl
 800800a:	f7f8 f909 	bl	8000220 <memchr>
 800800e:	b138      	cbz	r0, 8008020 <_svfiprintf_r+0x150>
 8008010:	9b04      	ldr	r3, [sp, #16]
 8008012:	eba0 000a 	sub.w	r0, r0, sl
 8008016:	2240      	movs	r2, #64	@ 0x40
 8008018:	4082      	lsls	r2, r0
 800801a:	4313      	orrs	r3, r2
 800801c:	3401      	adds	r4, #1
 800801e:	9304      	str	r3, [sp, #16]
 8008020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008024:	4824      	ldr	r0, [pc, #144]	@ (80080b8 <_svfiprintf_r+0x1e8>)
 8008026:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800802a:	2206      	movs	r2, #6
 800802c:	f7f8 f8f8 	bl	8000220 <memchr>
 8008030:	2800      	cmp	r0, #0
 8008032:	d036      	beq.n	80080a2 <_svfiprintf_r+0x1d2>
 8008034:	4b21      	ldr	r3, [pc, #132]	@ (80080bc <_svfiprintf_r+0x1ec>)
 8008036:	bb1b      	cbnz	r3, 8008080 <_svfiprintf_r+0x1b0>
 8008038:	9b03      	ldr	r3, [sp, #12]
 800803a:	3307      	adds	r3, #7
 800803c:	f023 0307 	bic.w	r3, r3, #7
 8008040:	3308      	adds	r3, #8
 8008042:	9303      	str	r3, [sp, #12]
 8008044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008046:	4433      	add	r3, r6
 8008048:	9309      	str	r3, [sp, #36]	@ 0x24
 800804a:	e76a      	b.n	8007f22 <_svfiprintf_r+0x52>
 800804c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008050:	460c      	mov	r4, r1
 8008052:	2001      	movs	r0, #1
 8008054:	e7a8      	b.n	8007fa8 <_svfiprintf_r+0xd8>
 8008056:	2300      	movs	r3, #0
 8008058:	3401      	adds	r4, #1
 800805a:	9305      	str	r3, [sp, #20]
 800805c:	4619      	mov	r1, r3
 800805e:	f04f 0c0a 	mov.w	ip, #10
 8008062:	4620      	mov	r0, r4
 8008064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008068:	3a30      	subs	r2, #48	@ 0x30
 800806a:	2a09      	cmp	r2, #9
 800806c:	d903      	bls.n	8008076 <_svfiprintf_r+0x1a6>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0c6      	beq.n	8008000 <_svfiprintf_r+0x130>
 8008072:	9105      	str	r1, [sp, #20]
 8008074:	e7c4      	b.n	8008000 <_svfiprintf_r+0x130>
 8008076:	fb0c 2101 	mla	r1, ip, r1, r2
 800807a:	4604      	mov	r4, r0
 800807c:	2301      	movs	r3, #1
 800807e:	e7f0      	b.n	8008062 <_svfiprintf_r+0x192>
 8008080:	ab03      	add	r3, sp, #12
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	462a      	mov	r2, r5
 8008086:	4b0e      	ldr	r3, [pc, #56]	@ (80080c0 <_svfiprintf_r+0x1f0>)
 8008088:	a904      	add	r1, sp, #16
 800808a:	4638      	mov	r0, r7
 800808c:	f7fe fba4 	bl	80067d8 <_printf_float>
 8008090:	1c42      	adds	r2, r0, #1
 8008092:	4606      	mov	r6, r0
 8008094:	d1d6      	bne.n	8008044 <_svfiprintf_r+0x174>
 8008096:	89ab      	ldrh	r3, [r5, #12]
 8008098:	065b      	lsls	r3, r3, #25
 800809a:	f53f af2d 	bmi.w	8007ef8 <_svfiprintf_r+0x28>
 800809e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080a0:	e72c      	b.n	8007efc <_svfiprintf_r+0x2c>
 80080a2:	ab03      	add	r3, sp, #12
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	462a      	mov	r2, r5
 80080a8:	4b05      	ldr	r3, [pc, #20]	@ (80080c0 <_svfiprintf_r+0x1f0>)
 80080aa:	a904      	add	r1, sp, #16
 80080ac:	4638      	mov	r0, r7
 80080ae:	f7fe fe2b 	bl	8006d08 <_printf_i>
 80080b2:	e7ed      	b.n	8008090 <_svfiprintf_r+0x1c0>
 80080b4:	080097ad 	.word	0x080097ad
 80080b8:	080097b7 	.word	0x080097b7
 80080bc:	080067d9 	.word	0x080067d9
 80080c0:	08007e19 	.word	0x08007e19
 80080c4:	080097b3 	.word	0x080097b3

080080c8 <malloc>:
 80080c8:	4b02      	ldr	r3, [pc, #8]	@ (80080d4 <malloc+0xc>)
 80080ca:	4601      	mov	r1, r0
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	f000 b825 	b.w	800811c <_malloc_r>
 80080d2:	bf00      	nop
 80080d4:	20000024 	.word	0x20000024

080080d8 <sbrk_aligned>:
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	4e0f      	ldr	r6, [pc, #60]	@ (8008118 <sbrk_aligned+0x40>)
 80080dc:	460c      	mov	r4, r1
 80080de:	6831      	ldr	r1, [r6, #0]
 80080e0:	4605      	mov	r5, r0
 80080e2:	b911      	cbnz	r1, 80080ea <sbrk_aligned+0x12>
 80080e4:	f000 fd94 	bl	8008c10 <_sbrk_r>
 80080e8:	6030      	str	r0, [r6, #0]
 80080ea:	4621      	mov	r1, r4
 80080ec:	4628      	mov	r0, r5
 80080ee:	f000 fd8f 	bl	8008c10 <_sbrk_r>
 80080f2:	1c43      	adds	r3, r0, #1
 80080f4:	d103      	bne.n	80080fe <sbrk_aligned+0x26>
 80080f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80080fa:	4620      	mov	r0, r4
 80080fc:	bd70      	pop	{r4, r5, r6, pc}
 80080fe:	1cc4      	adds	r4, r0, #3
 8008100:	f024 0403 	bic.w	r4, r4, #3
 8008104:	42a0      	cmp	r0, r4
 8008106:	d0f8      	beq.n	80080fa <sbrk_aligned+0x22>
 8008108:	1a21      	subs	r1, r4, r0
 800810a:	4628      	mov	r0, r5
 800810c:	f000 fd80 	bl	8008c10 <_sbrk_r>
 8008110:	3001      	adds	r0, #1
 8008112:	d1f2      	bne.n	80080fa <sbrk_aligned+0x22>
 8008114:	e7ef      	b.n	80080f6 <sbrk_aligned+0x1e>
 8008116:	bf00      	nop
 8008118:	20000748 	.word	0x20000748

0800811c <_malloc_r>:
 800811c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008120:	1ccd      	adds	r5, r1, #3
 8008122:	f025 0503 	bic.w	r5, r5, #3
 8008126:	3508      	adds	r5, #8
 8008128:	2d0c      	cmp	r5, #12
 800812a:	bf38      	it	cc
 800812c:	250c      	movcc	r5, #12
 800812e:	2d00      	cmp	r5, #0
 8008130:	4606      	mov	r6, r0
 8008132:	db01      	blt.n	8008138 <_malloc_r+0x1c>
 8008134:	42a9      	cmp	r1, r5
 8008136:	d904      	bls.n	8008142 <_malloc_r+0x26>
 8008138:	230c      	movs	r3, #12
 800813a:	6033      	str	r3, [r6, #0]
 800813c:	2000      	movs	r0, #0
 800813e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008142:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008218 <_malloc_r+0xfc>
 8008146:	f000 f915 	bl	8008374 <__malloc_lock>
 800814a:	f8d8 3000 	ldr.w	r3, [r8]
 800814e:	461c      	mov	r4, r3
 8008150:	bb44      	cbnz	r4, 80081a4 <_malloc_r+0x88>
 8008152:	4629      	mov	r1, r5
 8008154:	4630      	mov	r0, r6
 8008156:	f7ff ffbf 	bl	80080d8 <sbrk_aligned>
 800815a:	1c43      	adds	r3, r0, #1
 800815c:	4604      	mov	r4, r0
 800815e:	d158      	bne.n	8008212 <_malloc_r+0xf6>
 8008160:	f8d8 4000 	ldr.w	r4, [r8]
 8008164:	4627      	mov	r7, r4
 8008166:	2f00      	cmp	r7, #0
 8008168:	d143      	bne.n	80081f2 <_malloc_r+0xd6>
 800816a:	2c00      	cmp	r4, #0
 800816c:	d04b      	beq.n	8008206 <_malloc_r+0xea>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	4639      	mov	r1, r7
 8008172:	4630      	mov	r0, r6
 8008174:	eb04 0903 	add.w	r9, r4, r3
 8008178:	f000 fd4a 	bl	8008c10 <_sbrk_r>
 800817c:	4581      	cmp	r9, r0
 800817e:	d142      	bne.n	8008206 <_malloc_r+0xea>
 8008180:	6821      	ldr	r1, [r4, #0]
 8008182:	1a6d      	subs	r5, r5, r1
 8008184:	4629      	mov	r1, r5
 8008186:	4630      	mov	r0, r6
 8008188:	f7ff ffa6 	bl	80080d8 <sbrk_aligned>
 800818c:	3001      	adds	r0, #1
 800818e:	d03a      	beq.n	8008206 <_malloc_r+0xea>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	442b      	add	r3, r5
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	f8d8 3000 	ldr.w	r3, [r8]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	bb62      	cbnz	r2, 80081f8 <_malloc_r+0xdc>
 800819e:	f8c8 7000 	str.w	r7, [r8]
 80081a2:	e00f      	b.n	80081c4 <_malloc_r+0xa8>
 80081a4:	6822      	ldr	r2, [r4, #0]
 80081a6:	1b52      	subs	r2, r2, r5
 80081a8:	d420      	bmi.n	80081ec <_malloc_r+0xd0>
 80081aa:	2a0b      	cmp	r2, #11
 80081ac:	d917      	bls.n	80081de <_malloc_r+0xc2>
 80081ae:	1961      	adds	r1, r4, r5
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	6025      	str	r5, [r4, #0]
 80081b4:	bf18      	it	ne
 80081b6:	6059      	strne	r1, [r3, #4]
 80081b8:	6863      	ldr	r3, [r4, #4]
 80081ba:	bf08      	it	eq
 80081bc:	f8c8 1000 	streq.w	r1, [r8]
 80081c0:	5162      	str	r2, [r4, r5]
 80081c2:	604b      	str	r3, [r1, #4]
 80081c4:	4630      	mov	r0, r6
 80081c6:	f000 f8db 	bl	8008380 <__malloc_unlock>
 80081ca:	f104 000b 	add.w	r0, r4, #11
 80081ce:	1d23      	adds	r3, r4, #4
 80081d0:	f020 0007 	bic.w	r0, r0, #7
 80081d4:	1ac2      	subs	r2, r0, r3
 80081d6:	bf1c      	itt	ne
 80081d8:	1a1b      	subne	r3, r3, r0
 80081da:	50a3      	strne	r3, [r4, r2]
 80081dc:	e7af      	b.n	800813e <_malloc_r+0x22>
 80081de:	6862      	ldr	r2, [r4, #4]
 80081e0:	42a3      	cmp	r3, r4
 80081e2:	bf0c      	ite	eq
 80081e4:	f8c8 2000 	streq.w	r2, [r8]
 80081e8:	605a      	strne	r2, [r3, #4]
 80081ea:	e7eb      	b.n	80081c4 <_malloc_r+0xa8>
 80081ec:	4623      	mov	r3, r4
 80081ee:	6864      	ldr	r4, [r4, #4]
 80081f0:	e7ae      	b.n	8008150 <_malloc_r+0x34>
 80081f2:	463c      	mov	r4, r7
 80081f4:	687f      	ldr	r7, [r7, #4]
 80081f6:	e7b6      	b.n	8008166 <_malloc_r+0x4a>
 80081f8:	461a      	mov	r2, r3
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	42a3      	cmp	r3, r4
 80081fe:	d1fb      	bne.n	80081f8 <_malloc_r+0xdc>
 8008200:	2300      	movs	r3, #0
 8008202:	6053      	str	r3, [r2, #4]
 8008204:	e7de      	b.n	80081c4 <_malloc_r+0xa8>
 8008206:	230c      	movs	r3, #12
 8008208:	6033      	str	r3, [r6, #0]
 800820a:	4630      	mov	r0, r6
 800820c:	f000 f8b8 	bl	8008380 <__malloc_unlock>
 8008210:	e794      	b.n	800813c <_malloc_r+0x20>
 8008212:	6005      	str	r5, [r0, #0]
 8008214:	e7d6      	b.n	80081c4 <_malloc_r+0xa8>
 8008216:	bf00      	nop
 8008218:	2000074c 	.word	0x2000074c

0800821c <__sflush_r>:
 800821c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008224:	0716      	lsls	r6, r2, #28
 8008226:	4605      	mov	r5, r0
 8008228:	460c      	mov	r4, r1
 800822a:	d454      	bmi.n	80082d6 <__sflush_r+0xba>
 800822c:	684b      	ldr	r3, [r1, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	dc02      	bgt.n	8008238 <__sflush_r+0x1c>
 8008232:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008234:	2b00      	cmp	r3, #0
 8008236:	dd48      	ble.n	80082ca <__sflush_r+0xae>
 8008238:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800823a:	2e00      	cmp	r6, #0
 800823c:	d045      	beq.n	80082ca <__sflush_r+0xae>
 800823e:	2300      	movs	r3, #0
 8008240:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008244:	682f      	ldr	r7, [r5, #0]
 8008246:	6a21      	ldr	r1, [r4, #32]
 8008248:	602b      	str	r3, [r5, #0]
 800824a:	d030      	beq.n	80082ae <__sflush_r+0x92>
 800824c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	0759      	lsls	r1, r3, #29
 8008252:	d505      	bpl.n	8008260 <__sflush_r+0x44>
 8008254:	6863      	ldr	r3, [r4, #4]
 8008256:	1ad2      	subs	r2, r2, r3
 8008258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800825a:	b10b      	cbz	r3, 8008260 <__sflush_r+0x44>
 800825c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800825e:	1ad2      	subs	r2, r2, r3
 8008260:	2300      	movs	r3, #0
 8008262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008264:	6a21      	ldr	r1, [r4, #32]
 8008266:	4628      	mov	r0, r5
 8008268:	47b0      	blx	r6
 800826a:	1c43      	adds	r3, r0, #1
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	d106      	bne.n	800827e <__sflush_r+0x62>
 8008270:	6829      	ldr	r1, [r5, #0]
 8008272:	291d      	cmp	r1, #29
 8008274:	d82b      	bhi.n	80082ce <__sflush_r+0xb2>
 8008276:	4a2a      	ldr	r2, [pc, #168]	@ (8008320 <__sflush_r+0x104>)
 8008278:	410a      	asrs	r2, r1
 800827a:	07d6      	lsls	r6, r2, #31
 800827c:	d427      	bmi.n	80082ce <__sflush_r+0xb2>
 800827e:	2200      	movs	r2, #0
 8008280:	6062      	str	r2, [r4, #4]
 8008282:	04d9      	lsls	r1, r3, #19
 8008284:	6922      	ldr	r2, [r4, #16]
 8008286:	6022      	str	r2, [r4, #0]
 8008288:	d504      	bpl.n	8008294 <__sflush_r+0x78>
 800828a:	1c42      	adds	r2, r0, #1
 800828c:	d101      	bne.n	8008292 <__sflush_r+0x76>
 800828e:	682b      	ldr	r3, [r5, #0]
 8008290:	b903      	cbnz	r3, 8008294 <__sflush_r+0x78>
 8008292:	6560      	str	r0, [r4, #84]	@ 0x54
 8008294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008296:	602f      	str	r7, [r5, #0]
 8008298:	b1b9      	cbz	r1, 80082ca <__sflush_r+0xae>
 800829a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800829e:	4299      	cmp	r1, r3
 80082a0:	d002      	beq.n	80082a8 <__sflush_r+0x8c>
 80082a2:	4628      	mov	r0, r5
 80082a4:	f000 fd16 	bl	8008cd4 <_free_r>
 80082a8:	2300      	movs	r3, #0
 80082aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80082ac:	e00d      	b.n	80082ca <__sflush_r+0xae>
 80082ae:	2301      	movs	r3, #1
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b0      	blx	r6
 80082b4:	4602      	mov	r2, r0
 80082b6:	1c50      	adds	r0, r2, #1
 80082b8:	d1c9      	bne.n	800824e <__sflush_r+0x32>
 80082ba:	682b      	ldr	r3, [r5, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d0c6      	beq.n	800824e <__sflush_r+0x32>
 80082c0:	2b1d      	cmp	r3, #29
 80082c2:	d001      	beq.n	80082c8 <__sflush_r+0xac>
 80082c4:	2b16      	cmp	r3, #22
 80082c6:	d11e      	bne.n	8008306 <__sflush_r+0xea>
 80082c8:	602f      	str	r7, [r5, #0]
 80082ca:	2000      	movs	r0, #0
 80082cc:	e022      	b.n	8008314 <__sflush_r+0xf8>
 80082ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082d2:	b21b      	sxth	r3, r3
 80082d4:	e01b      	b.n	800830e <__sflush_r+0xf2>
 80082d6:	690f      	ldr	r7, [r1, #16]
 80082d8:	2f00      	cmp	r7, #0
 80082da:	d0f6      	beq.n	80082ca <__sflush_r+0xae>
 80082dc:	0793      	lsls	r3, r2, #30
 80082de:	680e      	ldr	r6, [r1, #0]
 80082e0:	bf08      	it	eq
 80082e2:	694b      	ldreq	r3, [r1, #20]
 80082e4:	600f      	str	r7, [r1, #0]
 80082e6:	bf18      	it	ne
 80082e8:	2300      	movne	r3, #0
 80082ea:	eba6 0807 	sub.w	r8, r6, r7
 80082ee:	608b      	str	r3, [r1, #8]
 80082f0:	f1b8 0f00 	cmp.w	r8, #0
 80082f4:	dde9      	ble.n	80082ca <__sflush_r+0xae>
 80082f6:	6a21      	ldr	r1, [r4, #32]
 80082f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80082fa:	4643      	mov	r3, r8
 80082fc:	463a      	mov	r2, r7
 80082fe:	4628      	mov	r0, r5
 8008300:	47b0      	blx	r6
 8008302:	2800      	cmp	r0, #0
 8008304:	dc08      	bgt.n	8008318 <__sflush_r+0xfc>
 8008306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800830a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800830e:	81a3      	strh	r3, [r4, #12]
 8008310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008318:	4407      	add	r7, r0
 800831a:	eba8 0800 	sub.w	r8, r8, r0
 800831e:	e7e7      	b.n	80082f0 <__sflush_r+0xd4>
 8008320:	dfbffffe 	.word	0xdfbffffe

08008324 <_fflush_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	690b      	ldr	r3, [r1, #16]
 8008328:	4605      	mov	r5, r0
 800832a:	460c      	mov	r4, r1
 800832c:	b913      	cbnz	r3, 8008334 <_fflush_r+0x10>
 800832e:	2500      	movs	r5, #0
 8008330:	4628      	mov	r0, r5
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	b118      	cbz	r0, 800833e <_fflush_r+0x1a>
 8008336:	6a03      	ldr	r3, [r0, #32]
 8008338:	b90b      	cbnz	r3, 800833e <_fflush_r+0x1a>
 800833a:	f7fe feb1 	bl	80070a0 <__sinit>
 800833e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0f3      	beq.n	800832e <_fflush_r+0xa>
 8008346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008348:	07d0      	lsls	r0, r2, #31
 800834a:	d404      	bmi.n	8008356 <_fflush_r+0x32>
 800834c:	0599      	lsls	r1, r3, #22
 800834e:	d402      	bmi.n	8008356 <_fflush_r+0x32>
 8008350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008352:	f7fe ff12 	bl	800717a <__retarget_lock_acquire_recursive>
 8008356:	4628      	mov	r0, r5
 8008358:	4621      	mov	r1, r4
 800835a:	f7ff ff5f 	bl	800821c <__sflush_r>
 800835e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008360:	07da      	lsls	r2, r3, #31
 8008362:	4605      	mov	r5, r0
 8008364:	d4e4      	bmi.n	8008330 <_fflush_r+0xc>
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	059b      	lsls	r3, r3, #22
 800836a:	d4e1      	bmi.n	8008330 <_fflush_r+0xc>
 800836c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800836e:	f7fe ff05 	bl	800717c <__retarget_lock_release_recursive>
 8008372:	e7dd      	b.n	8008330 <_fflush_r+0xc>

08008374 <__malloc_lock>:
 8008374:	4801      	ldr	r0, [pc, #4]	@ (800837c <__malloc_lock+0x8>)
 8008376:	f7fe bf00 	b.w	800717a <__retarget_lock_acquire_recursive>
 800837a:	bf00      	nop
 800837c:	20000744 	.word	0x20000744

08008380 <__malloc_unlock>:
 8008380:	4801      	ldr	r0, [pc, #4]	@ (8008388 <__malloc_unlock+0x8>)
 8008382:	f7fe befb 	b.w	800717c <__retarget_lock_release_recursive>
 8008386:	bf00      	nop
 8008388:	20000744 	.word	0x20000744

0800838c <_Balloc>:
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	69c6      	ldr	r6, [r0, #28]
 8008390:	4604      	mov	r4, r0
 8008392:	460d      	mov	r5, r1
 8008394:	b976      	cbnz	r6, 80083b4 <_Balloc+0x28>
 8008396:	2010      	movs	r0, #16
 8008398:	f7ff fe96 	bl	80080c8 <malloc>
 800839c:	4602      	mov	r2, r0
 800839e:	61e0      	str	r0, [r4, #28]
 80083a0:	b920      	cbnz	r0, 80083ac <_Balloc+0x20>
 80083a2:	4b18      	ldr	r3, [pc, #96]	@ (8008404 <_Balloc+0x78>)
 80083a4:	4818      	ldr	r0, [pc, #96]	@ (8008408 <_Balloc+0x7c>)
 80083a6:	216b      	movs	r1, #107	@ 0x6b
 80083a8:	f000 fc62 	bl	8008c70 <__assert_func>
 80083ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083b0:	6006      	str	r6, [r0, #0]
 80083b2:	60c6      	str	r6, [r0, #12]
 80083b4:	69e6      	ldr	r6, [r4, #28]
 80083b6:	68f3      	ldr	r3, [r6, #12]
 80083b8:	b183      	cbz	r3, 80083dc <_Balloc+0x50>
 80083ba:	69e3      	ldr	r3, [r4, #28]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083c2:	b9b8      	cbnz	r0, 80083f4 <_Balloc+0x68>
 80083c4:	2101      	movs	r1, #1
 80083c6:	fa01 f605 	lsl.w	r6, r1, r5
 80083ca:	1d72      	adds	r2, r6, #5
 80083cc:	0092      	lsls	r2, r2, #2
 80083ce:	4620      	mov	r0, r4
 80083d0:	f000 fc6c 	bl	8008cac <_calloc_r>
 80083d4:	b160      	cbz	r0, 80083f0 <_Balloc+0x64>
 80083d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083da:	e00e      	b.n	80083fa <_Balloc+0x6e>
 80083dc:	2221      	movs	r2, #33	@ 0x21
 80083de:	2104      	movs	r1, #4
 80083e0:	4620      	mov	r0, r4
 80083e2:	f000 fc63 	bl	8008cac <_calloc_r>
 80083e6:	69e3      	ldr	r3, [r4, #28]
 80083e8:	60f0      	str	r0, [r6, #12]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e4      	bne.n	80083ba <_Balloc+0x2e>
 80083f0:	2000      	movs	r0, #0
 80083f2:	bd70      	pop	{r4, r5, r6, pc}
 80083f4:	6802      	ldr	r2, [r0, #0]
 80083f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083fa:	2300      	movs	r3, #0
 80083fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008400:	e7f7      	b.n	80083f2 <_Balloc+0x66>
 8008402:	bf00      	nop
 8008404:	0800972d 	.word	0x0800972d
 8008408:	080097be 	.word	0x080097be

0800840c <_Bfree>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	69c6      	ldr	r6, [r0, #28]
 8008410:	4605      	mov	r5, r0
 8008412:	460c      	mov	r4, r1
 8008414:	b976      	cbnz	r6, 8008434 <_Bfree+0x28>
 8008416:	2010      	movs	r0, #16
 8008418:	f7ff fe56 	bl	80080c8 <malloc>
 800841c:	4602      	mov	r2, r0
 800841e:	61e8      	str	r0, [r5, #28]
 8008420:	b920      	cbnz	r0, 800842c <_Bfree+0x20>
 8008422:	4b09      	ldr	r3, [pc, #36]	@ (8008448 <_Bfree+0x3c>)
 8008424:	4809      	ldr	r0, [pc, #36]	@ (800844c <_Bfree+0x40>)
 8008426:	218f      	movs	r1, #143	@ 0x8f
 8008428:	f000 fc22 	bl	8008c70 <__assert_func>
 800842c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008430:	6006      	str	r6, [r0, #0]
 8008432:	60c6      	str	r6, [r0, #12]
 8008434:	b13c      	cbz	r4, 8008446 <_Bfree+0x3a>
 8008436:	69eb      	ldr	r3, [r5, #28]
 8008438:	6862      	ldr	r2, [r4, #4]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008440:	6021      	str	r1, [r4, #0]
 8008442:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008446:	bd70      	pop	{r4, r5, r6, pc}
 8008448:	0800972d 	.word	0x0800972d
 800844c:	080097be 	.word	0x080097be

08008450 <__multadd>:
 8008450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008454:	690d      	ldr	r5, [r1, #16]
 8008456:	4607      	mov	r7, r0
 8008458:	460c      	mov	r4, r1
 800845a:	461e      	mov	r6, r3
 800845c:	f101 0c14 	add.w	ip, r1, #20
 8008460:	2000      	movs	r0, #0
 8008462:	f8dc 3000 	ldr.w	r3, [ip]
 8008466:	b299      	uxth	r1, r3
 8008468:	fb02 6101 	mla	r1, r2, r1, r6
 800846c:	0c1e      	lsrs	r6, r3, #16
 800846e:	0c0b      	lsrs	r3, r1, #16
 8008470:	fb02 3306 	mla	r3, r2, r6, r3
 8008474:	b289      	uxth	r1, r1
 8008476:	3001      	adds	r0, #1
 8008478:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800847c:	4285      	cmp	r5, r0
 800847e:	f84c 1b04 	str.w	r1, [ip], #4
 8008482:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008486:	dcec      	bgt.n	8008462 <__multadd+0x12>
 8008488:	b30e      	cbz	r6, 80084ce <__multadd+0x7e>
 800848a:	68a3      	ldr	r3, [r4, #8]
 800848c:	42ab      	cmp	r3, r5
 800848e:	dc19      	bgt.n	80084c4 <__multadd+0x74>
 8008490:	6861      	ldr	r1, [r4, #4]
 8008492:	4638      	mov	r0, r7
 8008494:	3101      	adds	r1, #1
 8008496:	f7ff ff79 	bl	800838c <_Balloc>
 800849a:	4680      	mov	r8, r0
 800849c:	b928      	cbnz	r0, 80084aa <__multadd+0x5a>
 800849e:	4602      	mov	r2, r0
 80084a0:	4b0c      	ldr	r3, [pc, #48]	@ (80084d4 <__multadd+0x84>)
 80084a2:	480d      	ldr	r0, [pc, #52]	@ (80084d8 <__multadd+0x88>)
 80084a4:	21ba      	movs	r1, #186	@ 0xba
 80084a6:	f000 fbe3 	bl	8008c70 <__assert_func>
 80084aa:	6922      	ldr	r2, [r4, #16]
 80084ac:	3202      	adds	r2, #2
 80084ae:	f104 010c 	add.w	r1, r4, #12
 80084b2:	0092      	lsls	r2, r2, #2
 80084b4:	300c      	adds	r0, #12
 80084b6:	f000 fbcd 	bl	8008c54 <memcpy>
 80084ba:	4621      	mov	r1, r4
 80084bc:	4638      	mov	r0, r7
 80084be:	f7ff ffa5 	bl	800840c <_Bfree>
 80084c2:	4644      	mov	r4, r8
 80084c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084c8:	3501      	adds	r5, #1
 80084ca:	615e      	str	r6, [r3, #20]
 80084cc:	6125      	str	r5, [r4, #16]
 80084ce:	4620      	mov	r0, r4
 80084d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d4:	0800979c 	.word	0x0800979c
 80084d8:	080097be 	.word	0x080097be

080084dc <__hi0bits>:
 80084dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80084e0:	4603      	mov	r3, r0
 80084e2:	bf36      	itet	cc
 80084e4:	0403      	lslcc	r3, r0, #16
 80084e6:	2000      	movcs	r0, #0
 80084e8:	2010      	movcc	r0, #16
 80084ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084ee:	bf3c      	itt	cc
 80084f0:	021b      	lslcc	r3, r3, #8
 80084f2:	3008      	addcc	r0, #8
 80084f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084f8:	bf3c      	itt	cc
 80084fa:	011b      	lslcc	r3, r3, #4
 80084fc:	3004      	addcc	r0, #4
 80084fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008502:	bf3c      	itt	cc
 8008504:	009b      	lslcc	r3, r3, #2
 8008506:	3002      	addcc	r0, #2
 8008508:	2b00      	cmp	r3, #0
 800850a:	db05      	blt.n	8008518 <__hi0bits+0x3c>
 800850c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008510:	f100 0001 	add.w	r0, r0, #1
 8008514:	bf08      	it	eq
 8008516:	2020      	moveq	r0, #32
 8008518:	4770      	bx	lr

0800851a <__lo0bits>:
 800851a:	6803      	ldr	r3, [r0, #0]
 800851c:	4602      	mov	r2, r0
 800851e:	f013 0007 	ands.w	r0, r3, #7
 8008522:	d00b      	beq.n	800853c <__lo0bits+0x22>
 8008524:	07d9      	lsls	r1, r3, #31
 8008526:	d421      	bmi.n	800856c <__lo0bits+0x52>
 8008528:	0798      	lsls	r0, r3, #30
 800852a:	bf49      	itett	mi
 800852c:	085b      	lsrmi	r3, r3, #1
 800852e:	089b      	lsrpl	r3, r3, #2
 8008530:	2001      	movmi	r0, #1
 8008532:	6013      	strmi	r3, [r2, #0]
 8008534:	bf5c      	itt	pl
 8008536:	6013      	strpl	r3, [r2, #0]
 8008538:	2002      	movpl	r0, #2
 800853a:	4770      	bx	lr
 800853c:	b299      	uxth	r1, r3
 800853e:	b909      	cbnz	r1, 8008544 <__lo0bits+0x2a>
 8008540:	0c1b      	lsrs	r3, r3, #16
 8008542:	2010      	movs	r0, #16
 8008544:	b2d9      	uxtb	r1, r3
 8008546:	b909      	cbnz	r1, 800854c <__lo0bits+0x32>
 8008548:	3008      	adds	r0, #8
 800854a:	0a1b      	lsrs	r3, r3, #8
 800854c:	0719      	lsls	r1, r3, #28
 800854e:	bf04      	itt	eq
 8008550:	091b      	lsreq	r3, r3, #4
 8008552:	3004      	addeq	r0, #4
 8008554:	0799      	lsls	r1, r3, #30
 8008556:	bf04      	itt	eq
 8008558:	089b      	lsreq	r3, r3, #2
 800855a:	3002      	addeq	r0, #2
 800855c:	07d9      	lsls	r1, r3, #31
 800855e:	d403      	bmi.n	8008568 <__lo0bits+0x4e>
 8008560:	085b      	lsrs	r3, r3, #1
 8008562:	f100 0001 	add.w	r0, r0, #1
 8008566:	d003      	beq.n	8008570 <__lo0bits+0x56>
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	4770      	bx	lr
 800856c:	2000      	movs	r0, #0
 800856e:	4770      	bx	lr
 8008570:	2020      	movs	r0, #32
 8008572:	4770      	bx	lr

08008574 <__i2b>:
 8008574:	b510      	push	{r4, lr}
 8008576:	460c      	mov	r4, r1
 8008578:	2101      	movs	r1, #1
 800857a:	f7ff ff07 	bl	800838c <_Balloc>
 800857e:	4602      	mov	r2, r0
 8008580:	b928      	cbnz	r0, 800858e <__i2b+0x1a>
 8008582:	4b05      	ldr	r3, [pc, #20]	@ (8008598 <__i2b+0x24>)
 8008584:	4805      	ldr	r0, [pc, #20]	@ (800859c <__i2b+0x28>)
 8008586:	f240 1145 	movw	r1, #325	@ 0x145
 800858a:	f000 fb71 	bl	8008c70 <__assert_func>
 800858e:	2301      	movs	r3, #1
 8008590:	6144      	str	r4, [r0, #20]
 8008592:	6103      	str	r3, [r0, #16]
 8008594:	bd10      	pop	{r4, pc}
 8008596:	bf00      	nop
 8008598:	0800979c 	.word	0x0800979c
 800859c:	080097be 	.word	0x080097be

080085a0 <__multiply>:
 80085a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	4614      	mov	r4, r2
 80085a6:	690a      	ldr	r2, [r1, #16]
 80085a8:	6923      	ldr	r3, [r4, #16]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	bfa8      	it	ge
 80085ae:	4623      	movge	r3, r4
 80085b0:	460f      	mov	r7, r1
 80085b2:	bfa4      	itt	ge
 80085b4:	460c      	movge	r4, r1
 80085b6:	461f      	movge	r7, r3
 80085b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80085bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80085c0:	68a3      	ldr	r3, [r4, #8]
 80085c2:	6861      	ldr	r1, [r4, #4]
 80085c4:	eb0a 0609 	add.w	r6, sl, r9
 80085c8:	42b3      	cmp	r3, r6
 80085ca:	b085      	sub	sp, #20
 80085cc:	bfb8      	it	lt
 80085ce:	3101      	addlt	r1, #1
 80085d0:	f7ff fedc 	bl	800838c <_Balloc>
 80085d4:	b930      	cbnz	r0, 80085e4 <__multiply+0x44>
 80085d6:	4602      	mov	r2, r0
 80085d8:	4b44      	ldr	r3, [pc, #272]	@ (80086ec <__multiply+0x14c>)
 80085da:	4845      	ldr	r0, [pc, #276]	@ (80086f0 <__multiply+0x150>)
 80085dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80085e0:	f000 fb46 	bl	8008c70 <__assert_func>
 80085e4:	f100 0514 	add.w	r5, r0, #20
 80085e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80085ec:	462b      	mov	r3, r5
 80085ee:	2200      	movs	r2, #0
 80085f0:	4543      	cmp	r3, r8
 80085f2:	d321      	bcc.n	8008638 <__multiply+0x98>
 80085f4:	f107 0114 	add.w	r1, r7, #20
 80085f8:	f104 0214 	add.w	r2, r4, #20
 80085fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008600:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008604:	9302      	str	r3, [sp, #8]
 8008606:	1b13      	subs	r3, r2, r4
 8008608:	3b15      	subs	r3, #21
 800860a:	f023 0303 	bic.w	r3, r3, #3
 800860e:	3304      	adds	r3, #4
 8008610:	f104 0715 	add.w	r7, r4, #21
 8008614:	42ba      	cmp	r2, r7
 8008616:	bf38      	it	cc
 8008618:	2304      	movcc	r3, #4
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	9b02      	ldr	r3, [sp, #8]
 800861e:	9103      	str	r1, [sp, #12]
 8008620:	428b      	cmp	r3, r1
 8008622:	d80c      	bhi.n	800863e <__multiply+0x9e>
 8008624:	2e00      	cmp	r6, #0
 8008626:	dd03      	ble.n	8008630 <__multiply+0x90>
 8008628:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800862c:	2b00      	cmp	r3, #0
 800862e:	d05b      	beq.n	80086e8 <__multiply+0x148>
 8008630:	6106      	str	r6, [r0, #16]
 8008632:	b005      	add	sp, #20
 8008634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008638:	f843 2b04 	str.w	r2, [r3], #4
 800863c:	e7d8      	b.n	80085f0 <__multiply+0x50>
 800863e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008642:	f1ba 0f00 	cmp.w	sl, #0
 8008646:	d024      	beq.n	8008692 <__multiply+0xf2>
 8008648:	f104 0e14 	add.w	lr, r4, #20
 800864c:	46a9      	mov	r9, r5
 800864e:	f04f 0c00 	mov.w	ip, #0
 8008652:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008656:	f8d9 3000 	ldr.w	r3, [r9]
 800865a:	fa1f fb87 	uxth.w	fp, r7
 800865e:	b29b      	uxth	r3, r3
 8008660:	fb0a 330b 	mla	r3, sl, fp, r3
 8008664:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008668:	f8d9 7000 	ldr.w	r7, [r9]
 800866c:	4463      	add	r3, ip
 800866e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008672:	fb0a c70b 	mla	r7, sl, fp, ip
 8008676:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800867a:	b29b      	uxth	r3, r3
 800867c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008680:	4572      	cmp	r2, lr
 8008682:	f849 3b04 	str.w	r3, [r9], #4
 8008686:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800868a:	d8e2      	bhi.n	8008652 <__multiply+0xb2>
 800868c:	9b01      	ldr	r3, [sp, #4]
 800868e:	f845 c003 	str.w	ip, [r5, r3]
 8008692:	9b03      	ldr	r3, [sp, #12]
 8008694:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008698:	3104      	adds	r1, #4
 800869a:	f1b9 0f00 	cmp.w	r9, #0
 800869e:	d021      	beq.n	80086e4 <__multiply+0x144>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	f104 0c14 	add.w	ip, r4, #20
 80086a6:	46ae      	mov	lr, r5
 80086a8:	f04f 0a00 	mov.w	sl, #0
 80086ac:	f8bc b000 	ldrh.w	fp, [ip]
 80086b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80086b4:	fb09 770b 	mla	r7, r9, fp, r7
 80086b8:	4457      	add	r7, sl
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80086c0:	f84e 3b04 	str.w	r3, [lr], #4
 80086c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80086c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086cc:	f8be 3000 	ldrh.w	r3, [lr]
 80086d0:	fb09 330a 	mla	r3, r9, sl, r3
 80086d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80086d8:	4562      	cmp	r2, ip
 80086da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086de:	d8e5      	bhi.n	80086ac <__multiply+0x10c>
 80086e0:	9f01      	ldr	r7, [sp, #4]
 80086e2:	51eb      	str	r3, [r5, r7]
 80086e4:	3504      	adds	r5, #4
 80086e6:	e799      	b.n	800861c <__multiply+0x7c>
 80086e8:	3e01      	subs	r6, #1
 80086ea:	e79b      	b.n	8008624 <__multiply+0x84>
 80086ec:	0800979c 	.word	0x0800979c
 80086f0:	080097be 	.word	0x080097be

080086f4 <__pow5mult>:
 80086f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f8:	4615      	mov	r5, r2
 80086fa:	f012 0203 	ands.w	r2, r2, #3
 80086fe:	4607      	mov	r7, r0
 8008700:	460e      	mov	r6, r1
 8008702:	d007      	beq.n	8008714 <__pow5mult+0x20>
 8008704:	4c25      	ldr	r4, [pc, #148]	@ (800879c <__pow5mult+0xa8>)
 8008706:	3a01      	subs	r2, #1
 8008708:	2300      	movs	r3, #0
 800870a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800870e:	f7ff fe9f 	bl	8008450 <__multadd>
 8008712:	4606      	mov	r6, r0
 8008714:	10ad      	asrs	r5, r5, #2
 8008716:	d03d      	beq.n	8008794 <__pow5mult+0xa0>
 8008718:	69fc      	ldr	r4, [r7, #28]
 800871a:	b97c      	cbnz	r4, 800873c <__pow5mult+0x48>
 800871c:	2010      	movs	r0, #16
 800871e:	f7ff fcd3 	bl	80080c8 <malloc>
 8008722:	4602      	mov	r2, r0
 8008724:	61f8      	str	r0, [r7, #28]
 8008726:	b928      	cbnz	r0, 8008734 <__pow5mult+0x40>
 8008728:	4b1d      	ldr	r3, [pc, #116]	@ (80087a0 <__pow5mult+0xac>)
 800872a:	481e      	ldr	r0, [pc, #120]	@ (80087a4 <__pow5mult+0xb0>)
 800872c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008730:	f000 fa9e 	bl	8008c70 <__assert_func>
 8008734:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008738:	6004      	str	r4, [r0, #0]
 800873a:	60c4      	str	r4, [r0, #12]
 800873c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008740:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008744:	b94c      	cbnz	r4, 800875a <__pow5mult+0x66>
 8008746:	f240 2171 	movw	r1, #625	@ 0x271
 800874a:	4638      	mov	r0, r7
 800874c:	f7ff ff12 	bl	8008574 <__i2b>
 8008750:	2300      	movs	r3, #0
 8008752:	f8c8 0008 	str.w	r0, [r8, #8]
 8008756:	4604      	mov	r4, r0
 8008758:	6003      	str	r3, [r0, #0]
 800875a:	f04f 0900 	mov.w	r9, #0
 800875e:	07eb      	lsls	r3, r5, #31
 8008760:	d50a      	bpl.n	8008778 <__pow5mult+0x84>
 8008762:	4631      	mov	r1, r6
 8008764:	4622      	mov	r2, r4
 8008766:	4638      	mov	r0, r7
 8008768:	f7ff ff1a 	bl	80085a0 <__multiply>
 800876c:	4631      	mov	r1, r6
 800876e:	4680      	mov	r8, r0
 8008770:	4638      	mov	r0, r7
 8008772:	f7ff fe4b 	bl	800840c <_Bfree>
 8008776:	4646      	mov	r6, r8
 8008778:	106d      	asrs	r5, r5, #1
 800877a:	d00b      	beq.n	8008794 <__pow5mult+0xa0>
 800877c:	6820      	ldr	r0, [r4, #0]
 800877e:	b938      	cbnz	r0, 8008790 <__pow5mult+0x9c>
 8008780:	4622      	mov	r2, r4
 8008782:	4621      	mov	r1, r4
 8008784:	4638      	mov	r0, r7
 8008786:	f7ff ff0b 	bl	80085a0 <__multiply>
 800878a:	6020      	str	r0, [r4, #0]
 800878c:	f8c0 9000 	str.w	r9, [r0]
 8008790:	4604      	mov	r4, r0
 8008792:	e7e4      	b.n	800875e <__pow5mult+0x6a>
 8008794:	4630      	mov	r0, r6
 8008796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800879a:	bf00      	nop
 800879c:	08009818 	.word	0x08009818
 80087a0:	0800972d 	.word	0x0800972d
 80087a4:	080097be 	.word	0x080097be

080087a8 <__lshift>:
 80087a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ac:	460c      	mov	r4, r1
 80087ae:	6849      	ldr	r1, [r1, #4]
 80087b0:	6923      	ldr	r3, [r4, #16]
 80087b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087b6:	68a3      	ldr	r3, [r4, #8]
 80087b8:	4607      	mov	r7, r0
 80087ba:	4691      	mov	r9, r2
 80087bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087c0:	f108 0601 	add.w	r6, r8, #1
 80087c4:	42b3      	cmp	r3, r6
 80087c6:	db0b      	blt.n	80087e0 <__lshift+0x38>
 80087c8:	4638      	mov	r0, r7
 80087ca:	f7ff fddf 	bl	800838c <_Balloc>
 80087ce:	4605      	mov	r5, r0
 80087d0:	b948      	cbnz	r0, 80087e6 <__lshift+0x3e>
 80087d2:	4602      	mov	r2, r0
 80087d4:	4b28      	ldr	r3, [pc, #160]	@ (8008878 <__lshift+0xd0>)
 80087d6:	4829      	ldr	r0, [pc, #164]	@ (800887c <__lshift+0xd4>)
 80087d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80087dc:	f000 fa48 	bl	8008c70 <__assert_func>
 80087e0:	3101      	adds	r1, #1
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	e7ee      	b.n	80087c4 <__lshift+0x1c>
 80087e6:	2300      	movs	r3, #0
 80087e8:	f100 0114 	add.w	r1, r0, #20
 80087ec:	f100 0210 	add.w	r2, r0, #16
 80087f0:	4618      	mov	r0, r3
 80087f2:	4553      	cmp	r3, sl
 80087f4:	db33      	blt.n	800885e <__lshift+0xb6>
 80087f6:	6920      	ldr	r0, [r4, #16]
 80087f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087fc:	f104 0314 	add.w	r3, r4, #20
 8008800:	f019 091f 	ands.w	r9, r9, #31
 8008804:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008808:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800880c:	d02b      	beq.n	8008866 <__lshift+0xbe>
 800880e:	f1c9 0e20 	rsb	lr, r9, #32
 8008812:	468a      	mov	sl, r1
 8008814:	2200      	movs	r2, #0
 8008816:	6818      	ldr	r0, [r3, #0]
 8008818:	fa00 f009 	lsl.w	r0, r0, r9
 800881c:	4310      	orrs	r0, r2
 800881e:	f84a 0b04 	str.w	r0, [sl], #4
 8008822:	f853 2b04 	ldr.w	r2, [r3], #4
 8008826:	459c      	cmp	ip, r3
 8008828:	fa22 f20e 	lsr.w	r2, r2, lr
 800882c:	d8f3      	bhi.n	8008816 <__lshift+0x6e>
 800882e:	ebac 0304 	sub.w	r3, ip, r4
 8008832:	3b15      	subs	r3, #21
 8008834:	f023 0303 	bic.w	r3, r3, #3
 8008838:	3304      	adds	r3, #4
 800883a:	f104 0015 	add.w	r0, r4, #21
 800883e:	4584      	cmp	ip, r0
 8008840:	bf38      	it	cc
 8008842:	2304      	movcc	r3, #4
 8008844:	50ca      	str	r2, [r1, r3]
 8008846:	b10a      	cbz	r2, 800884c <__lshift+0xa4>
 8008848:	f108 0602 	add.w	r6, r8, #2
 800884c:	3e01      	subs	r6, #1
 800884e:	4638      	mov	r0, r7
 8008850:	612e      	str	r6, [r5, #16]
 8008852:	4621      	mov	r1, r4
 8008854:	f7ff fdda 	bl	800840c <_Bfree>
 8008858:	4628      	mov	r0, r5
 800885a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008862:	3301      	adds	r3, #1
 8008864:	e7c5      	b.n	80087f2 <__lshift+0x4a>
 8008866:	3904      	subs	r1, #4
 8008868:	f853 2b04 	ldr.w	r2, [r3], #4
 800886c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008870:	459c      	cmp	ip, r3
 8008872:	d8f9      	bhi.n	8008868 <__lshift+0xc0>
 8008874:	e7ea      	b.n	800884c <__lshift+0xa4>
 8008876:	bf00      	nop
 8008878:	0800979c 	.word	0x0800979c
 800887c:	080097be 	.word	0x080097be

08008880 <__mcmp>:
 8008880:	690a      	ldr	r2, [r1, #16]
 8008882:	4603      	mov	r3, r0
 8008884:	6900      	ldr	r0, [r0, #16]
 8008886:	1a80      	subs	r0, r0, r2
 8008888:	b530      	push	{r4, r5, lr}
 800888a:	d10e      	bne.n	80088aa <__mcmp+0x2a>
 800888c:	3314      	adds	r3, #20
 800888e:	3114      	adds	r1, #20
 8008890:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008894:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008898:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800889c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088a0:	4295      	cmp	r5, r2
 80088a2:	d003      	beq.n	80088ac <__mcmp+0x2c>
 80088a4:	d205      	bcs.n	80088b2 <__mcmp+0x32>
 80088a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088aa:	bd30      	pop	{r4, r5, pc}
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	d3f3      	bcc.n	8008898 <__mcmp+0x18>
 80088b0:	e7fb      	b.n	80088aa <__mcmp+0x2a>
 80088b2:	2001      	movs	r0, #1
 80088b4:	e7f9      	b.n	80088aa <__mcmp+0x2a>
	...

080088b8 <__mdiff>:
 80088b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088bc:	4689      	mov	r9, r1
 80088be:	4606      	mov	r6, r0
 80088c0:	4611      	mov	r1, r2
 80088c2:	4648      	mov	r0, r9
 80088c4:	4614      	mov	r4, r2
 80088c6:	f7ff ffdb 	bl	8008880 <__mcmp>
 80088ca:	1e05      	subs	r5, r0, #0
 80088cc:	d112      	bne.n	80088f4 <__mdiff+0x3c>
 80088ce:	4629      	mov	r1, r5
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7ff fd5b 	bl	800838c <_Balloc>
 80088d6:	4602      	mov	r2, r0
 80088d8:	b928      	cbnz	r0, 80088e6 <__mdiff+0x2e>
 80088da:	4b3f      	ldr	r3, [pc, #252]	@ (80089d8 <__mdiff+0x120>)
 80088dc:	f240 2137 	movw	r1, #567	@ 0x237
 80088e0:	483e      	ldr	r0, [pc, #248]	@ (80089dc <__mdiff+0x124>)
 80088e2:	f000 f9c5 	bl	8008c70 <__assert_func>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088ec:	4610      	mov	r0, r2
 80088ee:	b003      	add	sp, #12
 80088f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f4:	bfbc      	itt	lt
 80088f6:	464b      	movlt	r3, r9
 80088f8:	46a1      	movlt	r9, r4
 80088fa:	4630      	mov	r0, r6
 80088fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008900:	bfba      	itte	lt
 8008902:	461c      	movlt	r4, r3
 8008904:	2501      	movlt	r5, #1
 8008906:	2500      	movge	r5, #0
 8008908:	f7ff fd40 	bl	800838c <_Balloc>
 800890c:	4602      	mov	r2, r0
 800890e:	b918      	cbnz	r0, 8008918 <__mdiff+0x60>
 8008910:	4b31      	ldr	r3, [pc, #196]	@ (80089d8 <__mdiff+0x120>)
 8008912:	f240 2145 	movw	r1, #581	@ 0x245
 8008916:	e7e3      	b.n	80088e0 <__mdiff+0x28>
 8008918:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800891c:	6926      	ldr	r6, [r4, #16]
 800891e:	60c5      	str	r5, [r0, #12]
 8008920:	f109 0310 	add.w	r3, r9, #16
 8008924:	f109 0514 	add.w	r5, r9, #20
 8008928:	f104 0e14 	add.w	lr, r4, #20
 800892c:	f100 0b14 	add.w	fp, r0, #20
 8008930:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008934:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	46d9      	mov	r9, fp
 800893c:	f04f 0c00 	mov.w	ip, #0
 8008940:	9b01      	ldr	r3, [sp, #4]
 8008942:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008946:	f853 af04 	ldr.w	sl, [r3, #4]!
 800894a:	9301      	str	r3, [sp, #4]
 800894c:	fa1f f38a 	uxth.w	r3, sl
 8008950:	4619      	mov	r1, r3
 8008952:	b283      	uxth	r3, r0
 8008954:	1acb      	subs	r3, r1, r3
 8008956:	0c00      	lsrs	r0, r0, #16
 8008958:	4463      	add	r3, ip
 800895a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800895e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008962:	b29b      	uxth	r3, r3
 8008964:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008968:	4576      	cmp	r6, lr
 800896a:	f849 3b04 	str.w	r3, [r9], #4
 800896e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008972:	d8e5      	bhi.n	8008940 <__mdiff+0x88>
 8008974:	1b33      	subs	r3, r6, r4
 8008976:	3b15      	subs	r3, #21
 8008978:	f023 0303 	bic.w	r3, r3, #3
 800897c:	3415      	adds	r4, #21
 800897e:	3304      	adds	r3, #4
 8008980:	42a6      	cmp	r6, r4
 8008982:	bf38      	it	cc
 8008984:	2304      	movcc	r3, #4
 8008986:	441d      	add	r5, r3
 8008988:	445b      	add	r3, fp
 800898a:	461e      	mov	r6, r3
 800898c:	462c      	mov	r4, r5
 800898e:	4544      	cmp	r4, r8
 8008990:	d30e      	bcc.n	80089b0 <__mdiff+0xf8>
 8008992:	f108 0103 	add.w	r1, r8, #3
 8008996:	1b49      	subs	r1, r1, r5
 8008998:	f021 0103 	bic.w	r1, r1, #3
 800899c:	3d03      	subs	r5, #3
 800899e:	45a8      	cmp	r8, r5
 80089a0:	bf38      	it	cc
 80089a2:	2100      	movcc	r1, #0
 80089a4:	440b      	add	r3, r1
 80089a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089aa:	b191      	cbz	r1, 80089d2 <__mdiff+0x11a>
 80089ac:	6117      	str	r7, [r2, #16]
 80089ae:	e79d      	b.n	80088ec <__mdiff+0x34>
 80089b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80089b4:	46e6      	mov	lr, ip
 80089b6:	0c08      	lsrs	r0, r1, #16
 80089b8:	fa1c fc81 	uxtah	ip, ip, r1
 80089bc:	4471      	add	r1, lr
 80089be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80089c2:	b289      	uxth	r1, r1
 80089c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80089c8:	f846 1b04 	str.w	r1, [r6], #4
 80089cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089d0:	e7dd      	b.n	800898e <__mdiff+0xd6>
 80089d2:	3f01      	subs	r7, #1
 80089d4:	e7e7      	b.n	80089a6 <__mdiff+0xee>
 80089d6:	bf00      	nop
 80089d8:	0800979c 	.word	0x0800979c
 80089dc:	080097be 	.word	0x080097be

080089e0 <__d2b>:
 80089e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089e4:	460f      	mov	r7, r1
 80089e6:	2101      	movs	r1, #1
 80089e8:	ec59 8b10 	vmov	r8, r9, d0
 80089ec:	4616      	mov	r6, r2
 80089ee:	f7ff fccd 	bl	800838c <_Balloc>
 80089f2:	4604      	mov	r4, r0
 80089f4:	b930      	cbnz	r0, 8008a04 <__d2b+0x24>
 80089f6:	4602      	mov	r2, r0
 80089f8:	4b23      	ldr	r3, [pc, #140]	@ (8008a88 <__d2b+0xa8>)
 80089fa:	4824      	ldr	r0, [pc, #144]	@ (8008a8c <__d2b+0xac>)
 80089fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8008a00:	f000 f936 	bl	8008c70 <__assert_func>
 8008a04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a0c:	b10d      	cbz	r5, 8008a12 <__d2b+0x32>
 8008a0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a12:	9301      	str	r3, [sp, #4]
 8008a14:	f1b8 0300 	subs.w	r3, r8, #0
 8008a18:	d023      	beq.n	8008a62 <__d2b+0x82>
 8008a1a:	4668      	mov	r0, sp
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	f7ff fd7c 	bl	800851a <__lo0bits>
 8008a22:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a26:	b1d0      	cbz	r0, 8008a5e <__d2b+0x7e>
 8008a28:	f1c0 0320 	rsb	r3, r0, #32
 8008a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a30:	430b      	orrs	r3, r1
 8008a32:	40c2      	lsrs	r2, r0
 8008a34:	6163      	str	r3, [r4, #20]
 8008a36:	9201      	str	r2, [sp, #4]
 8008a38:	9b01      	ldr	r3, [sp, #4]
 8008a3a:	61a3      	str	r3, [r4, #24]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	bf0c      	ite	eq
 8008a40:	2201      	moveq	r2, #1
 8008a42:	2202      	movne	r2, #2
 8008a44:	6122      	str	r2, [r4, #16]
 8008a46:	b1a5      	cbz	r5, 8008a72 <__d2b+0x92>
 8008a48:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008a4c:	4405      	add	r5, r0
 8008a4e:	603d      	str	r5, [r7, #0]
 8008a50:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008a54:	6030      	str	r0, [r6, #0]
 8008a56:	4620      	mov	r0, r4
 8008a58:	b003      	add	sp, #12
 8008a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a5e:	6161      	str	r1, [r4, #20]
 8008a60:	e7ea      	b.n	8008a38 <__d2b+0x58>
 8008a62:	a801      	add	r0, sp, #4
 8008a64:	f7ff fd59 	bl	800851a <__lo0bits>
 8008a68:	9b01      	ldr	r3, [sp, #4]
 8008a6a:	6163      	str	r3, [r4, #20]
 8008a6c:	3020      	adds	r0, #32
 8008a6e:	2201      	movs	r2, #1
 8008a70:	e7e8      	b.n	8008a44 <__d2b+0x64>
 8008a72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008a7a:	6038      	str	r0, [r7, #0]
 8008a7c:	6918      	ldr	r0, [r3, #16]
 8008a7e:	f7ff fd2d 	bl	80084dc <__hi0bits>
 8008a82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a86:	e7e5      	b.n	8008a54 <__d2b+0x74>
 8008a88:	0800979c 	.word	0x0800979c
 8008a8c:	080097be 	.word	0x080097be

08008a90 <__sread>:
 8008a90:	b510      	push	{r4, lr}
 8008a92:	460c      	mov	r4, r1
 8008a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a98:	f000 f8a8 	bl	8008bec <_read_r>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	bfab      	itete	ge
 8008aa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8008aa4:	181b      	addge	r3, r3, r0
 8008aa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008aaa:	bfac      	ite	ge
 8008aac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008aae:	81a3      	strhlt	r3, [r4, #12]
 8008ab0:	bd10      	pop	{r4, pc}

08008ab2 <__swrite>:
 8008ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab6:	461f      	mov	r7, r3
 8008ab8:	898b      	ldrh	r3, [r1, #12]
 8008aba:	05db      	lsls	r3, r3, #23
 8008abc:	4605      	mov	r5, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	4616      	mov	r6, r2
 8008ac2:	d505      	bpl.n	8008ad0 <__swrite+0x1e>
 8008ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ac8:	2302      	movs	r3, #2
 8008aca:	2200      	movs	r2, #0
 8008acc:	f000 f87c 	bl	8008bc8 <_lseek_r>
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ad6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	4632      	mov	r2, r6
 8008ade:	463b      	mov	r3, r7
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae6:	f000 b8a3 	b.w	8008c30 <_write_r>

08008aea <__sseek>:
 8008aea:	b510      	push	{r4, lr}
 8008aec:	460c      	mov	r4, r1
 8008aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af2:	f000 f869 	bl	8008bc8 <_lseek_r>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	bf15      	itete	ne
 8008afc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008afe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b06:	81a3      	strheq	r3, [r4, #12]
 8008b08:	bf18      	it	ne
 8008b0a:	81a3      	strhne	r3, [r4, #12]
 8008b0c:	bd10      	pop	{r4, pc}

08008b0e <__sclose>:
 8008b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b12:	f000 b849 	b.w	8008ba8 <_close_r>

08008b16 <_realloc_r>:
 8008b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1a:	4680      	mov	r8, r0
 8008b1c:	4615      	mov	r5, r2
 8008b1e:	460c      	mov	r4, r1
 8008b20:	b921      	cbnz	r1, 8008b2c <_realloc_r+0x16>
 8008b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b26:	4611      	mov	r1, r2
 8008b28:	f7ff baf8 	b.w	800811c <_malloc_r>
 8008b2c:	b92a      	cbnz	r2, 8008b3a <_realloc_r+0x24>
 8008b2e:	f000 f8d1 	bl	8008cd4 <_free_r>
 8008b32:	2400      	movs	r4, #0
 8008b34:	4620      	mov	r0, r4
 8008b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b3a:	f000 f927 	bl	8008d8c <_malloc_usable_size_r>
 8008b3e:	4285      	cmp	r5, r0
 8008b40:	4606      	mov	r6, r0
 8008b42:	d802      	bhi.n	8008b4a <_realloc_r+0x34>
 8008b44:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b48:	d8f4      	bhi.n	8008b34 <_realloc_r+0x1e>
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4640      	mov	r0, r8
 8008b4e:	f7ff fae5 	bl	800811c <_malloc_r>
 8008b52:	4607      	mov	r7, r0
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d0ec      	beq.n	8008b32 <_realloc_r+0x1c>
 8008b58:	42b5      	cmp	r5, r6
 8008b5a:	462a      	mov	r2, r5
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	bf28      	it	cs
 8008b60:	4632      	movcs	r2, r6
 8008b62:	f000 f877 	bl	8008c54 <memcpy>
 8008b66:	4621      	mov	r1, r4
 8008b68:	4640      	mov	r0, r8
 8008b6a:	f000 f8b3 	bl	8008cd4 <_free_r>
 8008b6e:	463c      	mov	r4, r7
 8008b70:	e7e0      	b.n	8008b34 <_realloc_r+0x1e>

08008b72 <memmove>:
 8008b72:	4288      	cmp	r0, r1
 8008b74:	b510      	push	{r4, lr}
 8008b76:	eb01 0402 	add.w	r4, r1, r2
 8008b7a:	d902      	bls.n	8008b82 <memmove+0x10>
 8008b7c:	4284      	cmp	r4, r0
 8008b7e:	4623      	mov	r3, r4
 8008b80:	d807      	bhi.n	8008b92 <memmove+0x20>
 8008b82:	1e43      	subs	r3, r0, #1
 8008b84:	42a1      	cmp	r1, r4
 8008b86:	d008      	beq.n	8008b9a <memmove+0x28>
 8008b88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b8c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b90:	e7f8      	b.n	8008b84 <memmove+0x12>
 8008b92:	4402      	add	r2, r0
 8008b94:	4601      	mov	r1, r0
 8008b96:	428a      	cmp	r2, r1
 8008b98:	d100      	bne.n	8008b9c <memmove+0x2a>
 8008b9a:	bd10      	pop	{r4, pc}
 8008b9c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ba0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ba4:	e7f7      	b.n	8008b96 <memmove+0x24>
	...

08008ba8 <_close_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	4d06      	ldr	r5, [pc, #24]	@ (8008bc4 <_close_r+0x1c>)
 8008bac:	2300      	movs	r3, #0
 8008bae:	4604      	mov	r4, r0
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	602b      	str	r3, [r5, #0]
 8008bb4:	f7f8 fdc2 	bl	800173c <_close>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_close_r+0x1a>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_close_r+0x1a>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	20000750 	.word	0x20000750

08008bc8 <_lseek_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4d07      	ldr	r5, [pc, #28]	@ (8008be8 <_lseek_r+0x20>)
 8008bcc:	4604      	mov	r4, r0
 8008bce:	4608      	mov	r0, r1
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	602a      	str	r2, [r5, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f7f8 fdd7 	bl	800178a <_lseek>
 8008bdc:	1c43      	adds	r3, r0, #1
 8008bde:	d102      	bne.n	8008be6 <_lseek_r+0x1e>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	b103      	cbz	r3, 8008be6 <_lseek_r+0x1e>
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	bd38      	pop	{r3, r4, r5, pc}
 8008be8:	20000750 	.word	0x20000750

08008bec <_read_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	4d07      	ldr	r5, [pc, #28]	@ (8008c0c <_read_r+0x20>)
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	4608      	mov	r0, r1
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	602a      	str	r2, [r5, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f7f8 fd65 	bl	80016ca <_read>
 8008c00:	1c43      	adds	r3, r0, #1
 8008c02:	d102      	bne.n	8008c0a <_read_r+0x1e>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	b103      	cbz	r3, 8008c0a <_read_r+0x1e>
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	bd38      	pop	{r3, r4, r5, pc}
 8008c0c:	20000750 	.word	0x20000750

08008c10 <_sbrk_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	4d06      	ldr	r5, [pc, #24]	@ (8008c2c <_sbrk_r+0x1c>)
 8008c14:	2300      	movs	r3, #0
 8008c16:	4604      	mov	r4, r0
 8008c18:	4608      	mov	r0, r1
 8008c1a:	602b      	str	r3, [r5, #0]
 8008c1c:	f7f8 fdc2 	bl	80017a4 <_sbrk>
 8008c20:	1c43      	adds	r3, r0, #1
 8008c22:	d102      	bne.n	8008c2a <_sbrk_r+0x1a>
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	b103      	cbz	r3, 8008c2a <_sbrk_r+0x1a>
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	bd38      	pop	{r3, r4, r5, pc}
 8008c2c:	20000750 	.word	0x20000750

08008c30 <_write_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	4d07      	ldr	r5, [pc, #28]	@ (8008c50 <_write_r+0x20>)
 8008c34:	4604      	mov	r4, r0
 8008c36:	4608      	mov	r0, r1
 8008c38:	4611      	mov	r1, r2
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	602a      	str	r2, [r5, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f7f8 fd60 	bl	8001704 <_write>
 8008c44:	1c43      	adds	r3, r0, #1
 8008c46:	d102      	bne.n	8008c4e <_write_r+0x1e>
 8008c48:	682b      	ldr	r3, [r5, #0]
 8008c4a:	b103      	cbz	r3, 8008c4e <_write_r+0x1e>
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}
 8008c50:	20000750 	.word	0x20000750

08008c54 <memcpy>:
 8008c54:	440a      	add	r2, r1
 8008c56:	4291      	cmp	r1, r2
 8008c58:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008c5c:	d100      	bne.n	8008c60 <memcpy+0xc>
 8008c5e:	4770      	bx	lr
 8008c60:	b510      	push	{r4, lr}
 8008c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c6a:	4291      	cmp	r1, r2
 8008c6c:	d1f9      	bne.n	8008c62 <memcpy+0xe>
 8008c6e:	bd10      	pop	{r4, pc}

08008c70 <__assert_func>:
 8008c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c72:	4614      	mov	r4, r2
 8008c74:	461a      	mov	r2, r3
 8008c76:	4b09      	ldr	r3, [pc, #36]	@ (8008c9c <__assert_func+0x2c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	68d8      	ldr	r0, [r3, #12]
 8008c7e:	b954      	cbnz	r4, 8008c96 <__assert_func+0x26>
 8008c80:	4b07      	ldr	r3, [pc, #28]	@ (8008ca0 <__assert_func+0x30>)
 8008c82:	461c      	mov	r4, r3
 8008c84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c88:	9100      	str	r1, [sp, #0]
 8008c8a:	462b      	mov	r3, r5
 8008c8c:	4905      	ldr	r1, [pc, #20]	@ (8008ca4 <__assert_func+0x34>)
 8008c8e:	f000 f885 	bl	8008d9c <fiprintf>
 8008c92:	f000 f8a2 	bl	8008dda <abort>
 8008c96:	4b04      	ldr	r3, [pc, #16]	@ (8008ca8 <__assert_func+0x38>)
 8008c98:	e7f4      	b.n	8008c84 <__assert_func+0x14>
 8008c9a:	bf00      	nop
 8008c9c:	20000024 	.word	0x20000024
 8008ca0:	08009a5e 	.word	0x08009a5e
 8008ca4:	08009a30 	.word	0x08009a30
 8008ca8:	08009a23 	.word	0x08009a23

08008cac <_calloc_r>:
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	fba1 5402 	umull	r5, r4, r1, r2
 8008cb2:	b93c      	cbnz	r4, 8008cc4 <_calloc_r+0x18>
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	f7ff fa31 	bl	800811c <_malloc_r>
 8008cba:	4606      	mov	r6, r0
 8008cbc:	b928      	cbnz	r0, 8008cca <_calloc_r+0x1e>
 8008cbe:	2600      	movs	r6, #0
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	220c      	movs	r2, #12
 8008cc6:	6002      	str	r2, [r0, #0]
 8008cc8:	e7f9      	b.n	8008cbe <_calloc_r+0x12>
 8008cca:	462a      	mov	r2, r5
 8008ccc:	4621      	mov	r1, r4
 8008cce:	f7fe fa1d 	bl	800710c <memset>
 8008cd2:	e7f5      	b.n	8008cc0 <_calloc_r+0x14>

08008cd4 <_free_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	2900      	cmp	r1, #0
 8008cda:	d041      	beq.n	8008d60 <_free_r+0x8c>
 8008cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ce0:	1f0c      	subs	r4, r1, #4
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	bfb8      	it	lt
 8008ce6:	18e4      	addlt	r4, r4, r3
 8008ce8:	f7ff fb44 	bl	8008374 <__malloc_lock>
 8008cec:	4a1d      	ldr	r2, [pc, #116]	@ (8008d64 <_free_r+0x90>)
 8008cee:	6813      	ldr	r3, [r2, #0]
 8008cf0:	b933      	cbnz	r3, 8008d00 <_free_r+0x2c>
 8008cf2:	6063      	str	r3, [r4, #4]
 8008cf4:	6014      	str	r4, [r2, #0]
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cfc:	f7ff bb40 	b.w	8008380 <__malloc_unlock>
 8008d00:	42a3      	cmp	r3, r4
 8008d02:	d908      	bls.n	8008d16 <_free_r+0x42>
 8008d04:	6820      	ldr	r0, [r4, #0]
 8008d06:	1821      	adds	r1, r4, r0
 8008d08:	428b      	cmp	r3, r1
 8008d0a:	bf01      	itttt	eq
 8008d0c:	6819      	ldreq	r1, [r3, #0]
 8008d0e:	685b      	ldreq	r3, [r3, #4]
 8008d10:	1809      	addeq	r1, r1, r0
 8008d12:	6021      	streq	r1, [r4, #0]
 8008d14:	e7ed      	b.n	8008cf2 <_free_r+0x1e>
 8008d16:	461a      	mov	r2, r3
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	b10b      	cbz	r3, 8008d20 <_free_r+0x4c>
 8008d1c:	42a3      	cmp	r3, r4
 8008d1e:	d9fa      	bls.n	8008d16 <_free_r+0x42>
 8008d20:	6811      	ldr	r1, [r2, #0]
 8008d22:	1850      	adds	r0, r2, r1
 8008d24:	42a0      	cmp	r0, r4
 8008d26:	d10b      	bne.n	8008d40 <_free_r+0x6c>
 8008d28:	6820      	ldr	r0, [r4, #0]
 8008d2a:	4401      	add	r1, r0
 8008d2c:	1850      	adds	r0, r2, r1
 8008d2e:	4283      	cmp	r3, r0
 8008d30:	6011      	str	r1, [r2, #0]
 8008d32:	d1e0      	bne.n	8008cf6 <_free_r+0x22>
 8008d34:	6818      	ldr	r0, [r3, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	6053      	str	r3, [r2, #4]
 8008d3a:	4408      	add	r0, r1
 8008d3c:	6010      	str	r0, [r2, #0]
 8008d3e:	e7da      	b.n	8008cf6 <_free_r+0x22>
 8008d40:	d902      	bls.n	8008d48 <_free_r+0x74>
 8008d42:	230c      	movs	r3, #12
 8008d44:	602b      	str	r3, [r5, #0]
 8008d46:	e7d6      	b.n	8008cf6 <_free_r+0x22>
 8008d48:	6820      	ldr	r0, [r4, #0]
 8008d4a:	1821      	adds	r1, r4, r0
 8008d4c:	428b      	cmp	r3, r1
 8008d4e:	bf04      	itt	eq
 8008d50:	6819      	ldreq	r1, [r3, #0]
 8008d52:	685b      	ldreq	r3, [r3, #4]
 8008d54:	6063      	str	r3, [r4, #4]
 8008d56:	bf04      	itt	eq
 8008d58:	1809      	addeq	r1, r1, r0
 8008d5a:	6021      	streq	r1, [r4, #0]
 8008d5c:	6054      	str	r4, [r2, #4]
 8008d5e:	e7ca      	b.n	8008cf6 <_free_r+0x22>
 8008d60:	bd38      	pop	{r3, r4, r5, pc}
 8008d62:	bf00      	nop
 8008d64:	2000074c 	.word	0x2000074c

08008d68 <__ascii_mbtowc>:
 8008d68:	b082      	sub	sp, #8
 8008d6a:	b901      	cbnz	r1, 8008d6e <__ascii_mbtowc+0x6>
 8008d6c:	a901      	add	r1, sp, #4
 8008d6e:	b142      	cbz	r2, 8008d82 <__ascii_mbtowc+0x1a>
 8008d70:	b14b      	cbz	r3, 8008d86 <__ascii_mbtowc+0x1e>
 8008d72:	7813      	ldrb	r3, [r2, #0]
 8008d74:	600b      	str	r3, [r1, #0]
 8008d76:	7812      	ldrb	r2, [r2, #0]
 8008d78:	1e10      	subs	r0, r2, #0
 8008d7a:	bf18      	it	ne
 8008d7c:	2001      	movne	r0, #1
 8008d7e:	b002      	add	sp, #8
 8008d80:	4770      	bx	lr
 8008d82:	4610      	mov	r0, r2
 8008d84:	e7fb      	b.n	8008d7e <__ascii_mbtowc+0x16>
 8008d86:	f06f 0001 	mvn.w	r0, #1
 8008d8a:	e7f8      	b.n	8008d7e <__ascii_mbtowc+0x16>

08008d8c <_malloc_usable_size_r>:
 8008d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d90:	1f18      	subs	r0, r3, #4
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	bfbc      	itt	lt
 8008d96:	580b      	ldrlt	r3, [r1, r0]
 8008d98:	18c0      	addlt	r0, r0, r3
 8008d9a:	4770      	bx	lr

08008d9c <fiprintf>:
 8008d9c:	b40e      	push	{r1, r2, r3}
 8008d9e:	b503      	push	{r0, r1, lr}
 8008da0:	4601      	mov	r1, r0
 8008da2:	ab03      	add	r3, sp, #12
 8008da4:	4805      	ldr	r0, [pc, #20]	@ (8008dbc <fiprintf+0x20>)
 8008da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008daa:	6800      	ldr	r0, [r0, #0]
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	f000 f845 	bl	8008e3c <_vfiprintf_r>
 8008db2:	b002      	add	sp, #8
 8008db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008db8:	b003      	add	sp, #12
 8008dba:	4770      	bx	lr
 8008dbc:	20000024 	.word	0x20000024

08008dc0 <__ascii_wctomb>:
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	4608      	mov	r0, r1
 8008dc4:	b141      	cbz	r1, 8008dd8 <__ascii_wctomb+0x18>
 8008dc6:	2aff      	cmp	r2, #255	@ 0xff
 8008dc8:	d904      	bls.n	8008dd4 <__ascii_wctomb+0x14>
 8008dca:	228a      	movs	r2, #138	@ 0x8a
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dd2:	4770      	bx	lr
 8008dd4:	700a      	strb	r2, [r1, #0]
 8008dd6:	2001      	movs	r0, #1
 8008dd8:	4770      	bx	lr

08008dda <abort>:
 8008dda:	b508      	push	{r3, lr}
 8008ddc:	2006      	movs	r0, #6
 8008dde:	f000 fa85 	bl	80092ec <raise>
 8008de2:	2001      	movs	r0, #1
 8008de4:	f7f8 fc66 	bl	80016b4 <_exit>

08008de8 <__sfputc_r>:
 8008de8:	6893      	ldr	r3, [r2, #8]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	b410      	push	{r4}
 8008df0:	6093      	str	r3, [r2, #8]
 8008df2:	da08      	bge.n	8008e06 <__sfputc_r+0x1e>
 8008df4:	6994      	ldr	r4, [r2, #24]
 8008df6:	42a3      	cmp	r3, r4
 8008df8:	db01      	blt.n	8008dfe <__sfputc_r+0x16>
 8008dfa:	290a      	cmp	r1, #10
 8008dfc:	d103      	bne.n	8008e06 <__sfputc_r+0x1e>
 8008dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e02:	f000 b933 	b.w	800906c <__swbuf_r>
 8008e06:	6813      	ldr	r3, [r2, #0]
 8008e08:	1c58      	adds	r0, r3, #1
 8008e0a:	6010      	str	r0, [r2, #0]
 8008e0c:	7019      	strb	r1, [r3, #0]
 8008e0e:	4608      	mov	r0, r1
 8008e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <__sfputs_r>:
 8008e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e18:	4606      	mov	r6, r0
 8008e1a:	460f      	mov	r7, r1
 8008e1c:	4614      	mov	r4, r2
 8008e1e:	18d5      	adds	r5, r2, r3
 8008e20:	42ac      	cmp	r4, r5
 8008e22:	d101      	bne.n	8008e28 <__sfputs_r+0x12>
 8008e24:	2000      	movs	r0, #0
 8008e26:	e007      	b.n	8008e38 <__sfputs_r+0x22>
 8008e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e2c:	463a      	mov	r2, r7
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f7ff ffda 	bl	8008de8 <__sfputc_r>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d1f3      	bne.n	8008e20 <__sfputs_r+0xa>
 8008e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e3c <_vfiprintf_r>:
 8008e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e40:	460d      	mov	r5, r1
 8008e42:	b09d      	sub	sp, #116	@ 0x74
 8008e44:	4614      	mov	r4, r2
 8008e46:	4698      	mov	r8, r3
 8008e48:	4606      	mov	r6, r0
 8008e4a:	b118      	cbz	r0, 8008e54 <_vfiprintf_r+0x18>
 8008e4c:	6a03      	ldr	r3, [r0, #32]
 8008e4e:	b90b      	cbnz	r3, 8008e54 <_vfiprintf_r+0x18>
 8008e50:	f7fe f926 	bl	80070a0 <__sinit>
 8008e54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e56:	07d9      	lsls	r1, r3, #31
 8008e58:	d405      	bmi.n	8008e66 <_vfiprintf_r+0x2a>
 8008e5a:	89ab      	ldrh	r3, [r5, #12]
 8008e5c:	059a      	lsls	r2, r3, #22
 8008e5e:	d402      	bmi.n	8008e66 <_vfiprintf_r+0x2a>
 8008e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e62:	f7fe f98a 	bl	800717a <__retarget_lock_acquire_recursive>
 8008e66:	89ab      	ldrh	r3, [r5, #12]
 8008e68:	071b      	lsls	r3, r3, #28
 8008e6a:	d501      	bpl.n	8008e70 <_vfiprintf_r+0x34>
 8008e6c:	692b      	ldr	r3, [r5, #16]
 8008e6e:	b99b      	cbnz	r3, 8008e98 <_vfiprintf_r+0x5c>
 8008e70:	4629      	mov	r1, r5
 8008e72:	4630      	mov	r0, r6
 8008e74:	f000 f938 	bl	80090e8 <__swsetup_r>
 8008e78:	b170      	cbz	r0, 8008e98 <_vfiprintf_r+0x5c>
 8008e7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e7c:	07dc      	lsls	r4, r3, #31
 8008e7e:	d504      	bpl.n	8008e8a <_vfiprintf_r+0x4e>
 8008e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e84:	b01d      	add	sp, #116	@ 0x74
 8008e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8a:	89ab      	ldrh	r3, [r5, #12]
 8008e8c:	0598      	lsls	r0, r3, #22
 8008e8e:	d4f7      	bmi.n	8008e80 <_vfiprintf_r+0x44>
 8008e90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e92:	f7fe f973 	bl	800717c <__retarget_lock_release_recursive>
 8008e96:	e7f3      	b.n	8008e80 <_vfiprintf_r+0x44>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e9c:	2320      	movs	r3, #32
 8008e9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ea6:	2330      	movs	r3, #48	@ 0x30
 8008ea8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009058 <_vfiprintf_r+0x21c>
 8008eac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eb0:	f04f 0901 	mov.w	r9, #1
 8008eb4:	4623      	mov	r3, r4
 8008eb6:	469a      	mov	sl, r3
 8008eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ebc:	b10a      	cbz	r2, 8008ec2 <_vfiprintf_r+0x86>
 8008ebe:	2a25      	cmp	r2, #37	@ 0x25
 8008ec0:	d1f9      	bne.n	8008eb6 <_vfiprintf_r+0x7a>
 8008ec2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ec6:	d00b      	beq.n	8008ee0 <_vfiprintf_r+0xa4>
 8008ec8:	465b      	mov	r3, fp
 8008eca:	4622      	mov	r2, r4
 8008ecc:	4629      	mov	r1, r5
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f7ff ffa1 	bl	8008e16 <__sfputs_r>
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	f000 80a7 	beq.w	8009028 <_vfiprintf_r+0x1ec>
 8008eda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008edc:	445a      	add	r2, fp
 8008ede:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 809f 	beq.w	8009028 <_vfiprintf_r+0x1ec>
 8008eea:	2300      	movs	r3, #0
 8008eec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ef4:	f10a 0a01 	add.w	sl, sl, #1
 8008ef8:	9304      	str	r3, [sp, #16]
 8008efa:	9307      	str	r3, [sp, #28]
 8008efc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f00:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f02:	4654      	mov	r4, sl
 8008f04:	2205      	movs	r2, #5
 8008f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f0a:	4853      	ldr	r0, [pc, #332]	@ (8009058 <_vfiprintf_r+0x21c>)
 8008f0c:	f7f7 f988 	bl	8000220 <memchr>
 8008f10:	9a04      	ldr	r2, [sp, #16]
 8008f12:	b9d8      	cbnz	r0, 8008f4c <_vfiprintf_r+0x110>
 8008f14:	06d1      	lsls	r1, r2, #27
 8008f16:	bf44      	itt	mi
 8008f18:	2320      	movmi	r3, #32
 8008f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f1e:	0713      	lsls	r3, r2, #28
 8008f20:	bf44      	itt	mi
 8008f22:	232b      	movmi	r3, #43	@ 0x2b
 8008f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f28:	f89a 3000 	ldrb.w	r3, [sl]
 8008f2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f2e:	d015      	beq.n	8008f5c <_vfiprintf_r+0x120>
 8008f30:	9a07      	ldr	r2, [sp, #28]
 8008f32:	4654      	mov	r4, sl
 8008f34:	2000      	movs	r0, #0
 8008f36:	f04f 0c0a 	mov.w	ip, #10
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f40:	3b30      	subs	r3, #48	@ 0x30
 8008f42:	2b09      	cmp	r3, #9
 8008f44:	d94b      	bls.n	8008fde <_vfiprintf_r+0x1a2>
 8008f46:	b1b0      	cbz	r0, 8008f76 <_vfiprintf_r+0x13a>
 8008f48:	9207      	str	r2, [sp, #28]
 8008f4a:	e014      	b.n	8008f76 <_vfiprintf_r+0x13a>
 8008f4c:	eba0 0308 	sub.w	r3, r0, r8
 8008f50:	fa09 f303 	lsl.w	r3, r9, r3
 8008f54:	4313      	orrs	r3, r2
 8008f56:	9304      	str	r3, [sp, #16]
 8008f58:	46a2      	mov	sl, r4
 8008f5a:	e7d2      	b.n	8008f02 <_vfiprintf_r+0xc6>
 8008f5c:	9b03      	ldr	r3, [sp, #12]
 8008f5e:	1d19      	adds	r1, r3, #4
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	9103      	str	r1, [sp, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	bfbb      	ittet	lt
 8008f68:	425b      	neglt	r3, r3
 8008f6a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f6e:	9307      	strge	r3, [sp, #28]
 8008f70:	9307      	strlt	r3, [sp, #28]
 8008f72:	bfb8      	it	lt
 8008f74:	9204      	strlt	r2, [sp, #16]
 8008f76:	7823      	ldrb	r3, [r4, #0]
 8008f78:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f7a:	d10a      	bne.n	8008f92 <_vfiprintf_r+0x156>
 8008f7c:	7863      	ldrb	r3, [r4, #1]
 8008f7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f80:	d132      	bne.n	8008fe8 <_vfiprintf_r+0x1ac>
 8008f82:	9b03      	ldr	r3, [sp, #12]
 8008f84:	1d1a      	adds	r2, r3, #4
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	9203      	str	r2, [sp, #12]
 8008f8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f8e:	3402      	adds	r4, #2
 8008f90:	9305      	str	r3, [sp, #20]
 8008f92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009068 <_vfiprintf_r+0x22c>
 8008f96:	7821      	ldrb	r1, [r4, #0]
 8008f98:	2203      	movs	r2, #3
 8008f9a:	4650      	mov	r0, sl
 8008f9c:	f7f7 f940 	bl	8000220 <memchr>
 8008fa0:	b138      	cbz	r0, 8008fb2 <_vfiprintf_r+0x176>
 8008fa2:	9b04      	ldr	r3, [sp, #16]
 8008fa4:	eba0 000a 	sub.w	r0, r0, sl
 8008fa8:	2240      	movs	r2, #64	@ 0x40
 8008faa:	4082      	lsls	r2, r0
 8008fac:	4313      	orrs	r3, r2
 8008fae:	3401      	adds	r4, #1
 8008fb0:	9304      	str	r3, [sp, #16]
 8008fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb6:	4829      	ldr	r0, [pc, #164]	@ (800905c <_vfiprintf_r+0x220>)
 8008fb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fbc:	2206      	movs	r2, #6
 8008fbe:	f7f7 f92f 	bl	8000220 <memchr>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d03f      	beq.n	8009046 <_vfiprintf_r+0x20a>
 8008fc6:	4b26      	ldr	r3, [pc, #152]	@ (8009060 <_vfiprintf_r+0x224>)
 8008fc8:	bb1b      	cbnz	r3, 8009012 <_vfiprintf_r+0x1d6>
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	3307      	adds	r3, #7
 8008fce:	f023 0307 	bic.w	r3, r3, #7
 8008fd2:	3308      	adds	r3, #8
 8008fd4:	9303      	str	r3, [sp, #12]
 8008fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fd8:	443b      	add	r3, r7
 8008fda:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fdc:	e76a      	b.n	8008eb4 <_vfiprintf_r+0x78>
 8008fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	2001      	movs	r0, #1
 8008fe6:	e7a8      	b.n	8008f3a <_vfiprintf_r+0xfe>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	3401      	adds	r4, #1
 8008fec:	9305      	str	r3, [sp, #20]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	f04f 0c0a 	mov.w	ip, #10
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ffa:	3a30      	subs	r2, #48	@ 0x30
 8008ffc:	2a09      	cmp	r2, #9
 8008ffe:	d903      	bls.n	8009008 <_vfiprintf_r+0x1cc>
 8009000:	2b00      	cmp	r3, #0
 8009002:	d0c6      	beq.n	8008f92 <_vfiprintf_r+0x156>
 8009004:	9105      	str	r1, [sp, #20]
 8009006:	e7c4      	b.n	8008f92 <_vfiprintf_r+0x156>
 8009008:	fb0c 2101 	mla	r1, ip, r1, r2
 800900c:	4604      	mov	r4, r0
 800900e:	2301      	movs	r3, #1
 8009010:	e7f0      	b.n	8008ff4 <_vfiprintf_r+0x1b8>
 8009012:	ab03      	add	r3, sp, #12
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	462a      	mov	r2, r5
 8009018:	4b12      	ldr	r3, [pc, #72]	@ (8009064 <_vfiprintf_r+0x228>)
 800901a:	a904      	add	r1, sp, #16
 800901c:	4630      	mov	r0, r6
 800901e:	f7fd fbdb 	bl	80067d8 <_printf_float>
 8009022:	4607      	mov	r7, r0
 8009024:	1c78      	adds	r0, r7, #1
 8009026:	d1d6      	bne.n	8008fd6 <_vfiprintf_r+0x19a>
 8009028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800902a:	07d9      	lsls	r1, r3, #31
 800902c:	d405      	bmi.n	800903a <_vfiprintf_r+0x1fe>
 800902e:	89ab      	ldrh	r3, [r5, #12]
 8009030:	059a      	lsls	r2, r3, #22
 8009032:	d402      	bmi.n	800903a <_vfiprintf_r+0x1fe>
 8009034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009036:	f7fe f8a1 	bl	800717c <__retarget_lock_release_recursive>
 800903a:	89ab      	ldrh	r3, [r5, #12]
 800903c:	065b      	lsls	r3, r3, #25
 800903e:	f53f af1f 	bmi.w	8008e80 <_vfiprintf_r+0x44>
 8009042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009044:	e71e      	b.n	8008e84 <_vfiprintf_r+0x48>
 8009046:	ab03      	add	r3, sp, #12
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	462a      	mov	r2, r5
 800904c:	4b05      	ldr	r3, [pc, #20]	@ (8009064 <_vfiprintf_r+0x228>)
 800904e:	a904      	add	r1, sp, #16
 8009050:	4630      	mov	r0, r6
 8009052:	f7fd fe59 	bl	8006d08 <_printf_i>
 8009056:	e7e4      	b.n	8009022 <_vfiprintf_r+0x1e6>
 8009058:	080097ad 	.word	0x080097ad
 800905c:	080097b7 	.word	0x080097b7
 8009060:	080067d9 	.word	0x080067d9
 8009064:	08008e17 	.word	0x08008e17
 8009068:	080097b3 	.word	0x080097b3

0800906c <__swbuf_r>:
 800906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906e:	460e      	mov	r6, r1
 8009070:	4614      	mov	r4, r2
 8009072:	4605      	mov	r5, r0
 8009074:	b118      	cbz	r0, 800907e <__swbuf_r+0x12>
 8009076:	6a03      	ldr	r3, [r0, #32]
 8009078:	b90b      	cbnz	r3, 800907e <__swbuf_r+0x12>
 800907a:	f7fe f811 	bl	80070a0 <__sinit>
 800907e:	69a3      	ldr	r3, [r4, #24]
 8009080:	60a3      	str	r3, [r4, #8]
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	071a      	lsls	r2, r3, #28
 8009086:	d501      	bpl.n	800908c <__swbuf_r+0x20>
 8009088:	6923      	ldr	r3, [r4, #16]
 800908a:	b943      	cbnz	r3, 800909e <__swbuf_r+0x32>
 800908c:	4621      	mov	r1, r4
 800908e:	4628      	mov	r0, r5
 8009090:	f000 f82a 	bl	80090e8 <__swsetup_r>
 8009094:	b118      	cbz	r0, 800909e <__swbuf_r+0x32>
 8009096:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800909a:	4638      	mov	r0, r7
 800909c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	6922      	ldr	r2, [r4, #16]
 80090a2:	1a98      	subs	r0, r3, r2
 80090a4:	6963      	ldr	r3, [r4, #20]
 80090a6:	b2f6      	uxtb	r6, r6
 80090a8:	4283      	cmp	r3, r0
 80090aa:	4637      	mov	r7, r6
 80090ac:	dc05      	bgt.n	80090ba <__swbuf_r+0x4e>
 80090ae:	4621      	mov	r1, r4
 80090b0:	4628      	mov	r0, r5
 80090b2:	f7ff f937 	bl	8008324 <_fflush_r>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d1ed      	bne.n	8009096 <__swbuf_r+0x2a>
 80090ba:	68a3      	ldr	r3, [r4, #8]
 80090bc:	3b01      	subs	r3, #1
 80090be:	60a3      	str	r3, [r4, #8]
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	6022      	str	r2, [r4, #0]
 80090c6:	701e      	strb	r6, [r3, #0]
 80090c8:	6962      	ldr	r2, [r4, #20]
 80090ca:	1c43      	adds	r3, r0, #1
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d004      	beq.n	80090da <__swbuf_r+0x6e>
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	07db      	lsls	r3, r3, #31
 80090d4:	d5e1      	bpl.n	800909a <__swbuf_r+0x2e>
 80090d6:	2e0a      	cmp	r6, #10
 80090d8:	d1df      	bne.n	800909a <__swbuf_r+0x2e>
 80090da:	4621      	mov	r1, r4
 80090dc:	4628      	mov	r0, r5
 80090de:	f7ff f921 	bl	8008324 <_fflush_r>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	d0d9      	beq.n	800909a <__swbuf_r+0x2e>
 80090e6:	e7d6      	b.n	8009096 <__swbuf_r+0x2a>

080090e8 <__swsetup_r>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	4b29      	ldr	r3, [pc, #164]	@ (8009190 <__swsetup_r+0xa8>)
 80090ec:	4605      	mov	r5, r0
 80090ee:	6818      	ldr	r0, [r3, #0]
 80090f0:	460c      	mov	r4, r1
 80090f2:	b118      	cbz	r0, 80090fc <__swsetup_r+0x14>
 80090f4:	6a03      	ldr	r3, [r0, #32]
 80090f6:	b90b      	cbnz	r3, 80090fc <__swsetup_r+0x14>
 80090f8:	f7fd ffd2 	bl	80070a0 <__sinit>
 80090fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009100:	0719      	lsls	r1, r3, #28
 8009102:	d422      	bmi.n	800914a <__swsetup_r+0x62>
 8009104:	06da      	lsls	r2, r3, #27
 8009106:	d407      	bmi.n	8009118 <__swsetup_r+0x30>
 8009108:	2209      	movs	r2, #9
 800910a:	602a      	str	r2, [r5, #0]
 800910c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009110:	81a3      	strh	r3, [r4, #12]
 8009112:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009116:	e033      	b.n	8009180 <__swsetup_r+0x98>
 8009118:	0758      	lsls	r0, r3, #29
 800911a:	d512      	bpl.n	8009142 <__swsetup_r+0x5a>
 800911c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800911e:	b141      	cbz	r1, 8009132 <__swsetup_r+0x4a>
 8009120:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009124:	4299      	cmp	r1, r3
 8009126:	d002      	beq.n	800912e <__swsetup_r+0x46>
 8009128:	4628      	mov	r0, r5
 800912a:	f7ff fdd3 	bl	8008cd4 <_free_r>
 800912e:	2300      	movs	r3, #0
 8009130:	6363      	str	r3, [r4, #52]	@ 0x34
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009138:	81a3      	strh	r3, [r4, #12]
 800913a:	2300      	movs	r3, #0
 800913c:	6063      	str	r3, [r4, #4]
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	f043 0308 	orr.w	r3, r3, #8
 8009148:	81a3      	strh	r3, [r4, #12]
 800914a:	6923      	ldr	r3, [r4, #16]
 800914c:	b94b      	cbnz	r3, 8009162 <__swsetup_r+0x7a>
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009158:	d003      	beq.n	8009162 <__swsetup_r+0x7a>
 800915a:	4621      	mov	r1, r4
 800915c:	4628      	mov	r0, r5
 800915e:	f000 f83f 	bl	80091e0 <__smakebuf_r>
 8009162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009166:	f013 0201 	ands.w	r2, r3, #1
 800916a:	d00a      	beq.n	8009182 <__swsetup_r+0x9a>
 800916c:	2200      	movs	r2, #0
 800916e:	60a2      	str	r2, [r4, #8]
 8009170:	6962      	ldr	r2, [r4, #20]
 8009172:	4252      	negs	r2, r2
 8009174:	61a2      	str	r2, [r4, #24]
 8009176:	6922      	ldr	r2, [r4, #16]
 8009178:	b942      	cbnz	r2, 800918c <__swsetup_r+0xa4>
 800917a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800917e:	d1c5      	bne.n	800910c <__swsetup_r+0x24>
 8009180:	bd38      	pop	{r3, r4, r5, pc}
 8009182:	0799      	lsls	r1, r3, #30
 8009184:	bf58      	it	pl
 8009186:	6962      	ldrpl	r2, [r4, #20]
 8009188:	60a2      	str	r2, [r4, #8]
 800918a:	e7f4      	b.n	8009176 <__swsetup_r+0x8e>
 800918c:	2000      	movs	r0, #0
 800918e:	e7f7      	b.n	8009180 <__swsetup_r+0x98>
 8009190:	20000024 	.word	0x20000024

08009194 <__swhatbuf_r>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	460c      	mov	r4, r1
 8009198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800919c:	2900      	cmp	r1, #0
 800919e:	b096      	sub	sp, #88	@ 0x58
 80091a0:	4615      	mov	r5, r2
 80091a2:	461e      	mov	r6, r3
 80091a4:	da0d      	bge.n	80091c2 <__swhatbuf_r+0x2e>
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80091ac:	f04f 0100 	mov.w	r1, #0
 80091b0:	bf14      	ite	ne
 80091b2:	2340      	movne	r3, #64	@ 0x40
 80091b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80091b8:	2000      	movs	r0, #0
 80091ba:	6031      	str	r1, [r6, #0]
 80091bc:	602b      	str	r3, [r5, #0]
 80091be:	b016      	add	sp, #88	@ 0x58
 80091c0:	bd70      	pop	{r4, r5, r6, pc}
 80091c2:	466a      	mov	r2, sp
 80091c4:	f000 f848 	bl	8009258 <_fstat_r>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	dbec      	blt.n	80091a6 <__swhatbuf_r+0x12>
 80091cc:	9901      	ldr	r1, [sp, #4]
 80091ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80091d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80091d6:	4259      	negs	r1, r3
 80091d8:	4159      	adcs	r1, r3
 80091da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091de:	e7eb      	b.n	80091b8 <__swhatbuf_r+0x24>

080091e0 <__smakebuf_r>:
 80091e0:	898b      	ldrh	r3, [r1, #12]
 80091e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091e4:	079d      	lsls	r5, r3, #30
 80091e6:	4606      	mov	r6, r0
 80091e8:	460c      	mov	r4, r1
 80091ea:	d507      	bpl.n	80091fc <__smakebuf_r+0x1c>
 80091ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80091f0:	6023      	str	r3, [r4, #0]
 80091f2:	6123      	str	r3, [r4, #16]
 80091f4:	2301      	movs	r3, #1
 80091f6:	6163      	str	r3, [r4, #20]
 80091f8:	b003      	add	sp, #12
 80091fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091fc:	ab01      	add	r3, sp, #4
 80091fe:	466a      	mov	r2, sp
 8009200:	f7ff ffc8 	bl	8009194 <__swhatbuf_r>
 8009204:	9f00      	ldr	r7, [sp, #0]
 8009206:	4605      	mov	r5, r0
 8009208:	4639      	mov	r1, r7
 800920a:	4630      	mov	r0, r6
 800920c:	f7fe ff86 	bl	800811c <_malloc_r>
 8009210:	b948      	cbnz	r0, 8009226 <__smakebuf_r+0x46>
 8009212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009216:	059a      	lsls	r2, r3, #22
 8009218:	d4ee      	bmi.n	80091f8 <__smakebuf_r+0x18>
 800921a:	f023 0303 	bic.w	r3, r3, #3
 800921e:	f043 0302 	orr.w	r3, r3, #2
 8009222:	81a3      	strh	r3, [r4, #12]
 8009224:	e7e2      	b.n	80091ec <__smakebuf_r+0xc>
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	6020      	str	r0, [r4, #0]
 800922a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800922e:	81a3      	strh	r3, [r4, #12]
 8009230:	9b01      	ldr	r3, [sp, #4]
 8009232:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009236:	b15b      	cbz	r3, 8009250 <__smakebuf_r+0x70>
 8009238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800923c:	4630      	mov	r0, r6
 800923e:	f000 f81d 	bl	800927c <_isatty_r>
 8009242:	b128      	cbz	r0, 8009250 <__smakebuf_r+0x70>
 8009244:	89a3      	ldrh	r3, [r4, #12]
 8009246:	f023 0303 	bic.w	r3, r3, #3
 800924a:	f043 0301 	orr.w	r3, r3, #1
 800924e:	81a3      	strh	r3, [r4, #12]
 8009250:	89a3      	ldrh	r3, [r4, #12]
 8009252:	431d      	orrs	r5, r3
 8009254:	81a5      	strh	r5, [r4, #12]
 8009256:	e7cf      	b.n	80091f8 <__smakebuf_r+0x18>

08009258 <_fstat_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4d07      	ldr	r5, [pc, #28]	@ (8009278 <_fstat_r+0x20>)
 800925c:	2300      	movs	r3, #0
 800925e:	4604      	mov	r4, r0
 8009260:	4608      	mov	r0, r1
 8009262:	4611      	mov	r1, r2
 8009264:	602b      	str	r3, [r5, #0]
 8009266:	f7f8 fa75 	bl	8001754 <_fstat>
 800926a:	1c43      	adds	r3, r0, #1
 800926c:	d102      	bne.n	8009274 <_fstat_r+0x1c>
 800926e:	682b      	ldr	r3, [r5, #0]
 8009270:	b103      	cbz	r3, 8009274 <_fstat_r+0x1c>
 8009272:	6023      	str	r3, [r4, #0]
 8009274:	bd38      	pop	{r3, r4, r5, pc}
 8009276:	bf00      	nop
 8009278:	20000750 	.word	0x20000750

0800927c <_isatty_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d06      	ldr	r5, [pc, #24]	@ (8009298 <_isatty_r+0x1c>)
 8009280:	2300      	movs	r3, #0
 8009282:	4604      	mov	r4, r0
 8009284:	4608      	mov	r0, r1
 8009286:	602b      	str	r3, [r5, #0]
 8009288:	f7f8 fa74 	bl	8001774 <_isatty>
 800928c:	1c43      	adds	r3, r0, #1
 800928e:	d102      	bne.n	8009296 <_isatty_r+0x1a>
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	b103      	cbz	r3, 8009296 <_isatty_r+0x1a>
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	20000750 	.word	0x20000750

0800929c <_raise_r>:
 800929c:	291f      	cmp	r1, #31
 800929e:	b538      	push	{r3, r4, r5, lr}
 80092a0:	4605      	mov	r5, r0
 80092a2:	460c      	mov	r4, r1
 80092a4:	d904      	bls.n	80092b0 <_raise_r+0x14>
 80092a6:	2316      	movs	r3, #22
 80092a8:	6003      	str	r3, [r0, #0]
 80092aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092ae:	bd38      	pop	{r3, r4, r5, pc}
 80092b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80092b2:	b112      	cbz	r2, 80092ba <_raise_r+0x1e>
 80092b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092b8:	b94b      	cbnz	r3, 80092ce <_raise_r+0x32>
 80092ba:	4628      	mov	r0, r5
 80092bc:	f000 f830 	bl	8009320 <_getpid_r>
 80092c0:	4622      	mov	r2, r4
 80092c2:	4601      	mov	r1, r0
 80092c4:	4628      	mov	r0, r5
 80092c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092ca:	f000 b817 	b.w	80092fc <_kill_r>
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d00a      	beq.n	80092e8 <_raise_r+0x4c>
 80092d2:	1c59      	adds	r1, r3, #1
 80092d4:	d103      	bne.n	80092de <_raise_r+0x42>
 80092d6:	2316      	movs	r3, #22
 80092d8:	6003      	str	r3, [r0, #0]
 80092da:	2001      	movs	r0, #1
 80092dc:	e7e7      	b.n	80092ae <_raise_r+0x12>
 80092de:	2100      	movs	r1, #0
 80092e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80092e4:	4620      	mov	r0, r4
 80092e6:	4798      	blx	r3
 80092e8:	2000      	movs	r0, #0
 80092ea:	e7e0      	b.n	80092ae <_raise_r+0x12>

080092ec <raise>:
 80092ec:	4b02      	ldr	r3, [pc, #8]	@ (80092f8 <raise+0xc>)
 80092ee:	4601      	mov	r1, r0
 80092f0:	6818      	ldr	r0, [r3, #0]
 80092f2:	f7ff bfd3 	b.w	800929c <_raise_r>
 80092f6:	bf00      	nop
 80092f8:	20000024 	.word	0x20000024

080092fc <_kill_r>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	4d07      	ldr	r5, [pc, #28]	@ (800931c <_kill_r+0x20>)
 8009300:	2300      	movs	r3, #0
 8009302:	4604      	mov	r4, r0
 8009304:	4608      	mov	r0, r1
 8009306:	4611      	mov	r1, r2
 8009308:	602b      	str	r3, [r5, #0]
 800930a:	f7f8 f9c3 	bl	8001694 <_kill>
 800930e:	1c43      	adds	r3, r0, #1
 8009310:	d102      	bne.n	8009318 <_kill_r+0x1c>
 8009312:	682b      	ldr	r3, [r5, #0]
 8009314:	b103      	cbz	r3, 8009318 <_kill_r+0x1c>
 8009316:	6023      	str	r3, [r4, #0]
 8009318:	bd38      	pop	{r3, r4, r5, pc}
 800931a:	bf00      	nop
 800931c:	20000750 	.word	0x20000750

08009320 <_getpid_r>:
 8009320:	f7f8 b9b0 	b.w	8001684 <_getpid>

08009324 <expf>:
 8009324:	b508      	push	{r3, lr}
 8009326:	ed2d 8b02 	vpush	{d8}
 800932a:	eef0 8a40 	vmov.f32	s17, s0
 800932e:	f000 f839 	bl	80093a4 <__ieee754_expf>
 8009332:	eeb0 8a40 	vmov.f32	s16, s0
 8009336:	eeb0 0a68 	vmov.f32	s0, s17
 800933a:	f000 f829 	bl	8009390 <finitef>
 800933e:	b160      	cbz	r0, 800935a <expf+0x36>
 8009340:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8009380 <expf+0x5c>
 8009344:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934c:	dd0a      	ble.n	8009364 <expf+0x40>
 800934e:	f7fd fee9 	bl	8007124 <__errno>
 8009352:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8009384 <expf+0x60>
 8009356:	2322      	movs	r3, #34	@ 0x22
 8009358:	6003      	str	r3, [r0, #0]
 800935a:	eeb0 0a48 	vmov.f32	s0, s16
 800935e:	ecbd 8b02 	vpop	{d8}
 8009362:	bd08      	pop	{r3, pc}
 8009364:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009388 <expf+0x64>
 8009368:	eef4 8ae7 	vcmpe.f32	s17, s15
 800936c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009370:	d5f3      	bpl.n	800935a <expf+0x36>
 8009372:	f7fd fed7 	bl	8007124 <__errno>
 8009376:	2322      	movs	r3, #34	@ 0x22
 8009378:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800938c <expf+0x68>
 800937c:	6003      	str	r3, [r0, #0]
 800937e:	e7ec      	b.n	800935a <expf+0x36>
 8009380:	42b17217 	.word	0x42b17217
 8009384:	7f800000 	.word	0x7f800000
 8009388:	c2cff1b5 	.word	0xc2cff1b5
 800938c:	00000000 	.word	0x00000000

08009390 <finitef>:
 8009390:	ee10 3a10 	vmov	r3, s0
 8009394:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8009398:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800939c:	bfac      	ite	ge
 800939e:	2000      	movge	r0, #0
 80093a0:	2001      	movlt	r0, #1
 80093a2:	4770      	bx	lr

080093a4 <__ieee754_expf>:
 80093a4:	ee10 2a10 	vmov	r2, s0
 80093a8:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 80093ac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80093b0:	d902      	bls.n	80093b8 <__ieee754_expf+0x14>
 80093b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80093b6:	4770      	bx	lr
 80093b8:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80093bc:	d106      	bne.n	80093cc <__ieee754_expf+0x28>
 80093be:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80094f8 <__ieee754_expf+0x154>
 80093c2:	2900      	cmp	r1, #0
 80093c4:	bf18      	it	ne
 80093c6:	eeb0 0a67 	vmovne.f32	s0, s15
 80093ca:	4770      	bx	lr
 80093cc:	484b      	ldr	r0, [pc, #300]	@ (80094fc <__ieee754_expf+0x158>)
 80093ce:	4282      	cmp	r2, r0
 80093d0:	dd02      	ble.n	80093d8 <__ieee754_expf+0x34>
 80093d2:	2000      	movs	r0, #0
 80093d4:	f000 b92a 	b.w	800962c <__math_oflowf>
 80093d8:	2a00      	cmp	r2, #0
 80093da:	da05      	bge.n	80093e8 <__ieee754_expf+0x44>
 80093dc:	4a48      	ldr	r2, [pc, #288]	@ (8009500 <__ieee754_expf+0x15c>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d902      	bls.n	80093e8 <__ieee754_expf+0x44>
 80093e2:	2000      	movs	r0, #0
 80093e4:	f000 b91c 	b.w	8009620 <__math_uflowf>
 80093e8:	4a46      	ldr	r2, [pc, #280]	@ (8009504 <__ieee754_expf+0x160>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80093f0:	d952      	bls.n	8009498 <__ieee754_expf+0xf4>
 80093f2:	4a45      	ldr	r2, [pc, #276]	@ (8009508 <__ieee754_expf+0x164>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80093fa:	d834      	bhi.n	8009466 <__ieee754_expf+0xc2>
 80093fc:	4b43      	ldr	r3, [pc, #268]	@ (800950c <__ieee754_expf+0x168>)
 80093fe:	4413      	add	r3, r2
 8009400:	ed93 7a00 	vldr	s14, [r3]
 8009404:	4b42      	ldr	r3, [pc, #264]	@ (8009510 <__ieee754_expf+0x16c>)
 8009406:	4413      	add	r3, r2
 8009408:	ee30 7a47 	vsub.f32	s14, s0, s14
 800940c:	f1c1 0201 	rsb	r2, r1, #1
 8009410:	edd3 7a00 	vldr	s15, [r3]
 8009414:	1a52      	subs	r2, r2, r1
 8009416:	ee37 0a67 	vsub.f32	s0, s14, s15
 800941a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800941e:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8009514 <__ieee754_expf+0x170>
 8009422:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009518 <__ieee754_expf+0x174>
 8009426:	eee6 6a05 	vfma.f32	s13, s12, s10
 800942a:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800951c <__ieee754_expf+0x178>
 800942e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009432:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009520 <__ieee754_expf+0x17c>
 8009436:	eee5 6a06 	vfma.f32	s13, s10, s12
 800943a:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8009524 <__ieee754_expf+0x180>
 800943e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009442:	eef0 6a40 	vmov.f32	s13, s0
 8009446:	eee5 6a46 	vfms.f32	s13, s10, s12
 800944a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800944e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8009452:	bb92      	cbnz	r2, 80094ba <__ieee754_expf+0x116>
 8009454:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009458:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800945c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009460:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009464:	4770      	bx	lr
 8009466:	4b30      	ldr	r3, [pc, #192]	@ (8009528 <__ieee754_expf+0x184>)
 8009468:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800952c <__ieee754_expf+0x188>
 800946c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8009530 <__ieee754_expf+0x18c>
 8009470:	4413      	add	r3, r2
 8009472:	edd3 7a00 	vldr	s15, [r3]
 8009476:	eee0 7a07 	vfma.f32	s15, s0, s14
 800947a:	eeb0 7a40 	vmov.f32	s14, s0
 800947e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009482:	ee17 2a90 	vmov	r2, s15
 8009486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800948a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800948e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8009534 <__ieee754_expf+0x190>
 8009492:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009496:	e7be      	b.n	8009416 <__ieee754_expf+0x72>
 8009498:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800949c:	d20b      	bcs.n	80094b6 <__ieee754_expf+0x112>
 800949e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009538 <__ieee754_expf+0x194>
 80094a2:	ee70 6a26 	vadd.f32	s13, s0, s13
 80094a6:	eef4 6ae5 	vcmpe.f32	s13, s11
 80094aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ae:	dd02      	ble.n	80094b6 <__ieee754_expf+0x112>
 80094b0:	ee30 0a25 	vadd.f32	s0, s0, s11
 80094b4:	4770      	bx	lr
 80094b6:	2200      	movs	r2, #0
 80094b8:	e7af      	b.n	800941a <__ieee754_expf+0x76>
 80094ba:	ee36 6a66 	vsub.f32	s12, s12, s13
 80094be:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 80094c2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80094c6:	bfb8      	it	lt
 80094c8:	3264      	addlt	r2, #100	@ 0x64
 80094ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80094ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094d2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80094d6:	ee17 3a90 	vmov	r3, s15
 80094da:	bfab      	itete	ge
 80094dc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80094e0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80094e4:	ee00 3a10 	vmovge	s0, r3
 80094e8:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800953c <__ieee754_expf+0x198>
 80094ec:	bfbc      	itt	lt
 80094ee:	ee00 3a10 	vmovlt	s0, r3
 80094f2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80094f6:	4770      	bx	lr
 80094f8:	00000000 	.word	0x00000000
 80094fc:	42b17217 	.word	0x42b17217
 8009500:	42cff1b5 	.word	0x42cff1b5
 8009504:	3eb17218 	.word	0x3eb17218
 8009508:	3f851591 	.word	0x3f851591
 800950c:	08009a68 	.word	0x08009a68
 8009510:	08009a60 	.word	0x08009a60
 8009514:	3331bb4c 	.word	0x3331bb4c
 8009518:	b5ddea0e 	.word	0xb5ddea0e
 800951c:	388ab355 	.word	0x388ab355
 8009520:	bb360b61 	.word	0xbb360b61
 8009524:	3e2aaaab 	.word	0x3e2aaaab
 8009528:	08009a70 	.word	0x08009a70
 800952c:	3fb8aa3b 	.word	0x3fb8aa3b
 8009530:	3f317180 	.word	0x3f317180
 8009534:	3717f7d1 	.word	0x3717f7d1
 8009538:	7149f2ca 	.word	0x7149f2ca
 800953c:	0d800000 	.word	0x0d800000

08009540 <fmaxf>:
 8009540:	b508      	push	{r3, lr}
 8009542:	ed2d 8b02 	vpush	{d8}
 8009546:	eeb0 8a40 	vmov.f32	s16, s0
 800954a:	eef0 8a60 	vmov.f32	s17, s1
 800954e:	f000 f831 	bl	80095b4 <__fpclassifyf>
 8009552:	b930      	cbnz	r0, 8009562 <fmaxf+0x22>
 8009554:	eeb0 8a68 	vmov.f32	s16, s17
 8009558:	eeb0 0a48 	vmov.f32	s0, s16
 800955c:	ecbd 8b02 	vpop	{d8}
 8009560:	bd08      	pop	{r3, pc}
 8009562:	eeb0 0a68 	vmov.f32	s0, s17
 8009566:	f000 f825 	bl	80095b4 <__fpclassifyf>
 800956a:	2800      	cmp	r0, #0
 800956c:	d0f4      	beq.n	8009558 <fmaxf+0x18>
 800956e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009576:	dded      	ble.n	8009554 <fmaxf+0x14>
 8009578:	e7ee      	b.n	8009558 <fmaxf+0x18>

0800957a <fminf>:
 800957a:	b508      	push	{r3, lr}
 800957c:	ed2d 8b02 	vpush	{d8}
 8009580:	eeb0 8a40 	vmov.f32	s16, s0
 8009584:	eef0 8a60 	vmov.f32	s17, s1
 8009588:	f000 f814 	bl	80095b4 <__fpclassifyf>
 800958c:	b930      	cbnz	r0, 800959c <fminf+0x22>
 800958e:	eeb0 8a68 	vmov.f32	s16, s17
 8009592:	eeb0 0a48 	vmov.f32	s0, s16
 8009596:	ecbd 8b02 	vpop	{d8}
 800959a:	bd08      	pop	{r3, pc}
 800959c:	eeb0 0a68 	vmov.f32	s0, s17
 80095a0:	f000 f808 	bl	80095b4 <__fpclassifyf>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d0f4      	beq.n	8009592 <fminf+0x18>
 80095a8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80095ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b0:	d5ed      	bpl.n	800958e <fminf+0x14>
 80095b2:	e7ee      	b.n	8009592 <fminf+0x18>

080095b4 <__fpclassifyf>:
 80095b4:	ee10 3a10 	vmov	r3, s0
 80095b8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80095bc:	d00d      	beq.n	80095da <__fpclassifyf+0x26>
 80095be:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80095c2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80095c6:	d30a      	bcc.n	80095de <__fpclassifyf+0x2a>
 80095c8:	4b07      	ldr	r3, [pc, #28]	@ (80095e8 <__fpclassifyf+0x34>)
 80095ca:	1e42      	subs	r2, r0, #1
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d908      	bls.n	80095e2 <__fpclassifyf+0x2e>
 80095d0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80095d4:	4258      	negs	r0, r3
 80095d6:	4158      	adcs	r0, r3
 80095d8:	4770      	bx	lr
 80095da:	2002      	movs	r0, #2
 80095dc:	4770      	bx	lr
 80095de:	2004      	movs	r0, #4
 80095e0:	4770      	bx	lr
 80095e2:	2003      	movs	r0, #3
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	007ffffe 	.word	0x007ffffe

080095ec <with_errnof>:
 80095ec:	b510      	push	{r4, lr}
 80095ee:	ed2d 8b02 	vpush	{d8}
 80095f2:	eeb0 8a40 	vmov.f32	s16, s0
 80095f6:	4604      	mov	r4, r0
 80095f8:	f7fd fd94 	bl	8007124 <__errno>
 80095fc:	eeb0 0a48 	vmov.f32	s0, s16
 8009600:	ecbd 8b02 	vpop	{d8}
 8009604:	6004      	str	r4, [r0, #0]
 8009606:	bd10      	pop	{r4, pc}

08009608 <xflowf>:
 8009608:	b130      	cbz	r0, 8009618 <xflowf+0x10>
 800960a:	eef1 7a40 	vneg.f32	s15, s0
 800960e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009612:	2022      	movs	r0, #34	@ 0x22
 8009614:	f7ff bfea 	b.w	80095ec <with_errnof>
 8009618:	eef0 7a40 	vmov.f32	s15, s0
 800961c:	e7f7      	b.n	800960e <xflowf+0x6>
	...

08009620 <__math_uflowf>:
 8009620:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009628 <__math_uflowf+0x8>
 8009624:	f7ff bff0 	b.w	8009608 <xflowf>
 8009628:	10000000 	.word	0x10000000

0800962c <__math_oflowf>:
 800962c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009634 <__math_oflowf+0x8>
 8009630:	f7ff bfea 	b.w	8009608 <xflowf>
 8009634:	70000000 	.word	0x70000000

08009638 <_init>:
 8009638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963a:	bf00      	nop
 800963c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963e:	bc08      	pop	{r3}
 8009640:	469e      	mov	lr, r3
 8009642:	4770      	bx	lr

08009644 <_fini>:
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009646:	bf00      	nop
 8009648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964a:	bc08      	pop	{r3}
 800964c:	469e      	mov	lr, r3
 800964e:	4770      	bx	lr
