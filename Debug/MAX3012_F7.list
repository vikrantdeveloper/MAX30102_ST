
MAX3012_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e34  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08008018  08008018  00009018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083b8  080083b8  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080083b8  080083b8  000093b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083c0  080083c0  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083c0  080083c0  000093c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083c4  080083c4  000093c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080083c8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  200001d4  0800859c  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  0800859c  0000a734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1e6  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002457  00000000  00000000  000193ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0001b848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094b  00000000  00000000  0001c460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023299  00000000  00000000  0001cdab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010afa  00000000  00000000  00040044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5353  00000000  00000000  00050b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125e91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004230  00000000  00000000  00125ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  0012a104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007ffc 	.word	0x08007ffc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08007ffc 	.word	0x08007ffc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f000 fbb4 	bl	80016fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 f849 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f96:	f000 f8a5 	bl	80010e4 <MX_GPIO_Init>
  erlog_init(&log_console, &huart3);
 8000f9a:	491a      	ldr	r1, [pc, #104]	@ (8001004 <main+0x7c>)
 8000f9c:	481a      	ldr	r0, [pc, #104]	@ (8001008 <main+0x80>)
 8000f9e:	f004 f883 	bl	80050a8 <erlog_init>
  max30102_init(&max30102 , &hi2c2);
 8000fa2:	491a      	ldr	r1, [pc, #104]	@ (800100c <main+0x84>)
 8000fa4:	481a      	ldr	r0, [pc, #104]	@ (8001010 <main+0x88>)
 8000fa6:	f004 f8e3 	bl	8005170 <max30102_init>
  read_register(&max30102, MAX30102_REVISIONID , &max30102.revision_id);  // read revision id
 8000faa:	4a1a      	ldr	r2, [pc, #104]	@ (8001014 <main+0x8c>)
 8000fac:	21fe      	movs	r1, #254	@ 0xfe
 8000fae:	4818      	ldr	r0, [pc, #96]	@ (8001010 <main+0x88>)
 8000fb0:	f004 f901 	bl	80051b6 <read_register>
  read_register(&max30102, MAX30102_PARTID , &max30102.part_id); // read part id to verify.
 8000fb4:	4a18      	ldr	r2, [pc, #96]	@ (8001018 <main+0x90>)
 8000fb6:	21ff      	movs	r1, #255	@ 0xff
 8000fb8:	4815      	ldr	r0, [pc, #84]	@ (8001010 <main+0x88>)
 8000fba:	f004 f8fc 	bl	80051b6 <read_register>

  max30102_enableDIETEMPRDY(&max30102);
 8000fbe:	4814      	ldr	r0, [pc, #80]	@ (8001010 <main+0x88>)
 8000fc0:	f004 f96c 	bl	800529c <max30102_enableDIETEMPRDY>
  HAL_Delay(1);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f000 fbf5 	bl	80017b4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  float temp = max30102_readtemp(&max30102);
 8000fca:	4811      	ldr	r0, [pc, #68]	@ (8001010 <main+0x88>)
 8000fcc:	f004 f974 	bl	80052b8 <max30102_readtemp>
 8000fd0:	ed87 0a01 	vstr	s0, [r7, #4]
	 size = sprintf((char *)Data,"Temperature: %0.2f C \r\n", temp);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff fadf 	bl	8000598 <__aeabi_f2d>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	490f      	ldr	r1, [pc, #60]	@ (800101c <main+0x94>)
 8000fe0:	480f      	ldr	r0, [pc, #60]	@ (8001020 <main+0x98>)
 8000fe2:	f004 fe1d 	bl	8005c20 <siprintf>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <main+0x9c>)
 8000fec:	801a      	strh	r2, [r3, #0]
	 HAL_UART_Transmit(&huart3, Data, size, 1000);
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <main+0x9c>)
 8000ff0:	881a      	ldrh	r2, [r3, #0]
 8000ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff6:	490a      	ldr	r1, [pc, #40]	@ (8001020 <main+0x98>)
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <main+0x7c>)
 8000ffa:	f003 fb65 	bl	80046c8 <HAL_UART_Transmit>
  {
 8000ffe:	bf00      	nop
 8001000:	e7e3      	b.n	8000fca <main+0x42>
 8001002:	bf00      	nop
 8001004:	200001f0 	.word	0x200001f0
 8001008:	200002cc 	.word	0x200002cc
 800100c:	20000278 	.word	0x20000278
 8001010:	200003d4 	.word	0x200003d4
 8001014:	200004da 	.word	0x200004da
 8001018:	200004d9 	.word	0x200004d9
 800101c:	08008018 	.word	0x08008018
 8001020:	200004e0 	.word	0x200004e0
 8001024:	200004dc 	.word	0x200004dc

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	@ 0x50
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	2230      	movs	r2, #48	@ 0x30
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f004 fed4 	bl	8005de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800104c:	f002 faca 	bl	80035e4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <SystemClock_Config+0xb4>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001054:	4a21      	ldr	r2, [pc, #132]	@ (80010dc <SystemClock_Config+0xb4>)
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800105a:	6413      	str	r3, [r2, #64]	@ 0x40
 800105c:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <SystemClock_Config+0xb4>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001068:	4b1d      	ldr	r3, [pc, #116]	@ (80010e0 <SystemClock_Config+0xb8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001070:	4a1b      	ldr	r2, [pc, #108]	@ (80010e0 <SystemClock_Config+0xb8>)
 8001072:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <SystemClock_Config+0xb8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001084:	2302      	movs	r3, #2
 8001086:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001088:	2301      	movs	r3, #1
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800108c:	2310      	movs	r3, #16
 800108e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001090:	2300      	movs	r3, #0
 8001092:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001094:	f107 0320 	add.w	r3, r7, #32
 8001098:	4618      	mov	r0, r3
 800109a:	f002 fab3 	bl	8003604 <HAL_RCC_OscConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010a4:	f000 f8ec 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a8:	230f      	movs	r3, #15
 80010aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 fd42 	bl	8003b4c <HAL_RCC_ClockConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010ce:	f000 f8d7 	bl	8001280 <Error_Handler>
  }
}
 80010d2:	bf00      	nop
 80010d4:	3750      	adds	r7, #80	@ 0x50
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40007000 	.word	0x40007000

080010e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08c      	sub	sp, #48	@ 0x30
 80010e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b5c      	ldr	r3, [pc, #368]	@ (800126c <MX_GPIO_Init+0x188>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a5b      	ldr	r2, [pc, #364]	@ (800126c <MX_GPIO_Init+0x188>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b59      	ldr	r3, [pc, #356]	@ (800126c <MX_GPIO_Init+0x188>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001112:	4b56      	ldr	r3, [pc, #344]	@ (800126c <MX_GPIO_Init+0x188>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a55      	ldr	r2, [pc, #340]	@ (800126c <MX_GPIO_Init+0x188>)
 8001118:	f043 0320 	orr.w	r3, r3, #32
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b53      	ldr	r3, [pc, #332]	@ (800126c <MX_GPIO_Init+0x188>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0320 	and.w	r3, r3, #32
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	4b50      	ldr	r3, [pc, #320]	@ (800126c <MX_GPIO_Init+0x188>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a4f      	ldr	r2, [pc, #316]	@ (800126c <MX_GPIO_Init+0x188>)
 8001130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b4d      	ldr	r3, [pc, #308]	@ (800126c <MX_GPIO_Init+0x188>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b4a      	ldr	r3, [pc, #296]	@ (800126c <MX_GPIO_Init+0x188>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a49      	ldr	r2, [pc, #292]	@ (800126c <MX_GPIO_Init+0x188>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b47      	ldr	r3, [pc, #284]	@ (800126c <MX_GPIO_Init+0x188>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115a:	4b44      	ldr	r3, [pc, #272]	@ (800126c <MX_GPIO_Init+0x188>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a43      	ldr	r2, [pc, #268]	@ (800126c <MX_GPIO_Init+0x188>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b41      	ldr	r3, [pc, #260]	@ (800126c <MX_GPIO_Init+0x188>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001172:	4b3e      	ldr	r3, [pc, #248]	@ (800126c <MX_GPIO_Init+0x188>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a3d      	ldr	r2, [pc, #244]	@ (800126c <MX_GPIO_Init+0x188>)
 8001178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b3b      	ldr	r3, [pc, #236]	@ (800126c <MX_GPIO_Init+0x188>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	4b38      	ldr	r3, [pc, #224]	@ (800126c <MX_GPIO_Init+0x188>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a37      	ldr	r2, [pc, #220]	@ (800126c <MX_GPIO_Init+0x188>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b35      	ldr	r3, [pc, #212]	@ (800126c <MX_GPIO_Init+0x188>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80011a8:	4831      	ldr	r0, [pc, #196]	@ (8001270 <MX_GPIO_Init+0x18c>)
 80011aa:	f000 fe05 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2140      	movs	r1, #64	@ 0x40
 80011b2:	4830      	ldr	r0, [pc, #192]	@ (8001274 <MX_GPIO_Init+0x190>)
 80011b4:	f000 fe00 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	482a      	ldr	r0, [pc, #168]	@ (8001278 <MX_GPIO_Init+0x194>)
 80011d0:	f000 fc56 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011d4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80011d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	4820      	ldr	r0, [pc, #128]	@ (8001270 <MX_GPIO_Init+0x18c>)
 80011ee:	f000 fc47 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011f2:	2340      	movs	r3, #64	@ 0x40
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	481a      	ldr	r0, [pc, #104]	@ (8001274 <MX_GPIO_Init+0x190>)
 800120a:	f000 fc39 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800120e:	2380      	movs	r3, #128	@ 0x80
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4814      	ldr	r0, [pc, #80]	@ (8001274 <MX_GPIO_Init+0x190>)
 8001222:	f000 fc2d 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001226:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001238:	230a      	movs	r3, #10
 800123a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	480e      	ldr	r0, [pc, #56]	@ (800127c <MX_GPIO_Init+0x198>)
 8001244:	f000 fc1c 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001248:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	4807      	ldr	r0, [pc, #28]	@ (800127c <MX_GPIO_Init+0x198>)
 800125e:	f000 fc0f 	bl	8001a80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001262:	bf00      	nop
 8001264:	3730      	adds	r7, #48	@ 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40020400 	.word	0x40020400
 8001274:	40021800 	.word	0x40021800
 8001278:	40020800 	.word	0x40020800
 800127c:	40020000 	.word	0x40020000

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <Error_Handler+0x8>

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <HAL_MspInit+0x44>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	4a0e      	ldr	r2, [pc, #56]	@ (80012d0 <HAL_MspInit+0x44>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129c:	6413      	str	r3, [r2, #64]	@ 0x40
 800129e:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <HAL_MspInit+0x44>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <HAL_MspInit+0x44>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	4a08      	ldr	r2, [pc, #32]	@ (80012d0 <HAL_MspInit+0x44>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_MspInit+0x44>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800

080012d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b0aa      	sub	sp, #168	@ 0xa8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2280      	movs	r2, #128	@ 0x80
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f004 fd75 	bl	8005de4 <memset>
  if(hi2c->Instance==I2C2)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a29      	ldr	r2, [pc, #164]	@ (80013a4 <HAL_I2C_MspInit+0xd0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d14b      	bne.n	800139c <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001304:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001308:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800130a:	2300      	movs	r3, #0
 800130c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4618      	mov	r0, r3
 8001314:	f002 fe40 	bl	8003f98 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800131e:	f7ff ffaf 	bl	8001280 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001322:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <HAL_I2C_MspInit+0xd4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a20      	ldr	r2, [pc, #128]	@ (80013a8 <HAL_I2C_MspInit+0xd4>)
 8001328:	f043 0320 	orr.w	r3, r3, #32
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <HAL_I2C_MspInit+0xd4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0320 	and.w	r3, r3, #32
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800133a:	2303      	movs	r3, #3
 800133c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001340:	2312      	movs	r3, #18
 8001342:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001352:	2304      	movs	r3, #4
 8001354:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001358:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800135c:	4619      	mov	r1, r3
 800135e:	4813      	ldr	r0, [pc, #76]	@ (80013ac <HAL_I2C_MspInit+0xd8>)
 8001360:	f000 fb8e 	bl	8001a80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001364:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <HAL_I2C_MspInit+0xd4>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	4a0f      	ldr	r2, [pc, #60]	@ (80013a8 <HAL_I2C_MspInit+0xd4>)
 800136a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800136e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001370:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <HAL_I2C_MspInit+0xd4>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	2021      	movs	r0, #33	@ 0x21
 8001382:	f000 fb16 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001386:	2021      	movs	r0, #33	@ 0x21
 8001388:	f000 fb2f 	bl	80019ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	2022      	movs	r0, #34	@ 0x22
 8001392:	f000 fb0e 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001396:	2022      	movs	r0, #34	@ 0x22
 8001398:	f000 fb27 	bl	80019ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800139c:	bf00      	nop
 800139e:	37a8      	adds	r7, #168	@ 0xa8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40005800 	.word	0x40005800
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40021400 	.word	0x40021400

080013b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0aa      	sub	sp, #168	@ 0xa8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f004 fd07 	bl	8005de4 <memset>
  if(huart->Instance==USART3)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a22      	ldr	r2, [pc, #136]	@ (8001464 <HAL_UART_MspInit+0xb4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d13c      	bne.n	800145a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4618      	mov	r0, r3
 80013f0:	f002 fdd2 	bl	8003f98 <HAL_RCCEx_PeriphCLKConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013fa:	f7ff ff41 	bl	8001280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_UART_MspInit+0xb8>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	4a19      	ldr	r2, [pc, #100]	@ (8001468 <HAL_UART_MspInit+0xb8>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001408:	6413      	str	r3, [r2, #64]	@ 0x40
 800140a:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <HAL_UART_MspInit+0xb8>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001416:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <HAL_UART_MspInit+0xb8>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a13      	ldr	r2, [pc, #76]	@ (8001468 <HAL_UART_MspInit+0xb8>)
 800141c:	f043 0308 	orr.w	r3, r3, #8
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <HAL_UART_MspInit+0xb8>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800142e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001432:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001448:	2307      	movs	r3, #7
 800144a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	@ (800146c <HAL_UART_MspInit+0xbc>)
 8001456:	f000 fb13 	bl	8001a80 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800145a:	bf00      	nop
 800145c:	37a8      	adds	r7, #168	@ 0xa8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40004800 	.word	0x40004800
 8001468:	40023800 	.word	0x40023800
 800146c:	40020c00 	.word	0x40020c00

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <NMI_Handler+0x4>

08001478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <MemManage_Handler+0x4>

08001488 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <UsageFault_Handler+0x4>

08001498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c6:	f000 f955 	bl	8001774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80014d4:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <I2C2_EV_IRQHandler+0x10>)
 80014d6:	f000 ff53 	bl	8002380 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000278 	.word	0x20000278

080014e4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <I2C2_ER_IRQHandler+0x10>)
 80014ea:	f000 ff63 	bl	80023b4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000278 	.word	0x20000278

080014f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return 1;
 80014fc:	2301      	movs	r3, #1
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_kill>:

int _kill(int pid, int sig)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001512:	f004 fc73 	bl	8005dfc <__errno>
 8001516:	4603      	mov	r3, r0
 8001518:	2216      	movs	r2, #22
 800151a:	601a      	str	r2, [r3, #0]
  return -1;
 800151c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <_exit>:

void _exit (int status)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001530:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ffe7 	bl	8001508 <_kill>
  while (1) {}    /* Make sure we hang here */
 800153a:	bf00      	nop
 800153c:	e7fd      	b.n	800153a <_exit+0x12>

0800153e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	e00a      	b.n	8001566 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001550:	f3af 8000 	nop.w
 8001554:	4601      	mov	r1, r0
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	b2ca      	uxtb	r2, r1
 800155e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3301      	adds	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	429a      	cmp	r2, r3
 800156c:	dbf0      	blt.n	8001550 <_read+0x12>
  }

  return len;
 800156e:	687b      	ldr	r3, [r7, #4]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e009      	b.n	800159e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	60ba      	str	r2, [r7, #8]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3301      	adds	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dbf1      	blt.n	800158a <_write+0x12>
  }
  return len;
 80015a6:	687b      	ldr	r3, [r7, #4]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_close>:

int _close(int file)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015d8:	605a      	str	r2, [r3, #4]
  return 0;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_isatty>:

int _isatty(int file)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015f0:	2301      	movs	r3, #1
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001620:	4a14      	ldr	r2, [pc, #80]	@ (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800162c:	4b13      	ldr	r3, [pc, #76]	@ (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	@ (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	@ (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d207      	bcs.n	8001658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001648:	f004 fbd8 	bl	8005dfc <__errno>
 800164c:	4603      	mov	r3, r0
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001656:	e009      	b.n	800166c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165e:	4b07      	ldr	r3, [pc, #28]	@ (800167c <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	4a05      	ldr	r2, [pc, #20]	@ (800167c <_sbrk+0x64>)
 8001668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20040000 	.word	0x20040000
 8001678:	00000400 	.word	0x00000400
 800167c:	200005e0 	.word	0x200005e0
 8001680:	20000738 	.word	0x20000738

08001684 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 80016ac:	f7ff ffea 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b0:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016b2:	490d      	ldr	r1, [pc, #52]	@ (80016e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b4:	4a0d      	ldr	r2, [pc, #52]	@ (80016ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c8:	4c0a      	ldr	r4, [pc, #40]	@ (80016f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016d6:	f004 fb97 	bl	8005e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016da:	f7ff fc55 	bl	8000f88 <main>
  bx  lr    
 80016de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80016ec:	080083c8 	.word	0x080083c8
  ldr r2, =_sbss
 80016f0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80016f4:	20000734 	.word	0x20000734

080016f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC_IRQHandler>

080016fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fe:	2003      	movs	r0, #3
 8001700:	f000 f94c 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001704:	2000      	movs	r0, #0
 8001706:	f000 f805 	bl	8001714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170a:	f7ff fdbf 	bl	800128c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800171c:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <HAL_InitTick+0x54>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_InitTick+0x58>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172a:	fbb3 f3f1 	udiv	r3, r3, r1
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f967 	bl	8001a06 <HAL_SYSTICK_Config>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e00e      	b.n	8001760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d80a      	bhi.n	800175e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001750:	f000 f92f 	bl	80019b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001754:	4a06      	ldr	r2, [pc, #24]	@ (8001770 <HAL_InitTick+0x5c>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000000 	.word	0x20000000
 800176c:	20000008 	.word	0x20000008
 8001770:	20000004 	.word	0x20000004

08001774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_IncTick+0x20>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_IncTick+0x24>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <HAL_IncTick+0x24>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008
 8001798:	200005e4 	.word	0x200005e4

0800179c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;
 80017a0:	4b03      	ldr	r3, [pc, #12]	@ (80017b0 <HAL_GetTick+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	200005e4 	.word	0x200005e4

080017b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff ffee 	bl	800179c <HAL_GetTick>
 80017c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017cc:	d005      	beq.n	80017da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_Delay+0x44>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017da:	bf00      	nop
 80017dc:	f7ff ffde 	bl	800179c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d8f7      	bhi.n	80017dc <HAL_Delay+0x28>
  {
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000008 	.word	0x20000008

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <__NVIC_SetPriorityGrouping+0x40>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	4313      	orrs	r3, r2
 8001828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182a:	4a04      	ldr	r2, [pc, #16]	@ (800183c <__NVIC_SetPriorityGrouping+0x40>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	60d3      	str	r3, [r2, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00
 8001840:	05fa0000 	.word	0x05fa0000

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4907      	ldr	r1, [pc, #28]	@ (8001898 <__NVIC_EnableIRQ+0x38>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	@ (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	@ (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	@ 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	@ 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800197c:	f7ff ff8e 	bl	800189c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff29 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff3e 	bl	8001844 <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff8e 	bl	80018f0 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5d 	bl	800189c <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff31 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa2 	bl	8001958 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d004      	beq.n	8001a3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2280      	movs	r2, #128	@ 0x80
 8001a36:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e00c      	b.n	8001a56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2205      	movs	r2, #5
 8001a40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a70:	b2db      	uxtb	r3, r3
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	@ 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	e169      	b.n	8001d74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	f040 8158 	bne.w	8001d6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d005      	beq.n	8001ad6 <HAL_GPIO_Init+0x56>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d130      	bne.n	8001b38 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 0201 	and.w	r2, r3, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d017      	beq.n	8001b74 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d123      	bne.n	8001bc8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	220f      	movs	r2, #15
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	08da      	lsrs	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3208      	adds	r2, #8
 8001bc2:	69b9      	ldr	r1, [r7, #24]
 8001bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80b2 	beq.w	8001d6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	4b60      	ldr	r3, [pc, #384]	@ (8001d8c <HAL_GPIO_Init+0x30c>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	4a5f      	ldr	r2, [pc, #380]	@ (8001d8c <HAL_GPIO_Init+0x30c>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c16:	4b5d      	ldr	r3, [pc, #372]	@ (8001d8c <HAL_GPIO_Init+0x30c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c22:	4a5b      	ldr	r2, [pc, #364]	@ (8001d90 <HAL_GPIO_Init+0x310>)
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	3302      	adds	r3, #2
 8001c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	220f      	movs	r2, #15
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a52      	ldr	r2, [pc, #328]	@ (8001d94 <HAL_GPIO_Init+0x314>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d02b      	beq.n	8001ca6 <HAL_GPIO_Init+0x226>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a51      	ldr	r2, [pc, #324]	@ (8001d98 <HAL_GPIO_Init+0x318>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d025      	beq.n	8001ca2 <HAL_GPIO_Init+0x222>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a50      	ldr	r2, [pc, #320]	@ (8001d9c <HAL_GPIO_Init+0x31c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01f      	beq.n	8001c9e <HAL_GPIO_Init+0x21e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4f      	ldr	r2, [pc, #316]	@ (8001da0 <HAL_GPIO_Init+0x320>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d019      	beq.n	8001c9a <HAL_GPIO_Init+0x21a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4e      	ldr	r2, [pc, #312]	@ (8001da4 <HAL_GPIO_Init+0x324>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d013      	beq.n	8001c96 <HAL_GPIO_Init+0x216>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4d      	ldr	r2, [pc, #308]	@ (8001da8 <HAL_GPIO_Init+0x328>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00d      	beq.n	8001c92 <HAL_GPIO_Init+0x212>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4c      	ldr	r2, [pc, #304]	@ (8001dac <HAL_GPIO_Init+0x32c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d007      	beq.n	8001c8e <HAL_GPIO_Init+0x20e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4b      	ldr	r2, [pc, #300]	@ (8001db0 <HAL_GPIO_Init+0x330>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d101      	bne.n	8001c8a <HAL_GPIO_Init+0x20a>
 8001c86:	2307      	movs	r3, #7
 8001c88:	e00e      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	e00c      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001c8e:	2306      	movs	r3, #6
 8001c90:	e00a      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001c92:	2305      	movs	r3, #5
 8001c94:	e008      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001c96:	2304      	movs	r3, #4
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e004      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x228>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f002 0203 	and.w	r2, r2, #3
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cb8:	4935      	ldr	r1, [pc, #212]	@ (8001d90 <HAL_GPIO_Init+0x310>)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8001db4 <HAL_GPIO_Init+0x334>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cea:	4a32      	ldr	r2, [pc, #200]	@ (8001db4 <HAL_GPIO_Init+0x334>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf0:	4b30      	ldr	r3, [pc, #192]	@ (8001db4 <HAL_GPIO_Init+0x334>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d14:	4a27      	ldr	r2, [pc, #156]	@ (8001db4 <HAL_GPIO_Init+0x334>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d1a:	4b26      	ldr	r3, [pc, #152]	@ (8001db4 <HAL_GPIO_Init+0x334>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001db4 <HAL_GPIO_Init+0x334>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d44:	4b1b      	ldr	r3, [pc, #108]	@ (8001db4 <HAL_GPIO_Init+0x334>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d68:	4a12      	ldr	r2, [pc, #72]	@ (8001db4 <HAL_GPIO_Init+0x334>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3301      	adds	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	f67f ae92 	bls.w	8001aa0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3724      	adds	r7, #36	@ 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40013800 	.word	0x40013800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020c00 	.word	0x40020c00
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40021400 	.word	0x40021400
 8001dac:	40021800 	.word	0x40021800
 8001db0:	40021c00 	.word	0x40021c00
 8001db4:	40013c00 	.word	0x40013c00

08001db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dd4:	e003      	b.n	8001dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	041a      	lsls	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	619a      	str	r2, [r3, #24]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e08b      	b.n	8001f16 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fa5e 	bl	80012d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2224      	movs	r2, #36	@ 0x24
 8001e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d107      	bne.n	8001e66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	e006      	b.n	8001e74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d108      	bne.n	8001e8e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	e007      	b.n	8001e9e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f20 <HAL_I2C_Init+0x134>)
 8001eaa:	430b      	orrs	r3, r1
 8001eac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ebc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69d9      	ldr	r1, [r3, #28]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1a      	ldr	r2, [r3, #32]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	02008000 	.word	0x02008000

08001f24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	4608      	mov	r0, r1
 8001f2e:	4611      	mov	r1, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	817b      	strh	r3, [r7, #10]
 8001f36:	460b      	mov	r3, r1
 8001f38:	813b      	strh	r3, [r7, #8]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	f040 80f9 	bne.w	800213e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_I2C_Mem_Write+0x34>
 8001f52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f5e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0ed      	b.n	8002140 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_I2C_Mem_Write+0x4e>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e0e6      	b.n	8002140 <HAL_I2C_Mem_Write+0x21c>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f7a:	f7ff fc0f 	bl	800179c <HAL_GetTick>
 8001f7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2319      	movs	r3, #25
 8001f86:	2201      	movs	r2, #1
 8001f88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f001 f83e 	bl	800300e <I2C_WaitOnFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0d1      	b.n	8002140 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2221      	movs	r2, #33	@ 0x21
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2240      	movs	r2, #64	@ 0x40
 8001fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a3a      	ldr	r2, [r7, #32]
 8001fb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fc4:	88f8      	ldrh	r0, [r7, #6]
 8001fc6:	893a      	ldrh	r2, [r7, #8]
 8001fc8:	8979      	ldrh	r1, [r7, #10]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 fb81 	bl	80026dc <I2C_RequestMemoryWrite>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0a9      	b.n	8002140 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2bff      	cmp	r3, #255	@ 0xff
 8001ff4:	d90e      	bls.n	8002014 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	22ff      	movs	r2, #255	@ 0xff
 8001ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002000:	b2da      	uxtb	r2, r3
 8002002:	8979      	ldrh	r1, [r7, #10]
 8002004:	2300      	movs	r3, #0
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f001 f9c1 	bl	8003394 <I2C_TransferConfig>
 8002012:	e00f      	b.n	8002034 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002022:	b2da      	uxtb	r2, r3
 8002024:	8979      	ldrh	r1, [r7, #10]
 8002026:	2300      	movs	r3, #0
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f001 f9b0 	bl	8003394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f001 f841 	bl	80030c0 <I2C_WaitOnTXISFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e07b      	b.n	8002140 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800207c:	b29b      	uxth	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d034      	beq.n	80020ec <HAL_I2C_Mem_Write+0x1c8>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002086:	2b00      	cmp	r3, #0
 8002088:	d130      	bne.n	80020ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002090:	2200      	movs	r2, #0
 8002092:	2180      	movs	r1, #128	@ 0x80
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 ffba 	bl	800300e <I2C_WaitOnFlagUntilTimeout>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e04d      	b.n	8002140 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2bff      	cmp	r3, #255	@ 0xff
 80020ac:	d90e      	bls.n	80020cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	22ff      	movs	r2, #255	@ 0xff
 80020b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	8979      	ldrh	r1, [r7, #10]
 80020bc:	2300      	movs	r3, #0
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f001 f965 	bl	8003394 <I2C_TransferConfig>
 80020ca:	e00f      	b.n	80020ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	8979      	ldrh	r1, [r7, #10]
 80020de:	2300      	movs	r3, #0
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f001 f954 	bl	8003394 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d19e      	bne.n	8002034 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f001 f827 	bl	800314e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e01a      	b.n	8002140 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2220      	movs	r2, #32
 8002110:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <HAL_I2C_Mem_Write+0x224>)
 800211e:	400b      	ands	r3, r1
 8002120:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800213e:	2302      	movs	r3, #2
  }
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	fe00e800 	.word	0xfe00e800

0800214c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	4608      	mov	r0, r1
 8002156:	4611      	mov	r1, r2
 8002158:	461a      	mov	r2, r3
 800215a:	4603      	mov	r3, r0
 800215c:	817b      	strh	r3, [r7, #10]
 800215e:	460b      	mov	r3, r1
 8002160:	813b      	strh	r3, [r7, #8]
 8002162:	4613      	mov	r3, r2
 8002164:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b20      	cmp	r3, #32
 8002170:	f040 80fd 	bne.w	800236e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_I2C_Mem_Read+0x34>
 800217a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002186:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0f1      	b.n	8002370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_I2C_Mem_Read+0x4e>
 8002196:	2302      	movs	r3, #2
 8002198:	e0ea      	b.n	8002370 <HAL_I2C_Mem_Read+0x224>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021a2:	f7ff fafb 	bl	800179c <HAL_GetTick>
 80021a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2319      	movs	r3, #25
 80021ae:	2201      	movs	r2, #1
 80021b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 ff2a 	bl	800300e <I2C_WaitOnFlagUntilTimeout>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0d5      	b.n	8002370 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2222      	movs	r2, #34	@ 0x22
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2240      	movs	r2, #64	@ 0x40
 80021d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a3a      	ldr	r2, [r7, #32]
 80021de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021ec:	88f8      	ldrh	r0, [r7, #6]
 80021ee:	893a      	ldrh	r2, [r7, #8]
 80021f0:	8979      	ldrh	r1, [r7, #10]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	4603      	mov	r3, r0
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 fac1 	bl	8002784 <I2C_RequestMemoryRead>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0ad      	b.n	8002370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	2bff      	cmp	r3, #255	@ 0xff
 800221c:	d90e      	bls.n	800223c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002228:	b2da      	uxtb	r2, r3
 800222a:	8979      	ldrh	r1, [r7, #10]
 800222c:	4b52      	ldr	r3, [pc, #328]	@ (8002378 <HAL_I2C_Mem_Read+0x22c>)
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f001 f8ad 	bl	8003394 <I2C_TransferConfig>
 800223a:	e00f      	b.n	800225c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224a:	b2da      	uxtb	r2, r3
 800224c:	8979      	ldrh	r1, [r7, #10]
 800224e:	4b4a      	ldr	r3, [pc, #296]	@ (8002378 <HAL_I2C_Mem_Read+0x22c>)
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f001 f89c 	bl	8003394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002262:	2200      	movs	r2, #0
 8002264:	2104      	movs	r1, #4
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fed1 	bl	800300e <I2C_WaitOnFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e07c      	b.n	8002370 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d034      	beq.n	800231c <HAL_I2C_Mem_Read+0x1d0>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d130      	bne.n	800231c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c0:	2200      	movs	r2, #0
 80022c2:	2180      	movs	r1, #128	@ 0x80
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 fea2 	bl	800300e <I2C_WaitOnFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e04d      	b.n	8002370 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2bff      	cmp	r3, #255	@ 0xff
 80022dc:	d90e      	bls.n	80022fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	8979      	ldrh	r1, [r7, #10]
 80022ec:	2300      	movs	r3, #0
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f001 f84d 	bl	8003394 <I2C_TransferConfig>
 80022fa:	e00f      	b.n	800231c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230a:	b2da      	uxtb	r2, r3
 800230c:	8979      	ldrh	r1, [r7, #10]
 800230e:	2300      	movs	r3, #0
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f001 f83c 	bl	8003394 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d19a      	bne.n	800225c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 ff0f 	bl	800314e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e01a      	b.n	8002370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2220      	movs	r2, #32
 8002340:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_I2C_Mem_Read+0x230>)
 800234e:	400b      	ands	r3, r1
 8002350:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
  }
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	80002400 	.word	0x80002400
 800237c:	fe00e800 	.word	0xfe00e800

08002380 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	68f9      	ldr	r1, [r7, #12]
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	4798      	blx	r3
  }
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00f      	beq.n	80023f6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e4:	f043 0201 	orr.w	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023f4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00f      	beq.n	8002420 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	f043 0208 	orr.w	r2, r3, #8
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800241e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00f      	beq.n	800244a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002438:	f043 0202 	orr.w	r2, r3, #2
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002448:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 030b 	and.w	r3, r3, #11
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800245a:	68f9      	ldr	r1, [r7, #12]
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fc7d 	bl	8002d5c <I2C_ITError>
  }
}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	70fb      	strb	r3, [r7, #3]
 800249e:	4613      	mov	r3, r2
 80024a0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <I2C_Slave_ISR_IT+0x24>
 800250a:	2302      	movs	r3, #2
 800250c:	e0e2      	b.n	80026d4 <I2C_Slave_ISR_IT+0x1ea>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d009      	beq.n	8002534 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800252a:	6939      	ldr	r1, [r7, #16]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fa5d 	bl	80029ec <I2C_ITSlaveCplt>
 8002532:	e0ca      	b.n	80026ca <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	d04b      	beq.n	80025d6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002544:	2b00      	cmp	r3, #0
 8002546:	d046      	beq.n	80025d6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d128      	bne.n	80025a4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b28      	cmp	r3, #40	@ 0x28
 800255c:	d108      	bne.n	8002570 <I2C_Slave_ISR_IT+0x86>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002564:	d104      	bne.n	8002570 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002566:	6939      	ldr	r1, [r7, #16]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fba3 	bl	8002cb4 <I2C_ITListenCplt>
 800256e:	e031      	b.n	80025d4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b29      	cmp	r3, #41	@ 0x29
 800257a:	d10e      	bne.n	800259a <I2C_Slave_ISR_IT+0xb0>
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002582:	d00a      	beq.n	800259a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2210      	movs	r2, #16
 800258a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fcfc 	bl	8002f8a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f9ce 	bl	8002934 <I2C_ITSlaveSeqCplt>
 8002598:	e01c      	b.n	80025d4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2210      	movs	r2, #16
 80025a0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80025a2:	e08f      	b.n	80026c4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2210      	movs	r2, #16
 80025aa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b0:	f043 0204 	orr.w	r2, r3, #4
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <I2C_Slave_ISR_IT+0xdc>
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025c4:	d17e      	bne.n	80026c4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	4619      	mov	r1, r3
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fbc5 	bl	8002d5c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80025d2:	e077      	b.n	80026c4 <I2C_Slave_ISR_IT+0x1da>
 80025d4:	e076      	b.n	80026c4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d02f      	beq.n	8002640 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d02a      	beq.n	8002640 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d018      	beq.n	8002626 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d14b      	bne.n	80026c8 <I2C_Slave_ISR_IT+0x1de>
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002636:	d047      	beq.n	80026c8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f97b 	bl	8002934 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800263e:	e043      	b.n	80026c8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d009      	beq.n	800265e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002650:	2b00      	cmp	r3, #0
 8002652:	d004      	beq.n	800265e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002654:	6939      	ldr	r1, [r7, #16]
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f8e8 	bl	800282c <I2C_ITAddrCplt>
 800265c:	e035      	b.n	80026ca <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d030      	beq.n	80026ca <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800266e:	2b00      	cmp	r3, #0
 8002670:	d02b      	beq.n	80026ca <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d018      	beq.n	80026ae <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	781a      	ldrb	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80026ac:	e00d      	b.n	80026ca <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026b4:	d002      	beq.n	80026bc <I2C_Slave_ISR_IT+0x1d2>
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d106      	bne.n	80026ca <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f939 	bl	8002934 <I2C_ITSlaveSeqCplt>
 80026c2:	e002      	b.n	80026ca <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80026c4:	bf00      	nop
 80026c6:	e000      	b.n	80026ca <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80026c8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	4608      	mov	r0, r1
 80026e6:	4611      	mov	r1, r2
 80026e8:	461a      	mov	r2, r3
 80026ea:	4603      	mov	r3, r0
 80026ec:	817b      	strh	r3, [r7, #10]
 80026ee:	460b      	mov	r3, r1
 80026f0:	813b      	strh	r3, [r7, #8]
 80026f2:	4613      	mov	r3, r2
 80026f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	8979      	ldrh	r1, [r7, #10]
 80026fc:	4b20      	ldr	r3, [pc, #128]	@ (8002780 <I2C_RequestMemoryWrite+0xa4>)
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fe45 	bl	8003394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	69b9      	ldr	r1, [r7, #24]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fcd6 	bl	80030c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e02c      	b.n	8002778 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002724:	893b      	ldrh	r3, [r7, #8]
 8002726:	b2da      	uxtb	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	629a      	str	r2, [r3, #40]	@ 0x28
 800272e:	e015      	b.n	800275c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002730:	893b      	ldrh	r3, [r7, #8]
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	b29b      	uxth	r3, r3
 8002736:	b2da      	uxtb	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	69b9      	ldr	r1, [r7, #24]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 fcbc 	bl	80030c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e012      	b.n	8002778 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002752:	893b      	ldrh	r3, [r7, #8]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2200      	movs	r2, #0
 8002764:	2180      	movs	r1, #128	@ 0x80
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fc51 	bl	800300e <I2C_WaitOnFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	80002000 	.word	0x80002000

08002784 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af02      	add	r7, sp, #8
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	4608      	mov	r0, r1
 800278e:	4611      	mov	r1, r2
 8002790:	461a      	mov	r2, r3
 8002792:	4603      	mov	r3, r0
 8002794:	817b      	strh	r3, [r7, #10]
 8002796:	460b      	mov	r3, r1
 8002798:	813b      	strh	r3, [r7, #8]
 800279a:	4613      	mov	r3, r2
 800279c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	8979      	ldrh	r1, [r7, #10]
 80027a4:	4b20      	ldr	r3, [pc, #128]	@ (8002828 <I2C_RequestMemoryRead+0xa4>)
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	2300      	movs	r3, #0
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fdf2 	bl	8003394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	69b9      	ldr	r1, [r7, #24]
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fc83 	bl	80030c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e02c      	b.n	800281e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d105      	bne.n	80027d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027ca:	893b      	ldrh	r3, [r7, #8]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80027d4:	e015      	b.n	8002802 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027d6:	893b      	ldrh	r3, [r7, #8]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	b29b      	uxth	r3, r3
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	69b9      	ldr	r1, [r7, #24]
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fc69 	bl	80030c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e012      	b.n	800281e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027f8:	893b      	ldrh	r3, [r7, #8]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2200      	movs	r2, #0
 800280a:	2140      	movs	r1, #64	@ 0x40
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fbfe 	bl	800300e <I2C_WaitOnFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	80002000 	.word	0x80002000

0800282c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002842:	2b28      	cmp	r3, #40	@ 0x28
 8002844:	d16a      	bne.n	800291c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	b29b      	uxth	r3, r3
 8002860:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002864:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	b29b      	uxth	r3, r3
 800286e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002872:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	b29b      	uxth	r3, r3
 800287c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002880:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d138      	bne.n	80028fc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800288a:	897b      	ldrh	r3, [r7, #10]
 800288c:	09db      	lsrs	r3, r3, #7
 800288e:	b29a      	uxth	r2, r3
 8002890:	89bb      	ldrh	r3, [r7, #12]
 8002892:	4053      	eors	r3, r2
 8002894:	b29b      	uxth	r3, r3
 8002896:	f003 0306 	and.w	r3, r3, #6
 800289a:	2b00      	cmp	r3, #0
 800289c:	d11c      	bne.n	80028d8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800289e:	897b      	ldrh	r3, [r7, #10]
 80028a0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d13b      	bne.n	800292c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2208      	movs	r2, #8
 80028c0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80028ca:	89ba      	ldrh	r2, [r7, #12]
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	4619      	mov	r1, r3
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff fdde 	bl	8002492 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80028d6:	e029      	b.n	800292c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80028d8:	893b      	ldrh	r3, [r7, #8]
 80028da:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80028dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fd89 	bl	80033f8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80028ee:	89ba      	ldrh	r2, [r7, #12]
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff fdcc 	bl	8002492 <HAL_I2C_AddrCallback>
}
 80028fa:	e017      	b.n	800292c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80028fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fd79 	bl	80033f8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800290e:	89ba      	ldrh	r2, [r7, #12]
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff fdbc 	bl	8002492 <HAL_I2C_AddrCallback>
}
 800291a:	e007      	b.n	800292c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2208      	movs	r2, #8
 8002922:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800292c:	bf00      	nop
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	e00c      	b.n	8002982 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d007      	beq.n	8002982 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002980:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b29      	cmp	r3, #41	@ 0x29
 800298c:	d112      	bne.n	80029b4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2228      	movs	r2, #40	@ 0x28
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2221      	movs	r2, #33	@ 0x21
 800299a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800299c:	2101      	movs	r1, #1
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fd2a 	bl	80033f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff fd5c 	bl	800246a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80029b2:	e017      	b.n	80029e4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80029be:	d111      	bne.n	80029e4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2228      	movs	r2, #40	@ 0x28
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2222      	movs	r2, #34	@ 0x22
 80029cc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80029ce:	2102      	movs	r1, #2
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fd11 	bl	80033f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff fd4d 	bl	800247e <HAL_I2C_SlaveRxCpltCallback>
}
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a06:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a0e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2220      	movs	r2, #32
 8002a16:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a18:	7afb      	ldrb	r3, [r7, #11]
 8002a1a:	2b21      	cmp	r3, #33	@ 0x21
 8002a1c:	d002      	beq.n	8002a24 <I2C_ITSlaveCplt+0x38>
 8002a1e:	7afb      	ldrb	r3, [r7, #11]
 8002a20:	2b29      	cmp	r3, #41	@ 0x29
 8002a22:	d108      	bne.n	8002a36 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002a24:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fce5 	bl	80033f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2221      	movs	r2, #33	@ 0x21
 8002a32:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a34:	e019      	b.n	8002a6a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a36:	7afb      	ldrb	r3, [r7, #11]
 8002a38:	2b22      	cmp	r3, #34	@ 0x22
 8002a3a:	d002      	beq.n	8002a42 <I2C_ITSlaveCplt+0x56>
 8002a3c:	7afb      	ldrb	r3, [r7, #11]
 8002a3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a40:	d108      	bne.n	8002a54 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002a42:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fcd6 	bl	80033f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2222      	movs	r2, #34	@ 0x22
 8002a50:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a52:	e00a      	b.n	8002a6a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002a54:	7afb      	ldrb	r3, [r7, #11]
 8002a56:	2b28      	cmp	r3, #40	@ 0x28
 8002a58:	d107      	bne.n	8002a6a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002a5a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fcca 	bl	80033f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a78:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b89      	ldr	r3, [pc, #548]	@ (8002cac <I2C_ITSlaveCplt+0x2c0>)
 8002a86:	400b      	ands	r3, r1
 8002a88:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fa7d 	bl	8002f8a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d013      	beq.n	8002ac2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002aa8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01f      	beq.n	8002af2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ac0:	e017      	b.n	8002af2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d012      	beq.n	8002af2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ada:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d006      	beq.n	8002af2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 0304 	bic.w	r3, r3, #4
 8002b02:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00c      	beq.n	8002b3e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4c:	f043 0204 	orr.w	r2, r3, #4
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d049      	beq.n	8002bf2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d044      	beq.n	8002bf2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d128      	bne.n	8002bc4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b28      	cmp	r3, #40	@ 0x28
 8002b7c:	d108      	bne.n	8002b90 <I2C_ITSlaveCplt+0x1a4>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b84:	d104      	bne.n	8002b90 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b86:	6979      	ldr	r1, [r7, #20]
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f893 	bl	8002cb4 <I2C_ITListenCplt>
 8002b8e:	e030      	b.n	8002bf2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b29      	cmp	r3, #41	@ 0x29
 8002b9a:	d10e      	bne.n	8002bba <I2C_ITSlaveCplt+0x1ce>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ba2:	d00a      	beq.n	8002bba <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2210      	movs	r2, #16
 8002baa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f9ec 	bl	8002f8a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff febe 	bl	8002934 <I2C_ITSlaveSeqCplt>
 8002bb8:	e01b      	b.n	8002bf2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2210      	movs	r2, #16
 8002bc0:	61da      	str	r2, [r3, #28]
 8002bc2:	e016      	b.n	8002bf2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2210      	movs	r2, #16
 8002bca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd0:	f043 0204 	orr.w	r2, r3, #4
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <I2C_ITSlaveCplt+0x1fa>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002be4:	d105      	bne.n	8002bf2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	4619      	mov	r1, r3
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f8b5 	bl	8002d5c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d010      	beq.n	8002c2a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f8a4 	bl	8002d5c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b28      	cmp	r3, #40	@ 0x28
 8002c1e:	d141      	bne.n	8002ca4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c20:	6979      	ldr	r1, [r7, #20]
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f846 	bl	8002cb4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c28:	e03c      	b.n	8002ca4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c32:	d014      	beq.n	8002c5e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff fe7d 	bl	8002934 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb0 <I2C_ITSlaveCplt+0x2c4>)
 8002c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff fc29 	bl	80024ae <HAL_I2C_ListenCpltCallback>
}
 8002c5c:	e022      	b.n	8002ca4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b22      	cmp	r3, #34	@ 0x22
 8002c68:	d10e      	bne.n	8002c88 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff fbfc 	bl	800247e <HAL_I2C_SlaveRxCpltCallback>
}
 8002c86:	e00d      	b.n	8002ca4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff fbe3 	bl	800246a <HAL_I2C_SlaveTxCpltCallback>
}
 8002ca4:	bf00      	nop
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	fe00e800 	.word	0xfe00e800
 8002cb0:	ffff0000 	.word	0xffff0000

08002cb4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a25      	ldr	r2, [pc, #148]	@ (8002d58 <I2C_ITListenCplt+0xa4>)
 8002cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d022      	beq.n	8002d30 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d012      	beq.n	8002d30 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d28:	f043 0204 	orr.w	r2, r3, #4
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d30:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fb5f 	bl	80033f8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2210      	movs	r2, #16
 8002d40:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fbaf 	bl	80024ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	ffff0000 	.word	0xffff0000

08002d5c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d6c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a6d      	ldr	r2, [pc, #436]	@ (8002f30 <I2C_ITError+0x1d4>)
 8002d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b28      	cmp	r3, #40	@ 0x28
 8002d92:	d005      	beq.n	8002da0 <I2C_ITError+0x44>
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b29      	cmp	r3, #41	@ 0x29
 8002d98:	d002      	beq.n	8002da0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d9e:	d10b      	bne.n	8002db8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002da0:	2103      	movs	r1, #3
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fb28 	bl	80033f8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2228      	movs	r2, #40	@ 0x28
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a60      	ldr	r2, [pc, #384]	@ (8002f34 <I2C_ITError+0x1d8>)
 8002db4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002db6:	e030      	b.n	8002e1a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002db8:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fb1b 	bl	80033f8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8e1 	bl	8002f8a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b60      	cmp	r3, #96	@ 0x60
 8002dd2:	d01f      	beq.n	8002e14 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d114      	bne.n	8002e14 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d109      	bne.n	8002e0c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2210      	movs	r2, #16
 8002dfe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e04:	f043 0204 	orr.w	r2, r3, #4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2220      	movs	r2, #32
 8002e12:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d039      	beq.n	8002e9c <I2C_ITError+0x140>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b11      	cmp	r3, #17
 8002e2c:	d002      	beq.n	8002e34 <I2C_ITError+0xd8>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b21      	cmp	r3, #33	@ 0x21
 8002e32:	d133      	bne.n	8002e9c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e42:	d107      	bne.n	8002e54 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e52:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe fe02 	bl	8001a62 <HAL_DMA_GetState>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d017      	beq.n	8002e94 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e68:	4a33      	ldr	r2, [pc, #204]	@ (8002f38 <I2C_ITError+0x1dc>)
 8002e6a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fe fdd0 	bl	8001a1e <HAL_DMA_Abort_IT>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d04d      	beq.n	8002f20 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e92:	e045      	b.n	8002f20 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f851 	bl	8002f3c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e9a:	e041      	b.n	8002f20 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d039      	beq.n	8002f18 <I2C_ITError+0x1bc>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b12      	cmp	r3, #18
 8002ea8:	d002      	beq.n	8002eb0 <I2C_ITError+0x154>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b22      	cmp	r3, #34	@ 0x22
 8002eae:	d133      	bne.n	8002f18 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ebe:	d107      	bne.n	8002ed0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ece:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe fdc4 	bl	8001a62 <HAL_DMA_GetState>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d017      	beq.n	8002f10 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee4:	4a14      	ldr	r2, [pc, #80]	@ (8002f38 <I2C_ITError+0x1dc>)
 8002ee6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe fd92 	bl	8001a1e <HAL_DMA_Abort_IT>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d011      	beq.n	8002f24 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f0e:	e009      	b.n	8002f24 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f813 	bl	8002f3c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f16:	e005      	b.n	8002f24 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f80f 	bl	8002f3c <I2C_TreatErrorCallback>
  }
}
 8002f1e:	e002      	b.n	8002f26 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f20:	bf00      	nop
 8002f22:	e000      	b.n	8002f26 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f24:	bf00      	nop
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	ffff0000 	.word	0xffff0000
 8002f34:	080024eb 	.word	0x080024eb
 8002f38:	08002fd3 	.word	0x08002fd3

08002f3c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b60      	cmp	r3, #96	@ 0x60
 8002f4e:	d10e      	bne.n	8002f6e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff fab5 	bl	80024d6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f6c:	e009      	b.n	8002f82 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff faa0 	bl	80024c2 <HAL_I2C_ErrorCallback>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d103      	bne.n	8002fa8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d007      	beq.n	8002fc6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699a      	ldr	r2, [r3, #24]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0201 	orr.w	r2, r2, #1
 8002fc4:	619a      	str	r2, [r3, #24]
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fec:	2200      	movs	r2, #0
 8002fee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f7ff ff9b 	bl	8002f3c <I2C_TreatErrorCallback>
}
 8003006:	bf00      	nop
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	603b      	str	r3, [r7, #0]
 800301a:	4613      	mov	r3, r2
 800301c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800301e:	e03b      	b.n	8003098 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	6839      	ldr	r1, [r7, #0]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f8d5 	bl	80031d4 <I2C_IsErrorOccurred>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e041      	b.n	80030b8 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800303a:	d02d      	beq.n	8003098 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303c:	f7fe fbae 	bl	800179c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d302      	bcc.n	8003052 <I2C_WaitOnFlagUntilTimeout+0x44>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d122      	bne.n	8003098 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699a      	ldr	r2, [r3, #24]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4013      	ands	r3, r2
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	429a      	cmp	r2, r3
 8003060:	bf0c      	ite	eq
 8003062:	2301      	moveq	r3, #1
 8003064:	2300      	movne	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	429a      	cmp	r2, r3
 800306e:	d113      	bne.n	8003098 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e00f      	b.n	80030b8 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4013      	ands	r3, r2
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d0b4      	beq.n	8003020 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030cc:	e033      	b.n	8003136 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f87e 	bl	80031d4 <I2C_IsErrorOccurred>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e031      	b.n	8003146 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030e8:	d025      	beq.n	8003136 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7fe fb57 	bl	800179c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d11a      	bne.n	8003136 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b02      	cmp	r3, #2
 800310c:	d013      	beq.n	8003136 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003112:	f043 0220 	orr.w	r2, r3, #32
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e007      	b.n	8003146 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b02      	cmp	r3, #2
 8003142:	d1c4      	bne.n	80030ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800315a:	e02f      	b.n	80031bc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f837 	bl	80031d4 <I2C_IsErrorOccurred>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e02d      	b.n	80031cc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003170:	f7fe fb14 	bl	800179c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	429a      	cmp	r2, r3
 800317e:	d302      	bcc.n	8003186 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d11a      	bne.n	80031bc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b20      	cmp	r3, #32
 8003192:	d013      	beq.n	80031bc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e007      	b.n	80031cc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d1c8      	bne.n	800315c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	@ 0x28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d068      	beq.n	80032d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2210      	movs	r2, #16
 8003206:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003208:	e049      	b.n	800329e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003210:	d045      	beq.n	800329e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003212:	f7fe fac3 	bl	800179c <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	429a      	cmp	r2, r3
 8003220:	d302      	bcc.n	8003228 <I2C_IsErrorOccurred+0x54>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d13a      	bne.n	800329e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003232:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800323a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800324a:	d121      	bne.n	8003290 <I2C_IsErrorOccurred+0xbc>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003252:	d01d      	beq.n	8003290 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	2b20      	cmp	r3, #32
 8003258:	d01a      	beq.n	8003290 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003268:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800326a:	f7fe fa97 	bl	800179c <HAL_GetTick>
 800326e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003270:	e00e      	b.n	8003290 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003272:	f7fe fa93 	bl	800179c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b19      	cmp	r3, #25
 800327e:	d907      	bls.n	8003290 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	f043 0320 	orr.w	r3, r3, #32
 8003286:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800328e:	e006      	b.n	800329e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b20      	cmp	r3, #32
 800329c:	d1e9      	bne.n	8003272 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d003      	beq.n	80032b4 <I2C_IsErrorOccurred+0xe0>
 80032ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0aa      	beq.n	800320a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d103      	bne.n	80032c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2220      	movs	r2, #32
 80032c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	f043 0304 	orr.w	r3, r3, #4
 80032ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00b      	beq.n	80032fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00b      	beq.n	800331e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	f043 0308 	orr.w	r3, r3, #8
 800330c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003316:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00b      	beq.n	8003340 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003338:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01c      	beq.n	8003382 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7ff fe1e 	bl	8002f8a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4b0d      	ldr	r3, [pc, #52]	@ (8003390 <I2C_IsErrorOccurred+0x1bc>)
 800335a:	400b      	ands	r3, r1
 800335c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	431a      	orrs	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003382:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003386:	4618      	mov	r0, r3
 8003388:	3728      	adds	r7, #40	@ 0x28
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	fe00e800 	.word	0xfe00e800

08003394 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	817b      	strh	r3, [r7, #10]
 80033a2:	4613      	mov	r3, r2
 80033a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033ac:	7a7b      	ldrb	r3, [r7, #9]
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	4313      	orrs	r3, r2
 80033be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	0d5b      	lsrs	r3, r3, #21
 80033ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80033d2:	4b08      	ldr	r3, [pc, #32]	@ (80033f4 <I2C_TransferConfig+0x60>)
 80033d4:	430b      	orrs	r3, r1
 80033d6:	43db      	mvns	r3, r3
 80033d8:	ea02 0103 	and.w	r1, r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	03ff63ff 	.word	0x03ff63ff

080033f8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003408:	887b      	ldrh	r3, [r7, #2]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00f      	beq.n	8003432 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003418:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003420:	b2db      	uxtb	r3, r3
 8003422:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003426:	2b28      	cmp	r3, #40	@ 0x28
 8003428:	d003      	beq.n	8003432 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003430:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003432:	887b      	ldrh	r3, [r7, #2]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00f      	beq.n	800345c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003442:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003450:	2b28      	cmp	r3, #40	@ 0x28
 8003452:	d003      	beq.n	800345c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800345a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800345c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003460:	2b00      	cmp	r3, #0
 8003462:	da03      	bge.n	800346c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800346a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800346c:	887b      	ldrh	r3, [r7, #2]
 800346e:	2b10      	cmp	r3, #16
 8003470:	d103      	bne.n	800347a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003478:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800347a:	887b      	ldrh	r3, [r7, #2]
 800347c:	2b20      	cmp	r3, #32
 800347e:	d103      	bne.n	8003488 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f043 0320 	orr.w	r3, r3, #32
 8003486:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003488:	887b      	ldrh	r3, [r7, #2]
 800348a:	2b40      	cmp	r3, #64	@ 0x40
 800348c:	d103      	bne.n	8003496 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003494:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6819      	ldr	r1, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	43da      	mvns	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	400a      	ands	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d138      	bne.n	800353c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e032      	b.n	800353e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2224      	movs	r2, #36	@ 0x24
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003506:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6819      	ldr	r1, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	e000      	b.n	800353e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800353c:	2302      	movs	r3, #2
  }
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b20      	cmp	r3, #32
 800355e:	d139      	bne.n	80035d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800356a:	2302      	movs	r3, #2
 800356c:	e033      	b.n	80035d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2224      	movs	r2, #36	@ 0x24
 800357a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800359c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e000      	b.n	80035d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
  }
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035e8:	4b05      	ldr	r3, [pc, #20]	@ (8003600 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a04      	ldr	r2, [pc, #16]	@ (8003600 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f2:	6013      	str	r3, [r2, #0]
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40007000 	.word	0x40007000

08003604 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800360c:	2300      	movs	r3, #0
 800360e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e291      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8087 	beq.w	8003736 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003628:	4b96      	ldr	r3, [pc, #600]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 030c 	and.w	r3, r3, #12
 8003630:	2b04      	cmp	r3, #4
 8003632:	d00c      	beq.n	800364e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003634:	4b93      	ldr	r3, [pc, #588]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 030c 	and.w	r3, r3, #12
 800363c:	2b08      	cmp	r3, #8
 800363e:	d112      	bne.n	8003666 <HAL_RCC_OscConfig+0x62>
 8003640:	4b90      	ldr	r3, [pc, #576]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003648:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800364c:	d10b      	bne.n	8003666 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364e:	4b8d      	ldr	r3, [pc, #564]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d06c      	beq.n	8003734 <HAL_RCC_OscConfig+0x130>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d168      	bne.n	8003734 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e26b      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800366e:	d106      	bne.n	800367e <HAL_RCC_OscConfig+0x7a>
 8003670:	4b84      	ldr	r3, [pc, #528]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a83      	ldr	r2, [pc, #524]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	e02e      	b.n	80036dc <HAL_RCC_OscConfig+0xd8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x9c>
 8003686:	4b7f      	ldr	r3, [pc, #508]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a7e      	ldr	r2, [pc, #504]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 800368c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	4b7c      	ldr	r3, [pc, #496]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7b      	ldr	r2, [pc, #492]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003698:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e01d      	b.n	80036dc <HAL_RCC_OscConfig+0xd8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0xc0>
 80036aa:	4b76      	ldr	r3, [pc, #472]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a75      	ldr	r2, [pc, #468]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b73      	ldr	r3, [pc, #460]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a72      	ldr	r2, [pc, #456]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e00b      	b.n	80036dc <HAL_RCC_OscConfig+0xd8>
 80036c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a6b      	ldr	r2, [pc, #428]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80036d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe f85a 	bl	800179c <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ec:	f7fe f856 	bl	800179c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	@ 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e21f      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fe:	4b61      	ldr	r3, [pc, #388]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0xe8>
 800370a:	e014      	b.n	8003736 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fe f846 	bl	800179c <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003714:	f7fe f842 	bl	800179c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	@ 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e20b      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003726:	4b57      	ldr	r3, [pc, #348]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x110>
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d069      	beq.n	8003816 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003742:	4b50      	ldr	r3, [pc, #320]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374e:	4b4d      	ldr	r3, [pc, #308]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	2b08      	cmp	r3, #8
 8003758:	d11c      	bne.n	8003794 <HAL_RCC_OscConfig+0x190>
 800375a:	4b4a      	ldr	r3, [pc, #296]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d116      	bne.n	8003794 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003766:	4b47      	ldr	r3, [pc, #284]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <HAL_RCC_OscConfig+0x17a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d001      	beq.n	800377e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e1df      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377e:	4b41      	ldr	r3, [pc, #260]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	493d      	ldr	r1, [pc, #244]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003792:	e040      	b.n	8003816 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d023      	beq.n	80037e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800379c:	4b39      	ldr	r3, [pc, #228]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a38      	ldr	r2, [pc, #224]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fd fff8 	bl	800179c <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b0:	f7fd fff4 	bl	800179c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e1bd      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c2:	4b30      	ldr	r3, [pc, #192]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4929      	ldr	r1, [pc, #164]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
 80037e2:	e018      	b.n	8003816 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e4:	4b27      	ldr	r3, [pc, #156]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a26      	ldr	r2, [pc, #152]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fd ffd4 	bl	800179c <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f8:	f7fd ffd0 	bl	800179c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e199      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380a:	4b1e      	ldr	r3, [pc, #120]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d038      	beq.n	8003894 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d019      	beq.n	800385e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800382a:	4b16      	ldr	r3, [pc, #88]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 800382c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382e:	4a15      	ldr	r2, [pc, #84]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003836:	f7fd ffb1 	bl	800179c <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800383e:	f7fd ffad 	bl	800179c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e176      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003850:	4b0c      	ldr	r3, [pc, #48]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x23a>
 800385c:	e01a      	b.n	8003894 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385e:	4b09      	ldr	r3, [pc, #36]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003862:	4a08      	ldr	r2, [pc, #32]	@ (8003884 <HAL_RCC_OscConfig+0x280>)
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fd ff97 	bl	800179c <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003870:	e00a      	b.n	8003888 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003872:	f7fd ff93 	bl	800179c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d903      	bls.n	8003888 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e15c      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>
 8003884:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003888:	4b91      	ldr	r3, [pc, #580]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 800388a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1ee      	bne.n	8003872 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80a4 	beq.w	80039ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a2:	4b8b      	ldr	r3, [pc, #556]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10d      	bne.n	80038ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	4b88      	ldr	r3, [pc, #544]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	4a87      	ldr	r2, [pc, #540]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 80038b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ba:	4b85      	ldr	r3, [pc, #532]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c6:	2301      	movs	r3, #1
 80038c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ca:	4b82      	ldr	r3, [pc, #520]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d118      	bne.n	8003908 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038d6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a7e      	ldr	r2, [pc, #504]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 80038dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e2:	f7fd ff5b 	bl	800179c <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ea:	f7fd ff57 	bl	800179c <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b64      	cmp	r3, #100	@ 0x64
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e120      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fc:	4b75      	ldr	r3, [pc, #468]	@ (8003ad4 <HAL_RCC_OscConfig+0x4d0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d106      	bne.n	800391e <HAL_RCC_OscConfig+0x31a>
 8003910:	4b6f      	ldr	r3, [pc, #444]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003914:	4a6e      	ldr	r2, [pc, #440]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	6713      	str	r3, [r2, #112]	@ 0x70
 800391c:	e02d      	b.n	800397a <HAL_RCC_OscConfig+0x376>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0x33c>
 8003926:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392a:	4a69      	ldr	r2, [pc, #420]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	6713      	str	r3, [r2, #112]	@ 0x70
 8003932:	4b67      	ldr	r3, [pc, #412]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003936:	4a66      	ldr	r2, [pc, #408]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003938:	f023 0304 	bic.w	r3, r3, #4
 800393c:	6713      	str	r3, [r2, #112]	@ 0x70
 800393e:	e01c      	b.n	800397a <HAL_RCC_OscConfig+0x376>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b05      	cmp	r3, #5
 8003946:	d10c      	bne.n	8003962 <HAL_RCC_OscConfig+0x35e>
 8003948:	4b61      	ldr	r3, [pc, #388]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394c:	4a60      	ldr	r2, [pc, #384]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 800394e:	f043 0304 	orr.w	r3, r3, #4
 8003952:	6713      	str	r3, [r2, #112]	@ 0x70
 8003954:	4b5e      	ldr	r3, [pc, #376]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003958:	4a5d      	ldr	r2, [pc, #372]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003960:	e00b      	b.n	800397a <HAL_RCC_OscConfig+0x376>
 8003962:	4b5b      	ldr	r3, [pc, #364]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003966:	4a5a      	ldr	r2, [pc, #360]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	6713      	str	r3, [r2, #112]	@ 0x70
 800396e:	4b58      	ldr	r3, [pc, #352]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003972:	4a57      	ldr	r2, [pc, #348]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003974:	f023 0304 	bic.w	r3, r3, #4
 8003978:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d015      	beq.n	80039ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003982:	f7fd ff0b 	bl	800179c <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003988:	e00a      	b.n	80039a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398a:	f7fd ff07 	bl	800179c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003998:	4293      	cmp	r3, r2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e0ce      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a0:	4b4b      	ldr	r3, [pc, #300]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ee      	beq.n	800398a <HAL_RCC_OscConfig+0x386>
 80039ac:	e014      	b.n	80039d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fd fef5 	bl	800179c <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fd fef1 	bl	800179c <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e0b8      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039cc:	4b40      	ldr	r3, [pc, #256]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1ee      	bne.n	80039b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d105      	bne.n	80039ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039de:	4b3c      	ldr	r3, [pc, #240]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	4a3b      	ldr	r2, [pc, #236]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 80039e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80a4 	beq.w	8003b3c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039f4:	4b36      	ldr	r3, [pc, #216]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d06b      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d149      	bne.n	8003a9c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a08:	4b31      	ldr	r3, [pc, #196]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a30      	ldr	r2, [pc, #192]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003a0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fd fec2 	bl	800179c <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1c:	f7fd febe 	bl	800179c <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e087      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2e:	4b28      	ldr	r3, [pc, #160]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	019b      	lsls	r3, r3, #6
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	3b01      	subs	r3, #1
 8003a54:	041b      	lsls	r3, r3, #16
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	061b      	lsls	r3, r3, #24
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003a62:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a66:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a68:	4b19      	ldr	r3, [pc, #100]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a18      	ldr	r2, [pc, #96]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fd fe92 	bl	800179c <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7c:	f7fd fe8e 	bl	800179c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e057      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8e:	4b10      	ldr	r3, [pc, #64]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x478>
 8003a9a:	e04f      	b.n	8003b3c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fd fe78 	bl	800179c <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fd fe74 	bl	800179c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e03d      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac2:	4b03      	ldr	r3, [pc, #12]	@ (8003ad0 <HAL_RCC_OscConfig+0x4cc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x4ac>
 8003ace:	e035      	b.n	8003b3c <HAL_RCC_OscConfig+0x538>
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b48 <HAL_RCC_OscConfig+0x544>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d028      	beq.n	8003b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d121      	bne.n	8003b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d11a      	bne.n	8003b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b08:	4013      	ands	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d111      	bne.n	8003b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	3b01      	subs	r3, #1
 8003b22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d107      	bne.n	8003b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800

08003b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0d0      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b64:	4b6a      	ldr	r3, [pc, #424]	@ (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d910      	bls.n	8003b94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b67      	ldr	r3, [pc, #412]	@ (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 020f 	bic.w	r2, r3, #15
 8003b7a:	4965      	ldr	r1, [pc, #404]	@ (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b63      	ldr	r3, [pc, #396]	@ (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0b8      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d020      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bac:	4b59      	ldr	r3, [pc, #356]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	4a58      	ldr	r2, [pc, #352]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc4:	4b53      	ldr	r3, [pc, #332]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a52      	ldr	r2, [pc, #328]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003bca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd0:	4b50      	ldr	r3, [pc, #320]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	494d      	ldr	r1, [pc, #308]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d040      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d107      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf6:	4b47      	ldr	r3, [pc, #284]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d115      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e07f      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d107      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0e:	4b41      	ldr	r3, [pc, #260]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e073      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e06b      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c2e:	4b39      	ldr	r3, [pc, #228]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f023 0203 	bic.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4936      	ldr	r1, [pc, #216]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c40:	f7fd fdac 	bl	800179c <HAL_GetTick>
 8003c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c46:	e00a      	b.n	8003c5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c48:	f7fd fda8 	bl	800179c <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e053      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 020c 	and.w	r2, r3, #12
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d1eb      	bne.n	8003c48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c70:	4b27      	ldr	r3, [pc, #156]	@ (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d210      	bcs.n	8003ca0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7e:	4b24      	ldr	r3, [pc, #144]	@ (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 020f 	bic.w	r2, r3, #15
 8003c86:	4922      	ldr	r1, [pc, #136]	@ (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8e:	4b20      	ldr	r3, [pc, #128]	@ (8003d10 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e032      	b.n	8003d06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cac:	4b19      	ldr	r3, [pc, #100]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4916      	ldr	r1, [pc, #88]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cca:	4b12      	ldr	r3, [pc, #72]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	490e      	ldr	r1, [pc, #56]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cde:	f000 f821 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	490a      	ldr	r1, [pc, #40]	@ (8003d18 <HAL_RCC_ClockConfig+0x1cc>)
 8003cf0:	5ccb      	ldrb	r3, [r1, r3]
 8003cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf6:	4a09      	ldr	r2, [pc, #36]	@ (8003d1c <HAL_RCC_ClockConfig+0x1d0>)
 8003cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cfa:	4b09      	ldr	r3, [pc, #36]	@ (8003d20 <HAL_RCC_ClockConfig+0x1d4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fd fd08 	bl	8001714 <HAL_InitTick>

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023c00 	.word	0x40023c00
 8003d14:	40023800 	.word	0x40023800
 8003d18:	08008030 	.word	0x08008030
 8003d1c:	20000000 	.word	0x20000000
 8003d20:	20000004 	.word	0x20000004

08003d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d28:	b094      	sub	sp, #80	@ 0x50
 8003d2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d30:	2300      	movs	r3, #0
 8003d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d34:	2300      	movs	r3, #0
 8003d36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d3c:	4b79      	ldr	r3, [pc, #484]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d00d      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x40>
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	f200 80e1 	bhi.w	8003f10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0x34>
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d003      	beq.n	8003d5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d56:	e0db      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d58:	4b73      	ldr	r3, [pc, #460]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d5c:	e0db      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d5e:	4b73      	ldr	r3, [pc, #460]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0x208>)
 8003d60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d62:	e0d8      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d64:	4b6f      	ldr	r3, [pc, #444]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d063      	beq.n	8003e42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	099b      	lsrs	r3, r3, #6
 8003d80:	2200      	movs	r2, #0
 8003d82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d8e:	2300      	movs	r3, #0
 8003d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d96:	4622      	mov	r2, r4
 8003d98:	462b      	mov	r3, r5
 8003d9a:	f04f 0000 	mov.w	r0, #0
 8003d9e:	f04f 0100 	mov.w	r1, #0
 8003da2:	0159      	lsls	r1, r3, #5
 8003da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da8:	0150      	lsls	r0, r2, #5
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4621      	mov	r1, r4
 8003db0:	1a51      	subs	r1, r2, r1
 8003db2:	6139      	str	r1, [r7, #16]
 8003db4:	4629      	mov	r1, r5
 8003db6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dc8:	4659      	mov	r1, fp
 8003dca:	018b      	lsls	r3, r1, #6
 8003dcc:	4651      	mov	r1, sl
 8003dce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dd2:	4651      	mov	r1, sl
 8003dd4:	018a      	lsls	r2, r1, #6
 8003dd6:	4651      	mov	r1, sl
 8003dd8:	ebb2 0801 	subs.w	r8, r2, r1
 8003ddc:	4659      	mov	r1, fp
 8003dde:	eb63 0901 	sbc.w	r9, r3, r1
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003df6:	4690      	mov	r8, r2
 8003df8:	4699      	mov	r9, r3
 8003dfa:	4623      	mov	r3, r4
 8003dfc:	eb18 0303 	adds.w	r3, r8, r3
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	462b      	mov	r3, r5
 8003e04:	eb49 0303 	adc.w	r3, r9, r3
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e16:	4629      	mov	r1, r5
 8003e18:	024b      	lsls	r3, r1, #9
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e20:	4621      	mov	r1, r4
 8003e22:	024a      	lsls	r2, r1, #9
 8003e24:	4610      	mov	r0, r2
 8003e26:	4619      	mov	r1, r3
 8003e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e34:	f7fc ff30 	bl	8000c98 <__aeabi_uldivmod>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e40:	e058      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e42:	4b38      	ldr	r3, [pc, #224]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	099b      	lsrs	r3, r3, #6
 8003e48:	2200      	movs	r2, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e52:	623b      	str	r3, [r7, #32]
 8003e54:	2300      	movs	r3, #0
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	464b      	mov	r3, r9
 8003e60:	f04f 0000 	mov.w	r0, #0
 8003e64:	f04f 0100 	mov.w	r1, #0
 8003e68:	0159      	lsls	r1, r3, #5
 8003e6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e6e:	0150      	lsls	r0, r2, #5
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4641      	mov	r1, r8
 8003e76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e7a:	4649      	mov	r1, r9
 8003e7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e94:	ebb2 040a 	subs.w	r4, r2, sl
 8003e98:	eb63 050b 	sbc.w	r5, r3, fp
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	00eb      	lsls	r3, r5, #3
 8003ea6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eaa:	00e2      	lsls	r2, r4, #3
 8003eac:	4614      	mov	r4, r2
 8003eae:	461d      	mov	r5, r3
 8003eb0:	4643      	mov	r3, r8
 8003eb2:	18e3      	adds	r3, r4, r3
 8003eb4:	603b      	str	r3, [r7, #0]
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	eb45 0303 	adc.w	r3, r5, r3
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eca:	4629      	mov	r1, r5
 8003ecc:	028b      	lsls	r3, r1, #10
 8003ece:	4621      	mov	r1, r4
 8003ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	028a      	lsls	r2, r1, #10
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
 8003edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ede:	2200      	movs	r2, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	61fa      	str	r2, [r7, #28]
 8003ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee8:	f7fc fed6 	bl	8000c98 <__aeabi_uldivmod>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	3301      	adds	r3, #1
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003f04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f0e:	e002      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f10:	4b05      	ldr	r3, [pc, #20]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3750      	adds	r7, #80	@ 0x50
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f22:	bf00      	nop
 8003f24:	40023800 	.word	0x40023800
 8003f28:	00f42400 	.word	0x00f42400
 8003f2c:	007a1200 	.word	0x007a1200

08003f30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f34:	4b03      	ldr	r3, [pc, #12]	@ (8003f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000000 	.word	0x20000000

08003f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f4c:	f7ff fff0 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8003f50:	4602      	mov	r2, r0
 8003f52:	4b05      	ldr	r3, [pc, #20]	@ (8003f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	0a9b      	lsrs	r3, r3, #10
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	4903      	ldr	r1, [pc, #12]	@ (8003f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f5e:	5ccb      	ldrb	r3, [r1, r3]
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	08008040 	.word	0x08008040

08003f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f74:	f7ff ffdc 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	0b5b      	lsrs	r3, r3, #13
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	4903      	ldr	r1, [pc, #12]	@ (8003f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f86:	5ccb      	ldrb	r3, [r1, r3]
 8003f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40023800 	.word	0x40023800
 8003f94:	08008040 	.word	0x08008040

08003f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d012      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fbc:	4b65      	ldr	r3, [pc, #404]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a64      	ldr	r2, [pc, #400]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fc2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003fc6:	6093      	str	r3, [r2, #8]
 8003fc8:	4b62      	ldr	r3, [pc, #392]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	4960      	ldr	r1, [pc, #384]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d017      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fee:	4b59      	ldr	r3, [pc, #356]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ff4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffc:	4955      	ldr	r1, [pc, #340]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004008:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800400c:	d101      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800400e:	2301      	movs	r3, #1
 8004010:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d017      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800402a:	4b4a      	ldr	r3, [pc, #296]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800402c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004030:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004038:	4946      	ldr	r1, [pc, #280]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004044:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004048:	d101      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800404a:	2301      	movs	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8004056:	2301      	movs	r3, #1
 8004058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 808b 	beq.w	800417e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004068:	4b3a      	ldr	r3, [pc, #232]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	4a39      	ldr	r2, [pc, #228]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800406e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004072:	6413      	str	r3, [r2, #64]	@ 0x40
 8004074:	4b37      	ldr	r3, [pc, #220]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004080:	4b35      	ldr	r3, [pc, #212]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a34      	ldr	r2, [pc, #208]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800408a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7fd fb86 	bl	800179c <HAL_GetTick>
 8004090:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004094:	f7fd fb82 	bl	800179c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	@ 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e2bc      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040b2:	4b28      	ldr	r3, [pc, #160]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d035      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d02e      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040d0:	4b20      	ldr	r3, [pc, #128]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040da:	4b1e      	ldr	r3, [pc, #120]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040de:	4a1d      	ldr	r2, [pc, #116]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80040f2:	4a18      	ldr	r2, [pc, #96]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040f8:	4b16      	ldr	r3, [pc, #88]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	d114      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd fb4a 	bl	800179c <HAL_GetTick>
 8004108:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410a:	e00a      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410c:	f7fd fb46 	bl	800179c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e27e      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004122:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0ee      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004136:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800413a:	d111      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800413c:	4b05      	ldr	r3, [pc, #20]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004148:	4b04      	ldr	r3, [pc, #16]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800414a:	400b      	ands	r3, r1
 800414c:	4901      	ldr	r1, [pc, #4]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
 8004152:	e00b      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004154:	40023800 	.word	0x40023800
 8004158:	40007000 	.word	0x40007000
 800415c:	0ffffcff 	.word	0x0ffffcff
 8004160:	4ba4      	ldr	r3, [pc, #656]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4aa3      	ldr	r2, [pc, #652]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004166:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800416a:	6093      	str	r3, [r2, #8]
 800416c:	4ba1      	ldr	r3, [pc, #644]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800416e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004178:	499e      	ldr	r1, [pc, #632]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	d010      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800418a:	4b9a      	ldr	r3, [pc, #616]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800418c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004190:	4a98      	ldr	r2, [pc, #608]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004196:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800419a:	4b96      	ldr	r3, [pc, #600]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800419c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a4:	4993      	ldr	r1, [pc, #588]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041b8:	4b8e      	ldr	r3, [pc, #568]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c6:	498b      	ldr	r1, [pc, #556]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041da:	4b86      	ldr	r3, [pc, #536]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e8:	4982      	ldr	r1, [pc, #520]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041fc:	4b7d      	ldr	r3, [pc, #500]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004202:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800420a:	497a      	ldr	r1, [pc, #488]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800421e:	4b75      	ldr	r3, [pc, #468]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004224:	f023 0203 	bic.w	r2, r3, #3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422c:	4971      	ldr	r1, [pc, #452]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004240:	4b6c      	ldr	r3, [pc, #432]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004246:	f023 020c 	bic.w	r2, r3, #12
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	4969      	ldr	r1, [pc, #420]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004262:	4b64      	ldr	r3, [pc, #400]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004268:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004270:	4960      	ldr	r1, [pc, #384]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004284:	4b5b      	ldr	r3, [pc, #364]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004292:	4958      	ldr	r1, [pc, #352]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042a6:	4b53      	ldr	r3, [pc, #332]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b4:	494f      	ldr	r1, [pc, #316]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80042c8:	4b4a      	ldr	r3, [pc, #296]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d6:	4947      	ldr	r1, [pc, #284]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80042ea:	4b42      	ldr	r3, [pc, #264]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f8:	493e      	ldr	r1, [pc, #248]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800430c:	4b39      	ldr	r3, [pc, #228]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004312:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431a:	4936      	ldr	r1, [pc, #216]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d011      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800432e:	4b31      	ldr	r3, [pc, #196]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004334:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800433c:	492d      	ldr	r1, [pc, #180]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800434c:	d101      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800434e:	2301      	movs	r3, #1
 8004350:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800435e:	4b25      	ldr	r3, [pc, #148]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004364:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800436c:	4921      	ldr	r1, [pc, #132]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004380:	4b1c      	ldr	r3, [pc, #112]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004386:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800438e:	4919      	ldr	r1, [pc, #100]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80043a2:	4b14      	ldr	r3, [pc, #80]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043b0:	4910      	ldr	r1, [pc, #64]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d006      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x434>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 809d 	beq.w	8004506 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043cc:	4b09      	ldr	r3, [pc, #36]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a08      	ldr	r2, [pc, #32]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80043d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d8:	f7fd f9e0 	bl	800179c <HAL_GetTick>
 80043dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043de:	e00b      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043e0:	f7fd f9dc 	bl	800179c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	@ 0x64
 80043ec:	d904      	bls.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e116      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80043f2:	bf00      	nop
 80043f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043f8:	4b8b      	ldr	r3, [pc, #556]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1ed      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d017      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d113      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004418:	4b83      	ldr	r3, [pc, #524]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800441a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800441e:	0e1b      	lsrs	r3, r3, #24
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	019a      	lsls	r2, r3, #6
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	061b      	lsls	r3, r3, #24
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	071b      	lsls	r3, r3, #28
 8004438:	497b      	ldr	r1, [pc, #492]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d004      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004450:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004454:	d00a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800445e:	2b00      	cmp	r3, #0
 8004460:	d024      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004466:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800446a:	d11f      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800446c:	4b6e      	ldr	r3, [pc, #440]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800446e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004472:	0f1b      	lsrs	r3, r3, #28
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	019a      	lsls	r2, r3, #6
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	061b      	lsls	r3, r3, #24
 8004486:	431a      	orrs	r2, r3
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	071b      	lsls	r3, r3, #28
 800448c:	4966      	ldr	r1, [pc, #408]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004494:	4b64      	ldr	r3, [pc, #400]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800449a:	f023 021f 	bic.w	r2, r3, #31
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	4960      	ldr	r1, [pc, #384]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00d      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	019a      	lsls	r2, r3, #6
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	061b      	lsls	r3, r3, #24
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	071b      	lsls	r3, r3, #28
 80044cc:	4956      	ldr	r1, [pc, #344]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044d4:	4b54      	ldr	r3, [pc, #336]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a53      	ldr	r2, [pc, #332]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e0:	f7fd f95c 	bl	800179c <HAL_GetTick>
 80044e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044e8:	f7fd f958 	bl	800179c <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	@ 0x64
 80044f4:	d901      	bls.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e092      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b01      	cmp	r3, #1
 800450a:	f040 8088 	bne.w	800461e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800450e:	4b46      	ldr	r3, [pc, #280]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a45      	ldr	r2, [pc, #276]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004514:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800451a:	f7fd f93f 	bl	800179c <HAL_GetTick>
 800451e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004522:	f7fd f93b 	bl	800179c <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b64      	cmp	r3, #100	@ 0x64
 800452e:	d901      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e075      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004534:	4b3c      	ldr	r3, [pc, #240]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800453c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004540:	d0ef      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800455e:	2b00      	cmp	r3, #0
 8004560:	d024      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004566:	2b00      	cmp	r3, #0
 8004568:	d120      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800456a:	4b2f      	ldr	r3, [pc, #188]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004570:	0c1b      	lsrs	r3, r3, #16
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	019a      	lsls	r2, r3, #6
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	041b      	lsls	r3, r3, #16
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	4927      	ldr	r1, [pc, #156]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004592:	4b25      	ldr	r3, [pc, #148]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004598:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	4920      	ldr	r1, [pc, #128]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d018      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x652>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045c0:	d113      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045c2:	4b19      	ldr	r3, [pc, #100]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c8:	0e1b      	lsrs	r3, r3, #24
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	019a      	lsls	r2, r3, #6
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	041b      	lsls	r3, r3, #16
 80045dc:	431a      	orrs	r2, r3
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	061b      	lsls	r3, r3, #24
 80045e2:	4911      	ldr	r1, [pc, #68]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80045f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f6:	f7fd f8d1 	bl	800179c <HAL_GetTick>
 80045fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045fe:	f7fd f8cd 	bl	800179c <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b64      	cmp	r3, #100	@ 0x64
 800460a:	d901      	bls.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e007      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004610:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004618:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800461c:	d1ef      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40023800 	.word	0x40023800

0800462c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e040      	b.n	80046c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fc feae 	bl	80013b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2224      	movs	r2, #36	@ 0x24
 8004658:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0201 	bic.w	r2, r2, #1
 8004668:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fb16 	bl	8004ca4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f8af 	bl	80047dc <UART_SetConfig>
 800467e:	4603      	mov	r3, r0
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e01b      	b.n	80046c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004696:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fb95 	bl	8004de8 <UART_CheckIdleState>
 80046be:	4603      	mov	r3, r0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08a      	sub	sp, #40	@ 0x28
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	4613      	mov	r3, r2
 80046d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d177      	bne.n	80047d0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_UART_Transmit+0x24>
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e070      	b.n	80047d2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2221      	movs	r2, #33	@ 0x21
 80046fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046fe:	f7fd f84d 	bl	800179c <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	88fa      	ldrh	r2, [r7, #6]
 8004708:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	88fa      	ldrh	r2, [r7, #6]
 8004710:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800471c:	d108      	bne.n	8004730 <HAL_UART_Transmit+0x68>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d104      	bne.n	8004730 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	e003      	b.n	8004738 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004734:	2300      	movs	r3, #0
 8004736:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004738:	e02f      	b.n	800479a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2200      	movs	r2, #0
 8004742:	2180      	movs	r1, #128	@ 0x80
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 fba6 	bl	8004e96 <UART_WaitOnFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d004      	beq.n	800475a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e03b      	b.n	80047d2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10b      	bne.n	8004778 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800476e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	3302      	adds	r3, #2
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	e007      	b.n	8004788 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	781a      	ldrb	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	3301      	adds	r3, #1
 8004786:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1c9      	bne.n	800473a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2200      	movs	r2, #0
 80047ae:	2140      	movs	r1, #64	@ 0x40
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fb70 	bl	8004e96 <UART_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e005      	b.n	80047d2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e000      	b.n	80047d2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80047d0:	2302      	movs	r3, #2
  }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4ba6      	ldr	r3, [pc, #664]	@ (8004aa0 <UART_SetConfig+0x2c4>)
 8004808:	4013      	ands	r3, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	6979      	ldr	r1, [r7, #20]
 8004810:	430b      	orrs	r3, r1
 8004812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	430a      	orrs	r2, r1
 800484c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a94      	ldr	r2, [pc, #592]	@ (8004aa4 <UART_SetConfig+0x2c8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d120      	bne.n	800489a <UART_SetConfig+0xbe>
 8004858:	4b93      	ldr	r3, [pc, #588]	@ (8004aa8 <UART_SetConfig+0x2cc>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b03      	cmp	r3, #3
 8004864:	d816      	bhi.n	8004894 <UART_SetConfig+0xb8>
 8004866:	a201      	add	r2, pc, #4	@ (adr r2, 800486c <UART_SetConfig+0x90>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	0800487d 	.word	0x0800487d
 8004870:	08004889 	.word	0x08004889
 8004874:	08004883 	.word	0x08004883
 8004878:	0800488f 	.word	0x0800488f
 800487c:	2301      	movs	r3, #1
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e150      	b.n	8004b24 <UART_SetConfig+0x348>
 8004882:	2302      	movs	r3, #2
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e14d      	b.n	8004b24 <UART_SetConfig+0x348>
 8004888:	2304      	movs	r3, #4
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e14a      	b.n	8004b24 <UART_SetConfig+0x348>
 800488e:	2308      	movs	r3, #8
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e147      	b.n	8004b24 <UART_SetConfig+0x348>
 8004894:	2310      	movs	r3, #16
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e144      	b.n	8004b24 <UART_SetConfig+0x348>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a83      	ldr	r2, [pc, #524]	@ (8004aac <UART_SetConfig+0x2d0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d132      	bne.n	800490a <UART_SetConfig+0x12e>
 80048a4:	4b80      	ldr	r3, [pc, #512]	@ (8004aa8 <UART_SetConfig+0x2cc>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	2b0c      	cmp	r3, #12
 80048b0:	d828      	bhi.n	8004904 <UART_SetConfig+0x128>
 80048b2:	a201      	add	r2, pc, #4	@ (adr r2, 80048b8 <UART_SetConfig+0xdc>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048ed 	.word	0x080048ed
 80048bc:	08004905 	.word	0x08004905
 80048c0:	08004905 	.word	0x08004905
 80048c4:	08004905 	.word	0x08004905
 80048c8:	080048f9 	.word	0x080048f9
 80048cc:	08004905 	.word	0x08004905
 80048d0:	08004905 	.word	0x08004905
 80048d4:	08004905 	.word	0x08004905
 80048d8:	080048f3 	.word	0x080048f3
 80048dc:	08004905 	.word	0x08004905
 80048e0:	08004905 	.word	0x08004905
 80048e4:	08004905 	.word	0x08004905
 80048e8:	080048ff 	.word	0x080048ff
 80048ec:	2300      	movs	r3, #0
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e118      	b.n	8004b24 <UART_SetConfig+0x348>
 80048f2:	2302      	movs	r3, #2
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	e115      	b.n	8004b24 <UART_SetConfig+0x348>
 80048f8:	2304      	movs	r3, #4
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e112      	b.n	8004b24 <UART_SetConfig+0x348>
 80048fe:	2308      	movs	r3, #8
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	e10f      	b.n	8004b24 <UART_SetConfig+0x348>
 8004904:	2310      	movs	r3, #16
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e10c      	b.n	8004b24 <UART_SetConfig+0x348>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a68      	ldr	r2, [pc, #416]	@ (8004ab0 <UART_SetConfig+0x2d4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d120      	bne.n	8004956 <UART_SetConfig+0x17a>
 8004914:	4b64      	ldr	r3, [pc, #400]	@ (8004aa8 <UART_SetConfig+0x2cc>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800491e:	2b30      	cmp	r3, #48	@ 0x30
 8004920:	d013      	beq.n	800494a <UART_SetConfig+0x16e>
 8004922:	2b30      	cmp	r3, #48	@ 0x30
 8004924:	d814      	bhi.n	8004950 <UART_SetConfig+0x174>
 8004926:	2b20      	cmp	r3, #32
 8004928:	d009      	beq.n	800493e <UART_SetConfig+0x162>
 800492a:	2b20      	cmp	r3, #32
 800492c:	d810      	bhi.n	8004950 <UART_SetConfig+0x174>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <UART_SetConfig+0x15c>
 8004932:	2b10      	cmp	r3, #16
 8004934:	d006      	beq.n	8004944 <UART_SetConfig+0x168>
 8004936:	e00b      	b.n	8004950 <UART_SetConfig+0x174>
 8004938:	2300      	movs	r3, #0
 800493a:	77fb      	strb	r3, [r7, #31]
 800493c:	e0f2      	b.n	8004b24 <UART_SetConfig+0x348>
 800493e:	2302      	movs	r3, #2
 8004940:	77fb      	strb	r3, [r7, #31]
 8004942:	e0ef      	b.n	8004b24 <UART_SetConfig+0x348>
 8004944:	2304      	movs	r3, #4
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e0ec      	b.n	8004b24 <UART_SetConfig+0x348>
 800494a:	2308      	movs	r3, #8
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e0e9      	b.n	8004b24 <UART_SetConfig+0x348>
 8004950:	2310      	movs	r3, #16
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e0e6      	b.n	8004b24 <UART_SetConfig+0x348>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a56      	ldr	r2, [pc, #344]	@ (8004ab4 <UART_SetConfig+0x2d8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d120      	bne.n	80049a2 <UART_SetConfig+0x1c6>
 8004960:	4b51      	ldr	r3, [pc, #324]	@ (8004aa8 <UART_SetConfig+0x2cc>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004966:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800496a:	2bc0      	cmp	r3, #192	@ 0xc0
 800496c:	d013      	beq.n	8004996 <UART_SetConfig+0x1ba>
 800496e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004970:	d814      	bhi.n	800499c <UART_SetConfig+0x1c0>
 8004972:	2b80      	cmp	r3, #128	@ 0x80
 8004974:	d009      	beq.n	800498a <UART_SetConfig+0x1ae>
 8004976:	2b80      	cmp	r3, #128	@ 0x80
 8004978:	d810      	bhi.n	800499c <UART_SetConfig+0x1c0>
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <UART_SetConfig+0x1a8>
 800497e:	2b40      	cmp	r3, #64	@ 0x40
 8004980:	d006      	beq.n	8004990 <UART_SetConfig+0x1b4>
 8004982:	e00b      	b.n	800499c <UART_SetConfig+0x1c0>
 8004984:	2300      	movs	r3, #0
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e0cc      	b.n	8004b24 <UART_SetConfig+0x348>
 800498a:	2302      	movs	r3, #2
 800498c:	77fb      	strb	r3, [r7, #31]
 800498e:	e0c9      	b.n	8004b24 <UART_SetConfig+0x348>
 8004990:	2304      	movs	r3, #4
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e0c6      	b.n	8004b24 <UART_SetConfig+0x348>
 8004996:	2308      	movs	r3, #8
 8004998:	77fb      	strb	r3, [r7, #31]
 800499a:	e0c3      	b.n	8004b24 <UART_SetConfig+0x348>
 800499c:	2310      	movs	r3, #16
 800499e:	77fb      	strb	r3, [r7, #31]
 80049a0:	e0c0      	b.n	8004b24 <UART_SetConfig+0x348>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a44      	ldr	r2, [pc, #272]	@ (8004ab8 <UART_SetConfig+0x2dc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d125      	bne.n	80049f8 <UART_SetConfig+0x21c>
 80049ac:	4b3e      	ldr	r3, [pc, #248]	@ (8004aa8 <UART_SetConfig+0x2cc>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049ba:	d017      	beq.n	80049ec <UART_SetConfig+0x210>
 80049bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c0:	d817      	bhi.n	80049f2 <UART_SetConfig+0x216>
 80049c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049c6:	d00b      	beq.n	80049e0 <UART_SetConfig+0x204>
 80049c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049cc:	d811      	bhi.n	80049f2 <UART_SetConfig+0x216>
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <UART_SetConfig+0x1fe>
 80049d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049d6:	d006      	beq.n	80049e6 <UART_SetConfig+0x20a>
 80049d8:	e00b      	b.n	80049f2 <UART_SetConfig+0x216>
 80049da:	2300      	movs	r3, #0
 80049dc:	77fb      	strb	r3, [r7, #31]
 80049de:	e0a1      	b.n	8004b24 <UART_SetConfig+0x348>
 80049e0:	2302      	movs	r3, #2
 80049e2:	77fb      	strb	r3, [r7, #31]
 80049e4:	e09e      	b.n	8004b24 <UART_SetConfig+0x348>
 80049e6:	2304      	movs	r3, #4
 80049e8:	77fb      	strb	r3, [r7, #31]
 80049ea:	e09b      	b.n	8004b24 <UART_SetConfig+0x348>
 80049ec:	2308      	movs	r3, #8
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e098      	b.n	8004b24 <UART_SetConfig+0x348>
 80049f2:	2310      	movs	r3, #16
 80049f4:	77fb      	strb	r3, [r7, #31]
 80049f6:	e095      	b.n	8004b24 <UART_SetConfig+0x348>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a2f      	ldr	r2, [pc, #188]	@ (8004abc <UART_SetConfig+0x2e0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d125      	bne.n	8004a4e <UART_SetConfig+0x272>
 8004a02:	4b29      	ldr	r3, [pc, #164]	@ (8004aa8 <UART_SetConfig+0x2cc>)
 8004a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a10:	d017      	beq.n	8004a42 <UART_SetConfig+0x266>
 8004a12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a16:	d817      	bhi.n	8004a48 <UART_SetConfig+0x26c>
 8004a18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a1c:	d00b      	beq.n	8004a36 <UART_SetConfig+0x25a>
 8004a1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a22:	d811      	bhi.n	8004a48 <UART_SetConfig+0x26c>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <UART_SetConfig+0x254>
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a2c:	d006      	beq.n	8004a3c <UART_SetConfig+0x260>
 8004a2e:	e00b      	b.n	8004a48 <UART_SetConfig+0x26c>
 8004a30:	2301      	movs	r3, #1
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e076      	b.n	8004b24 <UART_SetConfig+0x348>
 8004a36:	2302      	movs	r3, #2
 8004a38:	77fb      	strb	r3, [r7, #31]
 8004a3a:	e073      	b.n	8004b24 <UART_SetConfig+0x348>
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	e070      	b.n	8004b24 <UART_SetConfig+0x348>
 8004a42:	2308      	movs	r3, #8
 8004a44:	77fb      	strb	r3, [r7, #31]
 8004a46:	e06d      	b.n	8004b24 <UART_SetConfig+0x348>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e06a      	b.n	8004b24 <UART_SetConfig+0x348>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac0 <UART_SetConfig+0x2e4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d138      	bne.n	8004aca <UART_SetConfig+0x2ee>
 8004a58:	4b13      	ldr	r3, [pc, #76]	@ (8004aa8 <UART_SetConfig+0x2cc>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004a62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a66:	d017      	beq.n	8004a98 <UART_SetConfig+0x2bc>
 8004a68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a6c:	d82a      	bhi.n	8004ac4 <UART_SetConfig+0x2e8>
 8004a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a72:	d00b      	beq.n	8004a8c <UART_SetConfig+0x2b0>
 8004a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a78:	d824      	bhi.n	8004ac4 <UART_SetConfig+0x2e8>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <UART_SetConfig+0x2aa>
 8004a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a82:	d006      	beq.n	8004a92 <UART_SetConfig+0x2b6>
 8004a84:	e01e      	b.n	8004ac4 <UART_SetConfig+0x2e8>
 8004a86:	2300      	movs	r3, #0
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	e04b      	b.n	8004b24 <UART_SetConfig+0x348>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e048      	b.n	8004b24 <UART_SetConfig+0x348>
 8004a92:	2304      	movs	r3, #4
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e045      	b.n	8004b24 <UART_SetConfig+0x348>
 8004a98:	2308      	movs	r3, #8
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e042      	b.n	8004b24 <UART_SetConfig+0x348>
 8004a9e:	bf00      	nop
 8004aa0:	efff69f3 	.word	0xefff69f3
 8004aa4:	40011000 	.word	0x40011000
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	40004400 	.word	0x40004400
 8004ab0:	40004800 	.word	0x40004800
 8004ab4:	40004c00 	.word	0x40004c00
 8004ab8:	40005000 	.word	0x40005000
 8004abc:	40011400 	.word	0x40011400
 8004ac0:	40007800 	.word	0x40007800
 8004ac4:	2310      	movs	r3, #16
 8004ac6:	77fb      	strb	r3, [r7, #31]
 8004ac8:	e02c      	b.n	8004b24 <UART_SetConfig+0x348>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a72      	ldr	r2, [pc, #456]	@ (8004c98 <UART_SetConfig+0x4bc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d125      	bne.n	8004b20 <UART_SetConfig+0x344>
 8004ad4:	4b71      	ldr	r3, [pc, #452]	@ (8004c9c <UART_SetConfig+0x4c0>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ada:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004ade:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ae2:	d017      	beq.n	8004b14 <UART_SetConfig+0x338>
 8004ae4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ae8:	d817      	bhi.n	8004b1a <UART_SetConfig+0x33e>
 8004aea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aee:	d00b      	beq.n	8004b08 <UART_SetConfig+0x32c>
 8004af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004af4:	d811      	bhi.n	8004b1a <UART_SetConfig+0x33e>
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <UART_SetConfig+0x326>
 8004afa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004afe:	d006      	beq.n	8004b0e <UART_SetConfig+0x332>
 8004b00:	e00b      	b.n	8004b1a <UART_SetConfig+0x33e>
 8004b02:	2300      	movs	r3, #0
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e00d      	b.n	8004b24 <UART_SetConfig+0x348>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e00a      	b.n	8004b24 <UART_SetConfig+0x348>
 8004b0e:	2304      	movs	r3, #4
 8004b10:	77fb      	strb	r3, [r7, #31]
 8004b12:	e007      	b.n	8004b24 <UART_SetConfig+0x348>
 8004b14:	2308      	movs	r3, #8
 8004b16:	77fb      	strb	r3, [r7, #31]
 8004b18:	e004      	b.n	8004b24 <UART_SetConfig+0x348>
 8004b1a:	2310      	movs	r3, #16
 8004b1c:	77fb      	strb	r3, [r7, #31]
 8004b1e:	e001      	b.n	8004b24 <UART_SetConfig+0x348>
 8004b20:	2310      	movs	r3, #16
 8004b22:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b2c:	d15b      	bne.n	8004be6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b2e:	7ffb      	ldrb	r3, [r7, #31]
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d828      	bhi.n	8004b86 <UART_SetConfig+0x3aa>
 8004b34:	a201      	add	r2, pc, #4	@ (adr r2, 8004b3c <UART_SetConfig+0x360>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b69 	.word	0x08004b69
 8004b44:	08004b71 	.word	0x08004b71
 8004b48:	08004b87 	.word	0x08004b87
 8004b4c:	08004b77 	.word	0x08004b77
 8004b50:	08004b87 	.word	0x08004b87
 8004b54:	08004b87 	.word	0x08004b87
 8004b58:	08004b87 	.word	0x08004b87
 8004b5c:	08004b7f 	.word	0x08004b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b60:	f7ff f9f2 	bl	8003f48 <HAL_RCC_GetPCLK1Freq>
 8004b64:	61b8      	str	r0, [r7, #24]
        break;
 8004b66:	e013      	b.n	8004b90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b68:	f7ff fa02 	bl	8003f70 <HAL_RCC_GetPCLK2Freq>
 8004b6c:	61b8      	str	r0, [r7, #24]
        break;
 8004b6e:	e00f      	b.n	8004b90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b70:	4b4b      	ldr	r3, [pc, #300]	@ (8004ca0 <UART_SetConfig+0x4c4>)
 8004b72:	61bb      	str	r3, [r7, #24]
        break;
 8004b74:	e00c      	b.n	8004b90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b76:	f7ff f8d5 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 8004b7a:	61b8      	str	r0, [r7, #24]
        break;
 8004b7c:	e008      	b.n	8004b90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b82:	61bb      	str	r3, [r7, #24]
        break;
 8004b84:	e004      	b.n	8004b90 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d074      	beq.n	8004c80 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	005a      	lsls	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	085b      	lsrs	r3, r3, #1
 8004ba0:	441a      	add	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	2b0f      	cmp	r3, #15
 8004bb0:	d916      	bls.n	8004be0 <UART_SetConfig+0x404>
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb8:	d212      	bcs.n	8004be0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f023 030f 	bic.w	r3, r3, #15
 8004bc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	89fb      	ldrh	r3, [r7, #14]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	89fa      	ldrh	r2, [r7, #14]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	e04f      	b.n	8004c80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	77bb      	strb	r3, [r7, #30]
 8004be4:	e04c      	b.n	8004c80 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004be6:	7ffb      	ldrb	r3, [r7, #31]
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d828      	bhi.n	8004c3e <UART_SetConfig+0x462>
 8004bec:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf4 <UART_SetConfig+0x418>)
 8004bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf2:	bf00      	nop
 8004bf4:	08004c19 	.word	0x08004c19
 8004bf8:	08004c21 	.word	0x08004c21
 8004bfc:	08004c29 	.word	0x08004c29
 8004c00:	08004c3f 	.word	0x08004c3f
 8004c04:	08004c2f 	.word	0x08004c2f
 8004c08:	08004c3f 	.word	0x08004c3f
 8004c0c:	08004c3f 	.word	0x08004c3f
 8004c10:	08004c3f 	.word	0x08004c3f
 8004c14:	08004c37 	.word	0x08004c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c18:	f7ff f996 	bl	8003f48 <HAL_RCC_GetPCLK1Freq>
 8004c1c:	61b8      	str	r0, [r7, #24]
        break;
 8004c1e:	e013      	b.n	8004c48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c20:	f7ff f9a6 	bl	8003f70 <HAL_RCC_GetPCLK2Freq>
 8004c24:	61b8      	str	r0, [r7, #24]
        break;
 8004c26:	e00f      	b.n	8004c48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c28:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca0 <UART_SetConfig+0x4c4>)
 8004c2a:	61bb      	str	r3, [r7, #24]
        break;
 8004c2c:	e00c      	b.n	8004c48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c2e:	f7ff f879 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 8004c32:	61b8      	str	r0, [r7, #24]
        break;
 8004c34:	e008      	b.n	8004c48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c3a:	61bb      	str	r3, [r7, #24]
        break;
 8004c3c:	e004      	b.n	8004c48 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	77bb      	strb	r3, [r7, #30]
        break;
 8004c46:	bf00      	nop
    }

    if (pclk != 0U)
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d018      	beq.n	8004c80 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	085a      	lsrs	r2, r3, #1
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	441a      	add	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b0f      	cmp	r3, #15
 8004c66:	d909      	bls.n	8004c7c <UART_SetConfig+0x4a0>
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c6e:	d205      	bcs.n	8004c7c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	e001      	b.n	8004c80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3720      	adds	r7, #32
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40007c00 	.word	0x40007c00
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	00f42400 	.word	0x00f42400

08004ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d01a      	beq.n	8004dba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004da2:	d10a      	bne.n	8004dba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	605a      	str	r2, [r3, #4]
  }
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08c      	sub	sp, #48	@ 0x30
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004df8:	f7fc fcd0 	bl	800179c <HAL_GetTick>
 8004dfc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d12e      	bne.n	8004e6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	2200      	movs	r2, #0
 8004e16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f83b 	bl	8004e96 <UART_WaitOnFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d021      	beq.n	8004e6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e3a:	623b      	str	r3, [r7, #32]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	69b9      	ldr	r1, [r7, #24]
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	617b      	str	r3, [r7, #20]
   return(result);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e6      	bne.n	8004e26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e011      	b.n	8004e8e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3728      	adds	r7, #40	@ 0x28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea6:	e04f      	b.n	8004f48 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eae:	d04b      	beq.n	8004f48 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb0:	f7fc fc74 	bl	800179c <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d302      	bcc.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e04e      	b.n	8004f68 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d037      	beq.n	8004f48 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b80      	cmp	r3, #128	@ 0x80
 8004edc:	d034      	beq.n	8004f48 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b40      	cmp	r3, #64	@ 0x40
 8004ee2:	d031      	beq.n	8004f48 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d110      	bne.n	8004f14 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f838 	bl	8004f70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2208      	movs	r2, #8
 8004f04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e029      	b.n	8004f68 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f22:	d111      	bne.n	8004f48 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f2c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f81e 	bl	8004f70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e00f      	b.n	8004f68 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69da      	ldr	r2, [r3, #28]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4013      	ands	r3, r2
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	bf0c      	ite	eq
 8004f58:	2301      	moveq	r3, #1
 8004f5a:	2300      	movne	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d0a0      	beq.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b095      	sub	sp, #84	@ 0x54
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f96:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e6      	bne.n	8004f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3308      	adds	r3, #8
 8004fb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	f023 0301 	bic.w	r3, r3, #1
 8004fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e5      	bne.n	8004faa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d118      	bne.n	8005018 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	e853 3f00 	ldrex	r3, [r3]
 8004ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f023 0310 	bic.w	r3, r3, #16
 8004ffa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	6979      	ldr	r1, [r7, #20]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	e841 2300 	strex	r3, r2, [r1]
 8005010:	613b      	str	r3, [r7, #16]
   return(result);
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e6      	bne.n	8004fe6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800502c:	bf00      	nop
 800502e:	3754      	adds	r7, #84	@ 0x54
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <uart_error_handler>:


#include "erlog.h"

static void uart_error_handler()
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800503c:	b672      	cpsid	i
}
 800503e:	bf00      	nop
	 __disable_irq();
	  while (1)
 8005040:	bf00      	nop
 8005042:	e7fd      	b.n	8005040 <uart_error_handler+0x8>

08005044 <uart_init>:
	  {
	  }
}
static void uart_init(UART_HandleTypeDef *huart3)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3->Instance = USART3;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a15      	ldr	r2, [pc, #84]	@ (80050a4 <uart_init+0x60>)
 8005050:	601a      	str	r2, [r3, #0]
  huart3->Init.BaudRate = 115200;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005058:	605a      	str	r2, [r3, #4]
  huart3->Init.WordLength = UART_WORDLENGTH_8B;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	609a      	str	r2, [r3, #8]
  huart3->Init.StopBits = UART_STOPBITS_1;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	60da      	str	r2, [r3, #12]
  huart3->Init.Parity = UART_PARITY_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	611a      	str	r2, [r3, #16]
  huart3->Init.Mode = UART_MODE_TX_RX;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	220c      	movs	r2, #12
 8005070:	615a      	str	r2, [r3, #20]
  huart3->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	619a      	str	r2, [r3, #24]
  huart3->Init.OverSampling = UART_OVERSAMPLING_16;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	61da      	str	r2, [r3, #28]
  huart3->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	621a      	str	r2, [r3, #32]
  huart3->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart3) != HAL_OK)
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7ff face 	bl	800462c <HAL_UART_Init>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <uart_init+0x56>
  {
	  uart_error_handler();
 8005096:	f7ff ffcf 	bl	8005038 <uart_error_handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	40004800 	.word	0x40004800

080050a8 <erlog_init>:

void erlog_init(log_t *log_console, UART_HandleTypeDef *huart3)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
	log_console->uhart = huart3;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	601a      	str	r2, [r3, #0]
	log_console->msg_len = 0;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	809a      	strh	r2, [r3, #4]
	memset(log_console->msg, 0 , sizeof(log_console->msg_len));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3306      	adds	r3, #6
 80050c2:	2202      	movs	r2, #2
 80050c4:	2100      	movs	r1, #0
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fe8c 	bl	8005de4 <memset>
	uart_init(log_console->uhart);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff ffb7 	bl	8005044 <uart_init>
}
 80050d6:	bf00      	nop
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <i2c_error_Handler>:
#include "erlog.h"



static void i2c_error_Handler(void)
{
 80050de:	b480      	push	{r7}
 80050e0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80050e2:	b672      	cpsid	i
}
 80050e4:	bf00      	nop
  __disable_irq();
  while (1)
 80050e6:	bf00      	nop
 80050e8:	e7fd      	b.n	80050e6 <i2c_error_Handler+0x8>
	...

080050ec <i2c_init>:
  {
  }
}
static void i2c_init(I2C_HandleTypeDef *hi2c1)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]

  /*PF0 & PF1 pins configured*/

  /* USER CODE BEGIN I2C1_Init 1 */
  hi2c1->Instance = I2C2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005168 <i2c_init+0x7c>)
 80050f8:	601a      	str	r2, [r3, #0]
  hi2c1->Init.Timing = 400000;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1b      	ldr	r2, [pc, #108]	@ (800516c <i2c_init+0x80>)
 80050fe:	605a      	str	r2, [r3, #4]
  hi2c1->Init.OwnAddress1 = 0;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	609a      	str	r2, [r3, #8]
  hi2c1->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	60da      	str	r2, [r3, #12]
  hi2c1->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	611a      	str	r2, [r3, #16]
  hi2c1->Init.OwnAddress2 = 0;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	615a      	str	r2, [r3, #20]
  hi2c1->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	619a      	str	r2, [r3, #24]
  hi2c1->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	61da      	str	r2, [r3, #28]
  hi2c1->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c1) != HAL_OK)
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fc fe5e 	bl	8001dec <HAL_I2C_Init>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <i2c_init+0x4e>
  {
	  i2c_error_Handler();
 8005136:	f7ff ffd2 	bl	80050de <i2c_error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800513a:	2100      	movs	r1, #0
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7fe f9b9 	bl	80034b4 <HAL_I2CEx_ConfigAnalogFilter>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <i2c_init+0x60>
  {
	  i2c_error_Handler();
 8005148:	f7ff ffc9 	bl	80050de <i2c_error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c1, 0) != HAL_OK)
 800514c:	2100      	movs	r1, #0
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fe f9fb 	bl	800354a <HAL_I2CEx_ConfigDigitalFilter>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <i2c_init+0x72>
  {
	  i2c_error_Handler();
 800515a:	f7ff ffc0 	bl	80050de <i2c_error_Handler>
  }
  /* USER CODE END I2C1_Init 1 */

}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40005800 	.word	0x40005800
 800516c:	00061a80 	.word	0x00061a80

08005170 <max30102_init>:
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *i2chandler)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
	 obj->ui2c = i2chandler;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	601a      	str	r2, [r3, #0]
	 obj->intr_flag = 0;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	 memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3304      	adds	r3, #4
 800518c:	2280      	movs	r2, #128	@ 0x80
 800518e:	2100      	movs	r1, #0
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fe27 	bl	8005de4 <memset>
	 memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3384      	adds	r3, #132	@ 0x84
 800519a:	2280      	movs	r2, #128	@ 0x80
 800519c:	2100      	movs	r1, #0
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fe20 	bl	8005de4 <memset>
	 i2c_init(obj->ui2c);  /*initialise the i2c peripheral for MAX3212*/
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff ff9f 	bl	80050ec <i2c_init>

}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <read_register>:
bool read_register(max30102_t *obj, uint8_t addr, uint8_t *value)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b08a      	sub	sp, #40	@ 0x28
 80051ba:	af04      	add	r7, sp, #16
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	460b      	mov	r3, r1
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_buff;
	uint8_t rx_address;
	rx_address = (MAX30102_I2C_ADDR << 1);
 80051c4:	23ae      	movs	r3, #174	@ 0xae
 80051c6:	75fb      	strb	r3, [r7, #23]
	if (HAL_I2C_Mem_Read(obj->ui2c, rx_address , addr, 1, &rx_buff, 1, 5000) == HAL_OK)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	7dfb      	ldrb	r3, [r7, #23]
 80051ce:	b299      	uxth	r1, r3
 80051d0:	7afb      	ldrb	r3, [r7, #11]
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80051d8:	9302      	str	r3, [sp, #8]
 80051da:	2301      	movs	r3, #1
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	f107 0316 	add.w	r3, r7, #22
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	2301      	movs	r3, #1
 80051e6:	f7fc ffb1 	bl	800214c <HAL_I2C_Mem_Read>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d104      	bne.n	80051fa <read_register+0x44>
	{
		*value = rx_buff;
 80051f0:	7dba      	ldrb	r2, [r7, #22]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	701a      	strb	r2, [r3, #0]
		return true;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <read_register+0x46>
	}
	else
		return false;
 80051fa:	2300      	movs	r3, #0

}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <write_register>:
bool write_register(max30102_t *obj, uint8_t addr, uint8_t value)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af04      	add	r7, sp, #16
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
 8005210:	4613      	mov	r3, r2
 8005212:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_address;
	tx_address = (MAX30102_I2C_ADDR << 1);
 8005214:	23ae      	movs	r3, #174	@ 0xae
 8005216:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(obj->ui2c, tx_address, addr, 1, &value, 1, 10000) == HAL_OK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	b299      	uxth	r1, r3
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	b29a      	uxth	r2, r3
 8005224:	f242 7310 	movw	r3, #10000	@ 0x2710
 8005228:	9302      	str	r3, [sp, #8]
 800522a:	2301      	movs	r3, #1
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	1cbb      	adds	r3, r7, #2
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	2301      	movs	r3, #1
 8005234:	f7fc fe76 	bl	8001f24 <HAL_I2C_Mem_Write>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <write_register+0x3e>
		return false;
 800523e:	2300      	movs	r3, #0
 8005240:	e000      	b.n	8005244 <write_register+0x40>
	else
		return true;
 8005242:	2301      	movs	r3, #1
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <bitMask>:
void bitMask(max30102_t *obj, uint8_t reg, uint8_t mask, uint8_t thing)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	4608      	mov	r0, r1
 8005256:	4611      	mov	r1, r2
 8005258:	461a      	mov	r2, r3
 800525a:	4603      	mov	r3, r0
 800525c:	70fb      	strb	r3, [r7, #3]
 800525e:	460b      	mov	r3, r1
 8005260:	70bb      	strb	r3, [r7, #2]
 8005262:	4613      	mov	r3, r2
 8005264:	707b      	strb	r3, [r7, #1]
  // Grab current register context
  uint8_t originalContents = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	73fb      	strb	r3, [r7, #15]

  read_register(obj, reg, &originalContents);
 800526a:	f107 020f 	add.w	r2, r7, #15
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	4619      	mov	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff ff9f 	bl	80051b6 <read_register>

  // Zero-out the portions of the register we're interested in
  originalContents = originalContents & mask;
 8005278:	7bfa      	ldrb	r2, [r7, #15]
 800527a:	78bb      	ldrb	r3, [r7, #2]
 800527c:	4013      	ands	r3, r2
 800527e:	b2db      	uxtb	r3, r3
 8005280:	73fb      	strb	r3, [r7, #15]

  // Change contents
  write_register(obj, reg, originalContents | thing);
 8005282:	7bfa      	ldrb	r2, [r7, #15]
 8005284:	787b      	ldrb	r3, [r7, #1]
 8005286:	4313      	orrs	r3, r2
 8005288:	b2da      	uxtb	r2, r3
 800528a:	78fb      	ldrb	r3, [r7, #3]
 800528c:	4619      	mov	r1, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff ffb8 	bl	8005204 <write_register>
}
 8005294:	bf00      	nop
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <max30102_enableDIETEMPRDY>:

void max30102_enableDIETEMPRDY(max30102_t *obj)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  bitMask(obj, MAX30102_INTENABLE2, MAX30102_INT_DIE_TEMP_RDY_MASK, MAX30102_INT_DIE_TEMP_RDY_ENABLE);
 80052a4:	22fd      	movs	r2, #253	@ 0xfd
 80052a6:	2302      	movs	r3, #2
 80052a8:	2103      	movs	r1, #3
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff ffce 	bl	800524c <bitMask>
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <max30102_readtemp>:

float max30102_readtemp(max30102_t *obj)
{
 80052b8:	b5b0      	push	{r4, r5, r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]

  uint8_t response = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	73fb      	strb	r3, [r7, #15]
  uint8_t tempInt = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	73bb      	strb	r3, [r7, #14]
  uint8_t tempFrac = 0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	737b      	strb	r3, [r7, #13]

  write_register(obj, MAX30102_DIETEMPCONFIG, 0x01);
 80052cc:	2201      	movs	r2, #1
 80052ce:	2121      	movs	r1, #33	@ 0x21
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff ff97 	bl	8005204 <write_register>

  do
  {
	  read_register(obj, MAX30102_INTSTAT2, &response);
 80052d6:	f107 030f 	add.w	r3, r7, #15
 80052da:	461a      	mov	r2, r3
 80052dc:	2101      	movs	r1, #1
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff ff69 	bl	80051b6 <read_register>
	  HAL_Delay(1);
 80052e4:	2001      	movs	r0, #1
 80052e6:	f7fc fa65 	bl	80017b4 <HAL_Delay>
  }while((response & MAX30102_INTENABLE1) == 0);
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0f0      	beq.n	80052d6 <max30102_readtemp+0x1e>

  read_register(obj, MAX30102_DIETEMPINT, &tempInt);
 80052f4:	f107 030e 	add.w	r3, r7, #14
 80052f8:	461a      	mov	r2, r3
 80052fa:	211f      	movs	r1, #31
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff ff5a 	bl	80051b6 <read_register>
  read_register(obj, MAX30102_DIETEMPFRAC, &tempFrac);
 8005302:	f107 030d 	add.w	r3, r7, #13
 8005306:	461a      	mov	r2, r3
 8005308:	2120      	movs	r1, #32
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff ff53 	bl	80051b6 <read_register>

  // Step 3: Calculate temperature (datasheet pg. 23)
  return (float)tempInt + ((float)tempFrac * 0.0625);
 8005310:	7bbb      	ldrb	r3, [r7, #14]
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531a:	ee17 0a90 	vmov	r0, s15
 800531e:	f7fb f93b 	bl	8000598 <__aeabi_f2d>
 8005322:	4604      	mov	r4, r0
 8005324:	460d      	mov	r5, r1
 8005326:	7b7b      	ldrb	r3, [r7, #13]
 8005328:	ee07 3a90 	vmov	s15, r3
 800532c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005330:	ee17 0a90 	vmov	r0, s15
 8005334:	f7fb f930 	bl	8000598 <__aeabi_f2d>
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	4b0b      	ldr	r3, [pc, #44]	@ (800536c <max30102_readtemp+0xb4>)
 800533e:	f7fb f983 	bl	8000648 <__aeabi_dmul>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4620      	mov	r0, r4
 8005348:	4629      	mov	r1, r5
 800534a:	f7fa ffc7 	bl	80002dc <__adddf3>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4610      	mov	r0, r2
 8005354:	4619      	mov	r1, r3
 8005356:	f7fb fc4f 	bl	8000bf8 <__aeabi_d2f>
 800535a:	4603      	mov	r3, r0
 800535c:	ee07 3a90 	vmov	s15, r3
}
 8005360:	eeb0 0a67 	vmov.f32	s0, s15
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bdb0      	pop	{r4, r5, r7, pc}
 800536a:	bf00      	nop
 800536c:	3fb00000 	.word	0x3fb00000

08005370 <__cvt>:
 8005370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005374:	ec57 6b10 	vmov	r6, r7, d0
 8005378:	2f00      	cmp	r7, #0
 800537a:	460c      	mov	r4, r1
 800537c:	4619      	mov	r1, r3
 800537e:	463b      	mov	r3, r7
 8005380:	bfbb      	ittet	lt
 8005382:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005386:	461f      	movlt	r7, r3
 8005388:	2300      	movge	r3, #0
 800538a:	232d      	movlt	r3, #45	@ 0x2d
 800538c:	700b      	strb	r3, [r1, #0]
 800538e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005390:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005394:	4691      	mov	r9, r2
 8005396:	f023 0820 	bic.w	r8, r3, #32
 800539a:	bfbc      	itt	lt
 800539c:	4632      	movlt	r2, r6
 800539e:	4616      	movlt	r6, r2
 80053a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053a4:	d005      	beq.n	80053b2 <__cvt+0x42>
 80053a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80053aa:	d100      	bne.n	80053ae <__cvt+0x3e>
 80053ac:	3401      	adds	r4, #1
 80053ae:	2102      	movs	r1, #2
 80053b0:	e000      	b.n	80053b4 <__cvt+0x44>
 80053b2:	2103      	movs	r1, #3
 80053b4:	ab03      	add	r3, sp, #12
 80053b6:	9301      	str	r3, [sp, #4]
 80053b8:	ab02      	add	r3, sp, #8
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	ec47 6b10 	vmov	d0, r6, r7
 80053c0:	4653      	mov	r3, sl
 80053c2:	4622      	mov	r2, r4
 80053c4:	f000 fdd0 	bl	8005f68 <_dtoa_r>
 80053c8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80053cc:	4605      	mov	r5, r0
 80053ce:	d119      	bne.n	8005404 <__cvt+0x94>
 80053d0:	f019 0f01 	tst.w	r9, #1
 80053d4:	d00e      	beq.n	80053f4 <__cvt+0x84>
 80053d6:	eb00 0904 	add.w	r9, r0, r4
 80053da:	2200      	movs	r2, #0
 80053dc:	2300      	movs	r3, #0
 80053de:	4630      	mov	r0, r6
 80053e0:	4639      	mov	r1, r7
 80053e2:	f7fb fb99 	bl	8000b18 <__aeabi_dcmpeq>
 80053e6:	b108      	cbz	r0, 80053ec <__cvt+0x7c>
 80053e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80053ec:	2230      	movs	r2, #48	@ 0x30
 80053ee:	9b03      	ldr	r3, [sp, #12]
 80053f0:	454b      	cmp	r3, r9
 80053f2:	d31e      	bcc.n	8005432 <__cvt+0xc2>
 80053f4:	9b03      	ldr	r3, [sp, #12]
 80053f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80053f8:	1b5b      	subs	r3, r3, r5
 80053fa:	4628      	mov	r0, r5
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	b004      	add	sp, #16
 8005400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005404:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005408:	eb00 0904 	add.w	r9, r0, r4
 800540c:	d1e5      	bne.n	80053da <__cvt+0x6a>
 800540e:	7803      	ldrb	r3, [r0, #0]
 8005410:	2b30      	cmp	r3, #48	@ 0x30
 8005412:	d10a      	bne.n	800542a <__cvt+0xba>
 8005414:	2200      	movs	r2, #0
 8005416:	2300      	movs	r3, #0
 8005418:	4630      	mov	r0, r6
 800541a:	4639      	mov	r1, r7
 800541c:	f7fb fb7c 	bl	8000b18 <__aeabi_dcmpeq>
 8005420:	b918      	cbnz	r0, 800542a <__cvt+0xba>
 8005422:	f1c4 0401 	rsb	r4, r4, #1
 8005426:	f8ca 4000 	str.w	r4, [sl]
 800542a:	f8da 3000 	ldr.w	r3, [sl]
 800542e:	4499      	add	r9, r3
 8005430:	e7d3      	b.n	80053da <__cvt+0x6a>
 8005432:	1c59      	adds	r1, r3, #1
 8005434:	9103      	str	r1, [sp, #12]
 8005436:	701a      	strb	r2, [r3, #0]
 8005438:	e7d9      	b.n	80053ee <__cvt+0x7e>

0800543a <__exponent>:
 800543a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800543c:	2900      	cmp	r1, #0
 800543e:	bfba      	itte	lt
 8005440:	4249      	neglt	r1, r1
 8005442:	232d      	movlt	r3, #45	@ 0x2d
 8005444:	232b      	movge	r3, #43	@ 0x2b
 8005446:	2909      	cmp	r1, #9
 8005448:	7002      	strb	r2, [r0, #0]
 800544a:	7043      	strb	r3, [r0, #1]
 800544c:	dd29      	ble.n	80054a2 <__exponent+0x68>
 800544e:	f10d 0307 	add.w	r3, sp, #7
 8005452:	461d      	mov	r5, r3
 8005454:	270a      	movs	r7, #10
 8005456:	461a      	mov	r2, r3
 8005458:	fbb1 f6f7 	udiv	r6, r1, r7
 800545c:	fb07 1416 	mls	r4, r7, r6, r1
 8005460:	3430      	adds	r4, #48	@ 0x30
 8005462:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005466:	460c      	mov	r4, r1
 8005468:	2c63      	cmp	r4, #99	@ 0x63
 800546a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800546e:	4631      	mov	r1, r6
 8005470:	dcf1      	bgt.n	8005456 <__exponent+0x1c>
 8005472:	3130      	adds	r1, #48	@ 0x30
 8005474:	1e94      	subs	r4, r2, #2
 8005476:	f803 1c01 	strb.w	r1, [r3, #-1]
 800547a:	1c41      	adds	r1, r0, #1
 800547c:	4623      	mov	r3, r4
 800547e:	42ab      	cmp	r3, r5
 8005480:	d30a      	bcc.n	8005498 <__exponent+0x5e>
 8005482:	f10d 0309 	add.w	r3, sp, #9
 8005486:	1a9b      	subs	r3, r3, r2
 8005488:	42ac      	cmp	r4, r5
 800548a:	bf88      	it	hi
 800548c:	2300      	movhi	r3, #0
 800548e:	3302      	adds	r3, #2
 8005490:	4403      	add	r3, r0
 8005492:	1a18      	subs	r0, r3, r0
 8005494:	b003      	add	sp, #12
 8005496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005498:	f813 6b01 	ldrb.w	r6, [r3], #1
 800549c:	f801 6f01 	strb.w	r6, [r1, #1]!
 80054a0:	e7ed      	b.n	800547e <__exponent+0x44>
 80054a2:	2330      	movs	r3, #48	@ 0x30
 80054a4:	3130      	adds	r1, #48	@ 0x30
 80054a6:	7083      	strb	r3, [r0, #2]
 80054a8:	70c1      	strb	r1, [r0, #3]
 80054aa:	1d03      	adds	r3, r0, #4
 80054ac:	e7f1      	b.n	8005492 <__exponent+0x58>
	...

080054b0 <_printf_float>:
 80054b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b4:	b08d      	sub	sp, #52	@ 0x34
 80054b6:	460c      	mov	r4, r1
 80054b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80054bc:	4616      	mov	r6, r2
 80054be:	461f      	mov	r7, r3
 80054c0:	4605      	mov	r5, r0
 80054c2:	f000 fc97 	bl	8005df4 <_localeconv_r>
 80054c6:	6803      	ldr	r3, [r0, #0]
 80054c8:	9304      	str	r3, [sp, #16]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fa fef8 	bl	80002c0 <strlen>
 80054d0:	2300      	movs	r3, #0
 80054d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80054d4:	f8d8 3000 	ldr.w	r3, [r8]
 80054d8:	9005      	str	r0, [sp, #20]
 80054da:	3307      	adds	r3, #7
 80054dc:	f023 0307 	bic.w	r3, r3, #7
 80054e0:	f103 0208 	add.w	r2, r3, #8
 80054e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80054e8:	f8d4 b000 	ldr.w	fp, [r4]
 80054ec:	f8c8 2000 	str.w	r2, [r8]
 80054f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80054f8:	9307      	str	r3, [sp, #28]
 80054fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80054fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005502:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005506:	4b9c      	ldr	r3, [pc, #624]	@ (8005778 <_printf_float+0x2c8>)
 8005508:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800550c:	f7fb fb36 	bl	8000b7c <__aeabi_dcmpun>
 8005510:	bb70      	cbnz	r0, 8005570 <_printf_float+0xc0>
 8005512:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005516:	4b98      	ldr	r3, [pc, #608]	@ (8005778 <_printf_float+0x2c8>)
 8005518:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800551c:	f7fb fb10 	bl	8000b40 <__aeabi_dcmple>
 8005520:	bb30      	cbnz	r0, 8005570 <_printf_float+0xc0>
 8005522:	2200      	movs	r2, #0
 8005524:	2300      	movs	r3, #0
 8005526:	4640      	mov	r0, r8
 8005528:	4649      	mov	r1, r9
 800552a:	f7fb faff 	bl	8000b2c <__aeabi_dcmplt>
 800552e:	b110      	cbz	r0, 8005536 <_printf_float+0x86>
 8005530:	232d      	movs	r3, #45	@ 0x2d
 8005532:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005536:	4a91      	ldr	r2, [pc, #580]	@ (800577c <_printf_float+0x2cc>)
 8005538:	4b91      	ldr	r3, [pc, #580]	@ (8005780 <_printf_float+0x2d0>)
 800553a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800553e:	bf94      	ite	ls
 8005540:	4690      	movls	r8, r2
 8005542:	4698      	movhi	r8, r3
 8005544:	2303      	movs	r3, #3
 8005546:	6123      	str	r3, [r4, #16]
 8005548:	f02b 0304 	bic.w	r3, fp, #4
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	f04f 0900 	mov.w	r9, #0
 8005552:	9700      	str	r7, [sp, #0]
 8005554:	4633      	mov	r3, r6
 8005556:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005558:	4621      	mov	r1, r4
 800555a:	4628      	mov	r0, r5
 800555c:	f000 f9d2 	bl	8005904 <_printf_common>
 8005560:	3001      	adds	r0, #1
 8005562:	f040 808d 	bne.w	8005680 <_printf_float+0x1d0>
 8005566:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800556a:	b00d      	add	sp, #52	@ 0x34
 800556c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005570:	4642      	mov	r2, r8
 8005572:	464b      	mov	r3, r9
 8005574:	4640      	mov	r0, r8
 8005576:	4649      	mov	r1, r9
 8005578:	f7fb fb00 	bl	8000b7c <__aeabi_dcmpun>
 800557c:	b140      	cbz	r0, 8005590 <_printf_float+0xe0>
 800557e:	464b      	mov	r3, r9
 8005580:	2b00      	cmp	r3, #0
 8005582:	bfbc      	itt	lt
 8005584:	232d      	movlt	r3, #45	@ 0x2d
 8005586:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800558a:	4a7e      	ldr	r2, [pc, #504]	@ (8005784 <_printf_float+0x2d4>)
 800558c:	4b7e      	ldr	r3, [pc, #504]	@ (8005788 <_printf_float+0x2d8>)
 800558e:	e7d4      	b.n	800553a <_printf_float+0x8a>
 8005590:	6863      	ldr	r3, [r4, #4]
 8005592:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005596:	9206      	str	r2, [sp, #24]
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	d13b      	bne.n	8005614 <_printf_float+0x164>
 800559c:	2306      	movs	r3, #6
 800559e:	6063      	str	r3, [r4, #4]
 80055a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80055a4:	2300      	movs	r3, #0
 80055a6:	6022      	str	r2, [r4, #0]
 80055a8:	9303      	str	r3, [sp, #12]
 80055aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80055ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 80055b0:	ab09      	add	r3, sp, #36	@ 0x24
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	6861      	ldr	r1, [r4, #4]
 80055b6:	ec49 8b10 	vmov	d0, r8, r9
 80055ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80055be:	4628      	mov	r0, r5
 80055c0:	f7ff fed6 	bl	8005370 <__cvt>
 80055c4:	9b06      	ldr	r3, [sp, #24]
 80055c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80055c8:	2b47      	cmp	r3, #71	@ 0x47
 80055ca:	4680      	mov	r8, r0
 80055cc:	d129      	bne.n	8005622 <_printf_float+0x172>
 80055ce:	1cc8      	adds	r0, r1, #3
 80055d0:	db02      	blt.n	80055d8 <_printf_float+0x128>
 80055d2:	6863      	ldr	r3, [r4, #4]
 80055d4:	4299      	cmp	r1, r3
 80055d6:	dd41      	ble.n	800565c <_printf_float+0x1ac>
 80055d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80055dc:	fa5f fa8a 	uxtb.w	sl, sl
 80055e0:	3901      	subs	r1, #1
 80055e2:	4652      	mov	r2, sl
 80055e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80055e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80055ea:	f7ff ff26 	bl	800543a <__exponent>
 80055ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80055f0:	1813      	adds	r3, r2, r0
 80055f2:	2a01      	cmp	r2, #1
 80055f4:	4681      	mov	r9, r0
 80055f6:	6123      	str	r3, [r4, #16]
 80055f8:	dc02      	bgt.n	8005600 <_printf_float+0x150>
 80055fa:	6822      	ldr	r2, [r4, #0]
 80055fc:	07d2      	lsls	r2, r2, #31
 80055fe:	d501      	bpl.n	8005604 <_printf_float+0x154>
 8005600:	3301      	adds	r3, #1
 8005602:	6123      	str	r3, [r4, #16]
 8005604:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0a2      	beq.n	8005552 <_printf_float+0xa2>
 800560c:	232d      	movs	r3, #45	@ 0x2d
 800560e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005612:	e79e      	b.n	8005552 <_printf_float+0xa2>
 8005614:	9a06      	ldr	r2, [sp, #24]
 8005616:	2a47      	cmp	r2, #71	@ 0x47
 8005618:	d1c2      	bne.n	80055a0 <_printf_float+0xf0>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1c0      	bne.n	80055a0 <_printf_float+0xf0>
 800561e:	2301      	movs	r3, #1
 8005620:	e7bd      	b.n	800559e <_printf_float+0xee>
 8005622:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005626:	d9db      	bls.n	80055e0 <_printf_float+0x130>
 8005628:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800562c:	d118      	bne.n	8005660 <_printf_float+0x1b0>
 800562e:	2900      	cmp	r1, #0
 8005630:	6863      	ldr	r3, [r4, #4]
 8005632:	dd0b      	ble.n	800564c <_printf_float+0x19c>
 8005634:	6121      	str	r1, [r4, #16]
 8005636:	b913      	cbnz	r3, 800563e <_printf_float+0x18e>
 8005638:	6822      	ldr	r2, [r4, #0]
 800563a:	07d0      	lsls	r0, r2, #31
 800563c:	d502      	bpl.n	8005644 <_printf_float+0x194>
 800563e:	3301      	adds	r3, #1
 8005640:	440b      	add	r3, r1
 8005642:	6123      	str	r3, [r4, #16]
 8005644:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005646:	f04f 0900 	mov.w	r9, #0
 800564a:	e7db      	b.n	8005604 <_printf_float+0x154>
 800564c:	b913      	cbnz	r3, 8005654 <_printf_float+0x1a4>
 800564e:	6822      	ldr	r2, [r4, #0]
 8005650:	07d2      	lsls	r2, r2, #31
 8005652:	d501      	bpl.n	8005658 <_printf_float+0x1a8>
 8005654:	3302      	adds	r3, #2
 8005656:	e7f4      	b.n	8005642 <_printf_float+0x192>
 8005658:	2301      	movs	r3, #1
 800565a:	e7f2      	b.n	8005642 <_printf_float+0x192>
 800565c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005662:	4299      	cmp	r1, r3
 8005664:	db05      	blt.n	8005672 <_printf_float+0x1c2>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	6121      	str	r1, [r4, #16]
 800566a:	07d8      	lsls	r0, r3, #31
 800566c:	d5ea      	bpl.n	8005644 <_printf_float+0x194>
 800566e:	1c4b      	adds	r3, r1, #1
 8005670:	e7e7      	b.n	8005642 <_printf_float+0x192>
 8005672:	2900      	cmp	r1, #0
 8005674:	bfd4      	ite	le
 8005676:	f1c1 0202 	rsble	r2, r1, #2
 800567a:	2201      	movgt	r2, #1
 800567c:	4413      	add	r3, r2
 800567e:	e7e0      	b.n	8005642 <_printf_float+0x192>
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	055a      	lsls	r2, r3, #21
 8005684:	d407      	bmi.n	8005696 <_printf_float+0x1e6>
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	4642      	mov	r2, r8
 800568a:	4631      	mov	r1, r6
 800568c:	4628      	mov	r0, r5
 800568e:	47b8      	blx	r7
 8005690:	3001      	adds	r0, #1
 8005692:	d12b      	bne.n	80056ec <_printf_float+0x23c>
 8005694:	e767      	b.n	8005566 <_printf_float+0xb6>
 8005696:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800569a:	f240 80dd 	bls.w	8005858 <_printf_float+0x3a8>
 800569e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056a2:	2200      	movs	r2, #0
 80056a4:	2300      	movs	r3, #0
 80056a6:	f7fb fa37 	bl	8000b18 <__aeabi_dcmpeq>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	d033      	beq.n	8005716 <_printf_float+0x266>
 80056ae:	4a37      	ldr	r2, [pc, #220]	@ (800578c <_printf_float+0x2dc>)
 80056b0:	2301      	movs	r3, #1
 80056b2:	4631      	mov	r1, r6
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b8      	blx	r7
 80056b8:	3001      	adds	r0, #1
 80056ba:	f43f af54 	beq.w	8005566 <_printf_float+0xb6>
 80056be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80056c2:	4543      	cmp	r3, r8
 80056c4:	db02      	blt.n	80056cc <_printf_float+0x21c>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	07d8      	lsls	r0, r3, #31
 80056ca:	d50f      	bpl.n	80056ec <_printf_float+0x23c>
 80056cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056d0:	4631      	mov	r1, r6
 80056d2:	4628      	mov	r0, r5
 80056d4:	47b8      	blx	r7
 80056d6:	3001      	adds	r0, #1
 80056d8:	f43f af45 	beq.w	8005566 <_printf_float+0xb6>
 80056dc:	f04f 0900 	mov.w	r9, #0
 80056e0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80056e4:	f104 0a1a 	add.w	sl, r4, #26
 80056e8:	45c8      	cmp	r8, r9
 80056ea:	dc09      	bgt.n	8005700 <_printf_float+0x250>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	079b      	lsls	r3, r3, #30
 80056f0:	f100 8103 	bmi.w	80058fa <_printf_float+0x44a>
 80056f4:	68e0      	ldr	r0, [r4, #12]
 80056f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056f8:	4298      	cmp	r0, r3
 80056fa:	bfb8      	it	lt
 80056fc:	4618      	movlt	r0, r3
 80056fe:	e734      	b.n	800556a <_printf_float+0xba>
 8005700:	2301      	movs	r3, #1
 8005702:	4652      	mov	r2, sl
 8005704:	4631      	mov	r1, r6
 8005706:	4628      	mov	r0, r5
 8005708:	47b8      	blx	r7
 800570a:	3001      	adds	r0, #1
 800570c:	f43f af2b 	beq.w	8005566 <_printf_float+0xb6>
 8005710:	f109 0901 	add.w	r9, r9, #1
 8005714:	e7e8      	b.n	80056e8 <_printf_float+0x238>
 8005716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005718:	2b00      	cmp	r3, #0
 800571a:	dc39      	bgt.n	8005790 <_printf_float+0x2e0>
 800571c:	4a1b      	ldr	r2, [pc, #108]	@ (800578c <_printf_float+0x2dc>)
 800571e:	2301      	movs	r3, #1
 8005720:	4631      	mov	r1, r6
 8005722:	4628      	mov	r0, r5
 8005724:	47b8      	blx	r7
 8005726:	3001      	adds	r0, #1
 8005728:	f43f af1d 	beq.w	8005566 <_printf_float+0xb6>
 800572c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005730:	ea59 0303 	orrs.w	r3, r9, r3
 8005734:	d102      	bne.n	800573c <_printf_float+0x28c>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	07d9      	lsls	r1, r3, #31
 800573a:	d5d7      	bpl.n	80056ec <_printf_float+0x23c>
 800573c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005740:	4631      	mov	r1, r6
 8005742:	4628      	mov	r0, r5
 8005744:	47b8      	blx	r7
 8005746:	3001      	adds	r0, #1
 8005748:	f43f af0d 	beq.w	8005566 <_printf_float+0xb6>
 800574c:	f04f 0a00 	mov.w	sl, #0
 8005750:	f104 0b1a 	add.w	fp, r4, #26
 8005754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005756:	425b      	negs	r3, r3
 8005758:	4553      	cmp	r3, sl
 800575a:	dc01      	bgt.n	8005760 <_printf_float+0x2b0>
 800575c:	464b      	mov	r3, r9
 800575e:	e793      	b.n	8005688 <_printf_float+0x1d8>
 8005760:	2301      	movs	r3, #1
 8005762:	465a      	mov	r2, fp
 8005764:	4631      	mov	r1, r6
 8005766:	4628      	mov	r0, r5
 8005768:	47b8      	blx	r7
 800576a:	3001      	adds	r0, #1
 800576c:	f43f aefb 	beq.w	8005566 <_printf_float+0xb6>
 8005770:	f10a 0a01 	add.w	sl, sl, #1
 8005774:	e7ee      	b.n	8005754 <_printf_float+0x2a4>
 8005776:	bf00      	nop
 8005778:	7fefffff 	.word	0x7fefffff
 800577c:	08008048 	.word	0x08008048
 8005780:	0800804c 	.word	0x0800804c
 8005784:	08008050 	.word	0x08008050
 8005788:	08008054 	.word	0x08008054
 800578c:	08008058 	.word	0x08008058
 8005790:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005792:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005796:	4553      	cmp	r3, sl
 8005798:	bfa8      	it	ge
 800579a:	4653      	movge	r3, sl
 800579c:	2b00      	cmp	r3, #0
 800579e:	4699      	mov	r9, r3
 80057a0:	dc36      	bgt.n	8005810 <_printf_float+0x360>
 80057a2:	f04f 0b00 	mov.w	fp, #0
 80057a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057aa:	f104 021a 	add.w	r2, r4, #26
 80057ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057b0:	9306      	str	r3, [sp, #24]
 80057b2:	eba3 0309 	sub.w	r3, r3, r9
 80057b6:	455b      	cmp	r3, fp
 80057b8:	dc31      	bgt.n	800581e <_printf_float+0x36e>
 80057ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057bc:	459a      	cmp	sl, r3
 80057be:	dc3a      	bgt.n	8005836 <_printf_float+0x386>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	07da      	lsls	r2, r3, #31
 80057c4:	d437      	bmi.n	8005836 <_printf_float+0x386>
 80057c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c8:	ebaa 0903 	sub.w	r9, sl, r3
 80057cc:	9b06      	ldr	r3, [sp, #24]
 80057ce:	ebaa 0303 	sub.w	r3, sl, r3
 80057d2:	4599      	cmp	r9, r3
 80057d4:	bfa8      	it	ge
 80057d6:	4699      	movge	r9, r3
 80057d8:	f1b9 0f00 	cmp.w	r9, #0
 80057dc:	dc33      	bgt.n	8005846 <_printf_float+0x396>
 80057de:	f04f 0800 	mov.w	r8, #0
 80057e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057e6:	f104 0b1a 	add.w	fp, r4, #26
 80057ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ec:	ebaa 0303 	sub.w	r3, sl, r3
 80057f0:	eba3 0309 	sub.w	r3, r3, r9
 80057f4:	4543      	cmp	r3, r8
 80057f6:	f77f af79 	ble.w	80056ec <_printf_float+0x23c>
 80057fa:	2301      	movs	r3, #1
 80057fc:	465a      	mov	r2, fp
 80057fe:	4631      	mov	r1, r6
 8005800:	4628      	mov	r0, r5
 8005802:	47b8      	blx	r7
 8005804:	3001      	adds	r0, #1
 8005806:	f43f aeae 	beq.w	8005566 <_printf_float+0xb6>
 800580a:	f108 0801 	add.w	r8, r8, #1
 800580e:	e7ec      	b.n	80057ea <_printf_float+0x33a>
 8005810:	4642      	mov	r2, r8
 8005812:	4631      	mov	r1, r6
 8005814:	4628      	mov	r0, r5
 8005816:	47b8      	blx	r7
 8005818:	3001      	adds	r0, #1
 800581a:	d1c2      	bne.n	80057a2 <_printf_float+0x2f2>
 800581c:	e6a3      	b.n	8005566 <_printf_float+0xb6>
 800581e:	2301      	movs	r3, #1
 8005820:	4631      	mov	r1, r6
 8005822:	4628      	mov	r0, r5
 8005824:	9206      	str	r2, [sp, #24]
 8005826:	47b8      	blx	r7
 8005828:	3001      	adds	r0, #1
 800582a:	f43f ae9c 	beq.w	8005566 <_printf_float+0xb6>
 800582e:	9a06      	ldr	r2, [sp, #24]
 8005830:	f10b 0b01 	add.w	fp, fp, #1
 8005834:	e7bb      	b.n	80057ae <_printf_float+0x2fe>
 8005836:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800583a:	4631      	mov	r1, r6
 800583c:	4628      	mov	r0, r5
 800583e:	47b8      	blx	r7
 8005840:	3001      	adds	r0, #1
 8005842:	d1c0      	bne.n	80057c6 <_printf_float+0x316>
 8005844:	e68f      	b.n	8005566 <_printf_float+0xb6>
 8005846:	9a06      	ldr	r2, [sp, #24]
 8005848:	464b      	mov	r3, r9
 800584a:	4442      	add	r2, r8
 800584c:	4631      	mov	r1, r6
 800584e:	4628      	mov	r0, r5
 8005850:	47b8      	blx	r7
 8005852:	3001      	adds	r0, #1
 8005854:	d1c3      	bne.n	80057de <_printf_float+0x32e>
 8005856:	e686      	b.n	8005566 <_printf_float+0xb6>
 8005858:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800585c:	f1ba 0f01 	cmp.w	sl, #1
 8005860:	dc01      	bgt.n	8005866 <_printf_float+0x3b6>
 8005862:	07db      	lsls	r3, r3, #31
 8005864:	d536      	bpl.n	80058d4 <_printf_float+0x424>
 8005866:	2301      	movs	r3, #1
 8005868:	4642      	mov	r2, r8
 800586a:	4631      	mov	r1, r6
 800586c:	4628      	mov	r0, r5
 800586e:	47b8      	blx	r7
 8005870:	3001      	adds	r0, #1
 8005872:	f43f ae78 	beq.w	8005566 <_printf_float+0xb6>
 8005876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800587a:	4631      	mov	r1, r6
 800587c:	4628      	mov	r0, r5
 800587e:	47b8      	blx	r7
 8005880:	3001      	adds	r0, #1
 8005882:	f43f ae70 	beq.w	8005566 <_printf_float+0xb6>
 8005886:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800588a:	2200      	movs	r2, #0
 800588c:	2300      	movs	r3, #0
 800588e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005892:	f7fb f941 	bl	8000b18 <__aeabi_dcmpeq>
 8005896:	b9c0      	cbnz	r0, 80058ca <_printf_float+0x41a>
 8005898:	4653      	mov	r3, sl
 800589a:	f108 0201 	add.w	r2, r8, #1
 800589e:	4631      	mov	r1, r6
 80058a0:	4628      	mov	r0, r5
 80058a2:	47b8      	blx	r7
 80058a4:	3001      	adds	r0, #1
 80058a6:	d10c      	bne.n	80058c2 <_printf_float+0x412>
 80058a8:	e65d      	b.n	8005566 <_printf_float+0xb6>
 80058aa:	2301      	movs	r3, #1
 80058ac:	465a      	mov	r2, fp
 80058ae:	4631      	mov	r1, r6
 80058b0:	4628      	mov	r0, r5
 80058b2:	47b8      	blx	r7
 80058b4:	3001      	adds	r0, #1
 80058b6:	f43f ae56 	beq.w	8005566 <_printf_float+0xb6>
 80058ba:	f108 0801 	add.w	r8, r8, #1
 80058be:	45d0      	cmp	r8, sl
 80058c0:	dbf3      	blt.n	80058aa <_printf_float+0x3fa>
 80058c2:	464b      	mov	r3, r9
 80058c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80058c8:	e6df      	b.n	800568a <_printf_float+0x1da>
 80058ca:	f04f 0800 	mov.w	r8, #0
 80058ce:	f104 0b1a 	add.w	fp, r4, #26
 80058d2:	e7f4      	b.n	80058be <_printf_float+0x40e>
 80058d4:	2301      	movs	r3, #1
 80058d6:	4642      	mov	r2, r8
 80058d8:	e7e1      	b.n	800589e <_printf_float+0x3ee>
 80058da:	2301      	movs	r3, #1
 80058dc:	464a      	mov	r2, r9
 80058de:	4631      	mov	r1, r6
 80058e0:	4628      	mov	r0, r5
 80058e2:	47b8      	blx	r7
 80058e4:	3001      	adds	r0, #1
 80058e6:	f43f ae3e 	beq.w	8005566 <_printf_float+0xb6>
 80058ea:	f108 0801 	add.w	r8, r8, #1
 80058ee:	68e3      	ldr	r3, [r4, #12]
 80058f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80058f2:	1a5b      	subs	r3, r3, r1
 80058f4:	4543      	cmp	r3, r8
 80058f6:	dcf0      	bgt.n	80058da <_printf_float+0x42a>
 80058f8:	e6fc      	b.n	80056f4 <_printf_float+0x244>
 80058fa:	f04f 0800 	mov.w	r8, #0
 80058fe:	f104 0919 	add.w	r9, r4, #25
 8005902:	e7f4      	b.n	80058ee <_printf_float+0x43e>

08005904 <_printf_common>:
 8005904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005908:	4616      	mov	r6, r2
 800590a:	4698      	mov	r8, r3
 800590c:	688a      	ldr	r2, [r1, #8]
 800590e:	690b      	ldr	r3, [r1, #16]
 8005910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005914:	4293      	cmp	r3, r2
 8005916:	bfb8      	it	lt
 8005918:	4613      	movlt	r3, r2
 800591a:	6033      	str	r3, [r6, #0]
 800591c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005920:	4607      	mov	r7, r0
 8005922:	460c      	mov	r4, r1
 8005924:	b10a      	cbz	r2, 800592a <_printf_common+0x26>
 8005926:	3301      	adds	r3, #1
 8005928:	6033      	str	r3, [r6, #0]
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	0699      	lsls	r1, r3, #26
 800592e:	bf42      	ittt	mi
 8005930:	6833      	ldrmi	r3, [r6, #0]
 8005932:	3302      	addmi	r3, #2
 8005934:	6033      	strmi	r3, [r6, #0]
 8005936:	6825      	ldr	r5, [r4, #0]
 8005938:	f015 0506 	ands.w	r5, r5, #6
 800593c:	d106      	bne.n	800594c <_printf_common+0x48>
 800593e:	f104 0a19 	add.w	sl, r4, #25
 8005942:	68e3      	ldr	r3, [r4, #12]
 8005944:	6832      	ldr	r2, [r6, #0]
 8005946:	1a9b      	subs	r3, r3, r2
 8005948:	42ab      	cmp	r3, r5
 800594a:	dc26      	bgt.n	800599a <_printf_common+0x96>
 800594c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005950:	6822      	ldr	r2, [r4, #0]
 8005952:	3b00      	subs	r3, #0
 8005954:	bf18      	it	ne
 8005956:	2301      	movne	r3, #1
 8005958:	0692      	lsls	r2, r2, #26
 800595a:	d42b      	bmi.n	80059b4 <_printf_common+0xb0>
 800595c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005960:	4641      	mov	r1, r8
 8005962:	4638      	mov	r0, r7
 8005964:	47c8      	blx	r9
 8005966:	3001      	adds	r0, #1
 8005968:	d01e      	beq.n	80059a8 <_printf_common+0xa4>
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	6922      	ldr	r2, [r4, #16]
 800596e:	f003 0306 	and.w	r3, r3, #6
 8005972:	2b04      	cmp	r3, #4
 8005974:	bf02      	ittt	eq
 8005976:	68e5      	ldreq	r5, [r4, #12]
 8005978:	6833      	ldreq	r3, [r6, #0]
 800597a:	1aed      	subeq	r5, r5, r3
 800597c:	68a3      	ldr	r3, [r4, #8]
 800597e:	bf0c      	ite	eq
 8005980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005984:	2500      	movne	r5, #0
 8005986:	4293      	cmp	r3, r2
 8005988:	bfc4      	itt	gt
 800598a:	1a9b      	subgt	r3, r3, r2
 800598c:	18ed      	addgt	r5, r5, r3
 800598e:	2600      	movs	r6, #0
 8005990:	341a      	adds	r4, #26
 8005992:	42b5      	cmp	r5, r6
 8005994:	d11a      	bne.n	80059cc <_printf_common+0xc8>
 8005996:	2000      	movs	r0, #0
 8005998:	e008      	b.n	80059ac <_printf_common+0xa8>
 800599a:	2301      	movs	r3, #1
 800599c:	4652      	mov	r2, sl
 800599e:	4641      	mov	r1, r8
 80059a0:	4638      	mov	r0, r7
 80059a2:	47c8      	blx	r9
 80059a4:	3001      	adds	r0, #1
 80059a6:	d103      	bne.n	80059b0 <_printf_common+0xac>
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b0:	3501      	adds	r5, #1
 80059b2:	e7c6      	b.n	8005942 <_printf_common+0x3e>
 80059b4:	18e1      	adds	r1, r4, r3
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	2030      	movs	r0, #48	@ 0x30
 80059ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059be:	4422      	add	r2, r4
 80059c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059c8:	3302      	adds	r3, #2
 80059ca:	e7c7      	b.n	800595c <_printf_common+0x58>
 80059cc:	2301      	movs	r3, #1
 80059ce:	4622      	mov	r2, r4
 80059d0:	4641      	mov	r1, r8
 80059d2:	4638      	mov	r0, r7
 80059d4:	47c8      	blx	r9
 80059d6:	3001      	adds	r0, #1
 80059d8:	d0e6      	beq.n	80059a8 <_printf_common+0xa4>
 80059da:	3601      	adds	r6, #1
 80059dc:	e7d9      	b.n	8005992 <_printf_common+0x8e>
	...

080059e0 <_printf_i>:
 80059e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059e4:	7e0f      	ldrb	r7, [r1, #24]
 80059e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059e8:	2f78      	cmp	r7, #120	@ 0x78
 80059ea:	4691      	mov	r9, r2
 80059ec:	4680      	mov	r8, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	469a      	mov	sl, r3
 80059f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059f6:	d807      	bhi.n	8005a08 <_printf_i+0x28>
 80059f8:	2f62      	cmp	r7, #98	@ 0x62
 80059fa:	d80a      	bhi.n	8005a12 <_printf_i+0x32>
 80059fc:	2f00      	cmp	r7, #0
 80059fe:	f000 80d2 	beq.w	8005ba6 <_printf_i+0x1c6>
 8005a02:	2f58      	cmp	r7, #88	@ 0x58
 8005a04:	f000 80b9 	beq.w	8005b7a <_printf_i+0x19a>
 8005a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a10:	e03a      	b.n	8005a88 <_printf_i+0xa8>
 8005a12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a16:	2b15      	cmp	r3, #21
 8005a18:	d8f6      	bhi.n	8005a08 <_printf_i+0x28>
 8005a1a:	a101      	add	r1, pc, #4	@ (adr r1, 8005a20 <_printf_i+0x40>)
 8005a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a20:	08005a79 	.word	0x08005a79
 8005a24:	08005a8d 	.word	0x08005a8d
 8005a28:	08005a09 	.word	0x08005a09
 8005a2c:	08005a09 	.word	0x08005a09
 8005a30:	08005a09 	.word	0x08005a09
 8005a34:	08005a09 	.word	0x08005a09
 8005a38:	08005a8d 	.word	0x08005a8d
 8005a3c:	08005a09 	.word	0x08005a09
 8005a40:	08005a09 	.word	0x08005a09
 8005a44:	08005a09 	.word	0x08005a09
 8005a48:	08005a09 	.word	0x08005a09
 8005a4c:	08005b8d 	.word	0x08005b8d
 8005a50:	08005ab7 	.word	0x08005ab7
 8005a54:	08005b47 	.word	0x08005b47
 8005a58:	08005a09 	.word	0x08005a09
 8005a5c:	08005a09 	.word	0x08005a09
 8005a60:	08005baf 	.word	0x08005baf
 8005a64:	08005a09 	.word	0x08005a09
 8005a68:	08005ab7 	.word	0x08005ab7
 8005a6c:	08005a09 	.word	0x08005a09
 8005a70:	08005a09 	.word	0x08005a09
 8005a74:	08005b4f 	.word	0x08005b4f
 8005a78:	6833      	ldr	r3, [r6, #0]
 8005a7a:	1d1a      	adds	r2, r3, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6032      	str	r2, [r6, #0]
 8005a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e09d      	b.n	8005bc8 <_printf_i+0x1e8>
 8005a8c:	6833      	ldr	r3, [r6, #0]
 8005a8e:	6820      	ldr	r0, [r4, #0]
 8005a90:	1d19      	adds	r1, r3, #4
 8005a92:	6031      	str	r1, [r6, #0]
 8005a94:	0606      	lsls	r6, r0, #24
 8005a96:	d501      	bpl.n	8005a9c <_printf_i+0xbc>
 8005a98:	681d      	ldr	r5, [r3, #0]
 8005a9a:	e003      	b.n	8005aa4 <_printf_i+0xc4>
 8005a9c:	0645      	lsls	r5, r0, #25
 8005a9e:	d5fb      	bpl.n	8005a98 <_printf_i+0xb8>
 8005aa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005aa4:	2d00      	cmp	r5, #0
 8005aa6:	da03      	bge.n	8005ab0 <_printf_i+0xd0>
 8005aa8:	232d      	movs	r3, #45	@ 0x2d
 8005aaa:	426d      	negs	r5, r5
 8005aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ab0:	4859      	ldr	r0, [pc, #356]	@ (8005c18 <_printf_i+0x238>)
 8005ab2:	230a      	movs	r3, #10
 8005ab4:	e011      	b.n	8005ada <_printf_i+0xfa>
 8005ab6:	6821      	ldr	r1, [r4, #0]
 8005ab8:	6833      	ldr	r3, [r6, #0]
 8005aba:	0608      	lsls	r0, r1, #24
 8005abc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ac0:	d402      	bmi.n	8005ac8 <_printf_i+0xe8>
 8005ac2:	0649      	lsls	r1, r1, #25
 8005ac4:	bf48      	it	mi
 8005ac6:	b2ad      	uxthmi	r5, r5
 8005ac8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005aca:	4853      	ldr	r0, [pc, #332]	@ (8005c18 <_printf_i+0x238>)
 8005acc:	6033      	str	r3, [r6, #0]
 8005ace:	bf14      	ite	ne
 8005ad0:	230a      	movne	r3, #10
 8005ad2:	2308      	moveq	r3, #8
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ada:	6866      	ldr	r6, [r4, #4]
 8005adc:	60a6      	str	r6, [r4, #8]
 8005ade:	2e00      	cmp	r6, #0
 8005ae0:	bfa2      	ittt	ge
 8005ae2:	6821      	ldrge	r1, [r4, #0]
 8005ae4:	f021 0104 	bicge.w	r1, r1, #4
 8005ae8:	6021      	strge	r1, [r4, #0]
 8005aea:	b90d      	cbnz	r5, 8005af0 <_printf_i+0x110>
 8005aec:	2e00      	cmp	r6, #0
 8005aee:	d04b      	beq.n	8005b88 <_printf_i+0x1a8>
 8005af0:	4616      	mov	r6, r2
 8005af2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005af6:	fb03 5711 	mls	r7, r3, r1, r5
 8005afa:	5dc7      	ldrb	r7, [r0, r7]
 8005afc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b00:	462f      	mov	r7, r5
 8005b02:	42bb      	cmp	r3, r7
 8005b04:	460d      	mov	r5, r1
 8005b06:	d9f4      	bls.n	8005af2 <_printf_i+0x112>
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d10b      	bne.n	8005b24 <_printf_i+0x144>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	07df      	lsls	r7, r3, #31
 8005b10:	d508      	bpl.n	8005b24 <_printf_i+0x144>
 8005b12:	6923      	ldr	r3, [r4, #16]
 8005b14:	6861      	ldr	r1, [r4, #4]
 8005b16:	4299      	cmp	r1, r3
 8005b18:	bfde      	ittt	le
 8005b1a:	2330      	movle	r3, #48	@ 0x30
 8005b1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b20:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005b24:	1b92      	subs	r2, r2, r6
 8005b26:	6122      	str	r2, [r4, #16]
 8005b28:	f8cd a000 	str.w	sl, [sp]
 8005b2c:	464b      	mov	r3, r9
 8005b2e:	aa03      	add	r2, sp, #12
 8005b30:	4621      	mov	r1, r4
 8005b32:	4640      	mov	r0, r8
 8005b34:	f7ff fee6 	bl	8005904 <_printf_common>
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d14a      	bne.n	8005bd2 <_printf_i+0x1f2>
 8005b3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b40:	b004      	add	sp, #16
 8005b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	f043 0320 	orr.w	r3, r3, #32
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	4833      	ldr	r0, [pc, #204]	@ (8005c1c <_printf_i+0x23c>)
 8005b50:	2778      	movs	r7, #120	@ 0x78
 8005b52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	6831      	ldr	r1, [r6, #0]
 8005b5a:	061f      	lsls	r7, r3, #24
 8005b5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b60:	d402      	bmi.n	8005b68 <_printf_i+0x188>
 8005b62:	065f      	lsls	r7, r3, #25
 8005b64:	bf48      	it	mi
 8005b66:	b2ad      	uxthmi	r5, r5
 8005b68:	6031      	str	r1, [r6, #0]
 8005b6a:	07d9      	lsls	r1, r3, #31
 8005b6c:	bf44      	itt	mi
 8005b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b72:	6023      	strmi	r3, [r4, #0]
 8005b74:	b11d      	cbz	r5, 8005b7e <_printf_i+0x19e>
 8005b76:	2310      	movs	r3, #16
 8005b78:	e7ac      	b.n	8005ad4 <_printf_i+0xf4>
 8005b7a:	4827      	ldr	r0, [pc, #156]	@ (8005c18 <_printf_i+0x238>)
 8005b7c:	e7e9      	b.n	8005b52 <_printf_i+0x172>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	f023 0320 	bic.w	r3, r3, #32
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	e7f6      	b.n	8005b76 <_printf_i+0x196>
 8005b88:	4616      	mov	r6, r2
 8005b8a:	e7bd      	b.n	8005b08 <_printf_i+0x128>
 8005b8c:	6833      	ldr	r3, [r6, #0]
 8005b8e:	6825      	ldr	r5, [r4, #0]
 8005b90:	6961      	ldr	r1, [r4, #20]
 8005b92:	1d18      	adds	r0, r3, #4
 8005b94:	6030      	str	r0, [r6, #0]
 8005b96:	062e      	lsls	r6, r5, #24
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	d501      	bpl.n	8005ba0 <_printf_i+0x1c0>
 8005b9c:	6019      	str	r1, [r3, #0]
 8005b9e:	e002      	b.n	8005ba6 <_printf_i+0x1c6>
 8005ba0:	0668      	lsls	r0, r5, #25
 8005ba2:	d5fb      	bpl.n	8005b9c <_printf_i+0x1bc>
 8005ba4:	8019      	strh	r1, [r3, #0]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	6123      	str	r3, [r4, #16]
 8005baa:	4616      	mov	r6, r2
 8005bac:	e7bc      	b.n	8005b28 <_printf_i+0x148>
 8005bae:	6833      	ldr	r3, [r6, #0]
 8005bb0:	1d1a      	adds	r2, r3, #4
 8005bb2:	6032      	str	r2, [r6, #0]
 8005bb4:	681e      	ldr	r6, [r3, #0]
 8005bb6:	6862      	ldr	r2, [r4, #4]
 8005bb8:	2100      	movs	r1, #0
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f7fa fb30 	bl	8000220 <memchr>
 8005bc0:	b108      	cbz	r0, 8005bc6 <_printf_i+0x1e6>
 8005bc2:	1b80      	subs	r0, r0, r6
 8005bc4:	6060      	str	r0, [r4, #4]
 8005bc6:	6863      	ldr	r3, [r4, #4]
 8005bc8:	6123      	str	r3, [r4, #16]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bd0:	e7aa      	b.n	8005b28 <_printf_i+0x148>
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	4632      	mov	r2, r6
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	4640      	mov	r0, r8
 8005bda:	47d0      	blx	sl
 8005bdc:	3001      	adds	r0, #1
 8005bde:	d0ad      	beq.n	8005b3c <_printf_i+0x15c>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	079b      	lsls	r3, r3, #30
 8005be4:	d413      	bmi.n	8005c0e <_printf_i+0x22e>
 8005be6:	68e0      	ldr	r0, [r4, #12]
 8005be8:	9b03      	ldr	r3, [sp, #12]
 8005bea:	4298      	cmp	r0, r3
 8005bec:	bfb8      	it	lt
 8005bee:	4618      	movlt	r0, r3
 8005bf0:	e7a6      	b.n	8005b40 <_printf_i+0x160>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4632      	mov	r2, r6
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	47d0      	blx	sl
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	d09d      	beq.n	8005b3c <_printf_i+0x15c>
 8005c00:	3501      	adds	r5, #1
 8005c02:	68e3      	ldr	r3, [r4, #12]
 8005c04:	9903      	ldr	r1, [sp, #12]
 8005c06:	1a5b      	subs	r3, r3, r1
 8005c08:	42ab      	cmp	r3, r5
 8005c0a:	dcf2      	bgt.n	8005bf2 <_printf_i+0x212>
 8005c0c:	e7eb      	b.n	8005be6 <_printf_i+0x206>
 8005c0e:	2500      	movs	r5, #0
 8005c10:	f104 0619 	add.w	r6, r4, #25
 8005c14:	e7f5      	b.n	8005c02 <_printf_i+0x222>
 8005c16:	bf00      	nop
 8005c18:	0800805a 	.word	0x0800805a
 8005c1c:	0800806b 	.word	0x0800806b

08005c20 <siprintf>:
 8005c20:	b40e      	push	{r1, r2, r3}
 8005c22:	b500      	push	{lr}
 8005c24:	b09c      	sub	sp, #112	@ 0x70
 8005c26:	ab1d      	add	r3, sp, #116	@ 0x74
 8005c28:	9002      	str	r0, [sp, #8]
 8005c2a:	9006      	str	r0, [sp, #24]
 8005c2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005c30:	4809      	ldr	r0, [pc, #36]	@ (8005c58 <siprintf+0x38>)
 8005c32:	9107      	str	r1, [sp, #28]
 8005c34:	9104      	str	r1, [sp, #16]
 8005c36:	4909      	ldr	r1, [pc, #36]	@ (8005c5c <siprintf+0x3c>)
 8005c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c3c:	9105      	str	r1, [sp, #20]
 8005c3e:	6800      	ldr	r0, [r0, #0]
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	a902      	add	r1, sp, #8
 8005c44:	f000 ffb0 	bl	8006ba8 <_svfiprintf_r>
 8005c48:	9b02      	ldr	r3, [sp, #8]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	b01c      	add	sp, #112	@ 0x70
 8005c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c54:	b003      	add	sp, #12
 8005c56:	4770      	bx	lr
 8005c58:	20000018 	.word	0x20000018
 8005c5c:	ffff0208 	.word	0xffff0208

08005c60 <std>:
 8005c60:	2300      	movs	r3, #0
 8005c62:	b510      	push	{r4, lr}
 8005c64:	4604      	mov	r4, r0
 8005c66:	e9c0 3300 	strd	r3, r3, [r0]
 8005c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c6e:	6083      	str	r3, [r0, #8]
 8005c70:	8181      	strh	r1, [r0, #12]
 8005c72:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c74:	81c2      	strh	r2, [r0, #14]
 8005c76:	6183      	str	r3, [r0, #24]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	2208      	movs	r2, #8
 8005c7c:	305c      	adds	r0, #92	@ 0x5c
 8005c7e:	f000 f8b1 	bl	8005de4 <memset>
 8005c82:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb8 <std+0x58>)
 8005c84:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c86:	4b0d      	ldr	r3, [pc, #52]	@ (8005cbc <std+0x5c>)
 8005c88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc0 <std+0x60>)
 8005c8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc4 <std+0x64>)
 8005c90:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c92:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc8 <std+0x68>)
 8005c94:	6224      	str	r4, [r4, #32]
 8005c96:	429c      	cmp	r4, r3
 8005c98:	d006      	beq.n	8005ca8 <std+0x48>
 8005c9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c9e:	4294      	cmp	r4, r2
 8005ca0:	d002      	beq.n	8005ca8 <std+0x48>
 8005ca2:	33d0      	adds	r3, #208	@ 0xd0
 8005ca4:	429c      	cmp	r4, r3
 8005ca6:	d105      	bne.n	8005cb4 <std+0x54>
 8005ca8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb0:	f000 b8ce 	b.w	8005e50 <__retarget_lock_init_recursive>
 8005cb4:	bd10      	pop	{r4, pc}
 8005cb6:	bf00      	nop
 8005cb8:	08007769 	.word	0x08007769
 8005cbc:	0800778b 	.word	0x0800778b
 8005cc0:	080077c3 	.word	0x080077c3
 8005cc4:	080077e7 	.word	0x080077e7
 8005cc8:	200005e8 	.word	0x200005e8

08005ccc <stdio_exit_handler>:
 8005ccc:	4a02      	ldr	r2, [pc, #8]	@ (8005cd8 <stdio_exit_handler+0xc>)
 8005cce:	4903      	ldr	r1, [pc, #12]	@ (8005cdc <stdio_exit_handler+0x10>)
 8005cd0:	4803      	ldr	r0, [pc, #12]	@ (8005ce0 <stdio_exit_handler+0x14>)
 8005cd2:	f000 b869 	b.w	8005da8 <_fwalk_sglue>
 8005cd6:	bf00      	nop
 8005cd8:	2000000c 	.word	0x2000000c
 8005cdc:	08006ffd 	.word	0x08006ffd
 8005ce0:	2000001c 	.word	0x2000001c

08005ce4 <cleanup_stdio>:
 8005ce4:	6841      	ldr	r1, [r0, #4]
 8005ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8005d18 <cleanup_stdio+0x34>)
 8005ce8:	4299      	cmp	r1, r3
 8005cea:	b510      	push	{r4, lr}
 8005cec:	4604      	mov	r4, r0
 8005cee:	d001      	beq.n	8005cf4 <cleanup_stdio+0x10>
 8005cf0:	f001 f984 	bl	8006ffc <_fflush_r>
 8005cf4:	68a1      	ldr	r1, [r4, #8]
 8005cf6:	4b09      	ldr	r3, [pc, #36]	@ (8005d1c <cleanup_stdio+0x38>)
 8005cf8:	4299      	cmp	r1, r3
 8005cfa:	d002      	beq.n	8005d02 <cleanup_stdio+0x1e>
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f001 f97d 	bl	8006ffc <_fflush_r>
 8005d02:	68e1      	ldr	r1, [r4, #12]
 8005d04:	4b06      	ldr	r3, [pc, #24]	@ (8005d20 <cleanup_stdio+0x3c>)
 8005d06:	4299      	cmp	r1, r3
 8005d08:	d004      	beq.n	8005d14 <cleanup_stdio+0x30>
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d10:	f001 b974 	b.w	8006ffc <_fflush_r>
 8005d14:	bd10      	pop	{r4, pc}
 8005d16:	bf00      	nop
 8005d18:	200005e8 	.word	0x200005e8
 8005d1c:	20000650 	.word	0x20000650
 8005d20:	200006b8 	.word	0x200006b8

08005d24 <global_stdio_init.part.0>:
 8005d24:	b510      	push	{r4, lr}
 8005d26:	4b0b      	ldr	r3, [pc, #44]	@ (8005d54 <global_stdio_init.part.0+0x30>)
 8005d28:	4c0b      	ldr	r4, [pc, #44]	@ (8005d58 <global_stdio_init.part.0+0x34>)
 8005d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8005d5c <global_stdio_init.part.0+0x38>)
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	4620      	mov	r0, r4
 8005d30:	2200      	movs	r2, #0
 8005d32:	2104      	movs	r1, #4
 8005d34:	f7ff ff94 	bl	8005c60 <std>
 8005d38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	2109      	movs	r1, #9
 8005d40:	f7ff ff8e 	bl	8005c60 <std>
 8005d44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d48:	2202      	movs	r2, #2
 8005d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d4e:	2112      	movs	r1, #18
 8005d50:	f7ff bf86 	b.w	8005c60 <std>
 8005d54:	20000720 	.word	0x20000720
 8005d58:	200005e8 	.word	0x200005e8
 8005d5c:	08005ccd 	.word	0x08005ccd

08005d60 <__sfp_lock_acquire>:
 8005d60:	4801      	ldr	r0, [pc, #4]	@ (8005d68 <__sfp_lock_acquire+0x8>)
 8005d62:	f000 b876 	b.w	8005e52 <__retarget_lock_acquire_recursive>
 8005d66:	bf00      	nop
 8005d68:	20000725 	.word	0x20000725

08005d6c <__sfp_lock_release>:
 8005d6c:	4801      	ldr	r0, [pc, #4]	@ (8005d74 <__sfp_lock_release+0x8>)
 8005d6e:	f000 b871 	b.w	8005e54 <__retarget_lock_release_recursive>
 8005d72:	bf00      	nop
 8005d74:	20000725 	.word	0x20000725

08005d78 <__sinit>:
 8005d78:	b510      	push	{r4, lr}
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	f7ff fff0 	bl	8005d60 <__sfp_lock_acquire>
 8005d80:	6a23      	ldr	r3, [r4, #32]
 8005d82:	b11b      	cbz	r3, 8005d8c <__sinit+0x14>
 8005d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d88:	f7ff bff0 	b.w	8005d6c <__sfp_lock_release>
 8005d8c:	4b04      	ldr	r3, [pc, #16]	@ (8005da0 <__sinit+0x28>)
 8005d8e:	6223      	str	r3, [r4, #32]
 8005d90:	4b04      	ldr	r3, [pc, #16]	@ (8005da4 <__sinit+0x2c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1f5      	bne.n	8005d84 <__sinit+0xc>
 8005d98:	f7ff ffc4 	bl	8005d24 <global_stdio_init.part.0>
 8005d9c:	e7f2      	b.n	8005d84 <__sinit+0xc>
 8005d9e:	bf00      	nop
 8005da0:	08005ce5 	.word	0x08005ce5
 8005da4:	20000720 	.word	0x20000720

08005da8 <_fwalk_sglue>:
 8005da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dac:	4607      	mov	r7, r0
 8005dae:	4688      	mov	r8, r1
 8005db0:	4614      	mov	r4, r2
 8005db2:	2600      	movs	r6, #0
 8005db4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005db8:	f1b9 0901 	subs.w	r9, r9, #1
 8005dbc:	d505      	bpl.n	8005dca <_fwalk_sglue+0x22>
 8005dbe:	6824      	ldr	r4, [r4, #0]
 8005dc0:	2c00      	cmp	r4, #0
 8005dc2:	d1f7      	bne.n	8005db4 <_fwalk_sglue+0xc>
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dca:	89ab      	ldrh	r3, [r5, #12]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d907      	bls.n	8005de0 <_fwalk_sglue+0x38>
 8005dd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	d003      	beq.n	8005de0 <_fwalk_sglue+0x38>
 8005dd8:	4629      	mov	r1, r5
 8005dda:	4638      	mov	r0, r7
 8005ddc:	47c0      	blx	r8
 8005dde:	4306      	orrs	r6, r0
 8005de0:	3568      	adds	r5, #104	@ 0x68
 8005de2:	e7e9      	b.n	8005db8 <_fwalk_sglue+0x10>

08005de4 <memset>:
 8005de4:	4402      	add	r2, r0
 8005de6:	4603      	mov	r3, r0
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d100      	bne.n	8005dee <memset+0xa>
 8005dec:	4770      	bx	lr
 8005dee:	f803 1b01 	strb.w	r1, [r3], #1
 8005df2:	e7f9      	b.n	8005de8 <memset+0x4>

08005df4 <_localeconv_r>:
 8005df4:	4800      	ldr	r0, [pc, #0]	@ (8005df8 <_localeconv_r+0x4>)
 8005df6:	4770      	bx	lr
 8005df8:	20000158 	.word	0x20000158

08005dfc <__errno>:
 8005dfc:	4b01      	ldr	r3, [pc, #4]	@ (8005e04 <__errno+0x8>)
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000018 	.word	0x20000018

08005e08 <__libc_init_array>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8005e40 <__libc_init_array+0x38>)
 8005e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8005e44 <__libc_init_array+0x3c>)
 8005e0e:	1b64      	subs	r4, r4, r5
 8005e10:	10a4      	asrs	r4, r4, #2
 8005e12:	2600      	movs	r6, #0
 8005e14:	42a6      	cmp	r6, r4
 8005e16:	d109      	bne.n	8005e2c <__libc_init_array+0x24>
 8005e18:	4d0b      	ldr	r5, [pc, #44]	@ (8005e48 <__libc_init_array+0x40>)
 8005e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8005e4c <__libc_init_array+0x44>)
 8005e1c:	f002 f8ee 	bl	8007ffc <_init>
 8005e20:	1b64      	subs	r4, r4, r5
 8005e22:	10a4      	asrs	r4, r4, #2
 8005e24:	2600      	movs	r6, #0
 8005e26:	42a6      	cmp	r6, r4
 8005e28:	d105      	bne.n	8005e36 <__libc_init_array+0x2e>
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e30:	4798      	blx	r3
 8005e32:	3601      	adds	r6, #1
 8005e34:	e7ee      	b.n	8005e14 <__libc_init_array+0xc>
 8005e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e3a:	4798      	blx	r3
 8005e3c:	3601      	adds	r6, #1
 8005e3e:	e7f2      	b.n	8005e26 <__libc_init_array+0x1e>
 8005e40:	080083c0 	.word	0x080083c0
 8005e44:	080083c0 	.word	0x080083c0
 8005e48:	080083c0 	.word	0x080083c0
 8005e4c:	080083c4 	.word	0x080083c4

08005e50 <__retarget_lock_init_recursive>:
 8005e50:	4770      	bx	lr

08005e52 <__retarget_lock_acquire_recursive>:
 8005e52:	4770      	bx	lr

08005e54 <__retarget_lock_release_recursive>:
 8005e54:	4770      	bx	lr

08005e56 <quorem>:
 8005e56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5a:	6903      	ldr	r3, [r0, #16]
 8005e5c:	690c      	ldr	r4, [r1, #16]
 8005e5e:	42a3      	cmp	r3, r4
 8005e60:	4607      	mov	r7, r0
 8005e62:	db7e      	blt.n	8005f62 <quorem+0x10c>
 8005e64:	3c01      	subs	r4, #1
 8005e66:	f101 0814 	add.w	r8, r1, #20
 8005e6a:	00a3      	lsls	r3, r4, #2
 8005e6c:	f100 0514 	add.w	r5, r0, #20
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e80:	3301      	adds	r3, #1
 8005e82:	429a      	cmp	r2, r3
 8005e84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e88:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e8c:	d32e      	bcc.n	8005eec <quorem+0x96>
 8005e8e:	f04f 0a00 	mov.w	sl, #0
 8005e92:	46c4      	mov	ip, r8
 8005e94:	46ae      	mov	lr, r5
 8005e96:	46d3      	mov	fp, sl
 8005e98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e9c:	b298      	uxth	r0, r3
 8005e9e:	fb06 a000 	mla	r0, r6, r0, sl
 8005ea2:	0c02      	lsrs	r2, r0, #16
 8005ea4:	0c1b      	lsrs	r3, r3, #16
 8005ea6:	fb06 2303 	mla	r3, r6, r3, r2
 8005eaa:	f8de 2000 	ldr.w	r2, [lr]
 8005eae:	b280      	uxth	r0, r0
 8005eb0:	b292      	uxth	r2, r2
 8005eb2:	1a12      	subs	r2, r2, r0
 8005eb4:	445a      	add	r2, fp
 8005eb6:	f8de 0000 	ldr.w	r0, [lr]
 8005eba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005ec4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005ec8:	b292      	uxth	r2, r2
 8005eca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005ece:	45e1      	cmp	r9, ip
 8005ed0:	f84e 2b04 	str.w	r2, [lr], #4
 8005ed4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005ed8:	d2de      	bcs.n	8005e98 <quorem+0x42>
 8005eda:	9b00      	ldr	r3, [sp, #0]
 8005edc:	58eb      	ldr	r3, [r5, r3]
 8005ede:	b92b      	cbnz	r3, 8005eec <quorem+0x96>
 8005ee0:	9b01      	ldr	r3, [sp, #4]
 8005ee2:	3b04      	subs	r3, #4
 8005ee4:	429d      	cmp	r5, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	d32f      	bcc.n	8005f4a <quorem+0xf4>
 8005eea:	613c      	str	r4, [r7, #16]
 8005eec:	4638      	mov	r0, r7
 8005eee:	f001 fb33 	bl	8007558 <__mcmp>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	db25      	blt.n	8005f42 <quorem+0xec>
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	2000      	movs	r0, #0
 8005efa:	f858 2b04 	ldr.w	r2, [r8], #4
 8005efe:	f8d1 c000 	ldr.w	ip, [r1]
 8005f02:	fa1f fe82 	uxth.w	lr, r2
 8005f06:	fa1f f38c 	uxth.w	r3, ip
 8005f0a:	eba3 030e 	sub.w	r3, r3, lr
 8005f0e:	4403      	add	r3, r0
 8005f10:	0c12      	lsrs	r2, r2, #16
 8005f12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005f16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f20:	45c1      	cmp	r9, r8
 8005f22:	f841 3b04 	str.w	r3, [r1], #4
 8005f26:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f2a:	d2e6      	bcs.n	8005efa <quorem+0xa4>
 8005f2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f34:	b922      	cbnz	r2, 8005f40 <quorem+0xea>
 8005f36:	3b04      	subs	r3, #4
 8005f38:	429d      	cmp	r5, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	d30b      	bcc.n	8005f56 <quorem+0x100>
 8005f3e:	613c      	str	r4, [r7, #16]
 8005f40:	3601      	adds	r6, #1
 8005f42:	4630      	mov	r0, r6
 8005f44:	b003      	add	sp, #12
 8005f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4a:	6812      	ldr	r2, [r2, #0]
 8005f4c:	3b04      	subs	r3, #4
 8005f4e:	2a00      	cmp	r2, #0
 8005f50:	d1cb      	bne.n	8005eea <quorem+0x94>
 8005f52:	3c01      	subs	r4, #1
 8005f54:	e7c6      	b.n	8005ee4 <quorem+0x8e>
 8005f56:	6812      	ldr	r2, [r2, #0]
 8005f58:	3b04      	subs	r3, #4
 8005f5a:	2a00      	cmp	r2, #0
 8005f5c:	d1ef      	bne.n	8005f3e <quorem+0xe8>
 8005f5e:	3c01      	subs	r4, #1
 8005f60:	e7ea      	b.n	8005f38 <quorem+0xe2>
 8005f62:	2000      	movs	r0, #0
 8005f64:	e7ee      	b.n	8005f44 <quorem+0xee>
	...

08005f68 <_dtoa_r>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	69c7      	ldr	r7, [r0, #28]
 8005f6e:	b099      	sub	sp, #100	@ 0x64
 8005f70:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f74:	ec55 4b10 	vmov	r4, r5, d0
 8005f78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005f7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f7c:	4683      	mov	fp, r0
 8005f7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005f80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f82:	b97f      	cbnz	r7, 8005fa4 <_dtoa_r+0x3c>
 8005f84:	2010      	movs	r0, #16
 8005f86:	f000 ff0b 	bl	8006da0 <malloc>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005f90:	b920      	cbnz	r0, 8005f9c <_dtoa_r+0x34>
 8005f92:	4ba7      	ldr	r3, [pc, #668]	@ (8006230 <_dtoa_r+0x2c8>)
 8005f94:	21ef      	movs	r1, #239	@ 0xef
 8005f96:	48a7      	ldr	r0, [pc, #668]	@ (8006234 <_dtoa_r+0x2cc>)
 8005f98:	f001 fcd6 	bl	8007948 <__assert_func>
 8005f9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005fa0:	6007      	str	r7, [r0, #0]
 8005fa2:	60c7      	str	r7, [r0, #12]
 8005fa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005fa8:	6819      	ldr	r1, [r3, #0]
 8005faa:	b159      	cbz	r1, 8005fc4 <_dtoa_r+0x5c>
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	604a      	str	r2, [r1, #4]
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4093      	lsls	r3, r2
 8005fb4:	608b      	str	r3, [r1, #8]
 8005fb6:	4658      	mov	r0, fp
 8005fb8:	f001 f894 	bl	80070e4 <_Bfree>
 8005fbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	1e2b      	subs	r3, r5, #0
 8005fc6:	bfb9      	ittee	lt
 8005fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005fcc:	9303      	strlt	r3, [sp, #12]
 8005fce:	2300      	movge	r3, #0
 8005fd0:	6033      	strge	r3, [r6, #0]
 8005fd2:	9f03      	ldr	r7, [sp, #12]
 8005fd4:	4b98      	ldr	r3, [pc, #608]	@ (8006238 <_dtoa_r+0x2d0>)
 8005fd6:	bfbc      	itt	lt
 8005fd8:	2201      	movlt	r2, #1
 8005fda:	6032      	strlt	r2, [r6, #0]
 8005fdc:	43bb      	bics	r3, r7
 8005fde:	d112      	bne.n	8006006 <_dtoa_r+0x9e>
 8005fe0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005fe2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005fec:	4323      	orrs	r3, r4
 8005fee:	f000 854d 	beq.w	8006a8c <_dtoa_r+0xb24>
 8005ff2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ff4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800624c <_dtoa_r+0x2e4>
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 854f 	beq.w	8006a9c <_dtoa_r+0xb34>
 8005ffe:	f10a 0303 	add.w	r3, sl, #3
 8006002:	f000 bd49 	b.w	8006a98 <_dtoa_r+0xb30>
 8006006:	ed9d 7b02 	vldr	d7, [sp, #8]
 800600a:	2200      	movs	r2, #0
 800600c:	ec51 0b17 	vmov	r0, r1, d7
 8006010:	2300      	movs	r3, #0
 8006012:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006016:	f7fa fd7f 	bl	8000b18 <__aeabi_dcmpeq>
 800601a:	4680      	mov	r8, r0
 800601c:	b158      	cbz	r0, 8006036 <_dtoa_r+0xce>
 800601e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006020:	2301      	movs	r3, #1
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006026:	b113      	cbz	r3, 800602e <_dtoa_r+0xc6>
 8006028:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800602a:	4b84      	ldr	r3, [pc, #528]	@ (800623c <_dtoa_r+0x2d4>)
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006250 <_dtoa_r+0x2e8>
 8006032:	f000 bd33 	b.w	8006a9c <_dtoa_r+0xb34>
 8006036:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800603a:	aa16      	add	r2, sp, #88	@ 0x58
 800603c:	a917      	add	r1, sp, #92	@ 0x5c
 800603e:	4658      	mov	r0, fp
 8006040:	f001 fb3a 	bl	80076b8 <__d2b>
 8006044:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006048:	4681      	mov	r9, r0
 800604a:	2e00      	cmp	r6, #0
 800604c:	d077      	beq.n	800613e <_dtoa_r+0x1d6>
 800604e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006050:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800605c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006060:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006064:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006068:	4619      	mov	r1, r3
 800606a:	2200      	movs	r2, #0
 800606c:	4b74      	ldr	r3, [pc, #464]	@ (8006240 <_dtoa_r+0x2d8>)
 800606e:	f7fa f933 	bl	80002d8 <__aeabi_dsub>
 8006072:	a369      	add	r3, pc, #420	@ (adr r3, 8006218 <_dtoa_r+0x2b0>)
 8006074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006078:	f7fa fae6 	bl	8000648 <__aeabi_dmul>
 800607c:	a368      	add	r3, pc, #416	@ (adr r3, 8006220 <_dtoa_r+0x2b8>)
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	f7fa f92b 	bl	80002dc <__adddf3>
 8006086:	4604      	mov	r4, r0
 8006088:	4630      	mov	r0, r6
 800608a:	460d      	mov	r5, r1
 800608c:	f7fa fa72 	bl	8000574 <__aeabi_i2d>
 8006090:	a365      	add	r3, pc, #404	@ (adr r3, 8006228 <_dtoa_r+0x2c0>)
 8006092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006096:	f7fa fad7 	bl	8000648 <__aeabi_dmul>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4620      	mov	r0, r4
 80060a0:	4629      	mov	r1, r5
 80060a2:	f7fa f91b 	bl	80002dc <__adddf3>
 80060a6:	4604      	mov	r4, r0
 80060a8:	460d      	mov	r5, r1
 80060aa:	f7fa fd7d 	bl	8000ba8 <__aeabi_d2iz>
 80060ae:	2200      	movs	r2, #0
 80060b0:	4607      	mov	r7, r0
 80060b2:	2300      	movs	r3, #0
 80060b4:	4620      	mov	r0, r4
 80060b6:	4629      	mov	r1, r5
 80060b8:	f7fa fd38 	bl	8000b2c <__aeabi_dcmplt>
 80060bc:	b140      	cbz	r0, 80060d0 <_dtoa_r+0x168>
 80060be:	4638      	mov	r0, r7
 80060c0:	f7fa fa58 	bl	8000574 <__aeabi_i2d>
 80060c4:	4622      	mov	r2, r4
 80060c6:	462b      	mov	r3, r5
 80060c8:	f7fa fd26 	bl	8000b18 <__aeabi_dcmpeq>
 80060cc:	b900      	cbnz	r0, 80060d0 <_dtoa_r+0x168>
 80060ce:	3f01      	subs	r7, #1
 80060d0:	2f16      	cmp	r7, #22
 80060d2:	d851      	bhi.n	8006178 <_dtoa_r+0x210>
 80060d4:	4b5b      	ldr	r3, [pc, #364]	@ (8006244 <_dtoa_r+0x2dc>)
 80060d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060e2:	f7fa fd23 	bl	8000b2c <__aeabi_dcmplt>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d048      	beq.n	800617c <_dtoa_r+0x214>
 80060ea:	3f01      	subs	r7, #1
 80060ec:	2300      	movs	r3, #0
 80060ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80060f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80060f2:	1b9b      	subs	r3, r3, r6
 80060f4:	1e5a      	subs	r2, r3, #1
 80060f6:	bf44      	itt	mi
 80060f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80060fc:	2300      	movmi	r3, #0
 80060fe:	9208      	str	r2, [sp, #32]
 8006100:	bf54      	ite	pl
 8006102:	f04f 0800 	movpl.w	r8, #0
 8006106:	9308      	strmi	r3, [sp, #32]
 8006108:	2f00      	cmp	r7, #0
 800610a:	db39      	blt.n	8006180 <_dtoa_r+0x218>
 800610c:	9b08      	ldr	r3, [sp, #32]
 800610e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006110:	443b      	add	r3, r7
 8006112:	9308      	str	r3, [sp, #32]
 8006114:	2300      	movs	r3, #0
 8006116:	930a      	str	r3, [sp, #40]	@ 0x28
 8006118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800611a:	2b09      	cmp	r3, #9
 800611c:	d864      	bhi.n	80061e8 <_dtoa_r+0x280>
 800611e:	2b05      	cmp	r3, #5
 8006120:	bfc4      	itt	gt
 8006122:	3b04      	subgt	r3, #4
 8006124:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006128:	f1a3 0302 	sub.w	r3, r3, #2
 800612c:	bfcc      	ite	gt
 800612e:	2400      	movgt	r4, #0
 8006130:	2401      	movle	r4, #1
 8006132:	2b03      	cmp	r3, #3
 8006134:	d863      	bhi.n	80061fe <_dtoa_r+0x296>
 8006136:	e8df f003 	tbb	[pc, r3]
 800613a:	372a      	.short	0x372a
 800613c:	5535      	.short	0x5535
 800613e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006142:	441e      	add	r6, r3
 8006144:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006148:	2b20      	cmp	r3, #32
 800614a:	bfc1      	itttt	gt
 800614c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006150:	409f      	lslgt	r7, r3
 8006152:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006156:	fa24 f303 	lsrgt.w	r3, r4, r3
 800615a:	bfd6      	itet	le
 800615c:	f1c3 0320 	rsble	r3, r3, #32
 8006160:	ea47 0003 	orrgt.w	r0, r7, r3
 8006164:	fa04 f003 	lslle.w	r0, r4, r3
 8006168:	f7fa f9f4 	bl	8000554 <__aeabi_ui2d>
 800616c:	2201      	movs	r2, #1
 800616e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006172:	3e01      	subs	r6, #1
 8006174:	9214      	str	r2, [sp, #80]	@ 0x50
 8006176:	e777      	b.n	8006068 <_dtoa_r+0x100>
 8006178:	2301      	movs	r3, #1
 800617a:	e7b8      	b.n	80060ee <_dtoa_r+0x186>
 800617c:	9012      	str	r0, [sp, #72]	@ 0x48
 800617e:	e7b7      	b.n	80060f0 <_dtoa_r+0x188>
 8006180:	427b      	negs	r3, r7
 8006182:	930a      	str	r3, [sp, #40]	@ 0x28
 8006184:	2300      	movs	r3, #0
 8006186:	eba8 0807 	sub.w	r8, r8, r7
 800618a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800618c:	e7c4      	b.n	8006118 <_dtoa_r+0x1b0>
 800618e:	2300      	movs	r3, #0
 8006190:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006192:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006194:	2b00      	cmp	r3, #0
 8006196:	dc35      	bgt.n	8006204 <_dtoa_r+0x29c>
 8006198:	2301      	movs	r3, #1
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	9307      	str	r3, [sp, #28]
 800619e:	461a      	mov	r2, r3
 80061a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80061a2:	e00b      	b.n	80061bc <_dtoa_r+0x254>
 80061a4:	2301      	movs	r3, #1
 80061a6:	e7f3      	b.n	8006190 <_dtoa_r+0x228>
 80061a8:	2300      	movs	r3, #0
 80061aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061ae:	18fb      	adds	r3, r7, r3
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	3301      	adds	r3, #1
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	9307      	str	r3, [sp, #28]
 80061b8:	bfb8      	it	lt
 80061ba:	2301      	movlt	r3, #1
 80061bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80061c0:	2100      	movs	r1, #0
 80061c2:	2204      	movs	r2, #4
 80061c4:	f102 0514 	add.w	r5, r2, #20
 80061c8:	429d      	cmp	r5, r3
 80061ca:	d91f      	bls.n	800620c <_dtoa_r+0x2a4>
 80061cc:	6041      	str	r1, [r0, #4]
 80061ce:	4658      	mov	r0, fp
 80061d0:	f000 ff48 	bl	8007064 <_Balloc>
 80061d4:	4682      	mov	sl, r0
 80061d6:	2800      	cmp	r0, #0
 80061d8:	d13c      	bne.n	8006254 <_dtoa_r+0x2ec>
 80061da:	4b1b      	ldr	r3, [pc, #108]	@ (8006248 <_dtoa_r+0x2e0>)
 80061dc:	4602      	mov	r2, r0
 80061de:	f240 11af 	movw	r1, #431	@ 0x1af
 80061e2:	e6d8      	b.n	8005f96 <_dtoa_r+0x2e>
 80061e4:	2301      	movs	r3, #1
 80061e6:	e7e0      	b.n	80061aa <_dtoa_r+0x242>
 80061e8:	2401      	movs	r4, #1
 80061ea:	2300      	movs	r3, #0
 80061ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80061f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	9307      	str	r3, [sp, #28]
 80061f8:	2200      	movs	r2, #0
 80061fa:	2312      	movs	r3, #18
 80061fc:	e7d0      	b.n	80061a0 <_dtoa_r+0x238>
 80061fe:	2301      	movs	r3, #1
 8006200:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006202:	e7f5      	b.n	80061f0 <_dtoa_r+0x288>
 8006204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	9307      	str	r3, [sp, #28]
 800620a:	e7d7      	b.n	80061bc <_dtoa_r+0x254>
 800620c:	3101      	adds	r1, #1
 800620e:	0052      	lsls	r2, r2, #1
 8006210:	e7d8      	b.n	80061c4 <_dtoa_r+0x25c>
 8006212:	bf00      	nop
 8006214:	f3af 8000 	nop.w
 8006218:	636f4361 	.word	0x636f4361
 800621c:	3fd287a7 	.word	0x3fd287a7
 8006220:	8b60c8b3 	.word	0x8b60c8b3
 8006224:	3fc68a28 	.word	0x3fc68a28
 8006228:	509f79fb 	.word	0x509f79fb
 800622c:	3fd34413 	.word	0x3fd34413
 8006230:	08008089 	.word	0x08008089
 8006234:	080080a0 	.word	0x080080a0
 8006238:	7ff00000 	.word	0x7ff00000
 800623c:	08008059 	.word	0x08008059
 8006240:	3ff80000 	.word	0x3ff80000
 8006244:	080081a8 	.word	0x080081a8
 8006248:	080080f8 	.word	0x080080f8
 800624c:	08008085 	.word	0x08008085
 8006250:	08008058 	.word	0x08008058
 8006254:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006258:	6018      	str	r0, [r3, #0]
 800625a:	9b07      	ldr	r3, [sp, #28]
 800625c:	2b0e      	cmp	r3, #14
 800625e:	f200 80a4 	bhi.w	80063aa <_dtoa_r+0x442>
 8006262:	2c00      	cmp	r4, #0
 8006264:	f000 80a1 	beq.w	80063aa <_dtoa_r+0x442>
 8006268:	2f00      	cmp	r7, #0
 800626a:	dd33      	ble.n	80062d4 <_dtoa_r+0x36c>
 800626c:	4bad      	ldr	r3, [pc, #692]	@ (8006524 <_dtoa_r+0x5bc>)
 800626e:	f007 020f 	and.w	r2, r7, #15
 8006272:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006276:	ed93 7b00 	vldr	d7, [r3]
 800627a:	05f8      	lsls	r0, r7, #23
 800627c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006280:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006284:	d516      	bpl.n	80062b4 <_dtoa_r+0x34c>
 8006286:	4ba8      	ldr	r3, [pc, #672]	@ (8006528 <_dtoa_r+0x5c0>)
 8006288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800628c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006290:	f7fa fb04 	bl	800089c <__aeabi_ddiv>
 8006294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006298:	f004 040f 	and.w	r4, r4, #15
 800629c:	2603      	movs	r6, #3
 800629e:	4da2      	ldr	r5, [pc, #648]	@ (8006528 <_dtoa_r+0x5c0>)
 80062a0:	b954      	cbnz	r4, 80062b8 <_dtoa_r+0x350>
 80062a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062aa:	f7fa faf7 	bl	800089c <__aeabi_ddiv>
 80062ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b2:	e028      	b.n	8006306 <_dtoa_r+0x39e>
 80062b4:	2602      	movs	r6, #2
 80062b6:	e7f2      	b.n	800629e <_dtoa_r+0x336>
 80062b8:	07e1      	lsls	r1, r4, #31
 80062ba:	d508      	bpl.n	80062ce <_dtoa_r+0x366>
 80062bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062c4:	f7fa f9c0 	bl	8000648 <__aeabi_dmul>
 80062c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062cc:	3601      	adds	r6, #1
 80062ce:	1064      	asrs	r4, r4, #1
 80062d0:	3508      	adds	r5, #8
 80062d2:	e7e5      	b.n	80062a0 <_dtoa_r+0x338>
 80062d4:	f000 80d2 	beq.w	800647c <_dtoa_r+0x514>
 80062d8:	427c      	negs	r4, r7
 80062da:	4b92      	ldr	r3, [pc, #584]	@ (8006524 <_dtoa_r+0x5bc>)
 80062dc:	4d92      	ldr	r5, [pc, #584]	@ (8006528 <_dtoa_r+0x5c0>)
 80062de:	f004 020f 	and.w	r2, r4, #15
 80062e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062ee:	f7fa f9ab 	bl	8000648 <__aeabi_dmul>
 80062f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062f6:	1124      	asrs	r4, r4, #4
 80062f8:	2300      	movs	r3, #0
 80062fa:	2602      	movs	r6, #2
 80062fc:	2c00      	cmp	r4, #0
 80062fe:	f040 80b2 	bne.w	8006466 <_dtoa_r+0x4fe>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1d3      	bne.n	80062ae <_dtoa_r+0x346>
 8006306:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006308:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80b7 	beq.w	8006480 <_dtoa_r+0x518>
 8006312:	4b86      	ldr	r3, [pc, #536]	@ (800652c <_dtoa_r+0x5c4>)
 8006314:	2200      	movs	r2, #0
 8006316:	4620      	mov	r0, r4
 8006318:	4629      	mov	r1, r5
 800631a:	f7fa fc07 	bl	8000b2c <__aeabi_dcmplt>
 800631e:	2800      	cmp	r0, #0
 8006320:	f000 80ae 	beq.w	8006480 <_dtoa_r+0x518>
 8006324:	9b07      	ldr	r3, [sp, #28]
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 80aa 	beq.w	8006480 <_dtoa_r+0x518>
 800632c:	9b00      	ldr	r3, [sp, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	dd37      	ble.n	80063a2 <_dtoa_r+0x43a>
 8006332:	1e7b      	subs	r3, r7, #1
 8006334:	9304      	str	r3, [sp, #16]
 8006336:	4620      	mov	r0, r4
 8006338:	4b7d      	ldr	r3, [pc, #500]	@ (8006530 <_dtoa_r+0x5c8>)
 800633a:	2200      	movs	r2, #0
 800633c:	4629      	mov	r1, r5
 800633e:	f7fa f983 	bl	8000648 <__aeabi_dmul>
 8006342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006346:	9c00      	ldr	r4, [sp, #0]
 8006348:	3601      	adds	r6, #1
 800634a:	4630      	mov	r0, r6
 800634c:	f7fa f912 	bl	8000574 <__aeabi_i2d>
 8006350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006354:	f7fa f978 	bl	8000648 <__aeabi_dmul>
 8006358:	4b76      	ldr	r3, [pc, #472]	@ (8006534 <_dtoa_r+0x5cc>)
 800635a:	2200      	movs	r2, #0
 800635c:	f7f9 ffbe 	bl	80002dc <__adddf3>
 8006360:	4605      	mov	r5, r0
 8006362:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006366:	2c00      	cmp	r4, #0
 8006368:	f040 808d 	bne.w	8006486 <_dtoa_r+0x51e>
 800636c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006370:	4b71      	ldr	r3, [pc, #452]	@ (8006538 <_dtoa_r+0x5d0>)
 8006372:	2200      	movs	r2, #0
 8006374:	f7f9 ffb0 	bl	80002d8 <__aeabi_dsub>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006380:	462a      	mov	r2, r5
 8006382:	4633      	mov	r3, r6
 8006384:	f7fa fbf0 	bl	8000b68 <__aeabi_dcmpgt>
 8006388:	2800      	cmp	r0, #0
 800638a:	f040 828b 	bne.w	80068a4 <_dtoa_r+0x93c>
 800638e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006392:	462a      	mov	r2, r5
 8006394:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006398:	f7fa fbc8 	bl	8000b2c <__aeabi_dcmplt>
 800639c:	2800      	cmp	r0, #0
 800639e:	f040 8128 	bne.w	80065f2 <_dtoa_r+0x68a>
 80063a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80063a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80063aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f2c0 815a 	blt.w	8006666 <_dtoa_r+0x6fe>
 80063b2:	2f0e      	cmp	r7, #14
 80063b4:	f300 8157 	bgt.w	8006666 <_dtoa_r+0x6fe>
 80063b8:	4b5a      	ldr	r3, [pc, #360]	@ (8006524 <_dtoa_r+0x5bc>)
 80063ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80063be:	ed93 7b00 	vldr	d7, [r3]
 80063c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	ed8d 7b00 	vstr	d7, [sp]
 80063ca:	da03      	bge.n	80063d4 <_dtoa_r+0x46c>
 80063cc:	9b07      	ldr	r3, [sp, #28]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f340 8101 	ble.w	80065d6 <_dtoa_r+0x66e>
 80063d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80063d8:	4656      	mov	r6, sl
 80063da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063de:	4620      	mov	r0, r4
 80063e0:	4629      	mov	r1, r5
 80063e2:	f7fa fa5b 	bl	800089c <__aeabi_ddiv>
 80063e6:	f7fa fbdf 	bl	8000ba8 <__aeabi_d2iz>
 80063ea:	4680      	mov	r8, r0
 80063ec:	f7fa f8c2 	bl	8000574 <__aeabi_i2d>
 80063f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063f4:	f7fa f928 	bl	8000648 <__aeabi_dmul>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4620      	mov	r0, r4
 80063fe:	4629      	mov	r1, r5
 8006400:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006404:	f7f9 ff68 	bl	80002d8 <__aeabi_dsub>
 8006408:	f806 4b01 	strb.w	r4, [r6], #1
 800640c:	9d07      	ldr	r5, [sp, #28]
 800640e:	eba6 040a 	sub.w	r4, r6, sl
 8006412:	42a5      	cmp	r5, r4
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	f040 8117 	bne.w	800664a <_dtoa_r+0x6e2>
 800641c:	f7f9 ff5e 	bl	80002dc <__adddf3>
 8006420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006424:	4604      	mov	r4, r0
 8006426:	460d      	mov	r5, r1
 8006428:	f7fa fb9e 	bl	8000b68 <__aeabi_dcmpgt>
 800642c:	2800      	cmp	r0, #0
 800642e:	f040 80f9 	bne.w	8006624 <_dtoa_r+0x6bc>
 8006432:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006436:	4620      	mov	r0, r4
 8006438:	4629      	mov	r1, r5
 800643a:	f7fa fb6d 	bl	8000b18 <__aeabi_dcmpeq>
 800643e:	b118      	cbz	r0, 8006448 <_dtoa_r+0x4e0>
 8006440:	f018 0f01 	tst.w	r8, #1
 8006444:	f040 80ee 	bne.w	8006624 <_dtoa_r+0x6bc>
 8006448:	4649      	mov	r1, r9
 800644a:	4658      	mov	r0, fp
 800644c:	f000 fe4a 	bl	80070e4 <_Bfree>
 8006450:	2300      	movs	r3, #0
 8006452:	7033      	strb	r3, [r6, #0]
 8006454:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006456:	3701      	adds	r7, #1
 8006458:	601f      	str	r7, [r3, #0]
 800645a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 831d 	beq.w	8006a9c <_dtoa_r+0xb34>
 8006462:	601e      	str	r6, [r3, #0]
 8006464:	e31a      	b.n	8006a9c <_dtoa_r+0xb34>
 8006466:	07e2      	lsls	r2, r4, #31
 8006468:	d505      	bpl.n	8006476 <_dtoa_r+0x50e>
 800646a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800646e:	f7fa f8eb 	bl	8000648 <__aeabi_dmul>
 8006472:	3601      	adds	r6, #1
 8006474:	2301      	movs	r3, #1
 8006476:	1064      	asrs	r4, r4, #1
 8006478:	3508      	adds	r5, #8
 800647a:	e73f      	b.n	80062fc <_dtoa_r+0x394>
 800647c:	2602      	movs	r6, #2
 800647e:	e742      	b.n	8006306 <_dtoa_r+0x39e>
 8006480:	9c07      	ldr	r4, [sp, #28]
 8006482:	9704      	str	r7, [sp, #16]
 8006484:	e761      	b.n	800634a <_dtoa_r+0x3e2>
 8006486:	4b27      	ldr	r3, [pc, #156]	@ (8006524 <_dtoa_r+0x5bc>)
 8006488:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800648a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800648e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006492:	4454      	add	r4, sl
 8006494:	2900      	cmp	r1, #0
 8006496:	d053      	beq.n	8006540 <_dtoa_r+0x5d8>
 8006498:	4928      	ldr	r1, [pc, #160]	@ (800653c <_dtoa_r+0x5d4>)
 800649a:	2000      	movs	r0, #0
 800649c:	f7fa f9fe 	bl	800089c <__aeabi_ddiv>
 80064a0:	4633      	mov	r3, r6
 80064a2:	462a      	mov	r2, r5
 80064a4:	f7f9 ff18 	bl	80002d8 <__aeabi_dsub>
 80064a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064ac:	4656      	mov	r6, sl
 80064ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064b2:	f7fa fb79 	bl	8000ba8 <__aeabi_d2iz>
 80064b6:	4605      	mov	r5, r0
 80064b8:	f7fa f85c 	bl	8000574 <__aeabi_i2d>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064c4:	f7f9 ff08 	bl	80002d8 <__aeabi_dsub>
 80064c8:	3530      	adds	r5, #48	@ 0x30
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064d2:	f806 5b01 	strb.w	r5, [r6], #1
 80064d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064da:	f7fa fb27 	bl	8000b2c <__aeabi_dcmplt>
 80064de:	2800      	cmp	r0, #0
 80064e0:	d171      	bne.n	80065c6 <_dtoa_r+0x65e>
 80064e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064e6:	4911      	ldr	r1, [pc, #68]	@ (800652c <_dtoa_r+0x5c4>)
 80064e8:	2000      	movs	r0, #0
 80064ea:	f7f9 fef5 	bl	80002d8 <__aeabi_dsub>
 80064ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064f2:	f7fa fb1b 	bl	8000b2c <__aeabi_dcmplt>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	f040 8095 	bne.w	8006626 <_dtoa_r+0x6be>
 80064fc:	42a6      	cmp	r6, r4
 80064fe:	f43f af50 	beq.w	80063a2 <_dtoa_r+0x43a>
 8006502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006506:	4b0a      	ldr	r3, [pc, #40]	@ (8006530 <_dtoa_r+0x5c8>)
 8006508:	2200      	movs	r2, #0
 800650a:	f7fa f89d 	bl	8000648 <__aeabi_dmul>
 800650e:	4b08      	ldr	r3, [pc, #32]	@ (8006530 <_dtoa_r+0x5c8>)
 8006510:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006514:	2200      	movs	r2, #0
 8006516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800651a:	f7fa f895 	bl	8000648 <__aeabi_dmul>
 800651e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006522:	e7c4      	b.n	80064ae <_dtoa_r+0x546>
 8006524:	080081a8 	.word	0x080081a8
 8006528:	08008180 	.word	0x08008180
 800652c:	3ff00000 	.word	0x3ff00000
 8006530:	40240000 	.word	0x40240000
 8006534:	401c0000 	.word	0x401c0000
 8006538:	40140000 	.word	0x40140000
 800653c:	3fe00000 	.word	0x3fe00000
 8006540:	4631      	mov	r1, r6
 8006542:	4628      	mov	r0, r5
 8006544:	f7fa f880 	bl	8000648 <__aeabi_dmul>
 8006548:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800654c:	9415      	str	r4, [sp, #84]	@ 0x54
 800654e:	4656      	mov	r6, sl
 8006550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006554:	f7fa fb28 	bl	8000ba8 <__aeabi_d2iz>
 8006558:	4605      	mov	r5, r0
 800655a:	f7fa f80b 	bl	8000574 <__aeabi_i2d>
 800655e:	4602      	mov	r2, r0
 8006560:	460b      	mov	r3, r1
 8006562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006566:	f7f9 feb7 	bl	80002d8 <__aeabi_dsub>
 800656a:	3530      	adds	r5, #48	@ 0x30
 800656c:	f806 5b01 	strb.w	r5, [r6], #1
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	42a6      	cmp	r6, r4
 8006576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800657a:	f04f 0200 	mov.w	r2, #0
 800657e:	d124      	bne.n	80065ca <_dtoa_r+0x662>
 8006580:	4bac      	ldr	r3, [pc, #688]	@ (8006834 <_dtoa_r+0x8cc>)
 8006582:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006586:	f7f9 fea9 	bl	80002dc <__adddf3>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006592:	f7fa fae9 	bl	8000b68 <__aeabi_dcmpgt>
 8006596:	2800      	cmp	r0, #0
 8006598:	d145      	bne.n	8006626 <_dtoa_r+0x6be>
 800659a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800659e:	49a5      	ldr	r1, [pc, #660]	@ (8006834 <_dtoa_r+0x8cc>)
 80065a0:	2000      	movs	r0, #0
 80065a2:	f7f9 fe99 	bl	80002d8 <__aeabi_dsub>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ae:	f7fa fabd 	bl	8000b2c <__aeabi_dcmplt>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	f43f aef5 	beq.w	80063a2 <_dtoa_r+0x43a>
 80065b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80065ba:	1e73      	subs	r3, r6, #1
 80065bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80065be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80065c2:	2b30      	cmp	r3, #48	@ 0x30
 80065c4:	d0f8      	beq.n	80065b8 <_dtoa_r+0x650>
 80065c6:	9f04      	ldr	r7, [sp, #16]
 80065c8:	e73e      	b.n	8006448 <_dtoa_r+0x4e0>
 80065ca:	4b9b      	ldr	r3, [pc, #620]	@ (8006838 <_dtoa_r+0x8d0>)
 80065cc:	f7fa f83c 	bl	8000648 <__aeabi_dmul>
 80065d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065d4:	e7bc      	b.n	8006550 <_dtoa_r+0x5e8>
 80065d6:	d10c      	bne.n	80065f2 <_dtoa_r+0x68a>
 80065d8:	4b98      	ldr	r3, [pc, #608]	@ (800683c <_dtoa_r+0x8d4>)
 80065da:	2200      	movs	r2, #0
 80065dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065e0:	f7fa f832 	bl	8000648 <__aeabi_dmul>
 80065e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065e8:	f7fa fab4 	bl	8000b54 <__aeabi_dcmpge>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	f000 8157 	beq.w	80068a0 <_dtoa_r+0x938>
 80065f2:	2400      	movs	r4, #0
 80065f4:	4625      	mov	r5, r4
 80065f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065f8:	43db      	mvns	r3, r3
 80065fa:	9304      	str	r3, [sp, #16]
 80065fc:	4656      	mov	r6, sl
 80065fe:	2700      	movs	r7, #0
 8006600:	4621      	mov	r1, r4
 8006602:	4658      	mov	r0, fp
 8006604:	f000 fd6e 	bl	80070e4 <_Bfree>
 8006608:	2d00      	cmp	r5, #0
 800660a:	d0dc      	beq.n	80065c6 <_dtoa_r+0x65e>
 800660c:	b12f      	cbz	r7, 800661a <_dtoa_r+0x6b2>
 800660e:	42af      	cmp	r7, r5
 8006610:	d003      	beq.n	800661a <_dtoa_r+0x6b2>
 8006612:	4639      	mov	r1, r7
 8006614:	4658      	mov	r0, fp
 8006616:	f000 fd65 	bl	80070e4 <_Bfree>
 800661a:	4629      	mov	r1, r5
 800661c:	4658      	mov	r0, fp
 800661e:	f000 fd61 	bl	80070e4 <_Bfree>
 8006622:	e7d0      	b.n	80065c6 <_dtoa_r+0x65e>
 8006624:	9704      	str	r7, [sp, #16]
 8006626:	4633      	mov	r3, r6
 8006628:	461e      	mov	r6, r3
 800662a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800662e:	2a39      	cmp	r2, #57	@ 0x39
 8006630:	d107      	bne.n	8006642 <_dtoa_r+0x6da>
 8006632:	459a      	cmp	sl, r3
 8006634:	d1f8      	bne.n	8006628 <_dtoa_r+0x6c0>
 8006636:	9a04      	ldr	r2, [sp, #16]
 8006638:	3201      	adds	r2, #1
 800663a:	9204      	str	r2, [sp, #16]
 800663c:	2230      	movs	r2, #48	@ 0x30
 800663e:	f88a 2000 	strb.w	r2, [sl]
 8006642:	781a      	ldrb	r2, [r3, #0]
 8006644:	3201      	adds	r2, #1
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	e7bd      	b.n	80065c6 <_dtoa_r+0x65e>
 800664a:	4b7b      	ldr	r3, [pc, #492]	@ (8006838 <_dtoa_r+0x8d0>)
 800664c:	2200      	movs	r2, #0
 800664e:	f7f9 fffb 	bl	8000648 <__aeabi_dmul>
 8006652:	2200      	movs	r2, #0
 8006654:	2300      	movs	r3, #0
 8006656:	4604      	mov	r4, r0
 8006658:	460d      	mov	r5, r1
 800665a:	f7fa fa5d 	bl	8000b18 <__aeabi_dcmpeq>
 800665e:	2800      	cmp	r0, #0
 8006660:	f43f aebb 	beq.w	80063da <_dtoa_r+0x472>
 8006664:	e6f0      	b.n	8006448 <_dtoa_r+0x4e0>
 8006666:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006668:	2a00      	cmp	r2, #0
 800666a:	f000 80db 	beq.w	8006824 <_dtoa_r+0x8bc>
 800666e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006670:	2a01      	cmp	r2, #1
 8006672:	f300 80bf 	bgt.w	80067f4 <_dtoa_r+0x88c>
 8006676:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006678:	2a00      	cmp	r2, #0
 800667a:	f000 80b7 	beq.w	80067ec <_dtoa_r+0x884>
 800667e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006682:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006684:	4646      	mov	r6, r8
 8006686:	9a08      	ldr	r2, [sp, #32]
 8006688:	2101      	movs	r1, #1
 800668a:	441a      	add	r2, r3
 800668c:	4658      	mov	r0, fp
 800668e:	4498      	add	r8, r3
 8006690:	9208      	str	r2, [sp, #32]
 8006692:	f000 fddb 	bl	800724c <__i2b>
 8006696:	4605      	mov	r5, r0
 8006698:	b15e      	cbz	r6, 80066b2 <_dtoa_r+0x74a>
 800669a:	9b08      	ldr	r3, [sp, #32]
 800669c:	2b00      	cmp	r3, #0
 800669e:	dd08      	ble.n	80066b2 <_dtoa_r+0x74a>
 80066a0:	42b3      	cmp	r3, r6
 80066a2:	9a08      	ldr	r2, [sp, #32]
 80066a4:	bfa8      	it	ge
 80066a6:	4633      	movge	r3, r6
 80066a8:	eba8 0803 	sub.w	r8, r8, r3
 80066ac:	1af6      	subs	r6, r6, r3
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	9308      	str	r3, [sp, #32]
 80066b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066b4:	b1f3      	cbz	r3, 80066f4 <_dtoa_r+0x78c>
 80066b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 80b7 	beq.w	800682c <_dtoa_r+0x8c4>
 80066be:	b18c      	cbz	r4, 80066e4 <_dtoa_r+0x77c>
 80066c0:	4629      	mov	r1, r5
 80066c2:	4622      	mov	r2, r4
 80066c4:	4658      	mov	r0, fp
 80066c6:	f000 fe81 	bl	80073cc <__pow5mult>
 80066ca:	464a      	mov	r2, r9
 80066cc:	4601      	mov	r1, r0
 80066ce:	4605      	mov	r5, r0
 80066d0:	4658      	mov	r0, fp
 80066d2:	f000 fdd1 	bl	8007278 <__multiply>
 80066d6:	4649      	mov	r1, r9
 80066d8:	9004      	str	r0, [sp, #16]
 80066da:	4658      	mov	r0, fp
 80066dc:	f000 fd02 	bl	80070e4 <_Bfree>
 80066e0:	9b04      	ldr	r3, [sp, #16]
 80066e2:	4699      	mov	r9, r3
 80066e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066e6:	1b1a      	subs	r2, r3, r4
 80066e8:	d004      	beq.n	80066f4 <_dtoa_r+0x78c>
 80066ea:	4649      	mov	r1, r9
 80066ec:	4658      	mov	r0, fp
 80066ee:	f000 fe6d 	bl	80073cc <__pow5mult>
 80066f2:	4681      	mov	r9, r0
 80066f4:	2101      	movs	r1, #1
 80066f6:	4658      	mov	r0, fp
 80066f8:	f000 fda8 	bl	800724c <__i2b>
 80066fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066fe:	4604      	mov	r4, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 81cf 	beq.w	8006aa4 <_dtoa_r+0xb3c>
 8006706:	461a      	mov	r2, r3
 8006708:	4601      	mov	r1, r0
 800670a:	4658      	mov	r0, fp
 800670c:	f000 fe5e 	bl	80073cc <__pow5mult>
 8006710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006712:	2b01      	cmp	r3, #1
 8006714:	4604      	mov	r4, r0
 8006716:	f300 8095 	bgt.w	8006844 <_dtoa_r+0x8dc>
 800671a:	9b02      	ldr	r3, [sp, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f040 8087 	bne.w	8006830 <_dtoa_r+0x8c8>
 8006722:	9b03      	ldr	r3, [sp, #12]
 8006724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006728:	2b00      	cmp	r3, #0
 800672a:	f040 8089 	bne.w	8006840 <_dtoa_r+0x8d8>
 800672e:	9b03      	ldr	r3, [sp, #12]
 8006730:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006734:	0d1b      	lsrs	r3, r3, #20
 8006736:	051b      	lsls	r3, r3, #20
 8006738:	b12b      	cbz	r3, 8006746 <_dtoa_r+0x7de>
 800673a:	9b08      	ldr	r3, [sp, #32]
 800673c:	3301      	adds	r3, #1
 800673e:	9308      	str	r3, [sp, #32]
 8006740:	f108 0801 	add.w	r8, r8, #1
 8006744:	2301      	movs	r3, #1
 8006746:	930a      	str	r3, [sp, #40]	@ 0x28
 8006748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 81b0 	beq.w	8006ab0 <_dtoa_r+0xb48>
 8006750:	6923      	ldr	r3, [r4, #16]
 8006752:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006756:	6918      	ldr	r0, [r3, #16]
 8006758:	f000 fd2c 	bl	80071b4 <__hi0bits>
 800675c:	f1c0 0020 	rsb	r0, r0, #32
 8006760:	9b08      	ldr	r3, [sp, #32]
 8006762:	4418      	add	r0, r3
 8006764:	f010 001f 	ands.w	r0, r0, #31
 8006768:	d077      	beq.n	800685a <_dtoa_r+0x8f2>
 800676a:	f1c0 0320 	rsb	r3, r0, #32
 800676e:	2b04      	cmp	r3, #4
 8006770:	dd6b      	ble.n	800684a <_dtoa_r+0x8e2>
 8006772:	9b08      	ldr	r3, [sp, #32]
 8006774:	f1c0 001c 	rsb	r0, r0, #28
 8006778:	4403      	add	r3, r0
 800677a:	4480      	add	r8, r0
 800677c:	4406      	add	r6, r0
 800677e:	9308      	str	r3, [sp, #32]
 8006780:	f1b8 0f00 	cmp.w	r8, #0
 8006784:	dd05      	ble.n	8006792 <_dtoa_r+0x82a>
 8006786:	4649      	mov	r1, r9
 8006788:	4642      	mov	r2, r8
 800678a:	4658      	mov	r0, fp
 800678c:	f000 fe78 	bl	8007480 <__lshift>
 8006790:	4681      	mov	r9, r0
 8006792:	9b08      	ldr	r3, [sp, #32]
 8006794:	2b00      	cmp	r3, #0
 8006796:	dd05      	ble.n	80067a4 <_dtoa_r+0x83c>
 8006798:	4621      	mov	r1, r4
 800679a:	461a      	mov	r2, r3
 800679c:	4658      	mov	r0, fp
 800679e:	f000 fe6f 	bl	8007480 <__lshift>
 80067a2:	4604      	mov	r4, r0
 80067a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d059      	beq.n	800685e <_dtoa_r+0x8f6>
 80067aa:	4621      	mov	r1, r4
 80067ac:	4648      	mov	r0, r9
 80067ae:	f000 fed3 	bl	8007558 <__mcmp>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	da53      	bge.n	800685e <_dtoa_r+0x8f6>
 80067b6:	1e7b      	subs	r3, r7, #1
 80067b8:	9304      	str	r3, [sp, #16]
 80067ba:	4649      	mov	r1, r9
 80067bc:	2300      	movs	r3, #0
 80067be:	220a      	movs	r2, #10
 80067c0:	4658      	mov	r0, fp
 80067c2:	f000 fcb1 	bl	8007128 <__multadd>
 80067c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067c8:	4681      	mov	r9, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 8172 	beq.w	8006ab4 <_dtoa_r+0xb4c>
 80067d0:	2300      	movs	r3, #0
 80067d2:	4629      	mov	r1, r5
 80067d4:	220a      	movs	r2, #10
 80067d6:	4658      	mov	r0, fp
 80067d8:	f000 fca6 	bl	8007128 <__multadd>
 80067dc:	9b00      	ldr	r3, [sp, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	4605      	mov	r5, r0
 80067e2:	dc67      	bgt.n	80068b4 <_dtoa_r+0x94c>
 80067e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	dc41      	bgt.n	800686e <_dtoa_r+0x906>
 80067ea:	e063      	b.n	80068b4 <_dtoa_r+0x94c>
 80067ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80067ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80067f2:	e746      	b.n	8006682 <_dtoa_r+0x71a>
 80067f4:	9b07      	ldr	r3, [sp, #28]
 80067f6:	1e5c      	subs	r4, r3, #1
 80067f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067fa:	42a3      	cmp	r3, r4
 80067fc:	bfbf      	itttt	lt
 80067fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006800:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006802:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006804:	1ae3      	sublt	r3, r4, r3
 8006806:	bfb4      	ite	lt
 8006808:	18d2      	addlt	r2, r2, r3
 800680a:	1b1c      	subge	r4, r3, r4
 800680c:	9b07      	ldr	r3, [sp, #28]
 800680e:	bfbc      	itt	lt
 8006810:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006812:	2400      	movlt	r4, #0
 8006814:	2b00      	cmp	r3, #0
 8006816:	bfb5      	itete	lt
 8006818:	eba8 0603 	sublt.w	r6, r8, r3
 800681c:	9b07      	ldrge	r3, [sp, #28]
 800681e:	2300      	movlt	r3, #0
 8006820:	4646      	movge	r6, r8
 8006822:	e730      	b.n	8006686 <_dtoa_r+0x71e>
 8006824:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006826:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006828:	4646      	mov	r6, r8
 800682a:	e735      	b.n	8006698 <_dtoa_r+0x730>
 800682c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800682e:	e75c      	b.n	80066ea <_dtoa_r+0x782>
 8006830:	2300      	movs	r3, #0
 8006832:	e788      	b.n	8006746 <_dtoa_r+0x7de>
 8006834:	3fe00000 	.word	0x3fe00000
 8006838:	40240000 	.word	0x40240000
 800683c:	40140000 	.word	0x40140000
 8006840:	9b02      	ldr	r3, [sp, #8]
 8006842:	e780      	b.n	8006746 <_dtoa_r+0x7de>
 8006844:	2300      	movs	r3, #0
 8006846:	930a      	str	r3, [sp, #40]	@ 0x28
 8006848:	e782      	b.n	8006750 <_dtoa_r+0x7e8>
 800684a:	d099      	beq.n	8006780 <_dtoa_r+0x818>
 800684c:	9a08      	ldr	r2, [sp, #32]
 800684e:	331c      	adds	r3, #28
 8006850:	441a      	add	r2, r3
 8006852:	4498      	add	r8, r3
 8006854:	441e      	add	r6, r3
 8006856:	9208      	str	r2, [sp, #32]
 8006858:	e792      	b.n	8006780 <_dtoa_r+0x818>
 800685a:	4603      	mov	r3, r0
 800685c:	e7f6      	b.n	800684c <_dtoa_r+0x8e4>
 800685e:	9b07      	ldr	r3, [sp, #28]
 8006860:	9704      	str	r7, [sp, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	dc20      	bgt.n	80068a8 <_dtoa_r+0x940>
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800686a:	2b02      	cmp	r3, #2
 800686c:	dd1e      	ble.n	80068ac <_dtoa_r+0x944>
 800686e:	9b00      	ldr	r3, [sp, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	f47f aec0 	bne.w	80065f6 <_dtoa_r+0x68e>
 8006876:	4621      	mov	r1, r4
 8006878:	2205      	movs	r2, #5
 800687a:	4658      	mov	r0, fp
 800687c:	f000 fc54 	bl	8007128 <__multadd>
 8006880:	4601      	mov	r1, r0
 8006882:	4604      	mov	r4, r0
 8006884:	4648      	mov	r0, r9
 8006886:	f000 fe67 	bl	8007558 <__mcmp>
 800688a:	2800      	cmp	r0, #0
 800688c:	f77f aeb3 	ble.w	80065f6 <_dtoa_r+0x68e>
 8006890:	4656      	mov	r6, sl
 8006892:	2331      	movs	r3, #49	@ 0x31
 8006894:	f806 3b01 	strb.w	r3, [r6], #1
 8006898:	9b04      	ldr	r3, [sp, #16]
 800689a:	3301      	adds	r3, #1
 800689c:	9304      	str	r3, [sp, #16]
 800689e:	e6ae      	b.n	80065fe <_dtoa_r+0x696>
 80068a0:	9c07      	ldr	r4, [sp, #28]
 80068a2:	9704      	str	r7, [sp, #16]
 80068a4:	4625      	mov	r5, r4
 80068a6:	e7f3      	b.n	8006890 <_dtoa_r+0x928>
 80068a8:	9b07      	ldr	r3, [sp, #28]
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 8104 	beq.w	8006abc <_dtoa_r+0xb54>
 80068b4:	2e00      	cmp	r6, #0
 80068b6:	dd05      	ble.n	80068c4 <_dtoa_r+0x95c>
 80068b8:	4629      	mov	r1, r5
 80068ba:	4632      	mov	r2, r6
 80068bc:	4658      	mov	r0, fp
 80068be:	f000 fddf 	bl	8007480 <__lshift>
 80068c2:	4605      	mov	r5, r0
 80068c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d05a      	beq.n	8006980 <_dtoa_r+0xa18>
 80068ca:	6869      	ldr	r1, [r5, #4]
 80068cc:	4658      	mov	r0, fp
 80068ce:	f000 fbc9 	bl	8007064 <_Balloc>
 80068d2:	4606      	mov	r6, r0
 80068d4:	b928      	cbnz	r0, 80068e2 <_dtoa_r+0x97a>
 80068d6:	4b84      	ldr	r3, [pc, #528]	@ (8006ae8 <_dtoa_r+0xb80>)
 80068d8:	4602      	mov	r2, r0
 80068da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80068de:	f7ff bb5a 	b.w	8005f96 <_dtoa_r+0x2e>
 80068e2:	692a      	ldr	r2, [r5, #16]
 80068e4:	3202      	adds	r2, #2
 80068e6:	0092      	lsls	r2, r2, #2
 80068e8:	f105 010c 	add.w	r1, r5, #12
 80068ec:	300c      	adds	r0, #12
 80068ee:	f001 f81d 	bl	800792c <memcpy>
 80068f2:	2201      	movs	r2, #1
 80068f4:	4631      	mov	r1, r6
 80068f6:	4658      	mov	r0, fp
 80068f8:	f000 fdc2 	bl	8007480 <__lshift>
 80068fc:	f10a 0301 	add.w	r3, sl, #1
 8006900:	9307      	str	r3, [sp, #28]
 8006902:	9b00      	ldr	r3, [sp, #0]
 8006904:	4453      	add	r3, sl
 8006906:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006908:	9b02      	ldr	r3, [sp, #8]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	462f      	mov	r7, r5
 8006910:	930a      	str	r3, [sp, #40]	@ 0x28
 8006912:	4605      	mov	r5, r0
 8006914:	9b07      	ldr	r3, [sp, #28]
 8006916:	4621      	mov	r1, r4
 8006918:	3b01      	subs	r3, #1
 800691a:	4648      	mov	r0, r9
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	f7ff fa9a 	bl	8005e56 <quorem>
 8006922:	4639      	mov	r1, r7
 8006924:	9002      	str	r0, [sp, #8]
 8006926:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800692a:	4648      	mov	r0, r9
 800692c:	f000 fe14 	bl	8007558 <__mcmp>
 8006930:	462a      	mov	r2, r5
 8006932:	9008      	str	r0, [sp, #32]
 8006934:	4621      	mov	r1, r4
 8006936:	4658      	mov	r0, fp
 8006938:	f000 fe2a 	bl	8007590 <__mdiff>
 800693c:	68c2      	ldr	r2, [r0, #12]
 800693e:	4606      	mov	r6, r0
 8006940:	bb02      	cbnz	r2, 8006984 <_dtoa_r+0xa1c>
 8006942:	4601      	mov	r1, r0
 8006944:	4648      	mov	r0, r9
 8006946:	f000 fe07 	bl	8007558 <__mcmp>
 800694a:	4602      	mov	r2, r0
 800694c:	4631      	mov	r1, r6
 800694e:	4658      	mov	r0, fp
 8006950:	920e      	str	r2, [sp, #56]	@ 0x38
 8006952:	f000 fbc7 	bl	80070e4 <_Bfree>
 8006956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006958:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800695a:	9e07      	ldr	r6, [sp, #28]
 800695c:	ea43 0102 	orr.w	r1, r3, r2
 8006960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006962:	4319      	orrs	r1, r3
 8006964:	d110      	bne.n	8006988 <_dtoa_r+0xa20>
 8006966:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800696a:	d029      	beq.n	80069c0 <_dtoa_r+0xa58>
 800696c:	9b08      	ldr	r3, [sp, #32]
 800696e:	2b00      	cmp	r3, #0
 8006970:	dd02      	ble.n	8006978 <_dtoa_r+0xa10>
 8006972:	9b02      	ldr	r3, [sp, #8]
 8006974:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006978:	9b00      	ldr	r3, [sp, #0]
 800697a:	f883 8000 	strb.w	r8, [r3]
 800697e:	e63f      	b.n	8006600 <_dtoa_r+0x698>
 8006980:	4628      	mov	r0, r5
 8006982:	e7bb      	b.n	80068fc <_dtoa_r+0x994>
 8006984:	2201      	movs	r2, #1
 8006986:	e7e1      	b.n	800694c <_dtoa_r+0x9e4>
 8006988:	9b08      	ldr	r3, [sp, #32]
 800698a:	2b00      	cmp	r3, #0
 800698c:	db04      	blt.n	8006998 <_dtoa_r+0xa30>
 800698e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006990:	430b      	orrs	r3, r1
 8006992:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006994:	430b      	orrs	r3, r1
 8006996:	d120      	bne.n	80069da <_dtoa_r+0xa72>
 8006998:	2a00      	cmp	r2, #0
 800699a:	dded      	ble.n	8006978 <_dtoa_r+0xa10>
 800699c:	4649      	mov	r1, r9
 800699e:	2201      	movs	r2, #1
 80069a0:	4658      	mov	r0, fp
 80069a2:	f000 fd6d 	bl	8007480 <__lshift>
 80069a6:	4621      	mov	r1, r4
 80069a8:	4681      	mov	r9, r0
 80069aa:	f000 fdd5 	bl	8007558 <__mcmp>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	dc03      	bgt.n	80069ba <_dtoa_r+0xa52>
 80069b2:	d1e1      	bne.n	8006978 <_dtoa_r+0xa10>
 80069b4:	f018 0f01 	tst.w	r8, #1
 80069b8:	d0de      	beq.n	8006978 <_dtoa_r+0xa10>
 80069ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80069be:	d1d8      	bne.n	8006972 <_dtoa_r+0xa0a>
 80069c0:	9a00      	ldr	r2, [sp, #0]
 80069c2:	2339      	movs	r3, #57	@ 0x39
 80069c4:	7013      	strb	r3, [r2, #0]
 80069c6:	4633      	mov	r3, r6
 80069c8:	461e      	mov	r6, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80069d0:	2a39      	cmp	r2, #57	@ 0x39
 80069d2:	d052      	beq.n	8006a7a <_dtoa_r+0xb12>
 80069d4:	3201      	adds	r2, #1
 80069d6:	701a      	strb	r2, [r3, #0]
 80069d8:	e612      	b.n	8006600 <_dtoa_r+0x698>
 80069da:	2a00      	cmp	r2, #0
 80069dc:	dd07      	ble.n	80069ee <_dtoa_r+0xa86>
 80069de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80069e2:	d0ed      	beq.n	80069c0 <_dtoa_r+0xa58>
 80069e4:	9a00      	ldr	r2, [sp, #0]
 80069e6:	f108 0301 	add.w	r3, r8, #1
 80069ea:	7013      	strb	r3, [r2, #0]
 80069ec:	e608      	b.n	8006600 <_dtoa_r+0x698>
 80069ee:	9b07      	ldr	r3, [sp, #28]
 80069f0:	9a07      	ldr	r2, [sp, #28]
 80069f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80069f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d028      	beq.n	8006a4e <_dtoa_r+0xae6>
 80069fc:	4649      	mov	r1, r9
 80069fe:	2300      	movs	r3, #0
 8006a00:	220a      	movs	r2, #10
 8006a02:	4658      	mov	r0, fp
 8006a04:	f000 fb90 	bl	8007128 <__multadd>
 8006a08:	42af      	cmp	r7, r5
 8006a0a:	4681      	mov	r9, r0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	f04f 020a 	mov.w	r2, #10
 8006a14:	4639      	mov	r1, r7
 8006a16:	4658      	mov	r0, fp
 8006a18:	d107      	bne.n	8006a2a <_dtoa_r+0xac2>
 8006a1a:	f000 fb85 	bl	8007128 <__multadd>
 8006a1e:	4607      	mov	r7, r0
 8006a20:	4605      	mov	r5, r0
 8006a22:	9b07      	ldr	r3, [sp, #28]
 8006a24:	3301      	adds	r3, #1
 8006a26:	9307      	str	r3, [sp, #28]
 8006a28:	e774      	b.n	8006914 <_dtoa_r+0x9ac>
 8006a2a:	f000 fb7d 	bl	8007128 <__multadd>
 8006a2e:	4629      	mov	r1, r5
 8006a30:	4607      	mov	r7, r0
 8006a32:	2300      	movs	r3, #0
 8006a34:	220a      	movs	r2, #10
 8006a36:	4658      	mov	r0, fp
 8006a38:	f000 fb76 	bl	8007128 <__multadd>
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	e7f0      	b.n	8006a22 <_dtoa_r+0xaba>
 8006a40:	9b00      	ldr	r3, [sp, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	bfcc      	ite	gt
 8006a46:	461e      	movgt	r6, r3
 8006a48:	2601      	movle	r6, #1
 8006a4a:	4456      	add	r6, sl
 8006a4c:	2700      	movs	r7, #0
 8006a4e:	4649      	mov	r1, r9
 8006a50:	2201      	movs	r2, #1
 8006a52:	4658      	mov	r0, fp
 8006a54:	f000 fd14 	bl	8007480 <__lshift>
 8006a58:	4621      	mov	r1, r4
 8006a5a:	4681      	mov	r9, r0
 8006a5c:	f000 fd7c 	bl	8007558 <__mcmp>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	dcb0      	bgt.n	80069c6 <_dtoa_r+0xa5e>
 8006a64:	d102      	bne.n	8006a6c <_dtoa_r+0xb04>
 8006a66:	f018 0f01 	tst.w	r8, #1
 8006a6a:	d1ac      	bne.n	80069c6 <_dtoa_r+0xa5e>
 8006a6c:	4633      	mov	r3, r6
 8006a6e:	461e      	mov	r6, r3
 8006a70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a74:	2a30      	cmp	r2, #48	@ 0x30
 8006a76:	d0fa      	beq.n	8006a6e <_dtoa_r+0xb06>
 8006a78:	e5c2      	b.n	8006600 <_dtoa_r+0x698>
 8006a7a:	459a      	cmp	sl, r3
 8006a7c:	d1a4      	bne.n	80069c8 <_dtoa_r+0xa60>
 8006a7e:	9b04      	ldr	r3, [sp, #16]
 8006a80:	3301      	adds	r3, #1
 8006a82:	9304      	str	r3, [sp, #16]
 8006a84:	2331      	movs	r3, #49	@ 0x31
 8006a86:	f88a 3000 	strb.w	r3, [sl]
 8006a8a:	e5b9      	b.n	8006600 <_dtoa_r+0x698>
 8006a8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006aec <_dtoa_r+0xb84>
 8006a92:	b11b      	cbz	r3, 8006a9c <_dtoa_r+0xb34>
 8006a94:	f10a 0308 	add.w	r3, sl, #8
 8006a98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	4650      	mov	r0, sl
 8006a9e:	b019      	add	sp, #100	@ 0x64
 8006aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	f77f ae37 	ble.w	800671a <_dtoa_r+0x7b2>
 8006aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ab0:	2001      	movs	r0, #1
 8006ab2:	e655      	b.n	8006760 <_dtoa_r+0x7f8>
 8006ab4:	9b00      	ldr	r3, [sp, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f77f aed6 	ble.w	8006868 <_dtoa_r+0x900>
 8006abc:	4656      	mov	r6, sl
 8006abe:	4621      	mov	r1, r4
 8006ac0:	4648      	mov	r0, r9
 8006ac2:	f7ff f9c8 	bl	8005e56 <quorem>
 8006ac6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006aca:	f806 8b01 	strb.w	r8, [r6], #1
 8006ace:	9b00      	ldr	r3, [sp, #0]
 8006ad0:	eba6 020a 	sub.w	r2, r6, sl
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	ddb3      	ble.n	8006a40 <_dtoa_r+0xad8>
 8006ad8:	4649      	mov	r1, r9
 8006ada:	2300      	movs	r3, #0
 8006adc:	220a      	movs	r2, #10
 8006ade:	4658      	mov	r0, fp
 8006ae0:	f000 fb22 	bl	8007128 <__multadd>
 8006ae4:	4681      	mov	r9, r0
 8006ae6:	e7ea      	b.n	8006abe <_dtoa_r+0xb56>
 8006ae8:	080080f8 	.word	0x080080f8
 8006aec:	0800807c 	.word	0x0800807c

08006af0 <__ssputs_r>:
 8006af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af4:	688e      	ldr	r6, [r1, #8]
 8006af6:	461f      	mov	r7, r3
 8006af8:	42be      	cmp	r6, r7
 8006afa:	680b      	ldr	r3, [r1, #0]
 8006afc:	4682      	mov	sl, r0
 8006afe:	460c      	mov	r4, r1
 8006b00:	4690      	mov	r8, r2
 8006b02:	d82d      	bhi.n	8006b60 <__ssputs_r+0x70>
 8006b04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b0c:	d026      	beq.n	8006b5c <__ssputs_r+0x6c>
 8006b0e:	6965      	ldr	r5, [r4, #20]
 8006b10:	6909      	ldr	r1, [r1, #16]
 8006b12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b16:	eba3 0901 	sub.w	r9, r3, r1
 8006b1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b1e:	1c7b      	adds	r3, r7, #1
 8006b20:	444b      	add	r3, r9
 8006b22:	106d      	asrs	r5, r5, #1
 8006b24:	429d      	cmp	r5, r3
 8006b26:	bf38      	it	cc
 8006b28:	461d      	movcc	r5, r3
 8006b2a:	0553      	lsls	r3, r2, #21
 8006b2c:	d527      	bpl.n	8006b7e <__ssputs_r+0x8e>
 8006b2e:	4629      	mov	r1, r5
 8006b30:	f000 f960 	bl	8006df4 <_malloc_r>
 8006b34:	4606      	mov	r6, r0
 8006b36:	b360      	cbz	r0, 8006b92 <__ssputs_r+0xa2>
 8006b38:	6921      	ldr	r1, [r4, #16]
 8006b3a:	464a      	mov	r2, r9
 8006b3c:	f000 fef6 	bl	800792c <memcpy>
 8006b40:	89a3      	ldrh	r3, [r4, #12]
 8006b42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4a:	81a3      	strh	r3, [r4, #12]
 8006b4c:	6126      	str	r6, [r4, #16]
 8006b4e:	6165      	str	r5, [r4, #20]
 8006b50:	444e      	add	r6, r9
 8006b52:	eba5 0509 	sub.w	r5, r5, r9
 8006b56:	6026      	str	r6, [r4, #0]
 8006b58:	60a5      	str	r5, [r4, #8]
 8006b5a:	463e      	mov	r6, r7
 8006b5c:	42be      	cmp	r6, r7
 8006b5e:	d900      	bls.n	8006b62 <__ssputs_r+0x72>
 8006b60:	463e      	mov	r6, r7
 8006b62:	6820      	ldr	r0, [r4, #0]
 8006b64:	4632      	mov	r2, r6
 8006b66:	4641      	mov	r1, r8
 8006b68:	f000 fe6f 	bl	800784a <memmove>
 8006b6c:	68a3      	ldr	r3, [r4, #8]
 8006b6e:	1b9b      	subs	r3, r3, r6
 8006b70:	60a3      	str	r3, [r4, #8]
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	4433      	add	r3, r6
 8006b76:	6023      	str	r3, [r4, #0]
 8006b78:	2000      	movs	r0, #0
 8006b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7e:	462a      	mov	r2, r5
 8006b80:	f000 fe35 	bl	80077ee <_realloc_r>
 8006b84:	4606      	mov	r6, r0
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d1e0      	bne.n	8006b4c <__ssputs_r+0x5c>
 8006b8a:	6921      	ldr	r1, [r4, #16]
 8006b8c:	4650      	mov	r0, sl
 8006b8e:	f000 ff0d 	bl	80079ac <_free_r>
 8006b92:	230c      	movs	r3, #12
 8006b94:	f8ca 3000 	str.w	r3, [sl]
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b9e:	81a3      	strh	r3, [r4, #12]
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ba4:	e7e9      	b.n	8006b7a <__ssputs_r+0x8a>
	...

08006ba8 <_svfiprintf_r>:
 8006ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	4698      	mov	r8, r3
 8006bae:	898b      	ldrh	r3, [r1, #12]
 8006bb0:	061b      	lsls	r3, r3, #24
 8006bb2:	b09d      	sub	sp, #116	@ 0x74
 8006bb4:	4607      	mov	r7, r0
 8006bb6:	460d      	mov	r5, r1
 8006bb8:	4614      	mov	r4, r2
 8006bba:	d510      	bpl.n	8006bde <_svfiprintf_r+0x36>
 8006bbc:	690b      	ldr	r3, [r1, #16]
 8006bbe:	b973      	cbnz	r3, 8006bde <_svfiprintf_r+0x36>
 8006bc0:	2140      	movs	r1, #64	@ 0x40
 8006bc2:	f000 f917 	bl	8006df4 <_malloc_r>
 8006bc6:	6028      	str	r0, [r5, #0]
 8006bc8:	6128      	str	r0, [r5, #16]
 8006bca:	b930      	cbnz	r0, 8006bda <_svfiprintf_r+0x32>
 8006bcc:	230c      	movs	r3, #12
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bd4:	b01d      	add	sp, #116	@ 0x74
 8006bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bda:	2340      	movs	r3, #64	@ 0x40
 8006bdc:	616b      	str	r3, [r5, #20]
 8006bde:	2300      	movs	r3, #0
 8006be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006be2:	2320      	movs	r3, #32
 8006be4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bec:	2330      	movs	r3, #48	@ 0x30
 8006bee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d8c <_svfiprintf_r+0x1e4>
 8006bf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bf6:	f04f 0901 	mov.w	r9, #1
 8006bfa:	4623      	mov	r3, r4
 8006bfc:	469a      	mov	sl, r3
 8006bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c02:	b10a      	cbz	r2, 8006c08 <_svfiprintf_r+0x60>
 8006c04:	2a25      	cmp	r2, #37	@ 0x25
 8006c06:	d1f9      	bne.n	8006bfc <_svfiprintf_r+0x54>
 8006c08:	ebba 0b04 	subs.w	fp, sl, r4
 8006c0c:	d00b      	beq.n	8006c26 <_svfiprintf_r+0x7e>
 8006c0e:	465b      	mov	r3, fp
 8006c10:	4622      	mov	r2, r4
 8006c12:	4629      	mov	r1, r5
 8006c14:	4638      	mov	r0, r7
 8006c16:	f7ff ff6b 	bl	8006af0 <__ssputs_r>
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	f000 80a7 	beq.w	8006d6e <_svfiprintf_r+0x1c6>
 8006c20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c22:	445a      	add	r2, fp
 8006c24:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c26:	f89a 3000 	ldrb.w	r3, [sl]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 809f 	beq.w	8006d6e <_svfiprintf_r+0x1c6>
 8006c30:	2300      	movs	r3, #0
 8006c32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c3a:	f10a 0a01 	add.w	sl, sl, #1
 8006c3e:	9304      	str	r3, [sp, #16]
 8006c40:	9307      	str	r3, [sp, #28]
 8006c42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c46:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c48:	4654      	mov	r4, sl
 8006c4a:	2205      	movs	r2, #5
 8006c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c50:	484e      	ldr	r0, [pc, #312]	@ (8006d8c <_svfiprintf_r+0x1e4>)
 8006c52:	f7f9 fae5 	bl	8000220 <memchr>
 8006c56:	9a04      	ldr	r2, [sp, #16]
 8006c58:	b9d8      	cbnz	r0, 8006c92 <_svfiprintf_r+0xea>
 8006c5a:	06d0      	lsls	r0, r2, #27
 8006c5c:	bf44      	itt	mi
 8006c5e:	2320      	movmi	r3, #32
 8006c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c64:	0711      	lsls	r1, r2, #28
 8006c66:	bf44      	itt	mi
 8006c68:	232b      	movmi	r3, #43	@ 0x2b
 8006c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c74:	d015      	beq.n	8006ca2 <_svfiprintf_r+0xfa>
 8006c76:	9a07      	ldr	r2, [sp, #28]
 8006c78:	4654      	mov	r4, sl
 8006c7a:	2000      	movs	r0, #0
 8006c7c:	f04f 0c0a 	mov.w	ip, #10
 8006c80:	4621      	mov	r1, r4
 8006c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c86:	3b30      	subs	r3, #48	@ 0x30
 8006c88:	2b09      	cmp	r3, #9
 8006c8a:	d94b      	bls.n	8006d24 <_svfiprintf_r+0x17c>
 8006c8c:	b1b0      	cbz	r0, 8006cbc <_svfiprintf_r+0x114>
 8006c8e:	9207      	str	r2, [sp, #28]
 8006c90:	e014      	b.n	8006cbc <_svfiprintf_r+0x114>
 8006c92:	eba0 0308 	sub.w	r3, r0, r8
 8006c96:	fa09 f303 	lsl.w	r3, r9, r3
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	9304      	str	r3, [sp, #16]
 8006c9e:	46a2      	mov	sl, r4
 8006ca0:	e7d2      	b.n	8006c48 <_svfiprintf_r+0xa0>
 8006ca2:	9b03      	ldr	r3, [sp, #12]
 8006ca4:	1d19      	adds	r1, r3, #4
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	9103      	str	r1, [sp, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bfbb      	ittet	lt
 8006cae:	425b      	neglt	r3, r3
 8006cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8006cb4:	9307      	strge	r3, [sp, #28]
 8006cb6:	9307      	strlt	r3, [sp, #28]
 8006cb8:	bfb8      	it	lt
 8006cba:	9204      	strlt	r2, [sp, #16]
 8006cbc:	7823      	ldrb	r3, [r4, #0]
 8006cbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cc0:	d10a      	bne.n	8006cd8 <_svfiprintf_r+0x130>
 8006cc2:	7863      	ldrb	r3, [r4, #1]
 8006cc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cc6:	d132      	bne.n	8006d2e <_svfiprintf_r+0x186>
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	1d1a      	adds	r2, r3, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	9203      	str	r2, [sp, #12]
 8006cd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cd4:	3402      	adds	r4, #2
 8006cd6:	9305      	str	r3, [sp, #20]
 8006cd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006d9c <_svfiprintf_r+0x1f4>
 8006cdc:	7821      	ldrb	r1, [r4, #0]
 8006cde:	2203      	movs	r2, #3
 8006ce0:	4650      	mov	r0, sl
 8006ce2:	f7f9 fa9d 	bl	8000220 <memchr>
 8006ce6:	b138      	cbz	r0, 8006cf8 <_svfiprintf_r+0x150>
 8006ce8:	9b04      	ldr	r3, [sp, #16]
 8006cea:	eba0 000a 	sub.w	r0, r0, sl
 8006cee:	2240      	movs	r2, #64	@ 0x40
 8006cf0:	4082      	lsls	r2, r0
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	3401      	adds	r4, #1
 8006cf6:	9304      	str	r3, [sp, #16]
 8006cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cfc:	4824      	ldr	r0, [pc, #144]	@ (8006d90 <_svfiprintf_r+0x1e8>)
 8006cfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d02:	2206      	movs	r2, #6
 8006d04:	f7f9 fa8c 	bl	8000220 <memchr>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d036      	beq.n	8006d7a <_svfiprintf_r+0x1d2>
 8006d0c:	4b21      	ldr	r3, [pc, #132]	@ (8006d94 <_svfiprintf_r+0x1ec>)
 8006d0e:	bb1b      	cbnz	r3, 8006d58 <_svfiprintf_r+0x1b0>
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	3307      	adds	r3, #7
 8006d14:	f023 0307 	bic.w	r3, r3, #7
 8006d18:	3308      	adds	r3, #8
 8006d1a:	9303      	str	r3, [sp, #12]
 8006d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d1e:	4433      	add	r3, r6
 8006d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d22:	e76a      	b.n	8006bfa <_svfiprintf_r+0x52>
 8006d24:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d28:	460c      	mov	r4, r1
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	e7a8      	b.n	8006c80 <_svfiprintf_r+0xd8>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	3401      	adds	r4, #1
 8006d32:	9305      	str	r3, [sp, #20]
 8006d34:	4619      	mov	r1, r3
 8006d36:	f04f 0c0a 	mov.w	ip, #10
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d40:	3a30      	subs	r2, #48	@ 0x30
 8006d42:	2a09      	cmp	r2, #9
 8006d44:	d903      	bls.n	8006d4e <_svfiprintf_r+0x1a6>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0c6      	beq.n	8006cd8 <_svfiprintf_r+0x130>
 8006d4a:	9105      	str	r1, [sp, #20]
 8006d4c:	e7c4      	b.n	8006cd8 <_svfiprintf_r+0x130>
 8006d4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d52:	4604      	mov	r4, r0
 8006d54:	2301      	movs	r3, #1
 8006d56:	e7f0      	b.n	8006d3a <_svfiprintf_r+0x192>
 8006d58:	ab03      	add	r3, sp, #12
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	462a      	mov	r2, r5
 8006d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d98 <_svfiprintf_r+0x1f0>)
 8006d60:	a904      	add	r1, sp, #16
 8006d62:	4638      	mov	r0, r7
 8006d64:	f7fe fba4 	bl	80054b0 <_printf_float>
 8006d68:	1c42      	adds	r2, r0, #1
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	d1d6      	bne.n	8006d1c <_svfiprintf_r+0x174>
 8006d6e:	89ab      	ldrh	r3, [r5, #12]
 8006d70:	065b      	lsls	r3, r3, #25
 8006d72:	f53f af2d 	bmi.w	8006bd0 <_svfiprintf_r+0x28>
 8006d76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d78:	e72c      	b.n	8006bd4 <_svfiprintf_r+0x2c>
 8006d7a:	ab03      	add	r3, sp, #12
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	462a      	mov	r2, r5
 8006d80:	4b05      	ldr	r3, [pc, #20]	@ (8006d98 <_svfiprintf_r+0x1f0>)
 8006d82:	a904      	add	r1, sp, #16
 8006d84:	4638      	mov	r0, r7
 8006d86:	f7fe fe2b 	bl	80059e0 <_printf_i>
 8006d8a:	e7ed      	b.n	8006d68 <_svfiprintf_r+0x1c0>
 8006d8c:	08008109 	.word	0x08008109
 8006d90:	08008113 	.word	0x08008113
 8006d94:	080054b1 	.word	0x080054b1
 8006d98:	08006af1 	.word	0x08006af1
 8006d9c:	0800810f 	.word	0x0800810f

08006da0 <malloc>:
 8006da0:	4b02      	ldr	r3, [pc, #8]	@ (8006dac <malloc+0xc>)
 8006da2:	4601      	mov	r1, r0
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	f000 b825 	b.w	8006df4 <_malloc_r>
 8006daa:	bf00      	nop
 8006dac:	20000018 	.word	0x20000018

08006db0 <sbrk_aligned>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	4e0f      	ldr	r6, [pc, #60]	@ (8006df0 <sbrk_aligned+0x40>)
 8006db4:	460c      	mov	r4, r1
 8006db6:	6831      	ldr	r1, [r6, #0]
 8006db8:	4605      	mov	r5, r0
 8006dba:	b911      	cbnz	r1, 8006dc2 <sbrk_aligned+0x12>
 8006dbc:	f000 fd94 	bl	80078e8 <_sbrk_r>
 8006dc0:	6030      	str	r0, [r6, #0]
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f000 fd8f 	bl	80078e8 <_sbrk_r>
 8006dca:	1c43      	adds	r3, r0, #1
 8006dcc:	d103      	bne.n	8006dd6 <sbrk_aligned+0x26>
 8006dce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	bd70      	pop	{r4, r5, r6, pc}
 8006dd6:	1cc4      	adds	r4, r0, #3
 8006dd8:	f024 0403 	bic.w	r4, r4, #3
 8006ddc:	42a0      	cmp	r0, r4
 8006dde:	d0f8      	beq.n	8006dd2 <sbrk_aligned+0x22>
 8006de0:	1a21      	subs	r1, r4, r0
 8006de2:	4628      	mov	r0, r5
 8006de4:	f000 fd80 	bl	80078e8 <_sbrk_r>
 8006de8:	3001      	adds	r0, #1
 8006dea:	d1f2      	bne.n	8006dd2 <sbrk_aligned+0x22>
 8006dec:	e7ef      	b.n	8006dce <sbrk_aligned+0x1e>
 8006dee:	bf00      	nop
 8006df0:	20000728 	.word	0x20000728

08006df4 <_malloc_r>:
 8006df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006df8:	1ccd      	adds	r5, r1, #3
 8006dfa:	f025 0503 	bic.w	r5, r5, #3
 8006dfe:	3508      	adds	r5, #8
 8006e00:	2d0c      	cmp	r5, #12
 8006e02:	bf38      	it	cc
 8006e04:	250c      	movcc	r5, #12
 8006e06:	2d00      	cmp	r5, #0
 8006e08:	4606      	mov	r6, r0
 8006e0a:	db01      	blt.n	8006e10 <_malloc_r+0x1c>
 8006e0c:	42a9      	cmp	r1, r5
 8006e0e:	d904      	bls.n	8006e1a <_malloc_r+0x26>
 8006e10:	230c      	movs	r3, #12
 8006e12:	6033      	str	r3, [r6, #0]
 8006e14:	2000      	movs	r0, #0
 8006e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ef0 <_malloc_r+0xfc>
 8006e1e:	f000 f915 	bl	800704c <__malloc_lock>
 8006e22:	f8d8 3000 	ldr.w	r3, [r8]
 8006e26:	461c      	mov	r4, r3
 8006e28:	bb44      	cbnz	r4, 8006e7c <_malloc_r+0x88>
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	f7ff ffbf 	bl	8006db0 <sbrk_aligned>
 8006e32:	1c43      	adds	r3, r0, #1
 8006e34:	4604      	mov	r4, r0
 8006e36:	d158      	bne.n	8006eea <_malloc_r+0xf6>
 8006e38:	f8d8 4000 	ldr.w	r4, [r8]
 8006e3c:	4627      	mov	r7, r4
 8006e3e:	2f00      	cmp	r7, #0
 8006e40:	d143      	bne.n	8006eca <_malloc_r+0xd6>
 8006e42:	2c00      	cmp	r4, #0
 8006e44:	d04b      	beq.n	8006ede <_malloc_r+0xea>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	4639      	mov	r1, r7
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	eb04 0903 	add.w	r9, r4, r3
 8006e50:	f000 fd4a 	bl	80078e8 <_sbrk_r>
 8006e54:	4581      	cmp	r9, r0
 8006e56:	d142      	bne.n	8006ede <_malloc_r+0xea>
 8006e58:	6821      	ldr	r1, [r4, #0]
 8006e5a:	1a6d      	subs	r5, r5, r1
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	4630      	mov	r0, r6
 8006e60:	f7ff ffa6 	bl	8006db0 <sbrk_aligned>
 8006e64:	3001      	adds	r0, #1
 8006e66:	d03a      	beq.n	8006ede <_malloc_r+0xea>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	442b      	add	r3, r5
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	bb62      	cbnz	r2, 8006ed0 <_malloc_r+0xdc>
 8006e76:	f8c8 7000 	str.w	r7, [r8]
 8006e7a:	e00f      	b.n	8006e9c <_malloc_r+0xa8>
 8006e7c:	6822      	ldr	r2, [r4, #0]
 8006e7e:	1b52      	subs	r2, r2, r5
 8006e80:	d420      	bmi.n	8006ec4 <_malloc_r+0xd0>
 8006e82:	2a0b      	cmp	r2, #11
 8006e84:	d917      	bls.n	8006eb6 <_malloc_r+0xc2>
 8006e86:	1961      	adds	r1, r4, r5
 8006e88:	42a3      	cmp	r3, r4
 8006e8a:	6025      	str	r5, [r4, #0]
 8006e8c:	bf18      	it	ne
 8006e8e:	6059      	strne	r1, [r3, #4]
 8006e90:	6863      	ldr	r3, [r4, #4]
 8006e92:	bf08      	it	eq
 8006e94:	f8c8 1000 	streq.w	r1, [r8]
 8006e98:	5162      	str	r2, [r4, r5]
 8006e9a:	604b      	str	r3, [r1, #4]
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f000 f8db 	bl	8007058 <__malloc_unlock>
 8006ea2:	f104 000b 	add.w	r0, r4, #11
 8006ea6:	1d23      	adds	r3, r4, #4
 8006ea8:	f020 0007 	bic.w	r0, r0, #7
 8006eac:	1ac2      	subs	r2, r0, r3
 8006eae:	bf1c      	itt	ne
 8006eb0:	1a1b      	subne	r3, r3, r0
 8006eb2:	50a3      	strne	r3, [r4, r2]
 8006eb4:	e7af      	b.n	8006e16 <_malloc_r+0x22>
 8006eb6:	6862      	ldr	r2, [r4, #4]
 8006eb8:	42a3      	cmp	r3, r4
 8006eba:	bf0c      	ite	eq
 8006ebc:	f8c8 2000 	streq.w	r2, [r8]
 8006ec0:	605a      	strne	r2, [r3, #4]
 8006ec2:	e7eb      	b.n	8006e9c <_malloc_r+0xa8>
 8006ec4:	4623      	mov	r3, r4
 8006ec6:	6864      	ldr	r4, [r4, #4]
 8006ec8:	e7ae      	b.n	8006e28 <_malloc_r+0x34>
 8006eca:	463c      	mov	r4, r7
 8006ecc:	687f      	ldr	r7, [r7, #4]
 8006ece:	e7b6      	b.n	8006e3e <_malloc_r+0x4a>
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	d1fb      	bne.n	8006ed0 <_malloc_r+0xdc>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	6053      	str	r3, [r2, #4]
 8006edc:	e7de      	b.n	8006e9c <_malloc_r+0xa8>
 8006ede:	230c      	movs	r3, #12
 8006ee0:	6033      	str	r3, [r6, #0]
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f000 f8b8 	bl	8007058 <__malloc_unlock>
 8006ee8:	e794      	b.n	8006e14 <_malloc_r+0x20>
 8006eea:	6005      	str	r5, [r0, #0]
 8006eec:	e7d6      	b.n	8006e9c <_malloc_r+0xa8>
 8006eee:	bf00      	nop
 8006ef0:	2000072c 	.word	0x2000072c

08006ef4 <__sflush_r>:
 8006ef4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006efc:	0716      	lsls	r6, r2, #28
 8006efe:	4605      	mov	r5, r0
 8006f00:	460c      	mov	r4, r1
 8006f02:	d454      	bmi.n	8006fae <__sflush_r+0xba>
 8006f04:	684b      	ldr	r3, [r1, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	dc02      	bgt.n	8006f10 <__sflush_r+0x1c>
 8006f0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	dd48      	ble.n	8006fa2 <__sflush_r+0xae>
 8006f10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f12:	2e00      	cmp	r6, #0
 8006f14:	d045      	beq.n	8006fa2 <__sflush_r+0xae>
 8006f16:	2300      	movs	r3, #0
 8006f18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f1c:	682f      	ldr	r7, [r5, #0]
 8006f1e:	6a21      	ldr	r1, [r4, #32]
 8006f20:	602b      	str	r3, [r5, #0]
 8006f22:	d030      	beq.n	8006f86 <__sflush_r+0x92>
 8006f24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f26:	89a3      	ldrh	r3, [r4, #12]
 8006f28:	0759      	lsls	r1, r3, #29
 8006f2a:	d505      	bpl.n	8006f38 <__sflush_r+0x44>
 8006f2c:	6863      	ldr	r3, [r4, #4]
 8006f2e:	1ad2      	subs	r2, r2, r3
 8006f30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f32:	b10b      	cbz	r3, 8006f38 <__sflush_r+0x44>
 8006f34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f36:	1ad2      	subs	r2, r2, r3
 8006f38:	2300      	movs	r3, #0
 8006f3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f3c:	6a21      	ldr	r1, [r4, #32]
 8006f3e:	4628      	mov	r0, r5
 8006f40:	47b0      	blx	r6
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	d106      	bne.n	8006f56 <__sflush_r+0x62>
 8006f48:	6829      	ldr	r1, [r5, #0]
 8006f4a:	291d      	cmp	r1, #29
 8006f4c:	d82b      	bhi.n	8006fa6 <__sflush_r+0xb2>
 8006f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8006ff8 <__sflush_r+0x104>)
 8006f50:	410a      	asrs	r2, r1
 8006f52:	07d6      	lsls	r6, r2, #31
 8006f54:	d427      	bmi.n	8006fa6 <__sflush_r+0xb2>
 8006f56:	2200      	movs	r2, #0
 8006f58:	6062      	str	r2, [r4, #4]
 8006f5a:	04d9      	lsls	r1, r3, #19
 8006f5c:	6922      	ldr	r2, [r4, #16]
 8006f5e:	6022      	str	r2, [r4, #0]
 8006f60:	d504      	bpl.n	8006f6c <__sflush_r+0x78>
 8006f62:	1c42      	adds	r2, r0, #1
 8006f64:	d101      	bne.n	8006f6a <__sflush_r+0x76>
 8006f66:	682b      	ldr	r3, [r5, #0]
 8006f68:	b903      	cbnz	r3, 8006f6c <__sflush_r+0x78>
 8006f6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f6e:	602f      	str	r7, [r5, #0]
 8006f70:	b1b9      	cbz	r1, 8006fa2 <__sflush_r+0xae>
 8006f72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f76:	4299      	cmp	r1, r3
 8006f78:	d002      	beq.n	8006f80 <__sflush_r+0x8c>
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f000 fd16 	bl	80079ac <_free_r>
 8006f80:	2300      	movs	r3, #0
 8006f82:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f84:	e00d      	b.n	8006fa2 <__sflush_r+0xae>
 8006f86:	2301      	movs	r3, #1
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b0      	blx	r6
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	1c50      	adds	r0, r2, #1
 8006f90:	d1c9      	bne.n	8006f26 <__sflush_r+0x32>
 8006f92:	682b      	ldr	r3, [r5, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d0c6      	beq.n	8006f26 <__sflush_r+0x32>
 8006f98:	2b1d      	cmp	r3, #29
 8006f9a:	d001      	beq.n	8006fa0 <__sflush_r+0xac>
 8006f9c:	2b16      	cmp	r3, #22
 8006f9e:	d11e      	bne.n	8006fde <__sflush_r+0xea>
 8006fa0:	602f      	str	r7, [r5, #0]
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	e022      	b.n	8006fec <__sflush_r+0xf8>
 8006fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006faa:	b21b      	sxth	r3, r3
 8006fac:	e01b      	b.n	8006fe6 <__sflush_r+0xf2>
 8006fae:	690f      	ldr	r7, [r1, #16]
 8006fb0:	2f00      	cmp	r7, #0
 8006fb2:	d0f6      	beq.n	8006fa2 <__sflush_r+0xae>
 8006fb4:	0793      	lsls	r3, r2, #30
 8006fb6:	680e      	ldr	r6, [r1, #0]
 8006fb8:	bf08      	it	eq
 8006fba:	694b      	ldreq	r3, [r1, #20]
 8006fbc:	600f      	str	r7, [r1, #0]
 8006fbe:	bf18      	it	ne
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	eba6 0807 	sub.w	r8, r6, r7
 8006fc6:	608b      	str	r3, [r1, #8]
 8006fc8:	f1b8 0f00 	cmp.w	r8, #0
 8006fcc:	dde9      	ble.n	8006fa2 <__sflush_r+0xae>
 8006fce:	6a21      	ldr	r1, [r4, #32]
 8006fd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006fd2:	4643      	mov	r3, r8
 8006fd4:	463a      	mov	r2, r7
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	47b0      	blx	r6
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	dc08      	bgt.n	8006ff0 <__sflush_r+0xfc>
 8006fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fe6:	81a3      	strh	r3, [r4, #12]
 8006fe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ff0:	4407      	add	r7, r0
 8006ff2:	eba8 0800 	sub.w	r8, r8, r0
 8006ff6:	e7e7      	b.n	8006fc8 <__sflush_r+0xd4>
 8006ff8:	dfbffffe 	.word	0xdfbffffe

08006ffc <_fflush_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	690b      	ldr	r3, [r1, #16]
 8007000:	4605      	mov	r5, r0
 8007002:	460c      	mov	r4, r1
 8007004:	b913      	cbnz	r3, 800700c <_fflush_r+0x10>
 8007006:	2500      	movs	r5, #0
 8007008:	4628      	mov	r0, r5
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	b118      	cbz	r0, 8007016 <_fflush_r+0x1a>
 800700e:	6a03      	ldr	r3, [r0, #32]
 8007010:	b90b      	cbnz	r3, 8007016 <_fflush_r+0x1a>
 8007012:	f7fe feb1 	bl	8005d78 <__sinit>
 8007016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0f3      	beq.n	8007006 <_fflush_r+0xa>
 800701e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007020:	07d0      	lsls	r0, r2, #31
 8007022:	d404      	bmi.n	800702e <_fflush_r+0x32>
 8007024:	0599      	lsls	r1, r3, #22
 8007026:	d402      	bmi.n	800702e <_fflush_r+0x32>
 8007028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800702a:	f7fe ff12 	bl	8005e52 <__retarget_lock_acquire_recursive>
 800702e:	4628      	mov	r0, r5
 8007030:	4621      	mov	r1, r4
 8007032:	f7ff ff5f 	bl	8006ef4 <__sflush_r>
 8007036:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007038:	07da      	lsls	r2, r3, #31
 800703a:	4605      	mov	r5, r0
 800703c:	d4e4      	bmi.n	8007008 <_fflush_r+0xc>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	059b      	lsls	r3, r3, #22
 8007042:	d4e1      	bmi.n	8007008 <_fflush_r+0xc>
 8007044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007046:	f7fe ff05 	bl	8005e54 <__retarget_lock_release_recursive>
 800704a:	e7dd      	b.n	8007008 <_fflush_r+0xc>

0800704c <__malloc_lock>:
 800704c:	4801      	ldr	r0, [pc, #4]	@ (8007054 <__malloc_lock+0x8>)
 800704e:	f7fe bf00 	b.w	8005e52 <__retarget_lock_acquire_recursive>
 8007052:	bf00      	nop
 8007054:	20000724 	.word	0x20000724

08007058 <__malloc_unlock>:
 8007058:	4801      	ldr	r0, [pc, #4]	@ (8007060 <__malloc_unlock+0x8>)
 800705a:	f7fe befb 	b.w	8005e54 <__retarget_lock_release_recursive>
 800705e:	bf00      	nop
 8007060:	20000724 	.word	0x20000724

08007064 <_Balloc>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	69c6      	ldr	r6, [r0, #28]
 8007068:	4604      	mov	r4, r0
 800706a:	460d      	mov	r5, r1
 800706c:	b976      	cbnz	r6, 800708c <_Balloc+0x28>
 800706e:	2010      	movs	r0, #16
 8007070:	f7ff fe96 	bl	8006da0 <malloc>
 8007074:	4602      	mov	r2, r0
 8007076:	61e0      	str	r0, [r4, #28]
 8007078:	b920      	cbnz	r0, 8007084 <_Balloc+0x20>
 800707a:	4b18      	ldr	r3, [pc, #96]	@ (80070dc <_Balloc+0x78>)
 800707c:	4818      	ldr	r0, [pc, #96]	@ (80070e0 <_Balloc+0x7c>)
 800707e:	216b      	movs	r1, #107	@ 0x6b
 8007080:	f000 fc62 	bl	8007948 <__assert_func>
 8007084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007088:	6006      	str	r6, [r0, #0]
 800708a:	60c6      	str	r6, [r0, #12]
 800708c:	69e6      	ldr	r6, [r4, #28]
 800708e:	68f3      	ldr	r3, [r6, #12]
 8007090:	b183      	cbz	r3, 80070b4 <_Balloc+0x50>
 8007092:	69e3      	ldr	r3, [r4, #28]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800709a:	b9b8      	cbnz	r0, 80070cc <_Balloc+0x68>
 800709c:	2101      	movs	r1, #1
 800709e:	fa01 f605 	lsl.w	r6, r1, r5
 80070a2:	1d72      	adds	r2, r6, #5
 80070a4:	0092      	lsls	r2, r2, #2
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 fc6c 	bl	8007984 <_calloc_r>
 80070ac:	b160      	cbz	r0, 80070c8 <_Balloc+0x64>
 80070ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070b2:	e00e      	b.n	80070d2 <_Balloc+0x6e>
 80070b4:	2221      	movs	r2, #33	@ 0x21
 80070b6:	2104      	movs	r1, #4
 80070b8:	4620      	mov	r0, r4
 80070ba:	f000 fc63 	bl	8007984 <_calloc_r>
 80070be:	69e3      	ldr	r3, [r4, #28]
 80070c0:	60f0      	str	r0, [r6, #12]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e4      	bne.n	8007092 <_Balloc+0x2e>
 80070c8:	2000      	movs	r0, #0
 80070ca:	bd70      	pop	{r4, r5, r6, pc}
 80070cc:	6802      	ldr	r2, [r0, #0]
 80070ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070d2:	2300      	movs	r3, #0
 80070d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070d8:	e7f7      	b.n	80070ca <_Balloc+0x66>
 80070da:	bf00      	nop
 80070dc:	08008089 	.word	0x08008089
 80070e0:	0800811a 	.word	0x0800811a

080070e4 <_Bfree>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	69c6      	ldr	r6, [r0, #28]
 80070e8:	4605      	mov	r5, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	b976      	cbnz	r6, 800710c <_Bfree+0x28>
 80070ee:	2010      	movs	r0, #16
 80070f0:	f7ff fe56 	bl	8006da0 <malloc>
 80070f4:	4602      	mov	r2, r0
 80070f6:	61e8      	str	r0, [r5, #28]
 80070f8:	b920      	cbnz	r0, 8007104 <_Bfree+0x20>
 80070fa:	4b09      	ldr	r3, [pc, #36]	@ (8007120 <_Bfree+0x3c>)
 80070fc:	4809      	ldr	r0, [pc, #36]	@ (8007124 <_Bfree+0x40>)
 80070fe:	218f      	movs	r1, #143	@ 0x8f
 8007100:	f000 fc22 	bl	8007948 <__assert_func>
 8007104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007108:	6006      	str	r6, [r0, #0]
 800710a:	60c6      	str	r6, [r0, #12]
 800710c:	b13c      	cbz	r4, 800711e <_Bfree+0x3a>
 800710e:	69eb      	ldr	r3, [r5, #28]
 8007110:	6862      	ldr	r2, [r4, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007118:	6021      	str	r1, [r4, #0]
 800711a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	08008089 	.word	0x08008089
 8007124:	0800811a 	.word	0x0800811a

08007128 <__multadd>:
 8007128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800712c:	690d      	ldr	r5, [r1, #16]
 800712e:	4607      	mov	r7, r0
 8007130:	460c      	mov	r4, r1
 8007132:	461e      	mov	r6, r3
 8007134:	f101 0c14 	add.w	ip, r1, #20
 8007138:	2000      	movs	r0, #0
 800713a:	f8dc 3000 	ldr.w	r3, [ip]
 800713e:	b299      	uxth	r1, r3
 8007140:	fb02 6101 	mla	r1, r2, r1, r6
 8007144:	0c1e      	lsrs	r6, r3, #16
 8007146:	0c0b      	lsrs	r3, r1, #16
 8007148:	fb02 3306 	mla	r3, r2, r6, r3
 800714c:	b289      	uxth	r1, r1
 800714e:	3001      	adds	r0, #1
 8007150:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007154:	4285      	cmp	r5, r0
 8007156:	f84c 1b04 	str.w	r1, [ip], #4
 800715a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800715e:	dcec      	bgt.n	800713a <__multadd+0x12>
 8007160:	b30e      	cbz	r6, 80071a6 <__multadd+0x7e>
 8007162:	68a3      	ldr	r3, [r4, #8]
 8007164:	42ab      	cmp	r3, r5
 8007166:	dc19      	bgt.n	800719c <__multadd+0x74>
 8007168:	6861      	ldr	r1, [r4, #4]
 800716a:	4638      	mov	r0, r7
 800716c:	3101      	adds	r1, #1
 800716e:	f7ff ff79 	bl	8007064 <_Balloc>
 8007172:	4680      	mov	r8, r0
 8007174:	b928      	cbnz	r0, 8007182 <__multadd+0x5a>
 8007176:	4602      	mov	r2, r0
 8007178:	4b0c      	ldr	r3, [pc, #48]	@ (80071ac <__multadd+0x84>)
 800717a:	480d      	ldr	r0, [pc, #52]	@ (80071b0 <__multadd+0x88>)
 800717c:	21ba      	movs	r1, #186	@ 0xba
 800717e:	f000 fbe3 	bl	8007948 <__assert_func>
 8007182:	6922      	ldr	r2, [r4, #16]
 8007184:	3202      	adds	r2, #2
 8007186:	f104 010c 	add.w	r1, r4, #12
 800718a:	0092      	lsls	r2, r2, #2
 800718c:	300c      	adds	r0, #12
 800718e:	f000 fbcd 	bl	800792c <memcpy>
 8007192:	4621      	mov	r1, r4
 8007194:	4638      	mov	r0, r7
 8007196:	f7ff ffa5 	bl	80070e4 <_Bfree>
 800719a:	4644      	mov	r4, r8
 800719c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071a0:	3501      	adds	r5, #1
 80071a2:	615e      	str	r6, [r3, #20]
 80071a4:	6125      	str	r5, [r4, #16]
 80071a6:	4620      	mov	r0, r4
 80071a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ac:	080080f8 	.word	0x080080f8
 80071b0:	0800811a 	.word	0x0800811a

080071b4 <__hi0bits>:
 80071b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80071b8:	4603      	mov	r3, r0
 80071ba:	bf36      	itet	cc
 80071bc:	0403      	lslcc	r3, r0, #16
 80071be:	2000      	movcs	r0, #0
 80071c0:	2010      	movcc	r0, #16
 80071c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071c6:	bf3c      	itt	cc
 80071c8:	021b      	lslcc	r3, r3, #8
 80071ca:	3008      	addcc	r0, #8
 80071cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071d0:	bf3c      	itt	cc
 80071d2:	011b      	lslcc	r3, r3, #4
 80071d4:	3004      	addcc	r0, #4
 80071d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071da:	bf3c      	itt	cc
 80071dc:	009b      	lslcc	r3, r3, #2
 80071de:	3002      	addcc	r0, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	db05      	blt.n	80071f0 <__hi0bits+0x3c>
 80071e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80071e8:	f100 0001 	add.w	r0, r0, #1
 80071ec:	bf08      	it	eq
 80071ee:	2020      	moveq	r0, #32
 80071f0:	4770      	bx	lr

080071f2 <__lo0bits>:
 80071f2:	6803      	ldr	r3, [r0, #0]
 80071f4:	4602      	mov	r2, r0
 80071f6:	f013 0007 	ands.w	r0, r3, #7
 80071fa:	d00b      	beq.n	8007214 <__lo0bits+0x22>
 80071fc:	07d9      	lsls	r1, r3, #31
 80071fe:	d421      	bmi.n	8007244 <__lo0bits+0x52>
 8007200:	0798      	lsls	r0, r3, #30
 8007202:	bf49      	itett	mi
 8007204:	085b      	lsrmi	r3, r3, #1
 8007206:	089b      	lsrpl	r3, r3, #2
 8007208:	2001      	movmi	r0, #1
 800720a:	6013      	strmi	r3, [r2, #0]
 800720c:	bf5c      	itt	pl
 800720e:	6013      	strpl	r3, [r2, #0]
 8007210:	2002      	movpl	r0, #2
 8007212:	4770      	bx	lr
 8007214:	b299      	uxth	r1, r3
 8007216:	b909      	cbnz	r1, 800721c <__lo0bits+0x2a>
 8007218:	0c1b      	lsrs	r3, r3, #16
 800721a:	2010      	movs	r0, #16
 800721c:	b2d9      	uxtb	r1, r3
 800721e:	b909      	cbnz	r1, 8007224 <__lo0bits+0x32>
 8007220:	3008      	adds	r0, #8
 8007222:	0a1b      	lsrs	r3, r3, #8
 8007224:	0719      	lsls	r1, r3, #28
 8007226:	bf04      	itt	eq
 8007228:	091b      	lsreq	r3, r3, #4
 800722a:	3004      	addeq	r0, #4
 800722c:	0799      	lsls	r1, r3, #30
 800722e:	bf04      	itt	eq
 8007230:	089b      	lsreq	r3, r3, #2
 8007232:	3002      	addeq	r0, #2
 8007234:	07d9      	lsls	r1, r3, #31
 8007236:	d403      	bmi.n	8007240 <__lo0bits+0x4e>
 8007238:	085b      	lsrs	r3, r3, #1
 800723a:	f100 0001 	add.w	r0, r0, #1
 800723e:	d003      	beq.n	8007248 <__lo0bits+0x56>
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	4770      	bx	lr
 8007244:	2000      	movs	r0, #0
 8007246:	4770      	bx	lr
 8007248:	2020      	movs	r0, #32
 800724a:	4770      	bx	lr

0800724c <__i2b>:
 800724c:	b510      	push	{r4, lr}
 800724e:	460c      	mov	r4, r1
 8007250:	2101      	movs	r1, #1
 8007252:	f7ff ff07 	bl	8007064 <_Balloc>
 8007256:	4602      	mov	r2, r0
 8007258:	b928      	cbnz	r0, 8007266 <__i2b+0x1a>
 800725a:	4b05      	ldr	r3, [pc, #20]	@ (8007270 <__i2b+0x24>)
 800725c:	4805      	ldr	r0, [pc, #20]	@ (8007274 <__i2b+0x28>)
 800725e:	f240 1145 	movw	r1, #325	@ 0x145
 8007262:	f000 fb71 	bl	8007948 <__assert_func>
 8007266:	2301      	movs	r3, #1
 8007268:	6144      	str	r4, [r0, #20]
 800726a:	6103      	str	r3, [r0, #16]
 800726c:	bd10      	pop	{r4, pc}
 800726e:	bf00      	nop
 8007270:	080080f8 	.word	0x080080f8
 8007274:	0800811a 	.word	0x0800811a

08007278 <__multiply>:
 8007278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727c:	4614      	mov	r4, r2
 800727e:	690a      	ldr	r2, [r1, #16]
 8007280:	6923      	ldr	r3, [r4, #16]
 8007282:	429a      	cmp	r2, r3
 8007284:	bfa8      	it	ge
 8007286:	4623      	movge	r3, r4
 8007288:	460f      	mov	r7, r1
 800728a:	bfa4      	itt	ge
 800728c:	460c      	movge	r4, r1
 800728e:	461f      	movge	r7, r3
 8007290:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007294:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007298:	68a3      	ldr	r3, [r4, #8]
 800729a:	6861      	ldr	r1, [r4, #4]
 800729c:	eb0a 0609 	add.w	r6, sl, r9
 80072a0:	42b3      	cmp	r3, r6
 80072a2:	b085      	sub	sp, #20
 80072a4:	bfb8      	it	lt
 80072a6:	3101      	addlt	r1, #1
 80072a8:	f7ff fedc 	bl	8007064 <_Balloc>
 80072ac:	b930      	cbnz	r0, 80072bc <__multiply+0x44>
 80072ae:	4602      	mov	r2, r0
 80072b0:	4b44      	ldr	r3, [pc, #272]	@ (80073c4 <__multiply+0x14c>)
 80072b2:	4845      	ldr	r0, [pc, #276]	@ (80073c8 <__multiply+0x150>)
 80072b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80072b8:	f000 fb46 	bl	8007948 <__assert_func>
 80072bc:	f100 0514 	add.w	r5, r0, #20
 80072c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072c4:	462b      	mov	r3, r5
 80072c6:	2200      	movs	r2, #0
 80072c8:	4543      	cmp	r3, r8
 80072ca:	d321      	bcc.n	8007310 <__multiply+0x98>
 80072cc:	f107 0114 	add.w	r1, r7, #20
 80072d0:	f104 0214 	add.w	r2, r4, #20
 80072d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80072d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80072dc:	9302      	str	r3, [sp, #8]
 80072de:	1b13      	subs	r3, r2, r4
 80072e0:	3b15      	subs	r3, #21
 80072e2:	f023 0303 	bic.w	r3, r3, #3
 80072e6:	3304      	adds	r3, #4
 80072e8:	f104 0715 	add.w	r7, r4, #21
 80072ec:	42ba      	cmp	r2, r7
 80072ee:	bf38      	it	cc
 80072f0:	2304      	movcc	r3, #4
 80072f2:	9301      	str	r3, [sp, #4]
 80072f4:	9b02      	ldr	r3, [sp, #8]
 80072f6:	9103      	str	r1, [sp, #12]
 80072f8:	428b      	cmp	r3, r1
 80072fa:	d80c      	bhi.n	8007316 <__multiply+0x9e>
 80072fc:	2e00      	cmp	r6, #0
 80072fe:	dd03      	ble.n	8007308 <__multiply+0x90>
 8007300:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007304:	2b00      	cmp	r3, #0
 8007306:	d05b      	beq.n	80073c0 <__multiply+0x148>
 8007308:	6106      	str	r6, [r0, #16]
 800730a:	b005      	add	sp, #20
 800730c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007310:	f843 2b04 	str.w	r2, [r3], #4
 8007314:	e7d8      	b.n	80072c8 <__multiply+0x50>
 8007316:	f8b1 a000 	ldrh.w	sl, [r1]
 800731a:	f1ba 0f00 	cmp.w	sl, #0
 800731e:	d024      	beq.n	800736a <__multiply+0xf2>
 8007320:	f104 0e14 	add.w	lr, r4, #20
 8007324:	46a9      	mov	r9, r5
 8007326:	f04f 0c00 	mov.w	ip, #0
 800732a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800732e:	f8d9 3000 	ldr.w	r3, [r9]
 8007332:	fa1f fb87 	uxth.w	fp, r7
 8007336:	b29b      	uxth	r3, r3
 8007338:	fb0a 330b 	mla	r3, sl, fp, r3
 800733c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007340:	f8d9 7000 	ldr.w	r7, [r9]
 8007344:	4463      	add	r3, ip
 8007346:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800734a:	fb0a c70b 	mla	r7, sl, fp, ip
 800734e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007352:	b29b      	uxth	r3, r3
 8007354:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007358:	4572      	cmp	r2, lr
 800735a:	f849 3b04 	str.w	r3, [r9], #4
 800735e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007362:	d8e2      	bhi.n	800732a <__multiply+0xb2>
 8007364:	9b01      	ldr	r3, [sp, #4]
 8007366:	f845 c003 	str.w	ip, [r5, r3]
 800736a:	9b03      	ldr	r3, [sp, #12]
 800736c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007370:	3104      	adds	r1, #4
 8007372:	f1b9 0f00 	cmp.w	r9, #0
 8007376:	d021      	beq.n	80073bc <__multiply+0x144>
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	f104 0c14 	add.w	ip, r4, #20
 800737e:	46ae      	mov	lr, r5
 8007380:	f04f 0a00 	mov.w	sl, #0
 8007384:	f8bc b000 	ldrh.w	fp, [ip]
 8007388:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800738c:	fb09 770b 	mla	r7, r9, fp, r7
 8007390:	4457      	add	r7, sl
 8007392:	b29b      	uxth	r3, r3
 8007394:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007398:	f84e 3b04 	str.w	r3, [lr], #4
 800739c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80073a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073a4:	f8be 3000 	ldrh.w	r3, [lr]
 80073a8:	fb09 330a 	mla	r3, r9, sl, r3
 80073ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80073b0:	4562      	cmp	r2, ip
 80073b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073b6:	d8e5      	bhi.n	8007384 <__multiply+0x10c>
 80073b8:	9f01      	ldr	r7, [sp, #4]
 80073ba:	51eb      	str	r3, [r5, r7]
 80073bc:	3504      	adds	r5, #4
 80073be:	e799      	b.n	80072f4 <__multiply+0x7c>
 80073c0:	3e01      	subs	r6, #1
 80073c2:	e79b      	b.n	80072fc <__multiply+0x84>
 80073c4:	080080f8 	.word	0x080080f8
 80073c8:	0800811a 	.word	0x0800811a

080073cc <__pow5mult>:
 80073cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d0:	4615      	mov	r5, r2
 80073d2:	f012 0203 	ands.w	r2, r2, #3
 80073d6:	4607      	mov	r7, r0
 80073d8:	460e      	mov	r6, r1
 80073da:	d007      	beq.n	80073ec <__pow5mult+0x20>
 80073dc:	4c25      	ldr	r4, [pc, #148]	@ (8007474 <__pow5mult+0xa8>)
 80073de:	3a01      	subs	r2, #1
 80073e0:	2300      	movs	r3, #0
 80073e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073e6:	f7ff fe9f 	bl	8007128 <__multadd>
 80073ea:	4606      	mov	r6, r0
 80073ec:	10ad      	asrs	r5, r5, #2
 80073ee:	d03d      	beq.n	800746c <__pow5mult+0xa0>
 80073f0:	69fc      	ldr	r4, [r7, #28]
 80073f2:	b97c      	cbnz	r4, 8007414 <__pow5mult+0x48>
 80073f4:	2010      	movs	r0, #16
 80073f6:	f7ff fcd3 	bl	8006da0 <malloc>
 80073fa:	4602      	mov	r2, r0
 80073fc:	61f8      	str	r0, [r7, #28]
 80073fe:	b928      	cbnz	r0, 800740c <__pow5mult+0x40>
 8007400:	4b1d      	ldr	r3, [pc, #116]	@ (8007478 <__pow5mult+0xac>)
 8007402:	481e      	ldr	r0, [pc, #120]	@ (800747c <__pow5mult+0xb0>)
 8007404:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007408:	f000 fa9e 	bl	8007948 <__assert_func>
 800740c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007410:	6004      	str	r4, [r0, #0]
 8007412:	60c4      	str	r4, [r0, #12]
 8007414:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007418:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800741c:	b94c      	cbnz	r4, 8007432 <__pow5mult+0x66>
 800741e:	f240 2171 	movw	r1, #625	@ 0x271
 8007422:	4638      	mov	r0, r7
 8007424:	f7ff ff12 	bl	800724c <__i2b>
 8007428:	2300      	movs	r3, #0
 800742a:	f8c8 0008 	str.w	r0, [r8, #8]
 800742e:	4604      	mov	r4, r0
 8007430:	6003      	str	r3, [r0, #0]
 8007432:	f04f 0900 	mov.w	r9, #0
 8007436:	07eb      	lsls	r3, r5, #31
 8007438:	d50a      	bpl.n	8007450 <__pow5mult+0x84>
 800743a:	4631      	mov	r1, r6
 800743c:	4622      	mov	r2, r4
 800743e:	4638      	mov	r0, r7
 8007440:	f7ff ff1a 	bl	8007278 <__multiply>
 8007444:	4631      	mov	r1, r6
 8007446:	4680      	mov	r8, r0
 8007448:	4638      	mov	r0, r7
 800744a:	f7ff fe4b 	bl	80070e4 <_Bfree>
 800744e:	4646      	mov	r6, r8
 8007450:	106d      	asrs	r5, r5, #1
 8007452:	d00b      	beq.n	800746c <__pow5mult+0xa0>
 8007454:	6820      	ldr	r0, [r4, #0]
 8007456:	b938      	cbnz	r0, 8007468 <__pow5mult+0x9c>
 8007458:	4622      	mov	r2, r4
 800745a:	4621      	mov	r1, r4
 800745c:	4638      	mov	r0, r7
 800745e:	f7ff ff0b 	bl	8007278 <__multiply>
 8007462:	6020      	str	r0, [r4, #0]
 8007464:	f8c0 9000 	str.w	r9, [r0]
 8007468:	4604      	mov	r4, r0
 800746a:	e7e4      	b.n	8007436 <__pow5mult+0x6a>
 800746c:	4630      	mov	r0, r6
 800746e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007472:	bf00      	nop
 8007474:	08008174 	.word	0x08008174
 8007478:	08008089 	.word	0x08008089
 800747c:	0800811a 	.word	0x0800811a

08007480 <__lshift>:
 8007480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007484:	460c      	mov	r4, r1
 8007486:	6849      	ldr	r1, [r1, #4]
 8007488:	6923      	ldr	r3, [r4, #16]
 800748a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800748e:	68a3      	ldr	r3, [r4, #8]
 8007490:	4607      	mov	r7, r0
 8007492:	4691      	mov	r9, r2
 8007494:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007498:	f108 0601 	add.w	r6, r8, #1
 800749c:	42b3      	cmp	r3, r6
 800749e:	db0b      	blt.n	80074b8 <__lshift+0x38>
 80074a0:	4638      	mov	r0, r7
 80074a2:	f7ff fddf 	bl	8007064 <_Balloc>
 80074a6:	4605      	mov	r5, r0
 80074a8:	b948      	cbnz	r0, 80074be <__lshift+0x3e>
 80074aa:	4602      	mov	r2, r0
 80074ac:	4b28      	ldr	r3, [pc, #160]	@ (8007550 <__lshift+0xd0>)
 80074ae:	4829      	ldr	r0, [pc, #164]	@ (8007554 <__lshift+0xd4>)
 80074b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80074b4:	f000 fa48 	bl	8007948 <__assert_func>
 80074b8:	3101      	adds	r1, #1
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	e7ee      	b.n	800749c <__lshift+0x1c>
 80074be:	2300      	movs	r3, #0
 80074c0:	f100 0114 	add.w	r1, r0, #20
 80074c4:	f100 0210 	add.w	r2, r0, #16
 80074c8:	4618      	mov	r0, r3
 80074ca:	4553      	cmp	r3, sl
 80074cc:	db33      	blt.n	8007536 <__lshift+0xb6>
 80074ce:	6920      	ldr	r0, [r4, #16]
 80074d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074d4:	f104 0314 	add.w	r3, r4, #20
 80074d8:	f019 091f 	ands.w	r9, r9, #31
 80074dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074e4:	d02b      	beq.n	800753e <__lshift+0xbe>
 80074e6:	f1c9 0e20 	rsb	lr, r9, #32
 80074ea:	468a      	mov	sl, r1
 80074ec:	2200      	movs	r2, #0
 80074ee:	6818      	ldr	r0, [r3, #0]
 80074f0:	fa00 f009 	lsl.w	r0, r0, r9
 80074f4:	4310      	orrs	r0, r2
 80074f6:	f84a 0b04 	str.w	r0, [sl], #4
 80074fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80074fe:	459c      	cmp	ip, r3
 8007500:	fa22 f20e 	lsr.w	r2, r2, lr
 8007504:	d8f3      	bhi.n	80074ee <__lshift+0x6e>
 8007506:	ebac 0304 	sub.w	r3, ip, r4
 800750a:	3b15      	subs	r3, #21
 800750c:	f023 0303 	bic.w	r3, r3, #3
 8007510:	3304      	adds	r3, #4
 8007512:	f104 0015 	add.w	r0, r4, #21
 8007516:	4584      	cmp	ip, r0
 8007518:	bf38      	it	cc
 800751a:	2304      	movcc	r3, #4
 800751c:	50ca      	str	r2, [r1, r3]
 800751e:	b10a      	cbz	r2, 8007524 <__lshift+0xa4>
 8007520:	f108 0602 	add.w	r6, r8, #2
 8007524:	3e01      	subs	r6, #1
 8007526:	4638      	mov	r0, r7
 8007528:	612e      	str	r6, [r5, #16]
 800752a:	4621      	mov	r1, r4
 800752c:	f7ff fdda 	bl	80070e4 <_Bfree>
 8007530:	4628      	mov	r0, r5
 8007532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007536:	f842 0f04 	str.w	r0, [r2, #4]!
 800753a:	3301      	adds	r3, #1
 800753c:	e7c5      	b.n	80074ca <__lshift+0x4a>
 800753e:	3904      	subs	r1, #4
 8007540:	f853 2b04 	ldr.w	r2, [r3], #4
 8007544:	f841 2f04 	str.w	r2, [r1, #4]!
 8007548:	459c      	cmp	ip, r3
 800754a:	d8f9      	bhi.n	8007540 <__lshift+0xc0>
 800754c:	e7ea      	b.n	8007524 <__lshift+0xa4>
 800754e:	bf00      	nop
 8007550:	080080f8 	.word	0x080080f8
 8007554:	0800811a 	.word	0x0800811a

08007558 <__mcmp>:
 8007558:	690a      	ldr	r2, [r1, #16]
 800755a:	4603      	mov	r3, r0
 800755c:	6900      	ldr	r0, [r0, #16]
 800755e:	1a80      	subs	r0, r0, r2
 8007560:	b530      	push	{r4, r5, lr}
 8007562:	d10e      	bne.n	8007582 <__mcmp+0x2a>
 8007564:	3314      	adds	r3, #20
 8007566:	3114      	adds	r1, #20
 8007568:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800756c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007570:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007574:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007578:	4295      	cmp	r5, r2
 800757a:	d003      	beq.n	8007584 <__mcmp+0x2c>
 800757c:	d205      	bcs.n	800758a <__mcmp+0x32>
 800757e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007582:	bd30      	pop	{r4, r5, pc}
 8007584:	42a3      	cmp	r3, r4
 8007586:	d3f3      	bcc.n	8007570 <__mcmp+0x18>
 8007588:	e7fb      	b.n	8007582 <__mcmp+0x2a>
 800758a:	2001      	movs	r0, #1
 800758c:	e7f9      	b.n	8007582 <__mcmp+0x2a>
	...

08007590 <__mdiff>:
 8007590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007594:	4689      	mov	r9, r1
 8007596:	4606      	mov	r6, r0
 8007598:	4611      	mov	r1, r2
 800759a:	4648      	mov	r0, r9
 800759c:	4614      	mov	r4, r2
 800759e:	f7ff ffdb 	bl	8007558 <__mcmp>
 80075a2:	1e05      	subs	r5, r0, #0
 80075a4:	d112      	bne.n	80075cc <__mdiff+0x3c>
 80075a6:	4629      	mov	r1, r5
 80075a8:	4630      	mov	r0, r6
 80075aa:	f7ff fd5b 	bl	8007064 <_Balloc>
 80075ae:	4602      	mov	r2, r0
 80075b0:	b928      	cbnz	r0, 80075be <__mdiff+0x2e>
 80075b2:	4b3f      	ldr	r3, [pc, #252]	@ (80076b0 <__mdiff+0x120>)
 80075b4:	f240 2137 	movw	r1, #567	@ 0x237
 80075b8:	483e      	ldr	r0, [pc, #248]	@ (80076b4 <__mdiff+0x124>)
 80075ba:	f000 f9c5 	bl	8007948 <__assert_func>
 80075be:	2301      	movs	r3, #1
 80075c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075c4:	4610      	mov	r0, r2
 80075c6:	b003      	add	sp, #12
 80075c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075cc:	bfbc      	itt	lt
 80075ce:	464b      	movlt	r3, r9
 80075d0:	46a1      	movlt	r9, r4
 80075d2:	4630      	mov	r0, r6
 80075d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80075d8:	bfba      	itte	lt
 80075da:	461c      	movlt	r4, r3
 80075dc:	2501      	movlt	r5, #1
 80075de:	2500      	movge	r5, #0
 80075e0:	f7ff fd40 	bl	8007064 <_Balloc>
 80075e4:	4602      	mov	r2, r0
 80075e6:	b918      	cbnz	r0, 80075f0 <__mdiff+0x60>
 80075e8:	4b31      	ldr	r3, [pc, #196]	@ (80076b0 <__mdiff+0x120>)
 80075ea:	f240 2145 	movw	r1, #581	@ 0x245
 80075ee:	e7e3      	b.n	80075b8 <__mdiff+0x28>
 80075f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80075f4:	6926      	ldr	r6, [r4, #16]
 80075f6:	60c5      	str	r5, [r0, #12]
 80075f8:	f109 0310 	add.w	r3, r9, #16
 80075fc:	f109 0514 	add.w	r5, r9, #20
 8007600:	f104 0e14 	add.w	lr, r4, #20
 8007604:	f100 0b14 	add.w	fp, r0, #20
 8007608:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800760c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	46d9      	mov	r9, fp
 8007614:	f04f 0c00 	mov.w	ip, #0
 8007618:	9b01      	ldr	r3, [sp, #4]
 800761a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800761e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	fa1f f38a 	uxth.w	r3, sl
 8007628:	4619      	mov	r1, r3
 800762a:	b283      	uxth	r3, r0
 800762c:	1acb      	subs	r3, r1, r3
 800762e:	0c00      	lsrs	r0, r0, #16
 8007630:	4463      	add	r3, ip
 8007632:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007636:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800763a:	b29b      	uxth	r3, r3
 800763c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007640:	4576      	cmp	r6, lr
 8007642:	f849 3b04 	str.w	r3, [r9], #4
 8007646:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800764a:	d8e5      	bhi.n	8007618 <__mdiff+0x88>
 800764c:	1b33      	subs	r3, r6, r4
 800764e:	3b15      	subs	r3, #21
 8007650:	f023 0303 	bic.w	r3, r3, #3
 8007654:	3415      	adds	r4, #21
 8007656:	3304      	adds	r3, #4
 8007658:	42a6      	cmp	r6, r4
 800765a:	bf38      	it	cc
 800765c:	2304      	movcc	r3, #4
 800765e:	441d      	add	r5, r3
 8007660:	445b      	add	r3, fp
 8007662:	461e      	mov	r6, r3
 8007664:	462c      	mov	r4, r5
 8007666:	4544      	cmp	r4, r8
 8007668:	d30e      	bcc.n	8007688 <__mdiff+0xf8>
 800766a:	f108 0103 	add.w	r1, r8, #3
 800766e:	1b49      	subs	r1, r1, r5
 8007670:	f021 0103 	bic.w	r1, r1, #3
 8007674:	3d03      	subs	r5, #3
 8007676:	45a8      	cmp	r8, r5
 8007678:	bf38      	it	cc
 800767a:	2100      	movcc	r1, #0
 800767c:	440b      	add	r3, r1
 800767e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007682:	b191      	cbz	r1, 80076aa <__mdiff+0x11a>
 8007684:	6117      	str	r7, [r2, #16]
 8007686:	e79d      	b.n	80075c4 <__mdiff+0x34>
 8007688:	f854 1b04 	ldr.w	r1, [r4], #4
 800768c:	46e6      	mov	lr, ip
 800768e:	0c08      	lsrs	r0, r1, #16
 8007690:	fa1c fc81 	uxtah	ip, ip, r1
 8007694:	4471      	add	r1, lr
 8007696:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800769a:	b289      	uxth	r1, r1
 800769c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80076a0:	f846 1b04 	str.w	r1, [r6], #4
 80076a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80076a8:	e7dd      	b.n	8007666 <__mdiff+0xd6>
 80076aa:	3f01      	subs	r7, #1
 80076ac:	e7e7      	b.n	800767e <__mdiff+0xee>
 80076ae:	bf00      	nop
 80076b0:	080080f8 	.word	0x080080f8
 80076b4:	0800811a 	.word	0x0800811a

080076b8 <__d2b>:
 80076b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076bc:	460f      	mov	r7, r1
 80076be:	2101      	movs	r1, #1
 80076c0:	ec59 8b10 	vmov	r8, r9, d0
 80076c4:	4616      	mov	r6, r2
 80076c6:	f7ff fccd 	bl	8007064 <_Balloc>
 80076ca:	4604      	mov	r4, r0
 80076cc:	b930      	cbnz	r0, 80076dc <__d2b+0x24>
 80076ce:	4602      	mov	r2, r0
 80076d0:	4b23      	ldr	r3, [pc, #140]	@ (8007760 <__d2b+0xa8>)
 80076d2:	4824      	ldr	r0, [pc, #144]	@ (8007764 <__d2b+0xac>)
 80076d4:	f240 310f 	movw	r1, #783	@ 0x30f
 80076d8:	f000 f936 	bl	8007948 <__assert_func>
 80076dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80076e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076e4:	b10d      	cbz	r5, 80076ea <__d2b+0x32>
 80076e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076ea:	9301      	str	r3, [sp, #4]
 80076ec:	f1b8 0300 	subs.w	r3, r8, #0
 80076f0:	d023      	beq.n	800773a <__d2b+0x82>
 80076f2:	4668      	mov	r0, sp
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	f7ff fd7c 	bl	80071f2 <__lo0bits>
 80076fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80076fe:	b1d0      	cbz	r0, 8007736 <__d2b+0x7e>
 8007700:	f1c0 0320 	rsb	r3, r0, #32
 8007704:	fa02 f303 	lsl.w	r3, r2, r3
 8007708:	430b      	orrs	r3, r1
 800770a:	40c2      	lsrs	r2, r0
 800770c:	6163      	str	r3, [r4, #20]
 800770e:	9201      	str	r2, [sp, #4]
 8007710:	9b01      	ldr	r3, [sp, #4]
 8007712:	61a3      	str	r3, [r4, #24]
 8007714:	2b00      	cmp	r3, #0
 8007716:	bf0c      	ite	eq
 8007718:	2201      	moveq	r2, #1
 800771a:	2202      	movne	r2, #2
 800771c:	6122      	str	r2, [r4, #16]
 800771e:	b1a5      	cbz	r5, 800774a <__d2b+0x92>
 8007720:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007724:	4405      	add	r5, r0
 8007726:	603d      	str	r5, [r7, #0]
 8007728:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800772c:	6030      	str	r0, [r6, #0]
 800772e:	4620      	mov	r0, r4
 8007730:	b003      	add	sp, #12
 8007732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007736:	6161      	str	r1, [r4, #20]
 8007738:	e7ea      	b.n	8007710 <__d2b+0x58>
 800773a:	a801      	add	r0, sp, #4
 800773c:	f7ff fd59 	bl	80071f2 <__lo0bits>
 8007740:	9b01      	ldr	r3, [sp, #4]
 8007742:	6163      	str	r3, [r4, #20]
 8007744:	3020      	adds	r0, #32
 8007746:	2201      	movs	r2, #1
 8007748:	e7e8      	b.n	800771c <__d2b+0x64>
 800774a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800774e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007752:	6038      	str	r0, [r7, #0]
 8007754:	6918      	ldr	r0, [r3, #16]
 8007756:	f7ff fd2d 	bl	80071b4 <__hi0bits>
 800775a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800775e:	e7e5      	b.n	800772c <__d2b+0x74>
 8007760:	080080f8 	.word	0x080080f8
 8007764:	0800811a 	.word	0x0800811a

08007768 <__sread>:
 8007768:	b510      	push	{r4, lr}
 800776a:	460c      	mov	r4, r1
 800776c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007770:	f000 f8a8 	bl	80078c4 <_read_r>
 8007774:	2800      	cmp	r0, #0
 8007776:	bfab      	itete	ge
 8007778:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800777a:	89a3      	ldrhlt	r3, [r4, #12]
 800777c:	181b      	addge	r3, r3, r0
 800777e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007782:	bfac      	ite	ge
 8007784:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007786:	81a3      	strhlt	r3, [r4, #12]
 8007788:	bd10      	pop	{r4, pc}

0800778a <__swrite>:
 800778a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800778e:	461f      	mov	r7, r3
 8007790:	898b      	ldrh	r3, [r1, #12]
 8007792:	05db      	lsls	r3, r3, #23
 8007794:	4605      	mov	r5, r0
 8007796:	460c      	mov	r4, r1
 8007798:	4616      	mov	r6, r2
 800779a:	d505      	bpl.n	80077a8 <__swrite+0x1e>
 800779c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a0:	2302      	movs	r3, #2
 80077a2:	2200      	movs	r2, #0
 80077a4:	f000 f87c 	bl	80078a0 <_lseek_r>
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077b2:	81a3      	strh	r3, [r4, #12]
 80077b4:	4632      	mov	r2, r6
 80077b6:	463b      	mov	r3, r7
 80077b8:	4628      	mov	r0, r5
 80077ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077be:	f000 b8a3 	b.w	8007908 <_write_r>

080077c2 <__sseek>:
 80077c2:	b510      	push	{r4, lr}
 80077c4:	460c      	mov	r4, r1
 80077c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ca:	f000 f869 	bl	80078a0 <_lseek_r>
 80077ce:	1c43      	adds	r3, r0, #1
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	bf15      	itete	ne
 80077d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077de:	81a3      	strheq	r3, [r4, #12]
 80077e0:	bf18      	it	ne
 80077e2:	81a3      	strhne	r3, [r4, #12]
 80077e4:	bd10      	pop	{r4, pc}

080077e6 <__sclose>:
 80077e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ea:	f000 b849 	b.w	8007880 <_close_r>

080077ee <_realloc_r>:
 80077ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f2:	4680      	mov	r8, r0
 80077f4:	4615      	mov	r5, r2
 80077f6:	460c      	mov	r4, r1
 80077f8:	b921      	cbnz	r1, 8007804 <_realloc_r+0x16>
 80077fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077fe:	4611      	mov	r1, r2
 8007800:	f7ff baf8 	b.w	8006df4 <_malloc_r>
 8007804:	b92a      	cbnz	r2, 8007812 <_realloc_r+0x24>
 8007806:	f000 f8d1 	bl	80079ac <_free_r>
 800780a:	2400      	movs	r4, #0
 800780c:	4620      	mov	r0, r4
 800780e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007812:	f000 f927 	bl	8007a64 <_malloc_usable_size_r>
 8007816:	4285      	cmp	r5, r0
 8007818:	4606      	mov	r6, r0
 800781a:	d802      	bhi.n	8007822 <_realloc_r+0x34>
 800781c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007820:	d8f4      	bhi.n	800780c <_realloc_r+0x1e>
 8007822:	4629      	mov	r1, r5
 8007824:	4640      	mov	r0, r8
 8007826:	f7ff fae5 	bl	8006df4 <_malloc_r>
 800782a:	4607      	mov	r7, r0
 800782c:	2800      	cmp	r0, #0
 800782e:	d0ec      	beq.n	800780a <_realloc_r+0x1c>
 8007830:	42b5      	cmp	r5, r6
 8007832:	462a      	mov	r2, r5
 8007834:	4621      	mov	r1, r4
 8007836:	bf28      	it	cs
 8007838:	4632      	movcs	r2, r6
 800783a:	f000 f877 	bl	800792c <memcpy>
 800783e:	4621      	mov	r1, r4
 8007840:	4640      	mov	r0, r8
 8007842:	f000 f8b3 	bl	80079ac <_free_r>
 8007846:	463c      	mov	r4, r7
 8007848:	e7e0      	b.n	800780c <_realloc_r+0x1e>

0800784a <memmove>:
 800784a:	4288      	cmp	r0, r1
 800784c:	b510      	push	{r4, lr}
 800784e:	eb01 0402 	add.w	r4, r1, r2
 8007852:	d902      	bls.n	800785a <memmove+0x10>
 8007854:	4284      	cmp	r4, r0
 8007856:	4623      	mov	r3, r4
 8007858:	d807      	bhi.n	800786a <memmove+0x20>
 800785a:	1e43      	subs	r3, r0, #1
 800785c:	42a1      	cmp	r1, r4
 800785e:	d008      	beq.n	8007872 <memmove+0x28>
 8007860:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007864:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007868:	e7f8      	b.n	800785c <memmove+0x12>
 800786a:	4402      	add	r2, r0
 800786c:	4601      	mov	r1, r0
 800786e:	428a      	cmp	r2, r1
 8007870:	d100      	bne.n	8007874 <memmove+0x2a>
 8007872:	bd10      	pop	{r4, pc}
 8007874:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007878:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800787c:	e7f7      	b.n	800786e <memmove+0x24>
	...

08007880 <_close_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4d06      	ldr	r5, [pc, #24]	@ (800789c <_close_r+0x1c>)
 8007884:	2300      	movs	r3, #0
 8007886:	4604      	mov	r4, r0
 8007888:	4608      	mov	r0, r1
 800788a:	602b      	str	r3, [r5, #0]
 800788c:	f7f9 fe90 	bl	80015b0 <_close>
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	d102      	bne.n	800789a <_close_r+0x1a>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	b103      	cbz	r3, 800789a <_close_r+0x1a>
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	20000730 	.word	0x20000730

080078a0 <_lseek_r>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	4d07      	ldr	r5, [pc, #28]	@ (80078c0 <_lseek_r+0x20>)
 80078a4:	4604      	mov	r4, r0
 80078a6:	4608      	mov	r0, r1
 80078a8:	4611      	mov	r1, r2
 80078aa:	2200      	movs	r2, #0
 80078ac:	602a      	str	r2, [r5, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	f7f9 fea5 	bl	80015fe <_lseek>
 80078b4:	1c43      	adds	r3, r0, #1
 80078b6:	d102      	bne.n	80078be <_lseek_r+0x1e>
 80078b8:	682b      	ldr	r3, [r5, #0]
 80078ba:	b103      	cbz	r3, 80078be <_lseek_r+0x1e>
 80078bc:	6023      	str	r3, [r4, #0]
 80078be:	bd38      	pop	{r3, r4, r5, pc}
 80078c0:	20000730 	.word	0x20000730

080078c4 <_read_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4d07      	ldr	r5, [pc, #28]	@ (80078e4 <_read_r+0x20>)
 80078c8:	4604      	mov	r4, r0
 80078ca:	4608      	mov	r0, r1
 80078cc:	4611      	mov	r1, r2
 80078ce:	2200      	movs	r2, #0
 80078d0:	602a      	str	r2, [r5, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	f7f9 fe33 	bl	800153e <_read>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_read_r+0x1e>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_read_r+0x1e>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	20000730 	.word	0x20000730

080078e8 <_sbrk_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4d06      	ldr	r5, [pc, #24]	@ (8007904 <_sbrk_r+0x1c>)
 80078ec:	2300      	movs	r3, #0
 80078ee:	4604      	mov	r4, r0
 80078f0:	4608      	mov	r0, r1
 80078f2:	602b      	str	r3, [r5, #0]
 80078f4:	f7f9 fe90 	bl	8001618 <_sbrk>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d102      	bne.n	8007902 <_sbrk_r+0x1a>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	b103      	cbz	r3, 8007902 <_sbrk_r+0x1a>
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	20000730 	.word	0x20000730

08007908 <_write_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4d07      	ldr	r5, [pc, #28]	@ (8007928 <_write_r+0x20>)
 800790c:	4604      	mov	r4, r0
 800790e:	4608      	mov	r0, r1
 8007910:	4611      	mov	r1, r2
 8007912:	2200      	movs	r2, #0
 8007914:	602a      	str	r2, [r5, #0]
 8007916:	461a      	mov	r2, r3
 8007918:	f7f9 fe2e 	bl	8001578 <_write>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d102      	bne.n	8007926 <_write_r+0x1e>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	b103      	cbz	r3, 8007926 <_write_r+0x1e>
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	bd38      	pop	{r3, r4, r5, pc}
 8007928:	20000730 	.word	0x20000730

0800792c <memcpy>:
 800792c:	440a      	add	r2, r1
 800792e:	4291      	cmp	r1, r2
 8007930:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007934:	d100      	bne.n	8007938 <memcpy+0xc>
 8007936:	4770      	bx	lr
 8007938:	b510      	push	{r4, lr}
 800793a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800793e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007942:	4291      	cmp	r1, r2
 8007944:	d1f9      	bne.n	800793a <memcpy+0xe>
 8007946:	bd10      	pop	{r4, pc}

08007948 <__assert_func>:
 8007948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800794a:	4614      	mov	r4, r2
 800794c:	461a      	mov	r2, r3
 800794e:	4b09      	ldr	r3, [pc, #36]	@ (8007974 <__assert_func+0x2c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4605      	mov	r5, r0
 8007954:	68d8      	ldr	r0, [r3, #12]
 8007956:	b954      	cbnz	r4, 800796e <__assert_func+0x26>
 8007958:	4b07      	ldr	r3, [pc, #28]	@ (8007978 <__assert_func+0x30>)
 800795a:	461c      	mov	r4, r3
 800795c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007960:	9100      	str	r1, [sp, #0]
 8007962:	462b      	mov	r3, r5
 8007964:	4905      	ldr	r1, [pc, #20]	@ (800797c <__assert_func+0x34>)
 8007966:	f000 f885 	bl	8007a74 <fiprintf>
 800796a:	f000 f8a2 	bl	8007ab2 <abort>
 800796e:	4b04      	ldr	r3, [pc, #16]	@ (8007980 <__assert_func+0x38>)
 8007970:	e7f4      	b.n	800795c <__assert_func+0x14>
 8007972:	bf00      	nop
 8007974:	20000018 	.word	0x20000018
 8007978:	080083b6 	.word	0x080083b6
 800797c:	08008388 	.word	0x08008388
 8007980:	0800837b 	.word	0x0800837b

08007984 <_calloc_r>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	fba1 5402 	umull	r5, r4, r1, r2
 800798a:	b93c      	cbnz	r4, 800799c <_calloc_r+0x18>
 800798c:	4629      	mov	r1, r5
 800798e:	f7ff fa31 	bl	8006df4 <_malloc_r>
 8007992:	4606      	mov	r6, r0
 8007994:	b928      	cbnz	r0, 80079a2 <_calloc_r+0x1e>
 8007996:	2600      	movs	r6, #0
 8007998:	4630      	mov	r0, r6
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	220c      	movs	r2, #12
 800799e:	6002      	str	r2, [r0, #0]
 80079a0:	e7f9      	b.n	8007996 <_calloc_r+0x12>
 80079a2:	462a      	mov	r2, r5
 80079a4:	4621      	mov	r1, r4
 80079a6:	f7fe fa1d 	bl	8005de4 <memset>
 80079aa:	e7f5      	b.n	8007998 <_calloc_r+0x14>

080079ac <_free_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4605      	mov	r5, r0
 80079b0:	2900      	cmp	r1, #0
 80079b2:	d041      	beq.n	8007a38 <_free_r+0x8c>
 80079b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079b8:	1f0c      	subs	r4, r1, #4
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bfb8      	it	lt
 80079be:	18e4      	addlt	r4, r4, r3
 80079c0:	f7ff fb44 	bl	800704c <__malloc_lock>
 80079c4:	4a1d      	ldr	r2, [pc, #116]	@ (8007a3c <_free_r+0x90>)
 80079c6:	6813      	ldr	r3, [r2, #0]
 80079c8:	b933      	cbnz	r3, 80079d8 <_free_r+0x2c>
 80079ca:	6063      	str	r3, [r4, #4]
 80079cc:	6014      	str	r4, [r2, #0]
 80079ce:	4628      	mov	r0, r5
 80079d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079d4:	f7ff bb40 	b.w	8007058 <__malloc_unlock>
 80079d8:	42a3      	cmp	r3, r4
 80079da:	d908      	bls.n	80079ee <_free_r+0x42>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	1821      	adds	r1, r4, r0
 80079e0:	428b      	cmp	r3, r1
 80079e2:	bf01      	itttt	eq
 80079e4:	6819      	ldreq	r1, [r3, #0]
 80079e6:	685b      	ldreq	r3, [r3, #4]
 80079e8:	1809      	addeq	r1, r1, r0
 80079ea:	6021      	streq	r1, [r4, #0]
 80079ec:	e7ed      	b.n	80079ca <_free_r+0x1e>
 80079ee:	461a      	mov	r2, r3
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	b10b      	cbz	r3, 80079f8 <_free_r+0x4c>
 80079f4:	42a3      	cmp	r3, r4
 80079f6:	d9fa      	bls.n	80079ee <_free_r+0x42>
 80079f8:	6811      	ldr	r1, [r2, #0]
 80079fa:	1850      	adds	r0, r2, r1
 80079fc:	42a0      	cmp	r0, r4
 80079fe:	d10b      	bne.n	8007a18 <_free_r+0x6c>
 8007a00:	6820      	ldr	r0, [r4, #0]
 8007a02:	4401      	add	r1, r0
 8007a04:	1850      	adds	r0, r2, r1
 8007a06:	4283      	cmp	r3, r0
 8007a08:	6011      	str	r1, [r2, #0]
 8007a0a:	d1e0      	bne.n	80079ce <_free_r+0x22>
 8007a0c:	6818      	ldr	r0, [r3, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	6053      	str	r3, [r2, #4]
 8007a12:	4408      	add	r0, r1
 8007a14:	6010      	str	r0, [r2, #0]
 8007a16:	e7da      	b.n	80079ce <_free_r+0x22>
 8007a18:	d902      	bls.n	8007a20 <_free_r+0x74>
 8007a1a:	230c      	movs	r3, #12
 8007a1c:	602b      	str	r3, [r5, #0]
 8007a1e:	e7d6      	b.n	80079ce <_free_r+0x22>
 8007a20:	6820      	ldr	r0, [r4, #0]
 8007a22:	1821      	adds	r1, r4, r0
 8007a24:	428b      	cmp	r3, r1
 8007a26:	bf04      	itt	eq
 8007a28:	6819      	ldreq	r1, [r3, #0]
 8007a2a:	685b      	ldreq	r3, [r3, #4]
 8007a2c:	6063      	str	r3, [r4, #4]
 8007a2e:	bf04      	itt	eq
 8007a30:	1809      	addeq	r1, r1, r0
 8007a32:	6021      	streq	r1, [r4, #0]
 8007a34:	6054      	str	r4, [r2, #4]
 8007a36:	e7ca      	b.n	80079ce <_free_r+0x22>
 8007a38:	bd38      	pop	{r3, r4, r5, pc}
 8007a3a:	bf00      	nop
 8007a3c:	2000072c 	.word	0x2000072c

08007a40 <__ascii_mbtowc>:
 8007a40:	b082      	sub	sp, #8
 8007a42:	b901      	cbnz	r1, 8007a46 <__ascii_mbtowc+0x6>
 8007a44:	a901      	add	r1, sp, #4
 8007a46:	b142      	cbz	r2, 8007a5a <__ascii_mbtowc+0x1a>
 8007a48:	b14b      	cbz	r3, 8007a5e <__ascii_mbtowc+0x1e>
 8007a4a:	7813      	ldrb	r3, [r2, #0]
 8007a4c:	600b      	str	r3, [r1, #0]
 8007a4e:	7812      	ldrb	r2, [r2, #0]
 8007a50:	1e10      	subs	r0, r2, #0
 8007a52:	bf18      	it	ne
 8007a54:	2001      	movne	r0, #1
 8007a56:	b002      	add	sp, #8
 8007a58:	4770      	bx	lr
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	e7fb      	b.n	8007a56 <__ascii_mbtowc+0x16>
 8007a5e:	f06f 0001 	mvn.w	r0, #1
 8007a62:	e7f8      	b.n	8007a56 <__ascii_mbtowc+0x16>

08007a64 <_malloc_usable_size_r>:
 8007a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a68:	1f18      	subs	r0, r3, #4
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	bfbc      	itt	lt
 8007a6e:	580b      	ldrlt	r3, [r1, r0]
 8007a70:	18c0      	addlt	r0, r0, r3
 8007a72:	4770      	bx	lr

08007a74 <fiprintf>:
 8007a74:	b40e      	push	{r1, r2, r3}
 8007a76:	b503      	push	{r0, r1, lr}
 8007a78:	4601      	mov	r1, r0
 8007a7a:	ab03      	add	r3, sp, #12
 8007a7c:	4805      	ldr	r0, [pc, #20]	@ (8007a94 <fiprintf+0x20>)
 8007a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a82:	6800      	ldr	r0, [r0, #0]
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	f000 f845 	bl	8007b14 <_vfiprintf_r>
 8007a8a:	b002      	add	sp, #8
 8007a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a90:	b003      	add	sp, #12
 8007a92:	4770      	bx	lr
 8007a94:	20000018 	.word	0x20000018

08007a98 <__ascii_wctomb>:
 8007a98:	4603      	mov	r3, r0
 8007a9a:	4608      	mov	r0, r1
 8007a9c:	b141      	cbz	r1, 8007ab0 <__ascii_wctomb+0x18>
 8007a9e:	2aff      	cmp	r2, #255	@ 0xff
 8007aa0:	d904      	bls.n	8007aac <__ascii_wctomb+0x14>
 8007aa2:	228a      	movs	r2, #138	@ 0x8a
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007aaa:	4770      	bx	lr
 8007aac:	700a      	strb	r2, [r1, #0]
 8007aae:	2001      	movs	r0, #1
 8007ab0:	4770      	bx	lr

08007ab2 <abort>:
 8007ab2:	b508      	push	{r3, lr}
 8007ab4:	2006      	movs	r0, #6
 8007ab6:	f000 fa85 	bl	8007fc4 <raise>
 8007aba:	2001      	movs	r0, #1
 8007abc:	f7f9 fd34 	bl	8001528 <_exit>

08007ac0 <__sfputc_r>:
 8007ac0:	6893      	ldr	r3, [r2, #8]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	b410      	push	{r4}
 8007ac8:	6093      	str	r3, [r2, #8]
 8007aca:	da08      	bge.n	8007ade <__sfputc_r+0x1e>
 8007acc:	6994      	ldr	r4, [r2, #24]
 8007ace:	42a3      	cmp	r3, r4
 8007ad0:	db01      	blt.n	8007ad6 <__sfputc_r+0x16>
 8007ad2:	290a      	cmp	r1, #10
 8007ad4:	d103      	bne.n	8007ade <__sfputc_r+0x1e>
 8007ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ada:	f000 b933 	b.w	8007d44 <__swbuf_r>
 8007ade:	6813      	ldr	r3, [r2, #0]
 8007ae0:	1c58      	adds	r0, r3, #1
 8007ae2:	6010      	str	r0, [r2, #0]
 8007ae4:	7019      	strb	r1, [r3, #0]
 8007ae6:	4608      	mov	r0, r1
 8007ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <__sfputs_r>:
 8007aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af0:	4606      	mov	r6, r0
 8007af2:	460f      	mov	r7, r1
 8007af4:	4614      	mov	r4, r2
 8007af6:	18d5      	adds	r5, r2, r3
 8007af8:	42ac      	cmp	r4, r5
 8007afa:	d101      	bne.n	8007b00 <__sfputs_r+0x12>
 8007afc:	2000      	movs	r0, #0
 8007afe:	e007      	b.n	8007b10 <__sfputs_r+0x22>
 8007b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b04:	463a      	mov	r2, r7
 8007b06:	4630      	mov	r0, r6
 8007b08:	f7ff ffda 	bl	8007ac0 <__sfputc_r>
 8007b0c:	1c43      	adds	r3, r0, #1
 8007b0e:	d1f3      	bne.n	8007af8 <__sfputs_r+0xa>
 8007b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b14 <_vfiprintf_r>:
 8007b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b18:	460d      	mov	r5, r1
 8007b1a:	b09d      	sub	sp, #116	@ 0x74
 8007b1c:	4614      	mov	r4, r2
 8007b1e:	4698      	mov	r8, r3
 8007b20:	4606      	mov	r6, r0
 8007b22:	b118      	cbz	r0, 8007b2c <_vfiprintf_r+0x18>
 8007b24:	6a03      	ldr	r3, [r0, #32]
 8007b26:	b90b      	cbnz	r3, 8007b2c <_vfiprintf_r+0x18>
 8007b28:	f7fe f926 	bl	8005d78 <__sinit>
 8007b2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b2e:	07d9      	lsls	r1, r3, #31
 8007b30:	d405      	bmi.n	8007b3e <_vfiprintf_r+0x2a>
 8007b32:	89ab      	ldrh	r3, [r5, #12]
 8007b34:	059a      	lsls	r2, r3, #22
 8007b36:	d402      	bmi.n	8007b3e <_vfiprintf_r+0x2a>
 8007b38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b3a:	f7fe f98a 	bl	8005e52 <__retarget_lock_acquire_recursive>
 8007b3e:	89ab      	ldrh	r3, [r5, #12]
 8007b40:	071b      	lsls	r3, r3, #28
 8007b42:	d501      	bpl.n	8007b48 <_vfiprintf_r+0x34>
 8007b44:	692b      	ldr	r3, [r5, #16]
 8007b46:	b99b      	cbnz	r3, 8007b70 <_vfiprintf_r+0x5c>
 8007b48:	4629      	mov	r1, r5
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f000 f938 	bl	8007dc0 <__swsetup_r>
 8007b50:	b170      	cbz	r0, 8007b70 <_vfiprintf_r+0x5c>
 8007b52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b54:	07dc      	lsls	r4, r3, #31
 8007b56:	d504      	bpl.n	8007b62 <_vfiprintf_r+0x4e>
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b5c:	b01d      	add	sp, #116	@ 0x74
 8007b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b62:	89ab      	ldrh	r3, [r5, #12]
 8007b64:	0598      	lsls	r0, r3, #22
 8007b66:	d4f7      	bmi.n	8007b58 <_vfiprintf_r+0x44>
 8007b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b6a:	f7fe f973 	bl	8005e54 <__retarget_lock_release_recursive>
 8007b6e:	e7f3      	b.n	8007b58 <_vfiprintf_r+0x44>
 8007b70:	2300      	movs	r3, #0
 8007b72:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b74:	2320      	movs	r3, #32
 8007b76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b7e:	2330      	movs	r3, #48	@ 0x30
 8007b80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007d30 <_vfiprintf_r+0x21c>
 8007b84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b88:	f04f 0901 	mov.w	r9, #1
 8007b8c:	4623      	mov	r3, r4
 8007b8e:	469a      	mov	sl, r3
 8007b90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b94:	b10a      	cbz	r2, 8007b9a <_vfiprintf_r+0x86>
 8007b96:	2a25      	cmp	r2, #37	@ 0x25
 8007b98:	d1f9      	bne.n	8007b8e <_vfiprintf_r+0x7a>
 8007b9a:	ebba 0b04 	subs.w	fp, sl, r4
 8007b9e:	d00b      	beq.n	8007bb8 <_vfiprintf_r+0xa4>
 8007ba0:	465b      	mov	r3, fp
 8007ba2:	4622      	mov	r2, r4
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f7ff ffa1 	bl	8007aee <__sfputs_r>
 8007bac:	3001      	adds	r0, #1
 8007bae:	f000 80a7 	beq.w	8007d00 <_vfiprintf_r+0x1ec>
 8007bb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bb4:	445a      	add	r2, fp
 8007bb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 809f 	beq.w	8007d00 <_vfiprintf_r+0x1ec>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bcc:	f10a 0a01 	add.w	sl, sl, #1
 8007bd0:	9304      	str	r3, [sp, #16]
 8007bd2:	9307      	str	r3, [sp, #28]
 8007bd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bda:	4654      	mov	r4, sl
 8007bdc:	2205      	movs	r2, #5
 8007bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be2:	4853      	ldr	r0, [pc, #332]	@ (8007d30 <_vfiprintf_r+0x21c>)
 8007be4:	f7f8 fb1c 	bl	8000220 <memchr>
 8007be8:	9a04      	ldr	r2, [sp, #16]
 8007bea:	b9d8      	cbnz	r0, 8007c24 <_vfiprintf_r+0x110>
 8007bec:	06d1      	lsls	r1, r2, #27
 8007bee:	bf44      	itt	mi
 8007bf0:	2320      	movmi	r3, #32
 8007bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bf6:	0713      	lsls	r3, r2, #28
 8007bf8:	bf44      	itt	mi
 8007bfa:	232b      	movmi	r3, #43	@ 0x2b
 8007bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c00:	f89a 3000 	ldrb.w	r3, [sl]
 8007c04:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c06:	d015      	beq.n	8007c34 <_vfiprintf_r+0x120>
 8007c08:	9a07      	ldr	r2, [sp, #28]
 8007c0a:	4654      	mov	r4, sl
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	f04f 0c0a 	mov.w	ip, #10
 8007c12:	4621      	mov	r1, r4
 8007c14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c18:	3b30      	subs	r3, #48	@ 0x30
 8007c1a:	2b09      	cmp	r3, #9
 8007c1c:	d94b      	bls.n	8007cb6 <_vfiprintf_r+0x1a2>
 8007c1e:	b1b0      	cbz	r0, 8007c4e <_vfiprintf_r+0x13a>
 8007c20:	9207      	str	r2, [sp, #28]
 8007c22:	e014      	b.n	8007c4e <_vfiprintf_r+0x13a>
 8007c24:	eba0 0308 	sub.w	r3, r0, r8
 8007c28:	fa09 f303 	lsl.w	r3, r9, r3
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	9304      	str	r3, [sp, #16]
 8007c30:	46a2      	mov	sl, r4
 8007c32:	e7d2      	b.n	8007bda <_vfiprintf_r+0xc6>
 8007c34:	9b03      	ldr	r3, [sp, #12]
 8007c36:	1d19      	adds	r1, r3, #4
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	9103      	str	r1, [sp, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	bfbb      	ittet	lt
 8007c40:	425b      	neglt	r3, r3
 8007c42:	f042 0202 	orrlt.w	r2, r2, #2
 8007c46:	9307      	strge	r3, [sp, #28]
 8007c48:	9307      	strlt	r3, [sp, #28]
 8007c4a:	bfb8      	it	lt
 8007c4c:	9204      	strlt	r2, [sp, #16]
 8007c4e:	7823      	ldrb	r3, [r4, #0]
 8007c50:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c52:	d10a      	bne.n	8007c6a <_vfiprintf_r+0x156>
 8007c54:	7863      	ldrb	r3, [r4, #1]
 8007c56:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c58:	d132      	bne.n	8007cc0 <_vfiprintf_r+0x1ac>
 8007c5a:	9b03      	ldr	r3, [sp, #12]
 8007c5c:	1d1a      	adds	r2, r3, #4
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	9203      	str	r2, [sp, #12]
 8007c62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c66:	3402      	adds	r4, #2
 8007c68:	9305      	str	r3, [sp, #20]
 8007c6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007d40 <_vfiprintf_r+0x22c>
 8007c6e:	7821      	ldrb	r1, [r4, #0]
 8007c70:	2203      	movs	r2, #3
 8007c72:	4650      	mov	r0, sl
 8007c74:	f7f8 fad4 	bl	8000220 <memchr>
 8007c78:	b138      	cbz	r0, 8007c8a <_vfiprintf_r+0x176>
 8007c7a:	9b04      	ldr	r3, [sp, #16]
 8007c7c:	eba0 000a 	sub.w	r0, r0, sl
 8007c80:	2240      	movs	r2, #64	@ 0x40
 8007c82:	4082      	lsls	r2, r0
 8007c84:	4313      	orrs	r3, r2
 8007c86:	3401      	adds	r4, #1
 8007c88:	9304      	str	r3, [sp, #16]
 8007c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8e:	4829      	ldr	r0, [pc, #164]	@ (8007d34 <_vfiprintf_r+0x220>)
 8007c90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c94:	2206      	movs	r2, #6
 8007c96:	f7f8 fac3 	bl	8000220 <memchr>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d03f      	beq.n	8007d1e <_vfiprintf_r+0x20a>
 8007c9e:	4b26      	ldr	r3, [pc, #152]	@ (8007d38 <_vfiprintf_r+0x224>)
 8007ca0:	bb1b      	cbnz	r3, 8007cea <_vfiprintf_r+0x1d6>
 8007ca2:	9b03      	ldr	r3, [sp, #12]
 8007ca4:	3307      	adds	r3, #7
 8007ca6:	f023 0307 	bic.w	r3, r3, #7
 8007caa:	3308      	adds	r3, #8
 8007cac:	9303      	str	r3, [sp, #12]
 8007cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cb0:	443b      	add	r3, r7
 8007cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cb4:	e76a      	b.n	8007b8c <_vfiprintf_r+0x78>
 8007cb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cba:	460c      	mov	r4, r1
 8007cbc:	2001      	movs	r0, #1
 8007cbe:	e7a8      	b.n	8007c12 <_vfiprintf_r+0xfe>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	3401      	adds	r4, #1
 8007cc4:	9305      	str	r3, [sp, #20]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	f04f 0c0a 	mov.w	ip, #10
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cd2:	3a30      	subs	r2, #48	@ 0x30
 8007cd4:	2a09      	cmp	r2, #9
 8007cd6:	d903      	bls.n	8007ce0 <_vfiprintf_r+0x1cc>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0c6      	beq.n	8007c6a <_vfiprintf_r+0x156>
 8007cdc:	9105      	str	r1, [sp, #20]
 8007cde:	e7c4      	b.n	8007c6a <_vfiprintf_r+0x156>
 8007ce0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e7f0      	b.n	8007ccc <_vfiprintf_r+0x1b8>
 8007cea:	ab03      	add	r3, sp, #12
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	462a      	mov	r2, r5
 8007cf0:	4b12      	ldr	r3, [pc, #72]	@ (8007d3c <_vfiprintf_r+0x228>)
 8007cf2:	a904      	add	r1, sp, #16
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f7fd fbdb 	bl	80054b0 <_printf_float>
 8007cfa:	4607      	mov	r7, r0
 8007cfc:	1c78      	adds	r0, r7, #1
 8007cfe:	d1d6      	bne.n	8007cae <_vfiprintf_r+0x19a>
 8007d00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d02:	07d9      	lsls	r1, r3, #31
 8007d04:	d405      	bmi.n	8007d12 <_vfiprintf_r+0x1fe>
 8007d06:	89ab      	ldrh	r3, [r5, #12]
 8007d08:	059a      	lsls	r2, r3, #22
 8007d0a:	d402      	bmi.n	8007d12 <_vfiprintf_r+0x1fe>
 8007d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d0e:	f7fe f8a1 	bl	8005e54 <__retarget_lock_release_recursive>
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	065b      	lsls	r3, r3, #25
 8007d16:	f53f af1f 	bmi.w	8007b58 <_vfiprintf_r+0x44>
 8007d1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d1c:	e71e      	b.n	8007b5c <_vfiprintf_r+0x48>
 8007d1e:	ab03      	add	r3, sp, #12
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	462a      	mov	r2, r5
 8007d24:	4b05      	ldr	r3, [pc, #20]	@ (8007d3c <_vfiprintf_r+0x228>)
 8007d26:	a904      	add	r1, sp, #16
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f7fd fe59 	bl	80059e0 <_printf_i>
 8007d2e:	e7e4      	b.n	8007cfa <_vfiprintf_r+0x1e6>
 8007d30:	08008109 	.word	0x08008109
 8007d34:	08008113 	.word	0x08008113
 8007d38:	080054b1 	.word	0x080054b1
 8007d3c:	08007aef 	.word	0x08007aef
 8007d40:	0800810f 	.word	0x0800810f

08007d44 <__swbuf_r>:
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	460e      	mov	r6, r1
 8007d48:	4614      	mov	r4, r2
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	b118      	cbz	r0, 8007d56 <__swbuf_r+0x12>
 8007d4e:	6a03      	ldr	r3, [r0, #32]
 8007d50:	b90b      	cbnz	r3, 8007d56 <__swbuf_r+0x12>
 8007d52:	f7fe f811 	bl	8005d78 <__sinit>
 8007d56:	69a3      	ldr	r3, [r4, #24]
 8007d58:	60a3      	str	r3, [r4, #8]
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	071a      	lsls	r2, r3, #28
 8007d5e:	d501      	bpl.n	8007d64 <__swbuf_r+0x20>
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	b943      	cbnz	r3, 8007d76 <__swbuf_r+0x32>
 8007d64:	4621      	mov	r1, r4
 8007d66:	4628      	mov	r0, r5
 8007d68:	f000 f82a 	bl	8007dc0 <__swsetup_r>
 8007d6c:	b118      	cbz	r0, 8007d76 <__swbuf_r+0x32>
 8007d6e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007d72:	4638      	mov	r0, r7
 8007d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	6922      	ldr	r2, [r4, #16]
 8007d7a:	1a98      	subs	r0, r3, r2
 8007d7c:	6963      	ldr	r3, [r4, #20]
 8007d7e:	b2f6      	uxtb	r6, r6
 8007d80:	4283      	cmp	r3, r0
 8007d82:	4637      	mov	r7, r6
 8007d84:	dc05      	bgt.n	8007d92 <__swbuf_r+0x4e>
 8007d86:	4621      	mov	r1, r4
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f7ff f937 	bl	8006ffc <_fflush_r>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d1ed      	bne.n	8007d6e <__swbuf_r+0x2a>
 8007d92:	68a3      	ldr	r3, [r4, #8]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	60a3      	str	r3, [r4, #8]
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	6022      	str	r2, [r4, #0]
 8007d9e:	701e      	strb	r6, [r3, #0]
 8007da0:	6962      	ldr	r2, [r4, #20]
 8007da2:	1c43      	adds	r3, r0, #1
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d004      	beq.n	8007db2 <__swbuf_r+0x6e>
 8007da8:	89a3      	ldrh	r3, [r4, #12]
 8007daa:	07db      	lsls	r3, r3, #31
 8007dac:	d5e1      	bpl.n	8007d72 <__swbuf_r+0x2e>
 8007dae:	2e0a      	cmp	r6, #10
 8007db0:	d1df      	bne.n	8007d72 <__swbuf_r+0x2e>
 8007db2:	4621      	mov	r1, r4
 8007db4:	4628      	mov	r0, r5
 8007db6:	f7ff f921 	bl	8006ffc <_fflush_r>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d0d9      	beq.n	8007d72 <__swbuf_r+0x2e>
 8007dbe:	e7d6      	b.n	8007d6e <__swbuf_r+0x2a>

08007dc0 <__swsetup_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4b29      	ldr	r3, [pc, #164]	@ (8007e68 <__swsetup_r+0xa8>)
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	6818      	ldr	r0, [r3, #0]
 8007dc8:	460c      	mov	r4, r1
 8007dca:	b118      	cbz	r0, 8007dd4 <__swsetup_r+0x14>
 8007dcc:	6a03      	ldr	r3, [r0, #32]
 8007dce:	b90b      	cbnz	r3, 8007dd4 <__swsetup_r+0x14>
 8007dd0:	f7fd ffd2 	bl	8005d78 <__sinit>
 8007dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dd8:	0719      	lsls	r1, r3, #28
 8007dda:	d422      	bmi.n	8007e22 <__swsetup_r+0x62>
 8007ddc:	06da      	lsls	r2, r3, #27
 8007dde:	d407      	bmi.n	8007df0 <__swsetup_r+0x30>
 8007de0:	2209      	movs	r2, #9
 8007de2:	602a      	str	r2, [r5, #0]
 8007de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007de8:	81a3      	strh	r3, [r4, #12]
 8007dea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dee:	e033      	b.n	8007e58 <__swsetup_r+0x98>
 8007df0:	0758      	lsls	r0, r3, #29
 8007df2:	d512      	bpl.n	8007e1a <__swsetup_r+0x5a>
 8007df4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007df6:	b141      	cbz	r1, 8007e0a <__swsetup_r+0x4a>
 8007df8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007dfc:	4299      	cmp	r1, r3
 8007dfe:	d002      	beq.n	8007e06 <__swsetup_r+0x46>
 8007e00:	4628      	mov	r0, r5
 8007e02:	f7ff fdd3 	bl	80079ac <_free_r>
 8007e06:	2300      	movs	r3, #0
 8007e08:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007e10:	81a3      	strh	r3, [r4, #12]
 8007e12:	2300      	movs	r3, #0
 8007e14:	6063      	str	r3, [r4, #4]
 8007e16:	6923      	ldr	r3, [r4, #16]
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	f043 0308 	orr.w	r3, r3, #8
 8007e20:	81a3      	strh	r3, [r4, #12]
 8007e22:	6923      	ldr	r3, [r4, #16]
 8007e24:	b94b      	cbnz	r3, 8007e3a <__swsetup_r+0x7a>
 8007e26:	89a3      	ldrh	r3, [r4, #12]
 8007e28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e30:	d003      	beq.n	8007e3a <__swsetup_r+0x7a>
 8007e32:	4621      	mov	r1, r4
 8007e34:	4628      	mov	r0, r5
 8007e36:	f000 f83f 	bl	8007eb8 <__smakebuf_r>
 8007e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e3e:	f013 0201 	ands.w	r2, r3, #1
 8007e42:	d00a      	beq.n	8007e5a <__swsetup_r+0x9a>
 8007e44:	2200      	movs	r2, #0
 8007e46:	60a2      	str	r2, [r4, #8]
 8007e48:	6962      	ldr	r2, [r4, #20]
 8007e4a:	4252      	negs	r2, r2
 8007e4c:	61a2      	str	r2, [r4, #24]
 8007e4e:	6922      	ldr	r2, [r4, #16]
 8007e50:	b942      	cbnz	r2, 8007e64 <__swsetup_r+0xa4>
 8007e52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e56:	d1c5      	bne.n	8007de4 <__swsetup_r+0x24>
 8007e58:	bd38      	pop	{r3, r4, r5, pc}
 8007e5a:	0799      	lsls	r1, r3, #30
 8007e5c:	bf58      	it	pl
 8007e5e:	6962      	ldrpl	r2, [r4, #20]
 8007e60:	60a2      	str	r2, [r4, #8]
 8007e62:	e7f4      	b.n	8007e4e <__swsetup_r+0x8e>
 8007e64:	2000      	movs	r0, #0
 8007e66:	e7f7      	b.n	8007e58 <__swsetup_r+0x98>
 8007e68:	20000018 	.word	0x20000018

08007e6c <__swhatbuf_r>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	460c      	mov	r4, r1
 8007e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e74:	2900      	cmp	r1, #0
 8007e76:	b096      	sub	sp, #88	@ 0x58
 8007e78:	4615      	mov	r5, r2
 8007e7a:	461e      	mov	r6, r3
 8007e7c:	da0d      	bge.n	8007e9a <__swhatbuf_r+0x2e>
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e84:	f04f 0100 	mov.w	r1, #0
 8007e88:	bf14      	ite	ne
 8007e8a:	2340      	movne	r3, #64	@ 0x40
 8007e8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e90:	2000      	movs	r0, #0
 8007e92:	6031      	str	r1, [r6, #0]
 8007e94:	602b      	str	r3, [r5, #0]
 8007e96:	b016      	add	sp, #88	@ 0x58
 8007e98:	bd70      	pop	{r4, r5, r6, pc}
 8007e9a:	466a      	mov	r2, sp
 8007e9c:	f000 f848 	bl	8007f30 <_fstat_r>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	dbec      	blt.n	8007e7e <__swhatbuf_r+0x12>
 8007ea4:	9901      	ldr	r1, [sp, #4]
 8007ea6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007eaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007eae:	4259      	negs	r1, r3
 8007eb0:	4159      	adcs	r1, r3
 8007eb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007eb6:	e7eb      	b.n	8007e90 <__swhatbuf_r+0x24>

08007eb8 <__smakebuf_r>:
 8007eb8:	898b      	ldrh	r3, [r1, #12]
 8007eba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ebc:	079d      	lsls	r5, r3, #30
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	d507      	bpl.n	8007ed4 <__smakebuf_r+0x1c>
 8007ec4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	6123      	str	r3, [r4, #16]
 8007ecc:	2301      	movs	r3, #1
 8007ece:	6163      	str	r3, [r4, #20]
 8007ed0:	b003      	add	sp, #12
 8007ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ed4:	ab01      	add	r3, sp, #4
 8007ed6:	466a      	mov	r2, sp
 8007ed8:	f7ff ffc8 	bl	8007e6c <__swhatbuf_r>
 8007edc:	9f00      	ldr	r7, [sp, #0]
 8007ede:	4605      	mov	r5, r0
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f7fe ff86 	bl	8006df4 <_malloc_r>
 8007ee8:	b948      	cbnz	r0, 8007efe <__smakebuf_r+0x46>
 8007eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eee:	059a      	lsls	r2, r3, #22
 8007ef0:	d4ee      	bmi.n	8007ed0 <__smakebuf_r+0x18>
 8007ef2:	f023 0303 	bic.w	r3, r3, #3
 8007ef6:	f043 0302 	orr.w	r3, r3, #2
 8007efa:	81a3      	strh	r3, [r4, #12]
 8007efc:	e7e2      	b.n	8007ec4 <__smakebuf_r+0xc>
 8007efe:	89a3      	ldrh	r3, [r4, #12]
 8007f00:	6020      	str	r0, [r4, #0]
 8007f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f06:	81a3      	strh	r3, [r4, #12]
 8007f08:	9b01      	ldr	r3, [sp, #4]
 8007f0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f0e:	b15b      	cbz	r3, 8007f28 <__smakebuf_r+0x70>
 8007f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f14:	4630      	mov	r0, r6
 8007f16:	f000 f81d 	bl	8007f54 <_isatty_r>
 8007f1a:	b128      	cbz	r0, 8007f28 <__smakebuf_r+0x70>
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	f023 0303 	bic.w	r3, r3, #3
 8007f22:	f043 0301 	orr.w	r3, r3, #1
 8007f26:	81a3      	strh	r3, [r4, #12]
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	431d      	orrs	r5, r3
 8007f2c:	81a5      	strh	r5, [r4, #12]
 8007f2e:	e7cf      	b.n	8007ed0 <__smakebuf_r+0x18>

08007f30 <_fstat_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4d07      	ldr	r5, [pc, #28]	@ (8007f50 <_fstat_r+0x20>)
 8007f34:	2300      	movs	r3, #0
 8007f36:	4604      	mov	r4, r0
 8007f38:	4608      	mov	r0, r1
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	602b      	str	r3, [r5, #0]
 8007f3e:	f7f9 fb43 	bl	80015c8 <_fstat>
 8007f42:	1c43      	adds	r3, r0, #1
 8007f44:	d102      	bne.n	8007f4c <_fstat_r+0x1c>
 8007f46:	682b      	ldr	r3, [r5, #0]
 8007f48:	b103      	cbz	r3, 8007f4c <_fstat_r+0x1c>
 8007f4a:	6023      	str	r3, [r4, #0]
 8007f4c:	bd38      	pop	{r3, r4, r5, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000730 	.word	0x20000730

08007f54 <_isatty_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	4d06      	ldr	r5, [pc, #24]	@ (8007f70 <_isatty_r+0x1c>)
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	4608      	mov	r0, r1
 8007f5e:	602b      	str	r3, [r5, #0]
 8007f60:	f7f9 fb42 	bl	80015e8 <_isatty>
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d102      	bne.n	8007f6e <_isatty_r+0x1a>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	b103      	cbz	r3, 8007f6e <_isatty_r+0x1a>
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}
 8007f70:	20000730 	.word	0x20000730

08007f74 <_raise_r>:
 8007f74:	291f      	cmp	r1, #31
 8007f76:	b538      	push	{r3, r4, r5, lr}
 8007f78:	4605      	mov	r5, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	d904      	bls.n	8007f88 <_raise_r+0x14>
 8007f7e:	2316      	movs	r3, #22
 8007f80:	6003      	str	r3, [r0, #0]
 8007f82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f86:	bd38      	pop	{r3, r4, r5, pc}
 8007f88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f8a:	b112      	cbz	r2, 8007f92 <_raise_r+0x1e>
 8007f8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f90:	b94b      	cbnz	r3, 8007fa6 <_raise_r+0x32>
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 f830 	bl	8007ff8 <_getpid_r>
 8007f98:	4622      	mov	r2, r4
 8007f9a:	4601      	mov	r1, r0
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fa2:	f000 b817 	b.w	8007fd4 <_kill_r>
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d00a      	beq.n	8007fc0 <_raise_r+0x4c>
 8007faa:	1c59      	adds	r1, r3, #1
 8007fac:	d103      	bne.n	8007fb6 <_raise_r+0x42>
 8007fae:	2316      	movs	r3, #22
 8007fb0:	6003      	str	r3, [r0, #0]
 8007fb2:	2001      	movs	r0, #1
 8007fb4:	e7e7      	b.n	8007f86 <_raise_r+0x12>
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	4798      	blx	r3
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	e7e0      	b.n	8007f86 <_raise_r+0x12>

08007fc4 <raise>:
 8007fc4:	4b02      	ldr	r3, [pc, #8]	@ (8007fd0 <raise+0xc>)
 8007fc6:	4601      	mov	r1, r0
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	f7ff bfd3 	b.w	8007f74 <_raise_r>
 8007fce:	bf00      	nop
 8007fd0:	20000018 	.word	0x20000018

08007fd4 <_kill_r>:
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	4d07      	ldr	r5, [pc, #28]	@ (8007ff4 <_kill_r+0x20>)
 8007fd8:	2300      	movs	r3, #0
 8007fda:	4604      	mov	r4, r0
 8007fdc:	4608      	mov	r0, r1
 8007fde:	4611      	mov	r1, r2
 8007fe0:	602b      	str	r3, [r5, #0]
 8007fe2:	f7f9 fa91 	bl	8001508 <_kill>
 8007fe6:	1c43      	adds	r3, r0, #1
 8007fe8:	d102      	bne.n	8007ff0 <_kill_r+0x1c>
 8007fea:	682b      	ldr	r3, [r5, #0]
 8007fec:	b103      	cbz	r3, 8007ff0 <_kill_r+0x1c>
 8007fee:	6023      	str	r3, [r4, #0]
 8007ff0:	bd38      	pop	{r3, r4, r5, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20000730 	.word	0x20000730

08007ff8 <_getpid_r>:
 8007ff8:	f7f9 ba7e 	b.w	80014f8 <_getpid>

08007ffc <_init>:
 8007ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffe:	bf00      	nop
 8008000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008002:	bc08      	pop	{r3}
 8008004:	469e      	mov	lr, r3
 8008006:	4770      	bx	lr

08008008 <_fini>:
 8008008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800a:	bf00      	nop
 800800c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800e:	bc08      	pop	{r3}
 8008010:	469e      	mov	lr, r3
 8008012:	4770      	bx	lr
